cscope 15 D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj"               0001367363
	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_DataCheck.c

13 
	~"WIFI_Comm⁄.h
"

14 
	~"WIFI_SëComm⁄.h
"

15 
	~"WIFI_DefU£r.h
"

16 
	~"WIFI_D©aCheck.h
"

17 
	~"WIFI_Inôülize.h
"

18 
	~"WIFI_RxPro˚ss.h
"

19 
	~"WIFI_TxMake.h
"

20 
	~"WIFI_FŸa.h
"

21 
	~"WIFI_Sètus.h
"

22 
	~"WIFI_U¨tI¡îru±.h
"

23 
	~"WIFI_U£rI¡îÁ˚.h
"

27 
	$U8
 (*
	tWifiCheckFun_T
)();

28 (*
	tWifiDoFun_T
)();

32 
CHK_MODULE_ONOFF
 = 0x00,

33 
CHK_ALWAYS_100MS
,

35 
CHK_BOOT_MODULE
,

36 
CHK_BOOT_FOTA
,

38 
CHK_APMODE_START
,

39 
CHK_AP_BLE_START
,

40 
CHK_APMODE_FAIL
,

42 
CHK_SERVER_CNT
,

43 
CHK_SERVER_DCNT
,

45 
CHK_FIRST_DATA
,

46 
CHK_FIRST_FAIL
,

48 
CHK_UART_RX
,

49 
CHK_SEND_DATA
,

50 
CHK_SEND_ACK
,

51 
CHK_SEND_1MIN
,

52 
CHK_SEND_5MIN
,

53 
CHK_RQST_20MIN
,

54 
CHK_RQST_24HOUR
,

55 
CHK_BLE_10MIN
,

57 
CHK_FOTA_START
,

58 
CHK_WiFi_CONNECT
,

59 
CHK_CERT_TIME
,

61 
CHK_NUM


62 } 
	tE_WIFI_CHECK_FUN_T
;

66 
	s_wificheck_


68 
U16
 
u16Cou¡
;

69 } 
	tWifiCheck_T
;

70 
WifiCheck_T
 
WifiCheck
[
CHK_NUM
];

72 
WifiRx_T
 
WifiRx
;

77 
U8
 
	`CheckModuÀOnOff
 ( );

78 
	`DoModuÀOnOff
 ( );

79 
U8
 
	`CheckAlways
 ( );

80 
	`DoAlways100ms
 ( );

82 
U8
 
	`CheckBoŸModuÀ
 ( );

83 
U8
 
	`CheckBoŸFŸa
 ( );

85 
U8
 
	`CheckApModeSèπ
 ( );

86 
U8
 
	`CheckApBÀSèπ
 ( );

87 
U8
 
	`CheckApModeFaû
 ( );

89 
U8
 
	`CheckSîvîC⁄√˘
 ( );

90 
U8
 
	`CheckSîvîDisc⁄√˘
 ( );

92 
U8
 
	`CheckFú°D©a
 ( );

93 
U8
 
	`CheckFú°Faû
 ( );

94 
U8
 
	`CheckU¨tRx
 ( );

96 
U8
 
	`CheckSídD©a
 ( );

97 
U8
 
	`CheckSídAck
 ( );

98 
U8
 
	`CheckC⁄√˘
 ( );

99 
U8
 
	`CheckBÀD©a
 ( );

101 
U8
 
	`CheckFŸaSèπ
 ( );

102 
U8
 
	`CheckWiFiC⁄√˘
 ( );

103 
U8
 
	`CheckCîtTime
 ( );

104 
	`DoRe£t
 ( );

105 
	`DoOff
 ( );

107 
	`DoApModeSèπ
 ( );

108 
	`DoApBÀSèπ
 ( );

109 
	`DoApModeFaû
 ( );

111 
	`DoFú°D©a
 ( );

112 
	`DoFú°Faû
 ( );

114 
	`DoSídD©a
 ( );

115 
	`DoSídOk
 ( );

116 
	`DoSíd1mö
 ( );

117 
	`DoSíd5mö
 ( );

118 
	`DoRq°20mö
 ( );

119 
	`DoRq°24Hour
 ( );

120 
	`BÀTxOFF
 ( );

122 
	`DoFŸaSèπ
 ( );

123 
	`DoWifiIndiˇt‹
 ( );

124 
	`DoCîtC™˚l
 ( );

128 
	s_wifi_d©acheck_li°_


130 
E_WIFI_CHECK_FUN_T
 
Id
;

131 
U8
 
u8Ty≥Time
;

132 
U16
 
u16Cou¡
;

133 
WifiCheckFun_T
 
CheckFunc
;

134 
WifiDoFun_T
 
DoFunc
;

135 } 
	tWifiD©aCheckLi°_T
;

138 
	`RunChkD©a
 ( c⁄° 
WifiD©aCheckLi°_T
 *
pLi°
, 
U8
 
i
 );

141 c⁄° 
WifiD©aCheckLi°_T
 
WifiD©aCheckLi°
[] =

143 { 
CHK_MODULE_ONOFF
, 
WIFI_TIME_100MS
, 5, 
CheckModuÀOnOff
, 
DoModuÀOnOff
 },

144 { 
CHK_ALWAYS_100MS
, 
WIFI_TIME_100MS
, 1, 
CheckAlways
, 
DoAlways100ms
 },

146 { 
CHK_BOOT_MODULE
, 
WIFI_TIME_1SEC
, 60, 
CheckBoŸModuÀ
, 
DoRe£t
 },

147 { 
CHK_BOOT_FOTA
, 
WIFI_TIME_1SEC
, 90, 
CheckBoŸFŸa
, 
DoRe£t
 },

149 { 
CHK_APMODE_START
, 
WIFI_TIME_1SEC
, 2, 
CheckApModeSèπ
, 
DoApModeSèπ
 },

150 { 
CHK_AP_BLE_START
, 
WIFI_TIME_1SEC
, 2, 
CheckApBÀSèπ
, 
DoApBÀSèπ
 },

151 { 
CHK_APMODE_FAIL
, 
WIFI_TIME_1SEC
, 1800, 
CheckApModeFaû
, 
DoApModeFaû
 },

153 { 
CHK_SERVER_CNT
, 
WIFI_TIME_1SEC
, 180, 
CheckSîvîC⁄√˘
, 
DoRe£t
 },

154 { 
CHK_SERVER_DCNT
, 
WIFI_TIME_100MS
, 30, 
CheckSîvîDisc⁄√˘
, 
DoOff
 },

156 { 
CHK_FIRST_DATA
, 
WIFI_TIME_100MS
, 10, 
CheckFú°D©a
, 
DoFú°D©a
 },

157 { 
CHK_FIRST_FAIL
, 
WIFI_TIME_1SEC
, 60, 
CheckFú°Faû
, 
DoFú°Faû
 },

159 { 
CHK_UART_RX
, 
WIFI_TIME_1SEC
, 480, 
CheckU¨tRx
, 
DoRe£t
 },

160 { 
CHK_SEND_DATA
, 
WIFI_TIME_100MS
, 1, 
CheckSídD©a
, 
DoSídD©a
 },

161 { 
CHK_SEND_ACK
, 
WIFI_TIME_1SEC
, 180, 
CheckSídAck
, 
DoRe£t
 },

162 { 
CHK_SEND_1MIN
, 
WIFI_TIME_1SEC
, 60, 
CheckSídAck
, 
DoSíd1mö
 },

163 { 
CHK_SEND_5MIN
, 
WIFI_TIME_1SEC
, 300, 
CheckC⁄√˘
, 
DoSíd5mö
 },

164 { 
CHK_RQST_20MIN
, 
WIFI_TIME_1SEC
, 1201, 
CheckC⁄√˘
, 
DoRq°20mö
 },

165 { 
CHK_RQST_24HOUR
, 
WIFI_TIME_1MIN
, 1440, 
CheckC⁄√˘
, 
DoRq°24Hour
 },

166 { 
CHK_BLE_10MIN
, 
WIFI_TIME_1SEC
, 600, 
CheckBÀD©a
, 
BÀTxOFF
 },

168 { 
CHK_FOTA_START
, 
WIFI_TIME_100MS
, 10, 
CheckFŸaSèπ
, 
DoFŸaSèπ
 },

169 { 
CHK_WiFi_CONNECT
, 
WIFI_TIME_1SEC
, 60, 
CheckWiFiC⁄√˘
, 
DoWifiIndiˇt‹
 },

170 { 
CHK_CERT_TIME
, 
WIFI_TIME_1SEC
, 60, 
CheckCîtTime
, 
DoCîtC™˚l
 }

171 
	}
};

173 
	#SZ_CK_LIST
 ( (
WifiD©aCheckLi°
Ë/ (
WifiD©aCheckLi°_T
Ë)

	)

177 
	$WifiD©aCheckPro˚ss
 ( 
U8
 
mu8Ty≥
 )

179 c⁄° 
WifiD©aCheckLi°_T
 *
pLi°
 = 
NULL
;

180 
U8
 
i
 = 0U;

182 
pLi°
 = 
WifiD©aCheckLi°
;

184  
i
 = 0 ; i < 
SZ_CK_LIST
; i++ )

186 i‡–
mu8Ty≥
 =(
pLi°
+
i
)->
u8Ty≥Time
 )

188 
	`RunChkD©a
–
pLi°
+
i
, i );

191 
	}
}

194 
	$RunChkD©a
 ( c⁄° 
WifiD©aCheckLi°_T
 *
pLi°
, 
U8
 
i
 )

196 
WifiCheckFun_T
 
pChFun
;

197 
WifiDoFun_T
 
pDoFun
;

199 
pChFun
 = 
pLi°
->
CheckFunc
;

200 
pDoFun
 = 
pLi°
->
DoFunc
;

201 i‡–
	`pChFun
(Ë=
TRUE
 )

203 
WifiCheck
[
i
].
u16Cou¡
++;

204 i‡–
WifiCheck
[
i
].
u16Cou¡
 >
pLi°
->u16Count )

206 
	`pDoFun
();

207 
WifiCheck
[
i
].
u16Cou¡
 = 0;

212 
WifiCheck
[
i
].
u16Cou¡
 = 0;

214 
	}
}

216 
U8
 
	$CheckModuÀOnOff
 ( )

218 
U16
 
mu16PowîCou¡
 = 0U;

220 
mu16PowîCou¡
++;

221 i‡–
mu16PowîCou¡
 < 
W_COUNT_WIFI_POWER
 )

223 i‡–
	`GëU£rI¡îÁ˚
–
USER_FACTORY_STATUS
 ) =
SET
 )

225 
mu16PowîCou¡
 = 
W_COUNT_WIFI_POWER
;

227  
FALSE
;

231 
mu16PowîCou¡
 = 
W_COUNT_WIFI_POWER
;

234 i‡–
	`GëWifiModuÀSètus
–
STATUS_MODULE_POWER
 ) =
OFF
 )

236 
	`SëWifiModuÀSètus
–
STATUS_MODULE_SEQ
, 
MODULE_NULL
 );

237  
FALSE
;

239  
TRUE
;

240 
	}
}

241 
	$DoModuÀOnOff
 ( )

243 
	`WifiModuÀOnOffSeq
();

244 
	}
}

246 
U8
 
	$CheckAlways
 ( )

248 i‡–
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_POWER
 ) =
ON
 )

250  
TRUE
;

252  
FALSE
;

253 
	}
}

254 
	$DoAlways100ms
 ( )

256 
	`WifiU¨tTxTimî
();

257 
	`WifiU¨tRxTimî
();

259 
	}
}

261 
U8
 
	$CheckBoŸModuÀ
 ( )

263 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_POWER
 ) =
ON
 )

264 && ( 
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
OFF
 )

265 && ( 
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
CLEAR
 )

266 && ( 
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) =
CLEAR
 )

267 && ( 
	`GëWifiFŸaSètus
–
STATUS_FOTA_MODULE
 ) =
CLEAR
 ) )

269  
TRUE
;

271  
FALSE
;

272 
	}
}

274 
U8
 
	$CheckBoŸFŸa
 ( )

276 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_POWER
 ) =
ON
 )

277 && ( 
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
OFF
 )

278 && ( 
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
CLEAR
 )

279 && ( 
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) =
CLEAR
 )

280 && ( 
	`GëWifiFŸaSètus
–
STATUS_FOTA_MODULE
 ) =
SET
 ) )

282  
TRUE
;

284  
FALSE
;

285 
	}
}

287 
U8
 
	$CheckApModeSèπ
 ( )

289 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
ON
 )

290 && ( 
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) !
CLEAR
 ) )

292  
TRUE
;

294  
FALSE
;

295 
	}
}

297 
U8
 
	$CheckApBÀSèπ
 ( )

299 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
ON
 )

300 && ( 
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) !
CLEAR
 ) )

302  
TRUE
;

304  
FALSE
;

305 
	}
}

307 
U8
 
	$CheckApModeFaû
 ( )

309 i‡––
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) !
CLEAR
 )

310 || ( 
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) !
CLEAR
 ) )

312  
TRUE
;

314  
FALSE
;

315 
	}
}

317 
U8
 
	$CheckSîvîC⁄√˘
 ( )

319 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
ON
 )

320 && ( 
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
CLEAR
 )

321 && ( 
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) =
CLEAR
 )

322 && ( 
	`GëWifiSîvîSètus
–
STATUS_SVR_CONNECT
 ) =
CLEAR
 ) )

324  
TRUE
;

326  
FALSE
;

327 
	}
}

329 
U8
 
	$CheckSîvîDisc⁄√˘
 ( )

331 i‡–
	`GëWifiSîvîSètus
–
STATUS_SVR_END
 ) =
SET
 )

333  
TRUE
;

335  
FALSE
;

336 
	}
}

338 
U8
 
	$CheckFú°D©a
 ( )

340 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
ON
 )

341 && ( 
	`GëWifiIniSètus
–
STATUS_INI_FINISH
 ) !
SET
 ) )

343  
TRUE
;

345 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
INI_SEQ_NULL
 );

346  
FALSE
;

347 
	}
}

349 
U8
 
	$CheckFú°Faû
 ( )

351 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
ON
 )

352 && ( 
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
CLEAR
 )

353 && ( 
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) =
CLEAR
 )

354 && ( 
	`GëWifiIniSètus
–
STATUS_INI_FINISH
 ) !
SET
 )

355 && ( 
	`GëWifiSîvîSètus
–
STATUS_SVR_CONNECT
 ) =
SET
 ) )

357  
TRUE
;

359  
FALSE
;

360 
	}
}

362 
U8
 
	$CheckU¨tRx
 ( )

364 i‡–
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_POWER
 ) =
ON
 ){

365 i‡––
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) !
CLEAR
 ) || ( GëWifiApSètus–
STATUS_AP_BLE
 ) != CLEAR ) )

367  
FALSE
;

371 i‡(
WifiRx
.
u8C⁄√˘Check
 =
SET
) {

372 
WifiRx
.
u8C⁄√˘Check
 = 
CLEAR
;

373 
WifiRx
.
u16C⁄√˘CheckCou¡
 = 
CLEAR
;

374  
FALSE
;

376 
WifiRx
.
u16C⁄√˘CheckCou¡
++;

377  
TRUE
;

381  
FALSE
;

383 
	}
}

384 
U8
 
	$CheckSídD©a
 ( )

386 i‡––
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_READY
 ) =
ON
 )

387 && ( 
	`GëWifiTxSètus
–
STATUS_TX_SEQ
 ) =
WIFI_TX_SEQ_NULL
 ) )

389  
TRUE
;

391  
FALSE
;

392 
	}
}

394 
U8
 
	$CheckSídAck
 ( )

396 i‡––
	`GëWifiSîvîSètus
–
STATUS_SVR_CONNECT
 ) =
SET
 )

397 && ( 
	`GëWifiTxSètus
–
STATUS_TX_STATE
 ) =
SET
 ) )

399  
TRUE
;

401  
FALSE
;

402 
	}
}

404 
U8
 
	$CheckC⁄√˘
 ( )

406 i‡–
	`GëWifiSîvîSètus
–
STATUS_SVR_CONNECT
 ) =
SET
 )

408  
TRUE
;

410 
	`CÀ¨U£rD©a
();

411  
FALSE
;

412 
	}
}

414 
U8
 
	$CheckBÀD©a
 ( )

416 if(
	`GëWifiApSètus
(
STATUS_AP_BLE
Ë!
CLEAR
)

418 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
WIFIDATA
);

422 i‡((
	`GëWifiBLESídSètus
(
TX_BLE_WIFI
Ë=
BLEDATA
 ) && (GëWifiBLESídSètus(
BLE_RECV_CHECK
Ë=
CLEAR
))

424  
TRUE
;

427 
	`SëWifiBLESídSètus
(
BLE_RECV_CHECK
, 
CLEAR
);

428  
FALSE
;

429 
	}
}

430 
U8
 
	$CheckFŸaSèπ
 ( )

432 i‡––
	`GëWifiFŸaSètus
–
STATUS_FOTA_SEQ
 ) !
FOTA_NULL
 )

433 && ( 
	`GëU£rI¡îÁ˚
–
USER_FOTA_POSSIBLE_STATUS
 ) =
TRUE
 ) )

435  
TRUE
;

437  
FALSE
;

438 
	}
}

440 
U8
 
	$CheckWiFiC⁄√˘
 ( )

442 i‡(–
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 =
SET
)

443 && (
	`GëWifiIndiˇãSètus
(
STATUS_DISPLAY
Ë!
WIFI_DISP_AP1
)

444 && (
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë=
ON
 )

445 && ( ( 
	`GëWifiApSètus
(
STATUS_AP_WIFI
Ë=
CLEAR
 ) && (GëWifiApSètus(
STATUS_AP_BLE
) == CLEAR) ))

447  
TRUE
;

449  
FALSE
;

450 
	}
}

451 
U8
 
	$CheckCîtTime
 ( )

453 if(
	`GëWifiApSètus
(
STATUS_AP_BLE
Ë!
CLEAR
)

455 i‡–
	`GëWifiApSètus
(
STATUS_AP_BLE_CERT
Ë=
SET
)

457  
TRUE
;

462 
	`SëWifiApSètus
(
STATUS_AP_BLE_CERT
,
CLEAR
);

463 
	`SëWifiCîtResu…
(
RESULT_CERT_NOTUSED
);

465  
FALSE
;

466 
	}
}

467 
	$DoRe£t
 ( )

469 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
WIFIDATA
);

470 
	`HAL_SëWifiOnOff
–
RESET
 );

471 
	}
}

472 
	$DoOff
 ( )

474 
	`HAL_SëWifiOnOff
–
OFF
 );

475 
	}
}

477 
	$DoApModeSèπ
 ( )

479 i‡–
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
WAIT
 )

481 
	`SëWifiApSètus
–
STATUS_AP_WIFI
, 
RESET
 );

483 i‡–
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
RESET
 )

485 
	`CÀ¨WifiAŒSètus
();

486 
	`SëWifiApSètus
–
STATUS_AP_WIFI
, 
START
 );

487 
	`SëWifiC⁄åﬁSètus
–
STATUS_CON_POWER
, 
ON
 );

488 
	`SëWifiC⁄åﬁSètus
–
STATUS_CON_READY
, 
ON
 );

489 
	`SëWifiIndiˇãSètus
–
STATUS_DISPLAY
, 
WIFI_DISP_TRY
 );

490 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_APMODE
 );

492 i‡–
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
START
 )

494 
	`SëWifiApSètus
–
STATUS_AP_WIFI
, 
RETRY
 );

500 
	}
}

502 
	$DoApBÀSèπ
 ( )

504 i‡–
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) =
WAIT
 )

506 
	`SëWifiApSètus
–
STATUS_AP_BLE
, 
START
 );

507 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_BLE_ADV
 );

509 
	}
}

511 
	$DoApModeFaû
 ( )

524 
	}
}

526 
	$DoFú°D©a
 ( )

528 
	`WifiSèπPro˚ss
();

529 
	}
}

531 
	$DoFú°Faû
 ( )

533 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
INI_SEQ_SERVER_CONNECT
 );

534 
	}
}

536 
	$DoSídD©a
 ( )

538 
	`WifiTxD©aSñe˘
();

539 
	}
}

541 
	$DoSíd1mö
 ( )

543 
	`SëWifiSídSètus
–
TX_DATA
, 
WIFI_TX_SEND_SENSOR
 );

544 
	}
}

545 
	$DoSíd5mö
 ( )

547 
	`SëWifiSídSètus
–
TX_DATA
, 
WIFI_TX_SEND_SENSOR
 );

548 
	}
}

549 
	$DoRq°20mö
 ( )

551 #ifde‡
USER_USE_WEATHER


552 i‡–
	`GëWifiIniSètus
–
STATUS_INI_INFO
 ) =
SET
 )

554 
	`SëWifiSídSètus
–
TX_DATA
, 
WIFI_TX_RQST_INFO_DATA
 );

558 
	`SëWifiSídSètus
–
TX_DATA
, 
WIFI_TX_RQST_INFO
 );

561 
	}
}

563 
	$DoRq°24Hour
 ( )

565 
	`SëWifiSídSètus
–
TX_DATA
, 
WIFI_TX_RQST_INFO
 );

566 
	}
}

568 
	$BÀTxOFF
 ( )

570 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
WIFIDATA
);

571 
	}
}

572 
	$DoFŸaSèπ
 ( )

574 
	`WifiFŸaPro˚ss
();

575 
	}
}

577 
	$DoWifiIndiˇt‹
 ( )

579 
	`SëWifiIndiˇãSètus
–
STATUS_DISPLAY
, 
WIFI_DISP_AP1
 );

580 
	`SëWifiApSètus
(
STATUS_AP_BLE
,
WAIT
);

581 
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 = 
DONE
;

582 
	}
}

583 
	$DoCîtC™˚l
 ( )

585 
	`SëWifiCîtID
(
WIFI_BLE_CERT_0003
);

586 
	`SëWifiCîtResu…
(
RESULT_CERT_TIME_OUT
);

587 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_BLE_CERT
);

588 
	`SëWifiApSètus
(
STATUS_AP_BLE_CERT
,
CLEAR
);

590 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_DataCheck.h

2 #i‚de‡
_WIFI_D©aCheck_H_


3 
	#_WIFI_D©aCheck_H_


	)

5 
WifiD©aCheckPro˚ss
 ( 
U8
 
mu8Ty≥
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Initialize.c

14 
	~"WIFI_Comm⁄.h
"

15 
	~"WIFI_DefU£r.h
"

16 
	~"WIFI_Inôülize.h
"

17 
	~"WIFI_Sètus.h
"

18 
	~"WIFI_U£rI¡îÁ˚.h
"

28 
IniSîvîC⁄√˘
 ( );

29 
IniRq°Info
 ( );

30 
IniSídSèπ
 ( );

31 
IniCheckSkù
 ( );

32 
IniFöished
 ( );

33 
U8
 
IsIniRëryOvî
 ( U8 
mCou¡
 );

37 (*
	tWifiIniFun_T
)();

38 
	s_wifi_öi_li°_


40 
U8
 
Id
;

41 
U32
 
Tx
;

42 
WifiIniFun_T
 
Func
;

43 
U8
 
Sãp
;

44 } 
	tWifiInôülizeLi°_T
;

48 
	`RunInôD©a
 ( c⁄° 
WifiInôülizeLi°_T
 *
pLi°
 );

49 
	`RunInôAck
 ( c⁄° 
WifiInôülizeLi°_T
 *
pLi°
 );

53 c⁄° 
WifiInôülizeLi°_T
 
WifiInôülizeLi°
[] =

55 { 
INI_SEQ_NULL
, 
WIFI_TX_NULL
, 
NULL
, INI_SEQ_NULL },

57 { 
INI_SEQ_SERVER_CONNECT
, 
WIFI_TX_NULL
, 
IniSîvîC⁄√˘
, 
INI_SEQ_RQST_INFO
 },

59 { 
INI_SEQ_RQST_INFO
, 
WIFI_TX_RQST_INFO
, 
IniRq°Info
, 
INI_SEQ_ACK_INFO
 },

60 { 
INI_SEQ_ACK_INFO
, 
WIFI_TX_NULL
, 
NULL
, 
INI_SEQ_SEND_STATUS
 },

62 { 
INI_SEQ_SEND_STATUS
, 
WIFI_TX_SEND_FUNC
, 
IniSídSèπ
, 
INI_SEQ_ACK_STATUS
 },

63 { 
INI_SEQ_ACK_STATUS
, 
WIFI_TX_NULL
, 
NULL
, 
INI_SEQ_SEND_SENSOR
 },

65 { 
INI_SEQ_SEND_SENSOR
, 
WIFI_TX_SEND_SENSOR
, 
NULL
, 
INI_SEQ_ACK_SENSOR
 },

66 { 
INI_SEQ_ACK_SENSOR
, 
WIFI_TX_NULL
, 
NULL
, 
INI_SEQ_SEND_ERROR
 },

68 { 
INI_SEQ_SEND_ERROR
, 
WIFI_TX_SEND_ERR
, 
IniCheckSkù
, 
INI_SEQ_ACK_ERROR
 },

69 { 
INI_SEQ_ACK_ERROR
, 
WIFI_TX_NULL
, 
NULL
, 
INI_SEQ_SEND_PART
 },

71 #ifde‡
USER_USE_ACCUMULATE


72 { 
INI_SEQ_SEND_PART
, 
WIFI_TX_SEND_PART
, 
NULL
, 
INI_SEQ_ACK_PART
 },

73 { 
INI_SEQ_ACK_PART
, 
WIFI_TX_NULL
, 
NULL
, 
INI_SEQ_SEND_ACCUMULATE
 },

75 { 
INI_SEQ_SEND_PART
, 
WIFI_TX_SEND_PART
, 
NULL
, 
INI_SEQ_ACK_PART
 },

76 { 
INI_SEQ_ACK_PART
, 
WIFI_TX_NULL
, 
NULL
, 
INI_SEQ_FINISHED
 },

79 { 
INI_SEQ_SEND_ACCUMULATE
, 
WIFI_TX_SEND_ACCUMULATE
,
NULL
, 
INI_SEQ_ACK_ACCUMULATE
 },

80 { 
INI_SEQ_ACK_ACCUMULATE
, 
WIFI_TX_NULL
, 
NULL
, 
INI_SEQ_FINISHED
 },

82 { 
INI_SEQ_FINISHED
, 
WIFI_TX_NULL
, 
IniFöished
, 
INI_SEQ_NULL
 }

83 
	}
};

85 
	#SZ_INI_LIST
 ( (
WifiInôülizeLi°
Ë/ (
WifiInôülizeLi°_T
Ë)

	)

89 
	$WifiSèπPro˚ss
 ( )

91 c⁄° 
WifiInôülizeLi°_T
 *
pLi°
 = 
NULL
;

92 
U8
 
i
 = 0U;

93 
U8
 
mInô
 = 0U;

96 
mInô
 = 
	`GëWifiIniSètus
–
STATUS_INI_SEQ
 );

97 
pLi°
 = 
WifiInôülizeLi°
;

98  
i
 = 0 ; i < 
SZ_INI_LIST
; i++ )

100 i‡–
mInô
 =(
pLi°
+
i
)->
Id
 )

102 
	`RunInôD©a
–
pLi°
+
i
 );

106 
	}
}

108 
	$WifiCheckInôülizeAck
 ( )

110 c⁄° 
WifiInôülizeLi°_T
 *
pLi°
 = 
NULL
;

111 
U8
 
i
 = 0U;

112 
U8
 
mInô
 = 0U;

114 i‡–
	`GëWifiIniSètus
–
STATUS_INI_FINISH
 ) =
SET
 )

120 
mInô
 = 
	`GëWifiIniSètus
–
STATUS_INI_SEQ
 );

121 
pLi°
 = 
WifiInôülizeLi°
;

122  
i
 = 0 ; i < 
SZ_INI_LIST
; i++ )

124 i‡–
mInô
 =(
pLi°
+
i
)->
Id
 )

126 
	`RunInôAck
–
pLi°
+
i
 );

130 
	}
}

132 
	$WifiCheckInôülizeInfoAck
 ( )

134 i‡–
	`GëWifiIniSètus
–
STATUS_INI_SEQ
 ) =
INI_SEQ_ACK_INFO
 )

136 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, (
WifiInôülizeLi°
+
INI_SEQ_ACK_INFO
)->
Sãp
 );

138 
	}
}

141 
	$RunInôD©a
 ( c⁄° 
WifiInôülizeLi°_T
 *
pLi°
 )

143 
WifiIniFun_T
 
pFun
;

144 
U32
 
mTx
 = 0UL;

145 
U8
 
mSãp
 = 0U;

147 
pFun
 = 
pLi°
->
Func
;

148 
mTx
 = 
pLi°
->
Tx
;

149 
mSãp
 = 
pLi°
->
Sãp
;

151 i‡–
mTx
 !
WIFI_TX_NULL
 )

153 
	`SëWifiSídSètus
–
TX_DATA
, 
mTx
 );

154 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
mSãp
 );

157 i‡–
pFun
 !
NULL
 )

159 
	`pFun
();

161 
	}
}

163 
	$RunInôAck
 ( c⁄° 
WifiInôülizeLi°_T
 *
pLi°
 )

165 
U32
 
mTx
 = 0UL;

166 
U8
 
mSãp
 = 0U;

168 
mTx
 = 
pLi°
->
Tx
;

169 
mSãp
 = 
pLi°
->
Sãp
;

171 i‡–
mTx
 =
WIFI_TX_NULL
 )

173 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
mSãp
 );

175 
	}
}

177 
	$IniSîvîC⁄√˘
 ( )

179 i‡–
	`GëWifiSîvîSètus
–
STATUS_SVR_CONNECT
 ) !
SET
 )

184 i‡–
	`GëWifiIniSètus
–
STATUS_INI_INFO
 ) !
SET
 )

186 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, (
WifiInôülizeLi°
+
INI_SEQ_SERVER_CONNECT
)->
Sãp
 );

190 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
INI_SEQ_SEND_STATUS
 );

192 
	}
}

194 
	$IniRq°Info
 ( )

196 i‡–
	`IsIniRëryOvî
–
SET
 ) =
TRUE
 )

198 
	`IniFöished
();

200 
	}
}

202 
	$IniSídSèπ
 ( )

204 i‡–
	`IsIniRëryOvî
–
START
 ) =
TRUE
 )

206 
	`IniFöished
();

208 
	}
}

210 
	$IniCheckSkù
 ( )

212 i‡–
	`GëU£rI¡îÁ˚
–
USER_SMART_SENSING_STATUS
 ) =
TRUE
 )

214 
	`IniFöished
();

216 
	}
}

218 
	$IniFöished
 ( )

220 
	`SëWifiIniSètus
–
STATUS_INI_FINISH
, 
SET
 );

221 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
INI_SEQ_NULL
 );

222 
	`IsIniRëryOvî
–
CLEAR
 );

223 
	}
}

225 
	#W_INIT_OVER_CNT
 5

226 
U8
 
	`IsIniRëryOvî
 ( U8 
mCou¡
 )

	)

228 
U8
 
	gmInfoRëry
 = 0U;

229 
U8
 
	gmSídRëry
 = 0U;

231 i‡–
	gmCou¡
 =
CLEAR
 )

233 
mInfoRëry
 = 
CLEAR
;

234 
	gmSídRëry
 = 
CLEAR
;

236 i‡–
	gmCou¡
 =
SET
 )

238 
mInfoRëry
++;

242 
	gmSídRëry
++;

245 i‡––
	gmInfoRëry
 >
W_INIT_OVER_CNT
 ) || ( 
mSídRëry
 >= W_INIT_OVER_CNT ) )

247  
TRUE
;

249  
	gFALSE
;

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Initialize.h

2 #i‚de‡
_WIFI_Inôülize_H_


3 
	#_WIFI_Inôülize_H_


	)

16 
WifiSèπPro˚ss
 ( );

29 
WifiCheckInôülizeAck
 ( );

31 
WifiCheckInôülizeInfoAck
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_ProcessApmode.c

3 
	~"WIFI_Comm⁄.h
"

5 
	#USE_AP
 0

	)

6 #i‡(
USE_AP
 == 0)

10 
	#AP_CMD_SITE
 3

11 
	#AP_DATA_SITE
 5

	)

12 
	#AP_CMD_LENGTH
 2

	)

13 
	#AP_PRT_LENGTH
 256

	)

14 
	#LENGTH_SSID
 65

	)

15 
	#LENGTH_PID
 18

	)

16 
	#LENGTH_PW
 33

	)

17 
	#LENGTH_BSSID
 12

18 

	)

20 
U8
 
	gu8WifiApModeSèã
 = 
CLEAR
;

21 
I8
 
	gai8SSID
[
LENGTH_SSID
+1];

22 
I8
 
	gai8PW
[
LENGTH_PW
+1];

23 
I8
 
	gai8PID
[
LENGTH_PID
+1];

24 
U8
 
	gu8WifiDHCP
 = 
SET
;

25 
I8
 
	gai8AP_SèticIP
[9];

26 
I8
 
	gai8AP_SèticG©eway
[9];

27 
I8
 
	gai8AP_SèticSub√t
[9];

28 
I8
 
	gai8AP_SèticDNS
[9];

29 
I8
 
	gai8BSSID
[
LENGTH_BSSID
+1];

32 c⁄° 
	gWIFI_AP_SSID
[] = "01";

33 c⁄° 
	gWIFI_AP_PASSWORD
[] = "02";

34 c⁄° 
	gWIFI_AP_PID
[] = "03";

35 c⁄° 
	gWIFI_AP_DHCP
[] = "04";

36 c⁄° 
	gWIFI_AP_BSSID
[] = "05";

37 c⁄° 
	gWIFI_AP_TIME
[] = "10";

38 c⁄° 
	gWIFI_AP_STERILIZE
[] = "11";

41 
U8
 
IsApD©aC‹ª˘
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

42 
ApSsid
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

43 
ApPw
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

44 
ApPid
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

45 
ApDh˝
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

46 
ApBssid
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

47 
ApTime
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

48 
ApSålz
(
I8
 *
pBuf
, 
U16
 
mu16Lí
);

51 (*
	tWifiApFun_T
)(
	tI8
 *
	tpBuf
, 
	tU16
 
	tmu16Lí
);

52 
	s_wifi_≠mode_li°_


54 
I8
 *
Id
;

55 
WifiApFun_T
 
Func
;

56 } 
	tWifiApModeLi°_T
;

59 
WifiApModeLi°_T
 
WifiApModeLi°
[] =

61 { 
WIFI_AP_SSID
, 
ApSsid
 },

62 { 
WIFI_AP_PASSWORD
, 
ApPw
 },

63 { 
WIFI_AP_PID
, 
ApPid
 },

64 { 
WIFI_AP_DHCP
, 
ApDh˝
 },

65 { 
WIFI_AP_BSSID
, 
ApBssid
 },

66 { 
WIFI_AP_TIME
, 
ApTime
 },

67 { 
WIFI_AP_STERILIZE
, 
ApSålz
 }

68 
	}
};

69 
	#SZ_AP_LIST
 ( (
WifiApModeLi°
Ë/ (
WifiApModeLi°_T
Ë)

	)

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_ProcessApmode.h

2 #i‚de‡
_WIFI_Pro˚ssApmode_H_


3 
	#_WIFI_Pro˚ssApmode_H_


	)

6 
InôülizeWifiAp
 ( );

9 
U8
 
GëWifiApModeSãp
 ( );

10 
SëWifiApModeSèã
 ( 
U8
 
mu8Sèã
 );

13 
I8
 
GëWifiPassw‹d
 ( 
U16
 
mu16i
 );

14 
SëWifiPassw‹d
 ( 
U8
 
mu8i
, U8 
mu8D©a
 );

17 
GëWifiPid
 ( 
I8
 *
pBuf
 );

18 
SëWifiPid
 ( 
U8
 
mu8i
, U8 
mu8D©a
 );

21 
U8
 
GëWifiDHCP
 ( );

22 
SëWifiDHCP
 ( 
U8
 
mu8Sèã
 );

25 
U16
 
GëWifiSèticIp
 ( U16 
mu16i
 );

26 
SëWifiSèticIp
 ( 
U8
 
mu8i
, U8 
mu8D©a
 );

29 
U16
 
GëWifiSèticG©eway
 ( U16 
mu16i
 );

30 
SëWifiSèticG©eway
 ( 
U8
 
mu8i
, U8 
mu8D©a
 );

33 
U16
 
GëWifiSèticSub√t
 ( U16 
mu16i
 );

34 
SëWifiSèticSub√t
 ( 
U8
 
mu8i
, U8 
mu8D©a
 );

37 
U16
 
GëWifiSèticDns
 ( U16 
mu16i
 );

38 
SëWifiSèticDns
 ( 
U8
 
mu8i
, U8 
mu8D©a
 );

41 
I8
 
GëWifiBssid
 ( 
U16
 
mu16i
 );

42 
SëWifiBssid
 ( 
U8
 
mu8i
, U8 
mu8D©a
 );

55 
WifiRxApPrŸocﬁ
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Status.c

2 
	~"WIFI_Comm⁄.h
"

3 
	~"WIFI_DefU£r.h
"

4 
	~"WIFI_Sètus.h
"

5 
	~"WIFI_U£rI¡îÁ˚.h
"

11 
	s_wifi°©usvÆue_


13 
U8
 
	mu8ModuÀ
[
STATUS_MODULE_NUM
];

14 
U8
 
	mu8C⁄åﬁ
[
STATUS_CON_NUM
];

15 
U8
 
	mu8Sîvî
[
STATUS_SVR_NUM
];

16 
U8
 
	mu8Inôülize
[
STATUS_INI_NUM
];

17 
U8
 
	mu8Tx
[
STATUS_TX_NUM
];

18 
U8
 
	mu8FŸa
[
STATUS_FOTA_NUM
];

19 
U8
 
	mu8Ap
[
STATUS_AP_NUM
];

20 
U8
 
	mu8Indiˇã
[
STATUS_IDC_NUM
];

21 
U8
 
	mu8C⁄åﬁId
;

22 
U32
 
	mu32Síd
[
STATUS_SEND_NUM
];

23 
U8
 
	mu8_Wifi_BLE_Síd
[
STATUS_SEND_WIFI_BLE_NUM
];

24 } 
	tWifiSètusVÆue_T
;

25 
WifiSètusVÆue_T
 
	gWifiSètusVÆue
;

27 
	s_wifi˚π°©usvÆue_


29 
U8
 
	mu8CîtVÆueID
;

30 
U8
 
	mu8CîtVÆueResu…
;

31 
U8
 
	mu8CîtVÆueSètus
;

33 } 
	tWifiCîtSètusVÆue_T
;

34 
WifiCîtSètusVÆue_T
 
	gWifiCîtSètusVÆue
;

35 
	$InôülizeWifiSètus
 ( )

37 
	`_MEMSET_
–(
__FAR
*Ë&
WifiSètusVÆue
, 0, (
WifiSètusVÆue_T
) );

38 
	`_MEMSET_
–(
__FAR
*Ë&
WifiCîtSètusVÆue
, 0, (
WifiCîtSètusVÆue_T
) );

39 
	}
}

41 
	$HAL_SëWifiOnOff
 ( 
U8
 
mu8Sèã
 )

43 i‡–
mu8Sèã
 =
ON
 )

45 
	`CÀ¨WifiAŒSètus
();

46 
	`SëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
,
ON
);

47 
	`SëWifiIndiˇãSètus
(
STATUS_DISPLAY
,
WIFI_DISP_TRY
);

48 
	`SëWifiModuÀSètus
(
STATUS_MODULE_POWER
,
SET
);

49 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_ON_START
);

51 i‡–
mu8Sèã
 =
RESET
 )

53 #i‡–
TEST_B1_OTA
 == 1 )

56 
	`CÀ¨WifiAŒSètus
();

57 
	`SëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
,
ON
);

58 
	`SëWifiIndiˇãSètus
(
STATUS_DISPLAY
,
WIFI_DISP_TRY
);

59 
	`SëWifiModuÀSètus
(
STATUS_MODULE_POWER
,
SET
);

60 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_RESET_START
);

64 
	`CÀ¨WifiAŒSètus
();

65 
	`WifiWrôeEï
(
EEPROM_ADDR_WIFI_POWER
, 
OFF
);

66 
	`SëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
,
OFF
);

67 
	`SëWifiModuÀSètus
(
STATUS_MODULE_POWER
,
SET
);

68 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_OFF_START
);

70 
	}
}

74 
U8
 
	$GëWifiModuÀSètus
 ( 
E_WIFI_STATUS_MODULE_T
 
mId
 )

76  
WifiSètusVÆue
.
u8ModuÀ
[
mId
];

77 
	}
}

78 
	$SëWifiModuÀSètus
 ( 
E_WIFI_STATUS_MODULE_T
 
mId
 , 
U8
 
mu8Sètus
 )

80 
WifiSètusVÆue
.
u8ModuÀ
[
mId
] = 
mu8Sètus
;

81 
	}
}

85 
U8
 
	$GëWifiC⁄åﬁSètus
 ( 
E_WIFI_STATUS_CON_T
 
mId
 )

87  
WifiSètusVÆue
.
u8C⁄åﬁ
[
mId
];

88 
	}
}

89 
	$SëWifiC⁄åﬁSètus
 ( 
E_WIFI_STATUS_CON_T
 
mId
 , 
U8
 
mu8Sètus
 )

91 
WifiSètusVÆue
.
u8C⁄åﬁ
[
mId
] = 
mu8Sètus
;

92 
	}
}

96 
U8
 
	$GëWifiSîvîSètus
 ( 
E_WIFI_STATUS_SVR_T
 
mId
 )

98  
WifiSètusVÆue
.
u8Sîvî
[
mId
];

99 
	}
}

100 
	$SëWifiSîvîSètus
 ( 
E_WIFI_STATUS_SVR_T
 
mId
 , 
U8
 
mu8Sètus
 )

102 
WifiSètusVÆue
.
u8Sîvî
[
mId
] = 
mu8Sètus
;

103 
	}
}

107 
U8
 
	$GëWifiIniSètus
 ( 
E_WIFI_STATUS_INI_T
 
mId
 )

109  
WifiSètusVÆue
.
u8Inôülize
[
mId
];

110 
	}
}

111 
	$SëWifiIniSètus
 ( 
E_WIFI_STATUS_INI_T
 
mId
 , 
U8
 
mu8Sètus
 )

113 
WifiSètusVÆue
.
u8Inôülize
[
mId
] = 
mu8Sètus
;

114 
	}
}

118 
U8
 
	$GëWifiTxSètus
 ( 
E_WIFI_STATUS_TX_T
 
mId
 )

120  
WifiSètusVÆue
.
u8Tx
[
mId
];

121 
	}
}

122 
	$SëWifiTxSètus
 ( 
E_WIFI_STATUS_TX_T
 
mId
 , 
U8
 
mu8Sètus
 )

124 
WifiSètusVÆue
.
u8Tx
[
mId
] = 
mu8Sètus
;

125 
	}
}

129 
U8
 
	$GëWifiFŸaSètus
 ( 
E_WIFI_STATUS_FOTA_T
 
mId
 )

131  
WifiSètusVÆue
.
u8FŸa
[
mId
];

132 
	}
}

133 
	$SëWifiFŸaSètus
 ( 
E_WIFI_STATUS_FOTA_T
 
mId
 , 
U8
 
mu8Sètus
 )

135 
WifiSètusVÆue
.
u8FŸa
[
mId
] = 
mu8Sètus
;

136 
	}
}

140 
U8
 
	$GëWifiApSètus
 ( 
E_WIFI_STATUS_AP_T
 
mId
 )

142  
WifiSètusVÆue
.
u8Ap
[
mId
];

143 
	}
}

144 
	$SëWifiApSètus
 ( 
E_WIFI_STATUS_AP_T
 
mId
 , 
U8
 
mu8Sètus
 )

146 
WifiSètusVÆue
.
u8Ap
[
mId
] = 
mu8Sètus
;

147 
	}
}

151 
U8
 
	$GëWifiIndiˇãSètus
 ( 
E_WIFI_STATUS_IDC_T
 
mId
 )

153  
WifiSètusVÆue
.
u8Indiˇã
[
mId
];

154 
	}
}

155 
	$SëWifiIndiˇãSètus
 ( 
E_WIFI_STATUS_IDC_T
 
mId
 , 
U8
 
mu8Sètus
 )

158 
WifiSètusVÆue
.
u8Indiˇã
[
mId
] = 
mu8Sètus
;

159 
	}
}

161 
U8
 
	$GëWifiSídSètusC⁄åﬁ
 ( )

163  
WifiSètusVÆue
.
u8C⁄åﬁId
;

164 
	}
}

165 
	$SëWifiSídSètusC⁄åﬁ
 ( 
U8
 
mu8IdD©a
 )

167 
WifiSètusVÆue
.
u8C⁄åﬁId
 = 
mu8IdD©a
;

168 
	}
}

171 
U32
 
	$GëWifiSídSètus
 ( 
E_WIFI_STATUS_SEND_T
 
mId
 )

173  
WifiSètusVÆue
.
u32Síd
[
mId
];

174 
	}
}

175 
	$SëWifiSídSètus
 ( 
E_WIFI_STATUS_SEND_T
 
mId
 , 
U32
 
mu32Sètus
 )

177 
WifiSètusVÆue
.
u32Síd
[
mId
] = (WifiSètusVÆue.u32Síd[mId]|
mu32Sètus
);

178 
	}
}

179 
	$CÀ¨WifiSídSètus
 ( 
E_WIFI_STATUS_SEND_T
 
mId
 , 
U32
 
mu32Sètus
 )

181 
WifiSètusVÆue
.
u32Síd
[
mId
] = (WifiSètusVÆue.u32Síd[mId]^
mu32Sètus
);

182 
	}
}

185 
U8
 
	$GëWifiBLESídSètus
 ( 
E_WIFI_STATUS_SEND_WIFI_BLE_T
 
mId
 )

187  
WifiSètusVÆue
.
u8_Wifi_BLE_Síd
[
mId
];

188 
	}
}

189 
	$SëWifiBLESídSètus
 ( 
E_WIFI_STATUS_SEND_WIFI_BLE_T
 
mId
 , 
U8
 
mu8Sètus
)

191 
WifiSètusVÆue
.
u8_Wifi_BLE_Síd
[
mId
] = 
mu8Sètus
;

192 
	}
}

193 
	$CÀ¨Wifi_BLE_SídSètus
 ( 
E_WIFI_STATUS_SEND_WIFI_BLE_T
 
mId
 , 
U8
 
mu8Sètus
)

195 
WifiSètusVÆue
.
u8_Wifi_BLE_Síd
[
mId
] = 
mu8Sètus
;

196 
	}
}

197 
U8
 
	$GëWifiCîtID
 ( )

199  
WifiCîtSètusVÆue
.
u8CîtVÆueID
;

200 
	}
}

201 
	$SëWifiCîtID
 ( 
U8
 
mu8ID
 )

203 
WifiCîtSètusVÆue
.
u8CîtVÆueID
 = 
mu8ID
;

204 
	}
}

205 
U8
 
	$GëWifiCîtResu…
 ( )

207  
WifiCîtSètusVÆue
.
u8CîtVÆueResu…
;

208 
	}
}

209 
	$SëWifiCîtResu…
 ( 
U8
 
mu8Resu…
 )

211 
WifiCîtSètusVÆue
.
u8CîtVÆueResu…
 = 
mu8Resu…
;

212 
	}
}

213 
U8
 
	$GëWifiCîtSètus
 ( )

215  
WifiCîtSètusVÆue
.
u8CîtVÆueSètus
;

216 
	}
}

217 
	$SëWifiCîtSètus
 ( 
U8
 
mu8Sètus
 )

219 
WifiCîtSètusVÆue
.
u8CîtVÆueSètus
 = 
mu8Sètus
;

220 
	}
}

223 
	$CÀ¨WifiAŒSètus
 ( )

225 
U8
 
mu8Fú°P¨ög
 = 0U;

226 
U8
 
mu8Eº‹Di•œy
 = 0U;

227 
U8
 
mu8ApEº‹
 = 0U;

228 
U8
 
mu8FŸaMcu
 = 0U;

229 
U8
 
mu8Fa˘‹y
 = 0U;

231 
mu8Fú°P¨ög
 = 
	`GëWifiApSètus
(
STATUS_AP_FIRST
);

232 
mu8Eº‹Di•œy
 = 
	`GëWifiIndiˇãSètus
(
STATUS_ERROR
);

233 
mu8ApEº‹
 = 
	`GëWifiIndiˇãSètus
(
STATUS_AP_ERROR
);

234 
mu8FŸaMcu
 = 
	`GëWifiFŸaSètus
(
STATUS_FOTA_MCU
);

235 
mu8Fa˘‹y

	`GëWifiIndiˇãSètus
(
STATUS_FACTORY
);

236 
	`_MEMSET_
–(
__FAR
*Ë&
WifiSètusVÆue
, 0, (
WifiSètusVÆue_T
) );

237 i‡(
mu8FŸaMcu
 =
SET
)

239 
	`SëWifiApSètus
(
STATUS_AP_BLE
,
WAIT
);

241 
	`SëWifiApSètus
(
STATUS_AP_FIRST
,
mu8Fú°P¨ög
);

242 
	`SëWifiIndiˇãSètus
(
STATUS_ERROR
,
mu8Eº‹Di•œy
);

243 
	`SëWifiIndiˇãSètus
(
STATUS_AP_ERROR
,
mu8ApEº‹
);

244 
	`SëWifiFŸaSètus
(
STATUS_FOTA_MCU
,
mu8FŸaMcu
);

245 
	`SëWifiIndiˇãSètus
(
STATUS_FACTORY
,
mu8Fa˘‹y
);

246 
	}
}

249 
	$WifiOnOffSëtög
 ( )

251 
U8
 
mu8EïD©a
 = 0U;

253 
mu8EïD©a
 = 
	`WifiRódEï
(
EEPROM_ADDR_WIFI_POWER
);

254 #i‡–
TEST_B1_OTA
 == 1 )

255 
mu8EïD©a
 = 
SET
;

257 #i‡–
TEST_WIFI_PJT
 == 1 )

258 
mu8EïD©a
 = 
SET
;

260 i‡–
mu8EïD©a
 <
ON
 )

262 
	`SëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
,
mu8EïD©a
);

266 
	`WifiWrôeEï
(
EEPROM_ADDR_WIFI_POWER
,
CLEAR
);

267 
	`SëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
,
OFF
);

271 
mu8EïD©a
 = 
	`WifiRódEï
(
EEPROM_ADDR_FIRST_PARING
);

272 #i‡–
TEST_B1_OTA
 == 1 )

273 
mu8EïD©a
 = 
SET
;

275 #i‡–
TEST_WIFI_PJT
 == 1 )

276 
mu8EïD©a
 = 
SET
;

278 i‡–
mu8EïD©a
 <
SET
 )

280 
	`SëWifiApSètus
(
STATUS_AP_FIRST
,
mu8EïD©a
);

284 
	`WifiWrôeEï
(
EEPROM_ADDR_FIRST_PARING
,
CLEAR
);

285 
	`SëWifiApSètus
(
STATUS_AP_FIRST
,
CLEAR
);

289 
mu8EïD©a
 = 
	`WifiRódEï
(
EEPROM_ADDR_FOTA_MODULE
);

290 i‡–
mu8EïD©a
 <
SET
 )

292 
	`SëWifiFŸaSètus
(
STATUS_FOTA_MODULE
,
mu8EïD©a
);

296 
	`WifiWrôeEï
(
EEPROM_ADDR_FOTA_MODULE
,
CLEAR
);

297 
	`SëWifiFŸaSètus
(
STATUS_FOTA_MODULE
,
CLEAR
);

301 
mu8EïD©a
 = 
	`WifiRódEï
(
EEPROM_ADDR_FOTA_MCU
);

302 i‡–
mu8EïD©a
 <
SET
 )

304 
	`SëWifiFŸaSètus
(
STATUS_FOTA_MCU
,
mu8EïD©a
);

308 
	`WifiWrôeEï
(
EEPROM_ADDR_FOTA_MCU
,
CLEAR
);

309 
	`SëWifiFŸaSètus
(
STATUS_FOTA_MCU
,
CLEAR
);

313 i‡–
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë=
ON
 )

315 
	`HAL_SëWifiOnOff
(
ON
);

319 
	`HAL_SëWifiOnOff
(
OFF
);

321 
	}
}

323 
	$WifiFa˘‹ySëtög
 ( )

325 
	`WifiWrôeEï
(
EEPROM_ADDR_WIFI_POWER
,
CLEAR
);

326 
	`WifiWrôeEï
(
EEPROM_ADDR_FIRST_PARING
,
CLEAR
);

327 
	`WifiWrôeEï
(
EEPROM_ADDR_FOTA_MODULE
,
CLEAR
);

328 
	`WifiWrôeEï
(
EEPROM_ADDR_FOTA_MCU
,
CLEAR
);

329 
	}
}

331 
	$WifiModuÀOnOffSeq
 ( )

333 
U8
 
mu8Seq
 = 0U;

335 
mu8Seq
 = 
	`GëWifiModuÀSètus
(
STATUS_MODULE_SEQ
);

337  
mu8Seq
 )

339 
MODULE_OFF_START
 :

340 
	`TURN_OFF_WIFI_RST
();

341 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_OFF_END
);

344 
MODULE_OFF_END
 :

345 
	`TURN_OFF_WIFI_POW
();

346 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_NULL
);

347 
	`SëWifiModuÀSètus
(
STATUS_MODULE_POWER
,
CLEAR
);

350 
MODULE_ON_START
 :

351 
	`TURN_ON_WIFI_POW
();

352 
	`TURN_ON_WIFI_RST
();

353 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_ON_WAIT
);

356 
MODULE_ON_WAIT
 :

357 
	`TURN_OFF_WIFI_RST
();

358 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_ON_END
);

361 
MODULE_ON_END
 :

362 
	`TURN_ON_WIFI_RST
();

363 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_NULL
);

364 
	`SëWifiModuÀSètus
(
STATUS_MODULE_POWER
,
CLEAR
);

367 
MODULE_RESET_START
 :

368 
	`TURN_ON_WIFI_POW
();

369 
	`TURN_OFF_WIFI_RST
();

370 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_RESET_END
);

373 
MODULE_RESET_END
 :

374 
	`TURN_ON_WIFI_RST
();

375 
	`SëWifiModuÀSètus
(
STATUS_MODULE_SEQ
,
MODULE_NULL
);

376 
	`SëWifiModuÀSètus
(
STATUS_MODULE_POWER
,
CLEAR
);

384 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Status.h

2 #i‚de‡
_Wifi_Sètus_H_


3 
	#_Wifi_Sètus_H_


	)

6 
InôülizeWifiSètus
 ( );

8 
HAL_SëWifiOnOff
 ( 
U8
 
mu8Sèã
 );

13 
	mSTATUS_MODULE_POWER
 = 0x00,

14 
	mSTATUS_MODULE_SEQ
,

16 
	mSTATUS_MODULE_NUM


17 } 
	tE_WIFI_STATUS_MODULE_T
;

18 
U8
 
GëWifiModuÀSètus
 ( 
E_WIFI_STATUS_MODULE_T
 
mId
 );

19 
SëWifiModuÀSètus
 ( 
E_WIFI_STATUS_MODULE_T
 
mId
 , 
U8
 
mu8Sètus
 );

24 
	mMODULE_NULL
 = 0x00,

25 
	mMODULE_OFF_START
 = 0x01,

26 
	mMODULE_OFF_END
,

27 
	mMODULE_ON_START
 = 0x11,

28 
	mMODULE_ON_WAIT
,

29 
	mMODULE_ON_END
,

30 
	mMODULE_RESET_START
 = 0x21,

31 
	mMODULE_RESET_END


38 
	mSTATUS_CON_POWER
 = 0x00,

39 
	mSTATUS_CON_READY
,

41 
	mSTATUS_CON_NUM


42 } 
	tE_WIFI_STATUS_CON_T
;

44 
U8
 
GëWifiC⁄åﬁSètus
 ( 
E_WIFI_STATUS_CON_T
 
mId
 );

45 
SëWifiC⁄åﬁSètus
 ( 
E_WIFI_STATUS_CON_T
 
mId
 , 
U8
 
mu8Sètus
 );

51 
	mSTATUS_SVR_CONNECT
 = 0x00,

52 
	mSTATUS_SVR_END
,

54 
	mSTATUS_SVR_NUM


55 } 
	tE_WIFI_STATUS_SVR_T
;

57 
U8
 
GëWifiSîvîSètus
 ( 
E_WIFI_STATUS_SVR_T
 
mId
 );

58 
SëWifiSîvîSètus
 ( 
E_WIFI_STATUS_SVR_T
 
mId
 , 
U8
 
mu8Sètus
 );

64 
	mSTATUS_INI_FINISH
 = 0x00,

65 
	mSTATUS_INI_SEQ
,

66 
	mSTATUS_INI_INFO
,

68 
	mSTATUS_INI_NUM


69 } 
	tE_WIFI_STATUS_INI_T
;

71 
U8
 
GëWifiIniSètus
 ( 
E_WIFI_STATUS_INI_T
 
mId
 );

72 
SëWifiIniSètus
 ( 
E_WIFI_STATUS_INI_T
 
mId
 , 
U8
 
mu8Sètus
 );

77 
	mINI_SEQ_NULL
 = 0x00,

78 
	mINI_SEQ_SERVER_CONNECT
,

79 
	mINI_SEQ_RQST_INFO
,

80 
	mINI_SEQ_ACK_INFO
,

81 
	mINI_SEQ_SEND_STATUS
,

82 
	mINI_SEQ_ACK_STATUS
,

83 
	mINI_SEQ_SEND_SENSOR
,

84 
	mINI_SEQ_ACK_SENSOR
,

85 
	mINI_SEQ_SEND_ERROR
,

86 
	mINI_SEQ_ACK_ERROR
,

87 
	mINI_SEQ_SEND_PART
,

88 
	mINI_SEQ_ACK_PART
,

89 
	mINI_SEQ_SEND_ACCUMULATE
,

90 
	mINI_SEQ_ACK_ACCUMULATE
,

91 
	mINI_SEQ_FINISHED


98 
	mSTATUS_TX_STATE
 = 0x00,

99 
	mSTATUS_TX_SEQ
,

100 
	mSTATUS_TX_SENSOR_STATE
,

102 
	mSTATUS_TX_NUM


103 } 
	tE_WIFI_STATUS_TX_T
;

105 
U8
 
GëWifiTxSètus
 ( 
E_WIFI_STATUS_TX_T
 
mId
 );

106 
SëWifiTxSètus
 ( 
E_WIFI_STATUS_TX_T
 
mId
 , 
U8
 
mu8Sètus
 );

111 
	mWIFI_TX_SEQ_NULL
 = 0x00,

112 
	mWIFI_TX_SEQ_ATCMD
,

113 
	mWIFI_TX_SEQ_APMODE
,

114 
	mWIFI_TX_SEQ_STOP
,

115 
	mWIFI_TX_SEQ_SEND


122 
	mSTATUS_FOTA_SEQ
 = 0x00,

123 
	mSTATUS_FOTA_MODULE
,

124 
	mSTATUS_FOTA_MCU
,

126 
	mSTATUS_FOTA_NUM


127 } 
	tE_WIFI_STATUS_FOTA_T
;

129 
U8
 
GëWifiFŸaSètus
 ( 
E_WIFI_STATUS_FOTA_T
 
mId
 );

130 
SëWifiFŸaSètus
 ( 
E_WIFI_STATUS_FOTA_T
 
mId
 , 
U8
 
mu8Sètus
 );

135 
	mFOTA_NULL
 = 0x00,

136 
	mFOTA_RESPONSE
,

137 
	mFOTA_CHECK
,

138 
	mFOTA_DISCONNECT
,

139 
	mFOTA_WAIT
,

140 
	mFOTA_START
,

141 
	mFOTA_RUN


147 
	mSTATUS_AP_FIRST
 = 0x00,

148 
	mSTATUS_AP_WIFI
,

149 
	mSTATUS_AP_BLE
,

150 
	mSTATUS_AP_BLE_CERT
,

152 
	mSTATUS_AP_NUM


153 } 
	tE_WIFI_STATUS_AP_T
;

155 
U8
 
GëWifiApSètus
 ( 
E_WIFI_STATUS_AP_T
 
mId
 );

156 
SëWifiApSètus
 ( 
E_WIFI_STATUS_AP_T
 
mId
 , 
U8
 
mu8Sètus
 );

162 
	mSTATUS_DISPLAY
 = 0x00,

163 
	mSTATUS_FACTORY
,

164 
	mSTATUS_ERROR
,

165 
	mSTATUS_AP_ERROR
,

166 
	mSTATUS_PARING
,

167 
	mSTATUS_FACTORY_RXTX
,

169 
	mSTATUS_IDC_NUM


170 } 
	tE_WIFI_STATUS_IDC_T
;

172 
U8
 
GëWifiIndiˇãSètus
 ( 
E_WIFI_STATUS_IDC_T
 
mId
 );

173 
SëWifiIndiˇãSètus
 ( 
E_WIFI_STATUS_IDC_T
 
mId
 , 
U8
 
mu8Sètus
 );

175 
U8
 
GëWifiSídSètusC⁄åﬁ
 ( );

176 
SëWifiSídSètusC⁄åﬁ
 ( 
U8
 
mu8Sètus
 );

181 
	mTX_ATCMD
 = 0x00,

182 
	mTX_DATA
,

184 
	mSTATUS_SEND_NUM


185 } 
	tE_WIFI_STATUS_SEND_T
;

187 
U32
 
GëWifiSídSètus
 ( 
E_WIFI_STATUS_SEND_T
 
mId
 );

188 
SëWifiSídSètus
 ( 
E_WIFI_STATUS_SEND_T
 
mId
 , 
U32
 
mu32Sètus
 );

189 
CÀ¨WifiSídSètus
 ( 
E_WIFI_STATUS_SEND_T
 
mId
 , 
U32
 
mu32Sètus
 );

193 
	mTX_BLE_WIFI
 = 0x00,

194 
	mBLE_RECV_CHECK
,

195 
	mSTATUS_SEND_WIFI_BLE_NUM


196 } 
	tE_WIFI_STATUS_SEND_WIFI_BLE_T
;

197 
U8
 
GëWifiBLESídSètus
 ( 
E_WIFI_STATUS_SEND_WIFI_BLE_T
 
mId
 );

198 
SëWifiBLESídSètus
 ( 
E_WIFI_STATUS_SEND_WIFI_BLE_T
 
mId
 , 
U8
 
mu8Sètus
 );

199 
CÀ¨Wifi_BLE_SídSètus
 ( 
E_WIFI_STATUS_SEND_WIFI_BLE_T
 
mId
 , 
U8
 
mu8Sètus
 );

202 
	mSTATUS_CERT_NOTUSED
 = 0x00,

203 
	mSTATUS_CERT_ON
,

204 
	mSTATUS_CERT_FAIL
,

205 
	mSTATUS_CERT_NUM


209 
	mRESULT_CERT_NOTUSED
 = 0x00,

210 
	mRESULT_CERT_SUCCESS
,

211 
	mRESULT_CERT_TIME_OUT
,

212 
	mRESULT_CERT_ERROR
,

213 
	mRESULT_CERT_NUM


215 
U8
 
GëWifiCîtID
 ();

216 
SëWifiCîtID
 (
U8
 
mu8ID
);

217 
U8
 
GëWifiCîtResu…
 ();

218 
SëWifiCîtResu…
 (
U8
 
mu8Resu…
);

219 
U8
 
GëWifiCîtSètus
 ();

220 
SëWifiCîtSètus
 (
U8
 
mu8Sètus
);

222 
	#WIFI_AT_NULL
 0x00000000

	)

223 
	#WIFI_AT_APMODE
 0x00000001

	)

224 
	#WIFI_AT_BLE_AP
 0x00000002

	)

225 
	#WIFI_AT_VERSION
 0x00000004

	)

226 
	#WIFI_AT_TESTMODE
 0x00000008

	)

227 
	#WIFI_AT_AUTO_OFF
 0x00000010

	)

228 
	#WIFI_AT_AUTO_ON
 0x00000020

	)

229 
	#WIFI_AT_BLE_ADV
 0x00000040

	)

230 
	#WIFI_AT_SCONN
 0x00000080

	)

231 
	#WIFI_AT_BLE_OFF
 0x00000100

	)

232 
	#WIFI_AT_DIRECTFOTAMODE
 0x00000200

233 

	)

234 
	#WIFI_AT_FOTA_CHECK
 0x00010000

	)

235 
	#WIFI_AT_SIZE_ERR
 0x00020000

	)

236 
	#WIFI_AT_TYPE_ERR
 0x00040000

	)

237 
	#WIFI_AT_DEVICE_RUN
 0x00080000

	)

238 
	#WIFI_AT_DEVICE_ERR
 0x00100000

	)

241 
	#WIFI_TX_NULL
 0x00000000

	)

242 
	#WIFI_TX_SEND_STOP
 0x00000001

	)

243 
	#WIFI_TX_RESP_RECV
 0x00000002

	)

244 
	#WIFI_TX_RESP_FUNC
 0x00000004

	)

245 
	#WIFI_TX_RESP_SENSOR
 0x00000008

	)

247 
	#WIFI_TX_RESP_ERR
 0x00000010

	)

248 
	#WIFI_TX_RESP_PARA
 0x00000020

	)

249 
	#WIFI_TX_SEND_FUNC
 0x00000040

	)

250 
	#WIFI_TX_SEND_SENSOR
 0x00000080

	)

252 
	#WIFI_TX_SEND_ERR
 0x00000100

	)

253 
	#WIFI_TX_SEND_PARA
 0x00000200

	)

254 
	#WIFI_TX_SELF_ERR
 0x00000400

	)

255 
	#WIFI_TX_EXCEPT_FUNC
 0x00000800

	)

257 
	#WIFI_TX_SEND_PART
 0x00001000

	)

258 
	#WIFI_TX_RESP_PART
 0x00002000

	)

259 
	#WIFI_TX_SEND_EXAMINE
 0x00004000

	)

260 
	#WIFI_TX_SEND_ACCUMULATE
 0x00008000

	)

262 
	#WIFI_TX_RESP_ACCUMULATE
 0x00010000

	)

263 
	#WIFI_TX_RQST_INFO
 0x00020000

	)

264 
	#WIFI_TX_RQST_INFO_USER
 0x00040000

	)

265 
	#WIFI_TX_RQST_INFO_DATA
 0x00080000

	)

266 
	#WIFI_TX_RESP_MNT_DATA_W
 0x00100000

	)

267 
	#WIFI_TX_RESP_MNT_DATA_R
 0x00200000

	)

268 
	#WIFI_TX_SEND_FUNC_CONTROL
 0x00400000

	)

270 
	#WIFI_TX_SEND_BLE_CERT
 0x00800000

	)

274 
CÀ¨WifiAŒSètus
 ( );

275 
WifiOnOffSëtög
 ( );

276 
WifiFa˘‹ySëtög
 ( );

277 
WifiModuÀOnOffSeq
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_UartInterrupt.c

13 
	~"WIFI_Comm⁄.h
"

14 
	~"WIFI_DefU£r.h
"

15 
	~"WIFI_U¨tI¡îru±.h
"

16 
	~"WIFI_Sètus.h
"

17 
	~"WIFI_RxPro˚ss.h
"

21 
	#COUNT_UART_CHECK
 30

	)

25 
	s_wifiu¨t_


27 
U8
 
	mu8TxTimî
;

28 
U8
 
	mu8RxTimî
;

29 
U16
 
	mu16TxLígth
;

30 
U16
 
	mu16RxLígth
;

31 
U16
 
	mu16TxSãp
;

32 
U8
 
	mu8RxFöished
;

33 } 
	tWifiU¨t_T
;

34 
WifiU¨t_T
 
	gWifiU¨t
;

36 
I8
 
	gai8WifiU¨tTxBuff
[
LENGTH_WIFI_ALL_MAX_N
];

37 
I8
 
	gai8WifiU¨tRxBuff
[
LENGTH_WIFI_ALL_MAX_N
];

50 
	$InôülizeWifiU¨t
 ( )

52 
	`_MEMSET_
–(
__FAR
*Ë&
WifiU¨t
, 0, (
WifiU¨t_T
) );

53 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tRxBuff
, '\0', (ai8WifiUartRxBuff) );

54 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tTxBuff
, '\0', (ai8WifiUartTxBuff) );

55 
	}
}

57 
	$I¡WifiU¨tRx
 ( 
U8
 
mu8RxD©a
 )

59 i‡–
	`GëWifiC⁄åﬁSètus
–
STATUS_CON_POWER
 ) !
ON
 )

63 i‡––
WifiU¨t
.
u16RxLígth
 =0 ) && ( 
mu8RxD©a
 !
ASCII_STAR
 ) )

68 
ai8WifiU¨tRxBuff
[
WifiU¨t
.
u16RxLígth
] = (
I8
)
mu8RxD©a
;

70 i‡––
ai8WifiU¨tRxBuff
[
WifiU¨t
.
u16RxLígth
] =
ASCII_ATDONE
 )

71 && ( 
ai8WifiU¨tRxBuff
[
WifiU¨t
.
u16RxLígth
-1] =
ASCII_DONE
 ) )

73 
WifiU¨t
.
u8RxFöished
 = 
SET
;

77 
WifiU¨t
.
u16RxLígth
++;

78 
WifiU¨t
.
u8RxTimî
 = 
COUNT_UART_CHECK
;

81 
	}
}

83 
	$I¡WifiU¨tTx
 ( )

85 i‡–
WifiU¨t
.
u16TxLígth
 == 0 )

90 
R_TXD
 = (
U8
)
ai8WifiU¨tTxBuff
[ 
WifiU¨t
.
u16TxSãp
 ];

91 
WifiU¨t
.
u16TxSãp
++;

92 if–
WifiU¨t
.
u16TxSãp
 >WifiU¨t.
u16TxLígth
 )

94 
WifiU¨t
.
u16TxLígth
 = 0U;

95 
WifiU¨t
.
u16TxSãp
 = 0U;

96 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tTxBuff
, '\0', (ai8WifiUartTxBuff) );

98 
	}
}

100 
	$SídWifiU¨t
 ( 
U16
 
mu16PackëLígth
, 
I8
* 
mai8WifiTxFöÆD©a
 )

102 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tTxBuff
, '\0', (ai8WifiUartTxBuff) );

103 
	`Ár_•rötf_s
–
ai8WifiU¨tTxBuff
, 0, 
mai8WifiTxFöÆD©a
 );

104 
WifiU¨t
.
u16TxLígth
 = 
mu16PackëLígth
;

105 
WifiU¨t
.
u8TxTimî
 = 
COUNT_UART_CHECK
;

106 
WifiU¨t
.
u16TxSãp
 = 0U;

107 
R_STIF
 = 
SET
;

108 
	}
}

110 
	$Re˚iveWifiU¨t
 ( )

112 i‡–
WifiU¨t
.
u8RxFöished
 =
SET
 )

114 
	`GëWifiU¨tRxD©a
–
ai8WifiU¨tRxBuff
 );

115 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tRxBuff
, '\0', (ai8WifiUartRxBuff) );

116 
WifiU¨t
.
u16RxLígth
 = 0U;

117 
WifiU¨t
.
u8RxTimî
 = 0U;

118 
WifiU¨t
.
u8RxFöished
 = 
CLEAR
;

122 i‡–
WifiU¨t
.
u16RxLígth
 >
LENGTH_WIFI_ALL_MAX_N
 )

124 
WifiU¨t
.
u16RxLígth
 = 0U;

125 
WifiU¨t
.
u8RxTimî
 = 0U;

126 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tRxBuff
, '\0', (ai8WifiUartRxBuff) );

129 
	}
}

131 
	$WifiU¨tRxTimî
 ( )

133 i‡–
WifiU¨t
.
u16RxLígth
 != 0 )

135 i‡–
WifiU¨t
.
u8RxTimî
 != 0 )

137 
WifiU¨t
.
u8RxTimî
--;

139 i‡–
WifiU¨t
.
u8RxTimî
 == 0 )

141 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tRxBuff
, '\0', (ai8WifiUartRxBuff) );

142 
WifiU¨t
.
u16RxLígth
 = 0U;

143 
WifiU¨t
.
u8RxTimî
 = 0U;

149 
WifiU¨t
.
u8RxTimî
 = 0U;

151 
	}
}

153 
	$WifiU¨tTxTimî
 ( )

155 i‡–
WifiU¨t
.
u16TxLígth
 != 0 )

157 i‡–
WifiU¨t
.
u8TxTimî
 != 0 )

159 
WifiU¨t
.
u8TxTimî
--;

161 i‡–
WifiU¨t
.
u8TxTimî
 == 0 )

163 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiU¨tTxBuff
, '\0', (ai8WifiUartTxBuff) );

164 
	`SëWifiTxSètus
–
STATUS_TX_SEQ
, 
WIFI_TX_SEQ_NULL
 );

167 i‡–
	`GëWifiTxSètus
(
STATUS_TX_SEQ
Ë=
WIFI_TX_SEQ_NULL
 )

169 
WifiU¨t
.
u8TxTimî
 = 0U;

171 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_UartInterrupt.h

2 #i‚de‡
_WIFI_UART_H_


3 
	#_WIFI_UART_H_


	)

6 
InôülizeWifiU¨t
 ( );

9 
I¡WifiU¨tRx
 ( 
U8
 
mu8RxD©a
 );

12 
I¡WifiU¨tTx
 ( );

15 
SídWifiU¨t
 ( 
U16
 
mu16PackëLígth
, 
I8
* 
mai8WifiTxFöÆD©a
 );

16 
Re˚iveWifiU¨t
 ( );

19 
WifiU¨tRxTimî
 ( );

22 
WifiU¨tTxTimî
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_Fota.c

12 
	~"WIFI_Comm⁄.h
"

13 
	~"WIFI_DefU£r.h
"

14 
	~"WIFI_FŸa.h
"

15 
	~"WIFI_Sètus.h
"

16 
	~"WIFI_U£rI¡îÁ˚.h
"

20 #i‚de‡
FOTA_SIZE_256K


21 
	#LENGTH_SIZE_CHECK
 3

22 
	#LENGTH_FOTA_SIZE
 25

24 #ifde‡
FOTA_SIZE_256K


	)

25 
	#LENGTH_SIZE_CHECK
 4

26 
	#LENGTH_FOTA_SIZE
 26

28 
	#LENGTH_TYPE_CHECK
 6

29 
	#POSITION_FOTA_SIZE
 20

30 
	#POSITION_FOTA_TYPE
 33

31 
	#W_FOTA_ERROR_CNT
 5

	)

35 
	s_wififŸa_


37 
U8
 
	mu8RëryCou¡
;

38 
U8
 
	mu8Eº‹Cou¡
;

39 } 
	tWifiFŸa_T
;

40 
WifiFŸa_T
 
	gWifiFŸa
;

42 
I8
 
	gai8Produ˘Code
[
LENGTH_MODEL_TYPE
+1];

47 
DoR•s
 ( );

48 
DoRódy
 ( );

49 
DoRun
 ( );

51 
U8
 
IsFŸaSizeOk
 ( U8 
mLí
, 
I8
* 
pSize
 );

52 
DoSizeOk
 ( );

53 
Sam∂ögTy≥
 ( );

54 
U8
 
IsFŸaTy≥Ok
 ( 
I8
* 
pTy≥
 );

55 
DoTy≥Ok
 ( );

59 (*
	tWifiFŸaFun_T
)( );

60 
	s_wifi_fŸa_li°_


62 
U8
 
Id
;

63 
U32
 
Tx
;

64 
WifiFŸaFun_T
 
Func
;

65 
U8
 
Sãp
;

66 } 
	tWifiFŸaLi°_T
;

69 
	`RunFŸaD©a
 ( c⁄° 
WifiFŸaLi°_T
 *
pLi°
 );

71 c⁄° 
WifiFŸaLi°_T
 
WifiFŸaLi°
[] =

73 { 
FOTA_NULL
, 
WIFI_TX_NULL
, 
NULL
, FOTA_NULL },

74 { 
FOTA_RESPONSE
, 
WIFI_AT_FOTA_CHECK
, 
DoR•s
, 
FOTA_NULL
 },

75 { 
FOTA_CHECK
, 
WIFI_TX_NULL
, 
DoRódy
, 
FOTA_DISCONNECT
 },

76 { 
FOTA_DISCONNECT
, 
WIFI_AT_AUTO_OFF
, 
DoRódy
, 
FOTA_WAIT
 },

77 { 
FOTA_WAIT
, 
WIFI_AT_AUTO_OFF
, 
NULL
, 
FOTA_NULL
 },

78 { 
FOTA_START
, 
WIFI_TX_NULL
, 
NULL
, 
FOTA_RUN
 },

79 { 
FOTA_RUN
, 
WIFI_TX_NULL
, 
DoRun
, 
FOTA_NULL
 }

80 
	}
};

82 
	#SZ_FOTA_LIST
 ( (
WifiFŸaLi°
Ë/ (
WifiFŸaLi°_T
Ë)

	)

86 
	$InôülizeWifiFŸa
 ( )

88 
	`_MEMSET_
–(
__FAR
*Ë&
WifiFŸa
, 0, (
WifiFŸa_T
) );

89 
	`_MEMSET_
–(
__FAR
*Ë
ai8Produ˘Code
, '\0', (ai8ProductCode) );

90 
	}
}

92 
	$WifiFŸaPro˚ss
 ( )

94 c⁄° 
WifiFŸaLi°_T
 *
pLi°
 = 
NULL
;

95 
U8
 
i
 = 0U;

96 
U8
 
mFŸa
 = 0U;

98 
mFŸa
 = 
	`GëWifiFŸaSètus
–
STATUS_FOTA_SEQ
 );

99 
pLi°
 = 
WifiFŸaLi°
;

100  
i
 = 0 ; i < 
SZ_FOTA_LIST
; i++ )

102 i‡–
mFŸa
 =(
pLi°
+
i
)->
Id
 )

104 
	`RunFŸaD©a
–
pLi°
+
i
 );

108 
	}
}

110 
	$WifiCheckFŸaSize
 ( 
I8
* 
mi8FŸaD©a
 )

112 
I8
 
mD©a
[
LENGTH_SIZE_CHECK
+1];

113 
U8
 
i
 = 0U;

114 
U8
 
mSize
 = 0U;

116 
	`_MEMSET_
–(
__FAR
*Ë
mD©a
, '\0', (mData) );

119 
mSize
 = (
U8
)–
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
mi8FŸaD©a
 ) );

120  
i
 = 0; i < 
LENGTH_SIZE_CHECK
; i++ )

122 
mD©a
[
i
] = 
mi8FŸaD©a
[
POSITION_FOTA_SIZE
+i];

126 i‡–
	`IsFŸaSizeOk
–
mSize
, 
mD©a
 ) !
TRUE
 )

132 
	`DoSizeOk
();

133 
	}
}

135 
	$WifiCheckFŸaTy≥
 ( 
I8
* 
mi8FŸaD©a
 )

137 
I8
 
mD©a
[
LENGTH_TYPE_CHECK
+1];

138 
U8
 
i
 = 0U;

140 
	`_MEMSET_
–(
__FAR
*)
mD©a
, '\0', (mData) );

143  
i
 = 0; i < 
LENGTH_TYPE_CHECK
; i++)

145 
mD©a
[
i
] = 
mi8FŸaD©a
[
POSITION_FOTA_TYPE
+i];

147 
	`Sam∂ögTy≥
();

150 i‡–
	`IsFŸaTy≥Ok
–
mD©a
 ) !
TRUE
 )

156 
	`DoTy≥Ok
();

157 
	}
}

161 
	$RunFŸaD©a
 ( c⁄° 
WifiFŸaLi°_T
 *
pLi°
 )

163 
WifiFŸaFun_T
 
pFun
;

164 
U32
 
mTx
 = 0UL;

165 
U8
 
mSãp
 = 0U;

167 
pFun
 = 
pLi°
->
Func
;

168 
mTx
 = 
pLi°
->
Tx
;

169 
mSãp
 = 
pLi°
->
Sãp
;

171 i‡–
mTx
 !
WIFI_TX_NULL
 )

173 
	`SëWifiSídSètus
–
TX_ATCMD
, 
mTx
 );

176 i‡–
pFun
 !
NULL
 )

178 
	`pFun
();

181 i‡–
mSãp
 !
FOTA_NULL
 )

183 
	`SëWifiFŸaSètus
–
STATUS_FOTA_SEQ
, 
mSãp
 );

185 
	}
}

187 
	$DoR•s
 ( )

189 
WifiFŸa
.
u8Eº‹Cou¡
++;

190 i‡–
WifiFŸa
.
u8Eº‹Cou¡
 >
W_FOTA_ERROR_CNT
 )

192 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_TYPE_ERR
 );

193 
	`SëWifiFŸaSètus
–
STATUS_FOTA_SEQ
, 
FOTA_NULL
 );

194 
WifiFŸa
.
u8Eº‹Cou¡
 = 
CLEAR
;

196 
	}
}

198 
	$DoRódy
 ( )

200 
	`SëU£rDi•œy
–
USER_DISPLAY_FOTA
 );

201 
	}
}

203 
	$DoRun
 ( )

205 
	`SèπFŸaO≥øti⁄
();

206 
	}
}

208 
U8
 
	$IsFŸaSizeOk
 ( 
U8
 
mLí
, 
I8
* 
pSize
 )

210 i‡–
mLí
 !
LENGTH_FOTA_SIZE
 )

212 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_SIZE_ERR
 );

213  
FALSE
;

215 i‡–
	`GëU£rI¡îÁ˚
–
USER_FOTA_POSSIBLE_STATUS
 ) !
TRUE
 )

217 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_DEVICE_RUN
 );

218  
FALSE
;

220 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë
FOTA_SIZE
, (c⁄° __FAR*Ë
pSize
, 
LENGTH_SIZE_CHECK
 ) !
N_TRUE
 )

222 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_SIZE_ERR
 );

223  
FALSE
;

225  
TRUE
;

226 
	}
}

228 
	$DoSizeOk
 ( )

230 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_FOTA_CHECK
 );

231 
	`SëWifiFŸaSètus
–
STATUS_FOTA_SEQ
, 
FOTA_RESPONSE
 );

232 
	}
}

234 
	$Sam∂ögTy≥
 ( )

236 i‡–
	`GëU£rI¡îÁ˚
–
USER_MODEL_TYPE
 ) =
USER_MODEL_CHP
 )

238 
	`_STRCPY_
–(
__FAR
*Ë
ai8Produ˘Code
, (c⁄° __FAR*Ë
FOTA_TYPE_CHP
 );

240 i‡–
	`GëU£rI¡îÁ˚
–
USER_MODEL_TYPE
 ) =
USER_MODEL_CP
 )

242 
	`_STRCPY_
–(
__FAR
*Ë
ai8Produ˘Code
, (c⁄° __FAR*Ë
FOTA_TYPE_CP
 );

244 i‡–
	`GëU£rI¡îÁ˚
–
USER_MODEL_TYPE
 ) =
USER_MODEL_HP
 )

246 
	`_STRCPY_
–(
__FAR
*Ë
ai8Produ˘Code
, (c⁄° __FAR*Ë
FOTA_TYPE_HP
 );

252 
	}
}

254 
U8
 
	$IsFŸaTy≥Ok
 ( 
I8
* 
pTy≥
 )

256 if–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë
ai8Produ˘Code
, (c⁄° __FAR*Ë
pTy≥
, 
LENGTH_TYPE_CHECK
 ) =
N_TRUE
 )

258  
TRUE
;

261 
WifiFŸa
.
u8RëryCou¡
++;

262 i‡–
WifiFŸa
.
u8RëryCou¡
 >
W_FOTA_ERROR_CNT
 )

264 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_TYPE_ERR
 );

265 
	`SëWifiFŸaSètus
–
STATUS_FOTA_SEQ
, 
FOTA_NULL
 );

266 
WifiFŸa
.
u8RëryCou¡
 = 
CLEAR
;

270 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_FOTA_CHECK
 );

272  
FALSE
;

273 
	}
}

275 
	$DoTy≥Ok
 ( )

277 
	`SëWifiSídSètus
–
TX_DATA
, 
WIFI_TX_SEND_STOP
 );

278 
	`SëWifiFŸaSètus
–
STATUS_FOTA_SEQ
, 
FOTA_CHECK
 );

279 
WifiFŸa
.
u8RëryCou¡
 = 
CLEAR
;

280 
WifiFŸa
.
u8Eº‹Cou¡
 = 
CLEAR
;

281 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_Fota.h

2 #i‚de‡
_WIFI_FŸa_H_


3 
	#_WIFI_FŸa_H_


	)

16 
InôülizeWifiFŸa
 ( );

18 
WifiFŸaPro˚ss
 ( );

20 
WifiCheckFŸaSize
 ( 
I8
* 
mi8FŸaD©a
 );

21 
WifiCheckFŸaTy≥
 ( 
I8
* 
mi8FŸaD©a
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxProcess.c

13 
	~"WIFI_Comm⁄.h
"

14 
	~"WIFI_DefU£r.h
"

15 
	~"WIFI_RxPro˚ss.h
"

16 
	~"WIFI_Inôülize.h
"

17 
	~"WIFI_RxSîvî.h
"

18 
	~"WIFI_FŸa.h
"

19 
	~"WIFI_Sètus.h
"

20 
	~"WIFI_U£rI¡îÁ˚.h
"

24 
	#COUNT_CONNECT_MODULE
 3000

25 

	)

29 
WifiRx_T
 
	gWifiRx
;

34 
I8
 
	gai8WifiRxD©a
[
LENGTH_WIFI_ALL_MAX_N
];

35 
I8
 
	gai8WifiRxBuff
[
LENGTH_WIFI_ALL_MAX_N
];

40 c⁄° sig√d 
	gAT_RX_DEVICE_READY
[] = "*ICT*DEVICEREADY";

41 c⁄° sig√d 
	gAT_RX_AWS_SET
[] = "*ICT*AWS_SET:OK";

42 c⁄° sig√d 
	gAT_RX_AUTO_CON
[] = "*ICT*AUCONMODE:OK";

43 c⁄° sig√d 
	gAT_RX_BLE_ADV
[] = "*ICT*BLE_ADV:OK";

44 c⁄° sig√d 
	gAT_RX_SMODE_OK
[] = "*ICT*SMODE:OK";

45 c⁄° sig√d 
	gAT_RX_AP_START
[] = "*ICT*AP_STARTED:OK";

46 c⁄° sig√d 
	gAT_RX_AP_BLE
[] = "*ICT*BLE_STATE:2";

47 c⁄° sig√d 
	gAT_RX_BLE_OFF
[] = "*ICT*BLE_STATE:0";

49 c⁄° sig√d 
	gAT_RX_PAIRING
[] = "*ICT*PAIRING";

50 c⁄° sig√d 
	gAT_RX_AUTHENTICATE
[] = "*ICT*AWS_IND:AUTHENTICATE OK";

51 c⁄° sig√d 
	gAT_RX_CERTIFICATE
[] = "*ICT*AWS_IND:CERTIFICATE OK";

52 c⁄° sig√d 
	gAT_RX_PRIVATE
[] = "*ICT*AWS_IND:PRIVATE_KEY OK";

54 c⁄° sig√d 
	gAT_RX_ASSOCIATED0
[] = "*ICT*ASSOCIATED:0";

55 c⁄° sig√d 
	gAT_RX_IPALLOCATED
[] = "*ICT*IPALLOCATED";

56 c⁄° sig√d 
	gAT_RX_ASSOCIATED1
[] = "*ICT*ASSOCIATED:1";

57 c⁄° sig√d 
	gAT_RX_ASSOCIATED2
[] = "*ICT*ASSOCIATED:2";

58 c⁄° sig√d 
	gAT_RX_ASSOCIATED3
[] = "*ICT*ASSOCIATED:3";

59 c⁄° sig√d 
	gAT_RX_ASSOCIATED4
[] = "*ICT*ASSOCIATED:4";

61 c⁄° sig√d 
	gAT_RX_DISASSOCIATED
[] = "*ICT*DISASSOCIATED";

62 c⁄° sig√d 
	gAT_RX_DISCONNECTED
[] = "*ICT*AWS_IND:DISCONNECTED";

63 c⁄° sig√d 
	gAT_RX_SERVER_ERROR
[]= "*ICT*AWS_IND:MQTT ERROR 201";

65 c⁄° sig√d 
	gAT_RX_CONNECTED
[] = "*ICT*AWS_IND:CONNECT OK";

66 c⁄° sig√d 
	gAT_RX_SEND
[] = "*ICT*AWS_IND:SEND OK";

67 c⁄° sig√d 
	gAT_RX_RECV
[] = "*ICT*AWS_RECV";

68 c⁄° sig√d 
	gAT_RX_BLE_RECV
[] = "*ICT*BLE_RECV";

69 c⁄° sig√d 
	gAT_RX_BLE_SEND
[] = "*ICT*BLE_SEND:OK";

71 c⁄° sig√d 
	gAT_RX_OTA_START
[] = "*ICT*OTA_SEND_START=";

72 c⁄° sig√d 
	gAT_RX_OTA_DATA
[] = "*ICT*OTA_SEND_DATA=0000";

73 c⁄° sig√d 
	gAT_RX_FOTA_RESET
[] = "*ICT*WIFI_FOTA_RESET";

78 
U8
 
RxRódy
 ( );

79 
U8
 
RxAutoOn
 ( );

80 
U8
 
RxSmodeOK
 ( );

81 
U8
 
RxAutoAck
 ( );

82 
U8
 
RxBÀAdvAck
 ( );

83 
U8
 
RxApEºCÀ¨
 ( );

85 
U8
 
RxModemOk
 ( );

86 
U8
 
RxFa˘‹y
 ( );

87 
U8
 
RxDis˙t
 ( );

88 
U8
 
RxC¡
 ( );

90 
U8
 
RxSíd
 ( );

91 
U8
 
RxRecv
 ( );

92 
U8
 
RxBLERecv
 ( );

93 
U8
 
RxBLESíd
 ( );

95 
U8
 
RxFŸaSize
 ( );

96 
U8
 
RxFŸaTy≥
 ( );

97 
U8
 
RxFŸaModuÀ
 ( );

101 
U8
 
IsRxPossibÀ
 ( );

102 
DoC⁄√˘
 ( 
U8
 
mVÆ
 );

121 
RunRxD©a
 ( c⁄° 
WifiRxAtLi°_T
 *
pLi°
, 
U8
 
mSoundSë
 );

124 c⁄° 
WifiRxAtLi°_T
 
	gWifiRxAtLi°
[] =

126 { 
AT_RX_DEVICE_READY
, 
WIFI_DISP_TRY
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
WIFI_AP_STEP_CLEAR
, WIFI_NULL, WIFI_NULL, 
RxRódy
 },

127 { 
AT_RX_AWS_SET
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxAutoOn
 },

128 { 
AT_RX_SMODE_OK
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxSmodeOK
 },

129 { 
AT_RX_AUTO_CON
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxAutoAck
 },

130 { 
AT_RX_BLE_ADV
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxBÀAdvAck
 },

131 { 
AT_RX_AP_START
, 
WIFI_DISP_APMODE
, 
WIFI_NULL
, 
SET
, WIFI_NULL, 
WIFI_AP_STEP_WAIT
, WIFI_NULL, 
WIFI_BUZZER_AP_CONNECT
, 
RxApEºCÀ¨
},

132 { 
AT_RX_AP_BLE
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
SET
, 
WIFI_AP_STEP_WAIT
, WIFI_NULL, 
WIFI_BUZZER_BLE_CONNECT
, 
RxApEºCÀ¨
},

133 { 
AT_RX_BLE_OFF
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
CLEAR
, 
WIFI_AP_STEP_CLEAR
, WIFI_NULL, WIFI_NULL, 
NULL
 },

135 { 
AT_RX_PAIRING
, 
WIFI_DISP_APMODE
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
WIFI_AP_STEP_START
, WIFI_NULL, 
WIFI_BUZZER_SELECT
, 
NULL
 },

136 { 
AT_RX_AUTHENTICATE
, 
WIFI_DISP_APMODE
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
WIFI_AP_STEP_ROOTCA
, WIFI_NULL, 
WIFI_BUZZER_SELECT
, 
NULL
 },

137 { 
AT_RX_CERTIFICATE
, 
WIFI_DISP_APMODE
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
WIFI_AP_STEP_ROOTCA
, WIFI_NULL, 
WIFI_BUZZER_SELECT
, 
NULL
 },

138 { 
AT_RX_PRIVATE
, 
WIFI_DISP_APMODE
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
WIFI_AP_STEP_ROOTCA
, WIFI_NULL, 
WIFI_BUZZER_SELECT
, 
NULL
 },

140 { 
AT_RX_ASSOCIATED0
, 
WIFI_DISP_TRY
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
CLEAR
, 
WIFI_BUZZER_SELECT
, 
RxModemOk
 },

141 { 
AT_RX_IPALLOCATED
, 
WIFI_DISP_TRY
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
WIFI_BUZZER_SERVER_CONNECT
, 
RxFa˘‹y
 },

142 { 
AT_RX_ASSOCIATED1
, 
WIFI_DISP_AP1
, WIFI_DISP_AP1, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
NULL
 },

143 { 
AT_RX_ASSOCIATED2
, 
WIFI_DISP_AP2
, WIFI_DISP_AP2, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
NULL
 },

144 { 
AT_RX_ASSOCIATED3
, 
WIFI_DISP_AP3
, WIFI_DISP_AP3, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
NULL
 },

145 { 
AT_RX_ASSOCIATED4
, 
WIFI_DISP_AP4
, WIFI_DISP_AP4, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
NULL
 },

147 { 
AT_RX_DISASSOCIATED
,
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
NULL
 },

148 { 
AT_RX_DISCONNECTED
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
RxDis˙t
 },

149 { 
AT_RX_SERVER_ERROR
, 
WIFI_DISP_AP5
, WIFI_DISP_AP5, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
NULL
 },

151 { 
AT_RX_CONNECTED
, 
WIFI_DISP_CONNECT
, 
WIFI_DISP_OFF
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, 
SET
, 
WIFI_BUZZER_SERVER_CONNECT
, 
RxC¡
 },

152 { 
AT_RX_SEND
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxSíd
 },

153 { 
AT_RX_RECV
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxRecv
 },

154 { 
AT_RX_BLE_RECV
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxBLERecv
 },

155 { 
AT_RX_BLE_SEND
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxBLESíd
 },

157 { 
AT_RX_OTA_START
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxFŸaSize
 },

158 { 
AT_RX_OTA_DATA
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
RxFŸaTy≥
 },

159 { 
AT_RX_FOTA_RESET
, 
WIFI_DISP_TRY
, 
WIFI_NULL
, WIFI_NULL, WIFI_NULL, WIFI_NULL, 
CLEAR
, WIFI_NULL, 
RxFŸaModuÀ
}

161 
	#SZ_RX_CMD_LIST
 ( (
WifiRxAtLi°
Ë/ (
WifiRxAtLi°_T
Ë)

	)

165 
	$InôülizeWifiRxPro˚ss
 ( )

167 
	`_MEMSET_
–(
__FAR
*Ë&
WifiRx
, 0, –
WifiRx_T
 ) );

168 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiRxD©a
, '\0', (ái8WifiRxData ) );

169 
	`_MEMSET_
–(
__FAR
*)
ai8WifiRxBuff
, '\0', (ái8WifiRxBuff ) );

170 
	}
}

172 
	$CÀ¨RxSètus
 ( )

174 
WifiRx
.
u8CheckModem
 = 
CLEAR
;

175 
WifiRx
.
u8CheckSîvî
 = 
CLEAR
;

176 
WifiRx
.
u16C⁄√˘CheckCou¡
 = 
CLEAR
;

177 
WifiRx
.
u8C⁄√˘Check
 = 
CLEAR
;

178 
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 = 
CLEAR
;

179 
	}
}

181 
	$GëWifiU¨tRxD©a
 ( 
I8
* 
mai8U¨tD©a
 )

183 i‡–
WifiRx
.
u8Sèã
 =
SET
 )

185 
	`_STRCPY_
–(
__FAR
*Ë
ai8WifiRxBuff
, (c⁄° __FAR*Ë
mai8U¨tD©a
 );

186 
WifiRx
.
u8Waô
 = 
SET
;

190 
	`_STRCPY_
–(
__FAR
*Ë
ai8WifiRxD©a
, (c⁄° __FAR*Ë
mai8U¨tD©a
 );

191 
WifiRx
.
u8Sèã
 = 
SET
;

193 
	}
}

195 
	$WifiRxD©aPro˚ss
 ( )

197 c⁄° 
WifiRxAtLi°_T
 *
pLi°
 = 
NULL
;

198 
U8
 
i
 = 0U;

199 
U8
 
mSound
 = 
TRUE
;

202 i‡–
	`IsRxPossibÀ
(Ë!
TRUE
 )

208 
pLi°
 = 
WifiRxAtLi°
;

209  
i
 = 0 ; i < 
SZ_RX_CMD_LIST
; i++ )

211 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë(
pLi°
+
i
)->
Id
, (c⁄° __FAR*Ë
ai8WifiRxD©a
, 
	`_STRLEN_
–(c⁄° __FAR*Ë’Li°+i)->IdËË=
N_TRUE
 )

213 
WifiRxAtFun_T
 
pFun
;

215 
pFun
 = (
pLi°
+
i
)->
Func
;

217 i‡–
pFun
 !
NULL
 )

219 
mSound
 = 
	`pFun
();

221 
	`RunRxD©a
–
pLi°
+
i
, 
mSound
 );

225 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiRxD©a
, '\0', (ái8WifiRxData ) );

227 
WifiRx
.
u16C⁄√˘CheckCou¡
 = 
CLEAR
;

228 
WifiRx
.
u8C⁄√˘Check
 = 
SET
;

229 
WifiRx
.
u8Sèã
 = 
CLEAR
;

231 
	}
}

249 
U8
 
	$IsRxPossibÀ
 ( )

251 i‡–
WifiRx
.
u8Sèã
 =
CLEAR
 )

253 i‡–
WifiRx
.
u8Waô
 =
SET
 )

255 
	`_STRCPY_
–(
__FAR
*Ë
ai8WifiRxD©a
, (c⁄° __FAR*Ë
ai8WifiRxBuff
 );

256 
	`_MEMSET_
–(
__FAR
*Ë
ai8WifiRxBuff
, '\0', (ái8WifiRxBuff ) );

257 
WifiRx
.
u8Waô
 = 
CLEAR
;

258 
WifiRx
.
u8Sèã
 = 
SET
;

262  
FALSE
;

265  
TRUE
;

266 
	}
}

268 
	#W_DISPLAY_CONFIRM_COUNT
 2

	)

269 
	$RunRxD©a
 ( c⁄° 
WifiRxAtLi°_T
 *
pLi°
, 
U8
 
mSoundSë
 )

273 i‡–
pLi°
->
Di•
 !
WIFI_NULL
 )

275 i‡––
pLi°
->
Di•
 >
WIFI_DISP_AP1
 ) && (ÖLi°->Di• <
WIFI_DISP_AP5
 ) )

277 i‡((
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 =
CLEAR
)

278 && (–
	`GëWifiApSètus
(
STATUS_AP_WIFI
Ë=
CLEAR
 ) && (GëWifiApSètus(
STATUS_AP_BLE
) == CLEAR )))

280 
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 = 
SET
;

285 
	`SëWifiIndiˇãSètus
–
STATUS_DISPLAY
, 
pLi°
->
Di•
 );

288 i‡–
pLi°
->
Eº
 !
WIFI_NULL
 )

290 
	`SëWifiIndiˇãSètus
–
STATUS_ERROR
, 
pLi°
->
Eº
 );

291 i‡–
	`GëWifiIndiˇãSètus
–
STATUS_PARING
 ) > 
WIFI_AP_STEP_WAIT
 )

293 
	`SëWifiIndiˇãSètus
–
STATUS_AP_ERROR
, 
pLi°
->
Eº
 );

296 i‡–
pLi°
->
ApWifi
 !
WIFI_NULL
 )

298 
	`SëWifiApSètus
–
STATUS_AP_WIFI
, 
pLi°
->
ApWifi
 );

300 i‡–
pLi°
->
ApBÀ
 !
WIFI_NULL
 )

302 i‡((
	`GëWifiIndiˇãSètus
–
STATUS_PARING
 ) =
WIFI_AP_STEP_ROOTCA
)

303 && (
	`GëWifiApSètus
–
STATUS_AP_FIRST
 ) =
CLEAR
 )

304 && (
pLi°
->
ApBÀ
 =
CLEAR
)

310 
	`SëWifiApSètus
–
STATUS_AP_BLE
, 
pLi°
->
ApBÀ
 );

313 i‡–
pLi°
->
ApSãp
 !
WIFI_NULL
 )

315 i‡((
	`GëWifiIndiˇãSètus
–
STATUS_PARING
 ) =
WIFI_AP_STEP_ROOTCA
)

316 && (
	`GëWifiApSètus
–
STATUS_AP_FIRST
 ) =
CLEAR
 )

317 && (
pLi°
->
ApSãp
 =
WIFI_AP_STEP_CLEAR
)

323 
	`SëWifiIndiˇãSètus
–
STATUS_PARING
, 
pLi°
->
ApSãp
 );

326 i‡–
pLi°
->
C⁄√˘
 !
WIFI_NULL
 )

328 
	`DoC⁄√˘
–
pLi°
->
C⁄√˘
 );

330 i‡––
pLi°
->
Sound
 !
WIFI_NULL
 ) && ( 
mSoundSë
 =
TRUE
 ) )

332 
	`SëWifiBuzzSound
–
pLi°
->
Sound
 );

334 
	}
}

336 
	$DoC⁄√˘
 ( 
U8
 
mVÆ
 )

341 i‡–
mVÆ
 =
SET
 )

343 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
INI_SEQ_SERVER_CONNECT
 );

344 
	`SëWifiSîvîSètus
–
STATUS_SVR_CONNECT
, 
SET
 );

348 
	`SëWifiSîvîSètus
–
STATUS_SVR_CONNECT
, 
CLEAR
 );

349 
	`SëWifiIniSètus
–
STATUS_INI_FINISH
, 
CLEAR
 );

350 
	`SëWifiIniSètus
–
STATUS_INI_SEQ
, 
INI_SEQ_NULL
 );

351 
	`SëWifiIniSètus
–
STATUS_INI_INFO
, 
CLEAR
 );

353 
	}
}

355 
U8
 
	$RxRódy
 ( )

358 
	`SëWifiC⁄åﬁSètus
–
STATUS_CON_READY
, 
ON
 );

360 i‡–
	`GëWifiFŸaSètus
–
STATUS_FOTA_MODULE
 ) =
SET
 )

362 
	`SëWifiFŸaSètus
–
STATUS_FOTA_MODULE
, 
CLEAR
 );

363 
	`WifiWrôeEï
–
EEPROM_ADDR_FOTA_MODULE
, 
CLEAR
 );

366 i‡–
	`GëU£rI¡îÁ˚
–
USER_FACTORY_STATUS
 ) =
SET
 )

368 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_TESTMODE
 );

372 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_VERSION
 );

374 #i‡–
TEST_WIFI_PJT
 == 1 )

375 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_SCONN
 );

377  
FALSE
;

378 
	}
}

380 
U8
 
	$RxAutoOn
 ( )

382 i‡–
	`GëU£rI¡îÁ˚
–
USER_FACTORY_DIRECTFOTA_STATUS
 ) =
SET
 )

384 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_DIRECTFOTAMODE
 );

388 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_AUTO_ON
 );

390  
FALSE
;

391 
	}
}

393 
U8
 
	$RxSmodeOK
 ( )

395 
	`SëWifiIndiˇãSètus
–
STATUS_FACTORY_RXTX
, 
SET
 );

396  
FALSE
;

397 
	}
}

399 
U8
 
	$RxAutoAck
 ( )

402 i‡–
	`GëWifiFŸaSètus
–
STATUS_FOTA_SEQ
 ) =
FOTA_WAIT
 )

404 
	`SëWifiFŸaSètus
–
STATUS_FOTA_SEQ
, 
FOTA_START
 );

408 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_BLE_ADV
 );

410  
FALSE
;

411 
	}
}

413 
U8
 
	$RxBÀAdvAck
 ( )

415 i‡–
	`GëWifiApSètus
–
STATUS_AP_BLE
 ) =
START
 )

417 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_BLE_AP
 );

419  
FALSE
;

420 
	}
}

422 
U8
 
	$RxApEºCÀ¨
 ( )

424 
	`SëWifiIndiˇãSètus
–
STATUS_AP_ERROR
, 
WIFI_DISP_OFF
 );

425 
	`SëWifiApSètus
(
STATUS_AP_BLE_CERT
,
CLEAR
);

426 
	`SëWifiCîtResu…
(
RESULT_CERT_NOTUSED
);

427 if(
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 =
DONE
)

429  
FALSE
;

431  
TRUE
;

432 
	}
}

434 
U8
 
	$RxModemOk
 ( )

437 i‡(–
	`GëWifiIndiˇãSètus
–
STATUS_PARING
 ) >
WIFI_AP_STEP_START
 ) && ( GëWifiIndiˇãSètus–STATUS_PARING ) < 
WIFI_AP_STEP_ROOTCA
 ))

439 
	`WifiWrôeEï
–
EEPROM_ADDR_WIFI_POWER
, 
SET
 );

440 
	`SëWifiIndiˇãSètus
–
STATUS_PARING
, 
WIFI_AP_STEP_MODEM
 );

441 
WifiRx
.
u8CheckModem
 = 
CLEAR
;

444 i‡–
WifiRx
.
u8CheckModem
 !
SET
 )

446 
WifiRx
.
u8CheckModem
 = 
SET
;

447 i‡–
	`GëWifiFŸaSètus
–
STATUS_FOTA_MCU
 ) =
CLEAR
 )

449  
TRUE
;

452  
FALSE
;

453 
	}
}

455 
U8
 
	$RxFa˘‹y
 ( )

458 i‡(
	`GëWifiIndiˇãSètus
(
STATUS_FACTORY_RXTX
Ë=
SET
)

460 
	`SëWifiIndiˇãSètus
–
STATUS_FACTORY
, 
SET
 );

462 i‡(–
	`GëU£rI¡îÁ˚
–
USER_FACTORY_STATUS
 ) =
SET
))

464  
TRUE
;

466  
FALSE
;

467 
	}
}

469 
U8
 
	$RxDis˙t
 ( )

471 i‡–
	`GëWifiSîvîSètus
–
STATUS_SVR_END
 ) =
SET
 )

473 
	`HAL_SëWifiOnOff
–
OFF
 );

475 i‡–
	`GëWifiApSètus
–
STATUS_AP_WIFI
 ) =
WAIT
 )

477 
	`SëWifiIndiˇãSètus
–
STATUS_DISPLAY
, 
WIFI_DISP_TRY
 );

478 
	`SëWifiApSètus
–
STATUS_AP_WIFI
, 
RESET
 );

481 i‡–
	`GëWifiFŸaSètus
–
STATUS_FOTA_SEQ
 ) =
FOTA_DISCONNECT
 )

483 
	`SëWifiFŸaSètus
–
STATUS_FOTA_SEQ
, 
FOTA_WAIT
 );

484 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_AUTO_OFF
 );

488  
FALSE
;

489 
	}
}

491 
U8
 
	$RxC¡
()

493 
U8
 
mu8ApCheck
 = 0U;

495 i‡(
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 =
DONE
)

497 
	`SëWifiSídSètus
–
TX_ATCMD
, 
WIFI_AT_BLE_OFF
 );

498 
	`SëWifiIndiˇãSètus
–
STATUS_PARING
, 
WIFI_AP_STEP_CLEAR
 );

500 
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 = 
CLEAR
;

501 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
WIFIDATA
);

503 i‡(
	`WifiRódEï
(
EEPROM_ADDR_WIFI_POWER
Ë!
SET
)

505 
	`WifiWrôeEï
–
EEPROM_ADDR_WIFI_POWER
, 
SET
 );

507 i‡–
	`GëWifiApSètus
–
STATUS_AP_FIRST
 ) =
CLEAR
 )

509 
	`SëWifiApSètus
–
STATUS_AP_FIRST
, 
SET
 );

510 
	`WifiWrôeEï
–
EEPROM_ADDR_FIRST_PARING
, 
SET
 );

511 
	`SëWifiIndiˇãSètus
–
STATUS_PARING
, 
WIFI_AP_STEP_CLEAR
 );

512 
	`SëWifiApSètus
–
STATUS_AP_BLE
, 
CLEAR
 );

513 
	`SëWifiApSètus
–
STATUS_AP_WIFI
, 
CLEAR
 );

515 i‡–
	`GëWifiIndiˇãSètus
–
STATUS_PARING
 ) =
WIFI_AP_STEP_ROOTCA
 )

517 
	`SëWifiIndiˇãSètus
–
STATUS_PARING
, 
WIFI_AP_STEP_CLEAR
 );

518 
	`SëWifiApSètus
–
STATUS_AP_BLE
, 
CLEAR
 );

519 
	`SëWifiApSètus
–
STATUS_AP_WIFI
, 
CLEAR
 );

520 
WifiRx
.
u8CheckSîvî
 = 
CLEAR
;

521 
mu8ApCheck
 = 
SET
;

524 i‡–
WifiRx
.
u8CheckSîvî
 =
CLEAR
 )

526 
WifiRx
.
u8CheckSîvî
 = 
SET
;

527 i‡–
	`GëWifiFŸaSètus
–
STATUS_FOTA_MCU
 ) =
SET
 )

529 
	`SëWifiFŸaSètus
–
STATUS_FOTA_MCU
, 
CLEAR
 );

530 
	`WifiWrôeEï
–
EEPROM_ADDR_FOTA_MCU
, 
CLEAR
 );

534 i‡–
mu8ApCheck
 =
SET
 )

536 
	`SëWifiBuzzSound
–
WIFI_BUZZER_SERVER_FIRST
 );

540 if(
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 =
DONE
)

542  
FALSE
;

544  
TRUE
;

548  
FALSE
;

549 
	}
}

551 
U8
 
	$RxSíd
 ( )

553 
	`SëWifiTxSètus
–
STATUS_TX_STATE
, 
CLEAR
 );

554 
	`SëWifiTxSètus
–
STATUS_TX_SENSOR_STATE
, 
CLEAR
 );

555 
	`WifiCheckInôülizeAck
();

556  
FALSE
;

557 
	}
}

558 
U8
 
	$RxBLESíd
 ( )

560 
	`SëWifiTxSètus
–
STATUS_TX_STATE
, 
CLEAR
 );

561  
FALSE
;

562 
	}
}

563 
U8
 
	$RxBLERecv
()

565 
	`WifiIn£πRxBLEAPI
–
ai8WifiRxD©a
 );

566  
FALSE
;

567 
	}
}

569 
U8
 
	$RxRecv
()

571 
	`WifiIn£πRxAPI
–
ai8WifiRxD©a
 );

572  
FALSE
;

573 
	}
}

575 
U8
 
	$RxFŸaSize
 ( )

577 
	`WifiCheckFŸaSize
–
ai8WifiRxD©a
 );

578  
FALSE
;

579 
	}
}

581 
U8
 
	$RxFŸaTy≥
 ( )

583 
	`WifiCheckFŸaTy≥
–
ai8WifiRxD©a
 );

584  
FALSE
;

585 
	}
}

587 
U8
 
	$RxFŸaModuÀ
 ( )

589 
	`SëWifiFŸaSètus
–
STATUS_FOTA_MODULE
, 
SET
 );

590 
	`WifiWrôeEï
–
EEPROM_ADDR_FOTA_MODULE
, 
SET
 );

591 
	`SëWifiC⁄åﬁSètus
–
STATUS_CON_READY
, 
OFF
 );

592  
FALSE
;

593 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxProcess.h

2 #i‚de‡
_WIFI_RxPro˚ss_H_


3 
	#_WIFI_RxPro˚ss_H_


	)

5 
	s_wifúx_


7 
U8
 
	mu8Sèã
;

8 
U8
 
	mu8Waô
;

9 
U8
 
	mu8CheckModem
;

10 
U8
 
	mu8CheckSîvî
;

11 
U8
 
	mu8C⁄√˘Check
;

12 
U16
 
	mu16C⁄√˘CheckCou¡
;

13 
U8
 
	mu8Di•œyC⁄√˘Cou¡
;

14 } 
	tWifiRx_T
;

15 
	$U8
 (*
	tWifiRxAtFun_T
)();

16 
	s_wifi_rx©_li°_


18 c⁄° 
I8
 *
Id
;

19 
U8
 
Di•
;

20 
U8
 
Eº
;

21 
U8
 
ApWifi
;

22 
U8
 
ApBÀ
;

23 
U8
 
ApSãp
;

24 
U8
 
C⁄√˘
;

25 
U8
 
Sound
;

26 
WifiRxAtFun_T
 
Func
;

27 } 
	tWifiRxAtLi°_T
;

39 
	`InôülizeWifiRxPro˚ss
 ( );

52 
	`GëWifiU¨tRxD©a
 ( 
I8
* 
mai8U¨tD©a
 );

65 
	`WifiRxD©aPro˚ss
 ( );

80 
	`CÀ¨RxSètus
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxServer.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_SëComm⁄.h
"

17 
	~"WIFI_DefU£r.h
"

18 
	~"WIFI_RxSîvî.h
"

19 
	~"WIFI_TxPrŸocﬁ.h
"

20 
	~"WIFI_Inôülize.h
"

21 
	~"WIFI_Sètus.h
"

22 
	~"WIFI_SëFun˘i⁄D©a.h
"

23 
	~"WIFI_SëInf‹m©i⁄D©a.h
"

24 
	~"WIFI_SëM⁄ô‹D©a.h
"

25 
	~"WIFI_U£rI¡îÁ˚.h
"

26 
	~"WIFI_M⁄ô‹FixRAM.h
"

30 c⁄° sig√d 
	gAPI_RX_A1002
[] = "A1002";

31 c⁄° sig√d 
	gAPI_RX_A1011
[] = "A1011";

32 c⁄° sig√d 
	gAPI_RX_A1013
[] = "A1013";

33 c⁄° sig√d 
	gAPI_RX_A1023
[] = "A1023";

34 c⁄° sig√d 
	gAPI_RX_A1033
[] = "A1033";

35 c⁄° sig√d 
	gAPI_RX_A1035
[] = "A1035";

36 c⁄° sig√d 
	gAPI_RX_A1051
[] = "A1051";

37 c⁄° sig√d 
	gAPI_RX_A1053
[] = "A1053";

38 c⁄° sig√d 
	gAPI_RX_A1083
[] = "A1083";

39 c⁄° sig√d 
	gAPI_RX_A2011
[] = "A2011";

40 c⁄° sig√d 
	gAPI_RX_A7011
[] = "A7011";

41 c⁄° sig√d 
	gAPI_RX_A9011
[] = "A9011";

42 c⁄° sig√d 
	gAPI_RX_A9013
[] = "A9013";

45 
	#AT_CMD_RECV
 "*ICT*AWS_RECV:"

	)

46 
	#AT_CMD_BLE_RECV
 "*ICT*BLE_RECV:"

	)

48 
	#LENGTH_HEADER
 5

49 
	#POSITION_STX
 0

50 
	#POSITION_LENGTH
 1

51 
	#POSITION_API
 5

52 
	#POSITION_RQID
 10

53 
	#POSITION_OPEN
 26

54 
	#POSITION_DATA
 27

55 

	)

58 
I8
 
	gai8RxPrŸocﬁ
[
LENGTH_WIFI_ALL_MAX_N
];

59 
U16
 
	gau16InfoD©a
[
WIFI_INFO_NUM
];

60 
U16
 
	ggu16_RAM_M⁄ô‹_RESP_SIZE
;

61 
U16
 
	ggu16_START_RAM_Addªss
[
LENGTH_RAM_ADDRESS_MAX
];

62 
U16
 
	ggu16_RAM_Addªss_Àn
[
LENGTH_RAM_ADDRESS_MAX
];

67 
RunA«lysis
 ( );

68 
U8
 
IsRxD©aOk
 ( );

70 
U8
 
RxA1011
 ( );

71 
U8
 
RxA2011
 ( );

72 
U8
 
RxA7011
 ( );

73 
U8
 
RxA9011
 ( );

74 
U8
 
RxA9013
 ( );

76 
DoFuncD©a
 ( 
I8
* 
pBuf
 );

77 
DoInfoD©a
 ( 
I8
* 
pBuf
 );

78 
DoM⁄ô‹D©a
 (
U8
 
rw_£l
, 
I8
* 
pBuf
 );

80 
MakeCheckId
 ( 
I8
* 
pBuf
, 
U16
 
mLí
, U16 
mId
 );

84 
	$U8
 (*
	tWifiRxApiFun_T
)( );

85 
	s_wifi_rx≠i_li°_


87 c⁄° 
I8
* 
Api
;

88 
U32
 
Tx
;

89 
WifiRxApiFun_T
 
Func
;

90 } 
	tWifiRxApiLi°_T
;

93 c⁄° 
WifiRxApiLi°_T
 
WifiRxApiLi°
[] =

95 { 
API_RX_A1002
, 
WIFI_TX_NULL
, 
NULL
 },

96 { 
API_RX_A1011
, 
WIFI_TX_RESP_RECV
, 
RxA1011
 },

97 { 
API_RX_A1013
, 
WIFI_TX_RESP_FUNC
, 
NULL
 },

98 { 
API_RX_A1023
, 
WIFI_TX_RESP_SENSOR
, 
NULL
 },

99 { 
API_RX_A1033
, 
WIFI_TX_RESP_ERR
, 
NULL
 },

100 { 
API_RX_A1035
, 
WIFI_TX_SELF_ERR
, 
NULL
 },

101 { 
API_RX_A1051
, 
WIFI_TX_SEND_PARA
, 
NULL
 },

102 { 
API_RX_A1053
, 
WIFI_TX_RESP_PARA
, 
NULL
 },

103 { 
API_RX_A1083
, 
WIFI_TX_RESP_PART
, 
NULL
 },

104 { 
API_RX_A2011
, 
WIFI_TX_NULL
, 
RxA2011
 },

105 { 
API_RX_A7011
, 
WIFI_TX_NULL
, 
RxA7011
 },

106 { 
API_RX_A9011
, 
WIFI_TX_RESP_MNT_DATA_W
, 
RxA9011
 },

107 { 
API_RX_A9013
, 
WIFI_TX_RESP_MNT_DATA_R
, 
RxA9013
 }

108 
	}
};

109 
	#SZ_RX_API_LIST
 ( (
WifiRxApiLi°
Ë/ (
WifiRxApiLi°_T
Ë)

	)

113 
	$InôülizeWifiRxSîvî
 ( )

115 
	`_MEMSET_
–(
__FAR
*Ë
ai8RxPrŸocﬁ
, '\0', (ai8RxProtocol) );

116 
	`_MEMSET_
–(
__FAR
*Ë
au16InfoD©a
, 0, (au16InfoData) );

117 
	}
}

119 
	$WifiIn£πRxAPI
 ( 
I8
* 
mai8Recv
 )

121 
U16
 
mu16Lí
 = 0U;

122 
U16
 
mu16Posôi⁄
 = 0U;

123 
U16
 
i
 = 0U;

125 
	`_MEMSET_
–(
__FAR
*Ë
ai8RxPrŸocﬁ
, '\0', (ai8RxProtocol) );

128 
mu16Lí
 = 
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
mai8Recv
 );

129 
mu16Posôi⁄
 = 
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
AT_CMD_RECV
 );

130 if–
mu16Lí
 > 
LENGTH_WIFI_ALL_MAX_N
 )

136  
i
 = 0 ; i < 
mu16Lí
 ; i++ )

138 
ai8RxPrŸocﬁ
[
i
] = 
mai8Recv
[
mu16Posôi⁄
 + i];

139 i‡–
ai8RxPrŸocﬁ
[
i
] =
ASCII_ETX
 )

145 i‡–
	`GëU£rI¡îÁ˚
–
USER_SMART_SENSING_STATUS
 ) !
TRUE
 )

147 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
WIFIDATA
);

150 
	`RunA«lysis
();

151 
	}
}

152 
	$WifiIn£πRxBLEAPI
 ( 
I8
* 
mai8Recv
 )

154 
U16
 
mu16Lí
 = 0U;

155 
U16
 
mu16Posôi⁄
 = 0U;

156 
U16
 
i
 = 0U;

157 
	`_MEMSET_
–(
__FAR
*Ë
ai8RxPrŸocﬁ
, '\0', (ai8RxProtocol) );

158 
mu16Lí
 = 
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
mai8Recv
 );

159 
mu16Posôi⁄
 = 
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
AT_CMD_BLE_RECV
 );

160 if–
mu16Lí
 > 
LENGTH_WIFI_ALL_MAX_N
 )

164  
i
 = 0 ; i < 
mu16Lí
 ; i++ )

166 
ai8RxPrŸocﬁ
[
i
] = 
mai8Recv
[
mu16Posôi⁄
 + i];

167 i‡–
ai8RxPrŸocﬁ
[
i
] =
ASCII_ETX
 )

172 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
BLEDATA
);

173 
	`SëWifiBLESídSètus
(
BLE_RECV_CHECK
, 
SET
);

174 
	`RunA«lysis
();

175 
	}
}

177 
U16
 
	$GëWifiInfoD©a
 ( 
U16
 
mId
 )

179  
au16InfoD©a
[
mId
];

180 
	}
}

182 
	$SëWifiInfoD©a
 ( 
U16
 
mId
, U16 
mD©a
 )

184 
au16InfoD©a
[
mId
] = 
mD©a
;

185 i‡–
mId
 =
WIFI_INFO_0006_DAY
 )

187 
	`SëU£rTimeSëtög
–&
au16InfoD©a
[0] );

189 i‡––
mId
 =
WIFI_INFO_0007_PART_PERIOD
 ) && ( 
	`GëWifiIniSètus
–
STATUS_INI_INFO
 ) !
SET
 ) )

191 
	`SëWifiIniSètus
–
STATUS_INI_INFO
, 
SET
 );

193 
	}
}

198 
	$RunA«lysis
 ( )

200 c⁄° 
WifiRxApiLi°_T
 *
pLi°
 = 
NULL
;

201 
U8
 
i
 = 0U;

202 
I8
 
mai8RxAPINo
[
LENGTH_API_NO
+1];

203 
I8
 
mai8RqId
[
LENGTH_REQUEST_ID
+1];

205 
	`_MEMSET_
–(
__FAR
*Ë
mai8RxAPINo
, '\0', (mai8RxAPINo));

206 
	`_MEMSET_
–(
__FAR
*Ë
mai8RqId
, '\0', (mai8RqId));

209 if–
	`IsRxD©aOk
(Ë!
TRUE
 )

215  
i
 = 0; i < 
LENGTH_API_NO
 ; i++ )

217 
mai8RxAPINo
[
i
] = 
ai8RxPrŸocﬁ
[
POSITION_API
 + i];

219  
i
 = 0; i < 
LENGTH_REQUEST_ID
 ; i++ )

221 
mai8RqId
[
i
] = 
ai8RxPrŸocﬁ
[
POSITION_RQID
 + i];

223 
	`SëReque°Id
–
mai8RqId
 );

226 
pLi°
 = 
WifiRxApiLi°
;

227 #ifde‡
UNUSED_BLE_A1011_RX


228 i‡(
	`GëWifiBLESídSètus
(
TX_BLE_WIFI
Ë=
BLEDATA
 )

230 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë(
pLi°
+1)->
Api
, (c⁄° __FAR*Ë
mai8RxAPINo
, 
LENGTH_API_NO
 ) =
N_TRUE
 )

236 #ifde‡
UNUSED_A9011_RX


237 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë(
pLi°
+11)->
Api
, (c⁄° __FAR*Ë
mai8RxAPINo
, 
LENGTH_API_NO
 ) =
N_TRUE
 )

242 i‡(
	`GëWifiBLESídSètus
(
TX_BLE_WIFI
Ë=
BLEDATA
 )

244 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë(
pLi°
+10)->
Api
, (c⁄° __FAR*Ë
mai8RxAPINo
, 
LENGTH_API_NO
 ) =
N_TRUE
 )

246 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
WIFIDATA
);

249  
i
 = 0; i < 
SZ_RX_API_LIST
; i++ )

251 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë(
pLi°
+
i
)->
Api
, (c⁄° __FAR*Ë
mai8RxAPINo
, 
LENGTH_API_NO
 ) =
N_TRUE
 )

253 
WifiRxApiFun_T
 
pFun
;

254 
U8
 
mAck
 = 
TRUE
;

256 
pFun
 = (
pLi°
+
i
)->
Func
;

258 i‡–
pFun
 !
NULL
 )

260 
mAck
 = 
	`pFun
();

262 i‡––
mAck
 =
TRUE
 ) && ( (
pLi°
+
i
)->
Tx
 !
WIFI_TX_NULL
 ) )

264 
	`SëWifiSídSètus
–
TX_DATA
, (
pLi°
+
i
)->
Tx
 );

269 
	}
}

272 
U8
 
	$IsRxD©aOk
 ( )

274 
U16
 
mu16i
 = 0U;

275 
U16
 
mu16D©aLígth
 = 0U;

276 
U32
 
mu32CheckSumBuf
 = 0UL;

277 
U8
 
mu8CheckSum
 = 0U;

278 
U8
 
mu8RxCheckSum
 = 0U;

281 i‡–
ai8RxPrŸocﬁ
[
POSITION_STX
] !
ASCII_STX
 )

283  
FALSE
;

287 i‡–
ai8RxPrŸocﬁ
[ 
	`_STRLEN_
–(c⁄° 
__FAR
*Ëai8RxPrŸocﬁ ) - 1 ] !
ASCII_ETX
 )

289  
FALSE
;

293 
mu16D©aLígth
 = (
	`WIFI_ASCII2HEX
(
ai8RxPrŸocﬁ
[
POSITION_LENGTH
]) << 12) & 0xF000;

294 
mu16D©aLígth
 +(
	`WIFI_ASCII2HEX
(
ai8RxPrŸocﬁ
[
POSITION_LENGTH
+1]) << 8) & 0x0F00;

295 
mu16D©aLígth
 +(
	`WIFI_ASCII2HEX
(
ai8RxPrŸocﬁ
[
POSITION_LENGTH
+2]) << 4) & 0x00F0;

296 
mu16D©aLígth
 +
	`WIFI_ASCII2HEX
(
ai8RxPrŸocﬁ
[
POSITION_LENGTH
+3]) & 0x000F;

298 i‡––
mu16D©aLígth
 + 
LENGTH_HEADER
 ) !
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
ai8RxPrŸocﬁ
 ) )

300  
FALSE
;

304  
mu16i
 = 0 ; mu16ò< ( 
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
ai8RxPrŸocﬁ
 ) - 3 ) ; mu16i++ )

306 i‡–
mu16i
 > 
LENGTH_WIFI_ALL_MAX_N
 )

312 
mu32CheckSumBuf
 +
ai8RxPrŸocﬁ
[
mu16i
];

315 
mu8CheckSum
 = (
U8
)
mu32CheckSumBuf
;

316 
mu8RxCheckSum
 = (
U8
)((
	`WIFI_ASCII2HEX
(
ai8RxPrŸocﬁ
[
	`_STRLEN_
–(c⁄° 
__FAR
*)ái8RxProtocol)-3]) << 4) & 0xF0);

317 
mu8RxCheckSum
 +(
U8
)(
	`WIFI_ASCII2HEX
(
ai8RxPrŸocﬁ
[
	`_STRLEN_
–(c⁄° 
__FAR
*)ái8RxProtocol)-2]) & 0x0F);

318 i‡–
mu8RxCheckSum
 !
mu8CheckSum
 )

320  
FALSE
;

322  
TRUE
;

323 
	}
}

325 
U8
 
	$IsRecvPossibÀ
 ( )

327 
U16
 
mu16Ex˚±Id
 = 0U;

329 
mu16Ex˚±Id
 = ((
U16
)
	`WIFI_ASCII2HEX
((
U8
)
ai8RxPrŸocﬁ
[
POSITION_DATA
]) << 12) & 0xF000;

330 
mu16Ex˚±Id
 +((
U16
)
	`WIFI_ASCII2HEX
((
U8
)
ai8RxPrŸocﬁ
[
POSITION_DATA
+1]) << 8) & 0x0F00;

331 
mu16Ex˚±Id
 +((
U16
)
	`WIFI_ASCII2HEX
((
U8
)
ai8RxPrŸocﬁ
[
POSITION_DATA
+2]) << 4) & 0x00F0;

332 
mu16Ex˚±Id
 +(
U16
)
	`WIFI_ASCII2HEX
((
U8
)
ai8RxPrŸocﬁ
[
POSITION_DATA
+3]) & 0x000F;

334 i‡–
	`GëU£rI¡îÁ˚
–
USER_SMART_SENSING_STATUS
 ) =
TRUE
 )

336 i‡–
	`IsEx˚±Id
–
mu16Ex˚±Id
 ) =
TRUE
 )

338  
TRUE
;

342 i‡–
	`GëU£rI¡îÁ˚
–
USER_RX_STATUS
 ) !
TRUE
 )

344 i‡–
	`IsEx˚±Id
–
mu16Ex˚±Id
 ) =
TRUE
 )

346 i‡–
	`GëU£rI¡îÁ˚
–
USER_SMART_POSSIBLE_STATUS
 ) =
TRUE
 )

348  
TRUE
;

352  
FALSE
;

358 i‡–
	`IsEx˚±Id
–
mu16Ex˚±Id
 ) =
TRUE
 )

360 i‡–
	`GëU£rI¡îÁ˚
–
USER_SMART_POSSIBLE_STATUS
 ) !
TRUE
 )

362  
FALSE
;

365  
TRUE
;

367  
FALSE
;

368 
	}
}

372 
U8
 
	$RxA1011
 ( )

374 
U16
 
i
 = 0U;

375 
U8
 
mD©a
 = 0U;

377 
I8
 
pBuf
[
LENGTH_WIFI_DATA_RX_MAX
];

379 
mD©a
 = 
	`GëWifiBLESídSètus
(
TX_BLE_WIFI
);

380 
	`_MEMSET_
–(
__FAR
*Ë
pBuf
, '\0', (pBuf) );

383 i‡–
	`IsRecvPossibÀ
(Ë!
TRUE
 )

385 
	`SëWifiBuzzSound
–
WIFI_BUZZER_ERROR
 );

386 i‡(
mD©a
 !
BLEDATA
)

388  
TRUE
;

393  
i
 = 0 ; i < 
LENGTH_WIFI_DATA_RX_MAX
 ; i++ )

395 
pBuf
[
i
] = 
ai8RxPrŸocﬁ
[
POSITION_DATA
 + i];

396 i‡–
pBuf
[
i
] =
ASCII_CLOSE
 )

401 
	`DoFuncD©a
–
pBuf
 );

402 #ifde‡
USER_USE_ACK


403  
TRUE
;

405  
FALSE
;

407 
	}
}

409 
U8
 
	$RxA2011
 ( )

411 
U16
 
i
 = 0U;

412 
I8
 
pBuf
[
LENGTH_WIFI_INFO_MAX
];

414 
	`_MEMSET_
–(
__FAR
*Ë
pBuf
, '\0', (pBuf) );

416 
	`WifiCheckInôülizeInfoAck
();

419  
i
 = 0 ; i < 
LENGTH_WIFI_INFO_MAX
 ; i++ )

421 
pBuf
[
i
] = 
ai8RxPrŸocﬁ
[
POSITION_DATA
 + i];

422 i‡–
pBuf
[
i
] =
ASCII_CLOSE
 )

427 
	`DoInfoD©a
–
pBuf
 );

428  
FALSE
;

429 
	}
}

432 
U8
 
	$RxA7011
 ( )

434 
U16
 
i
 = 0U;

435 
I8
 
mi8Id
[
LENGTH_WIFI_DATA_ONE
];

436 
U8
 
mu8i
 = 0U;

437 
I8
 
mi8D©a
[
LENGTH_WIFI_DATA_ID
];

438 
I8
 
pBuf
[
LENGTH_WIFI_DATA_ID
];

439 
	`_MEMSET_
–(
__FAR
*Ë
pBuf
, '\0', (pBuf) );

441  
i
 = 0 ; i < 
LENGTH_WIFI_DATA_ID
 ; i++ )

443 
pBuf
[
i
] = 
ai8RxPrŸocﬁ
[
POSITION_DATA
 + i];

444 i‡–
pBuf
[
i
] =
ASCII_CLOSE
 )

452 
	`_MEMSET_
–(
__FAR
*Ë
mi8Id
, '\0', (mi8Id) );

454 
	`MakeCheckId
–
mi8Id
, 0, 
WIFI_BLE_CERT_0001
);

455 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë
mi8Id
, (c⁄° __FAR*Ë
pBuf
, 
LENGTH_WIFI_ID_ONE
 ) =
N_TRUE
 )

457  
mu8i
 = 0 ; mu8ò< 
LENGTH_WIFI_DATA_ONE
 ; mu8i++ )

459 i‡––
pBuf
[
LENGTH_WIFI_ID_ONE
+
mu8i
] =
ASCII_COMMA
 ) || (ÖBuf[LENGTH_WIFI_ID_ONE+mu8i] =
ASCII_CLOSE
 ) )

465 
mi8D©a
[
mu8i
] = 
pBuf
[
LENGTH_WIFI_ID_ONE
+mu8i];

469 if((
U8
)(
mi8D©a
[0]Ë=
ASCII_NO_1
)

471 
	`SëWifiApSètus
(
STATUS_AP_BLE_CERT
,
SET
);

472 
	`SëWifiCîtID
(
WIFI_BLE_CERT_0002
);

473 
	`SëWifiCîtSètus
(
STATUS_CERT_ON
);

474 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_BLE_CERT
);

475 
	`SëWifiBuzzSound
–
WIFI_BUZZER_BLE_CERT
 );

480 
	`SëWifiCîtID
(
WIFI_BLE_CERT_0002
);

481 
	`SëWifiCîtSètus
(
STATUS_CERT_FAIL
);

482 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_BLE_CERT
);

487  
FALSE
;

488 
	}
}

491 
U8
 
	$RxA9011
 ( )

493 
U16
 
i
 = 0U;

494 
I8
 
pBuf
[
LENGTH_WIFI_RAM_WRITE
];

496 
	`_MEMSET_
–(
__FAR
*Ë
pBuf
, '\0', (pBuf) );

499  
i
 = 0 ; i < 
LENGTH_WIFI_RAM_WRITE
 ; i++ )

501 
pBuf
[
i
] = 
ai8RxPrŸocﬁ
[
POSITION_DATA
 + i];

502 i‡–
pBuf
[
i
] =
ASCII_CLOSE
 )

507 
	`DoM⁄ô‹D©a
(
WiFi_M_RAM_Wrôe
, 
pBuf
 );

508 
	`GëRamD©a
();

509 #ifde‡
USER_USE_ACK


510  
TRUE
;

512  
FALSE
;

514 
	}
}

516 
U8
 
	$RxA9013
 ( )

518 
U16
 
i
 = 0U;

519 
I8
 
pBuf
[
LENGTH_RAM_DATA_MAX
];

520 
	`_MEMSET_
–(
__FAR
*Ë
pBuf
, '\0', (pBuf) );

521  
i
 = 0 ; i < 
LENGTH_RAM_DATA_MAX
 ; i++ )

523 
pBuf
[
i
] = 
ai8RxPrŸocﬁ
[
POSITION_DATA
 + i];

524 i‡–
pBuf
[
i
] =
ASCII_CLOSE
 )

529 
	`GëRamD©a
();

530 
	`DoM⁄ô‹D©a
(
WiFi_M_RAM_Ród
, 
pBuf
 );

531 #ifde‡
USER_USE_ACK


532  
TRUE
;

534  
FALSE
;

536 
	}
}

537 
	$DoFuncD©a
 ( 
I8
* 
pBuf
 )

539 
WifiTxFuncLi°_T
 *
pLi°
 = 
NULL
;

540 
U16
 
i
 = 0U;

541 
U16
 
mu16Size
 = 0U;

542 
U16
 
mu16FuncCou¡
 = 0U;

543 
U8
 
mi
 = 0U;

544 
I8
 
mi8QUANTITY_SEL_Def
 = 0U;

545 
U8
 
mu8QUANTITY_SEL_LIST_Def_IDNo
 = 0U;

546 
	#QUANTITY_COUNT
 10

547 
	#USE_MAX_QUANTITY
 5

548 
	#USE_MIN_QUANTITY
 2

549 
I8
 
mi8QUANTITY_SEL_LIST_DATA
[
QUANTITY_COUNT
] = {0};

	)

550 
U8
 
mi8QUANTITY_SEL_LIST_IDNo
[
QUANTITY_COUNT
] = {0};

551 
U8
 
mu8QUANTITY_COUNT
 = 0U;

552 
U8
 
mQi
 = 0U;

553 
U8
 
mQFöish
 = 0U;

554 
U8
 
mQFöish_DefuÆt
 = 0U;

555 
U8
 
mQEx˚±i⁄Föish_QUANTITY
 = 0U;

556 
U8
 
mQEx˚±i⁄Föish_DefuÆt
 = 0U;

557 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiFuncEvítLi°
();

558 
mu16Size
 = 
	`GëWifiFuncLi°Size
();

559  
i
 = 0 ; i < 
mu16Size
; i++ )

561 
WifiRxFun_T
 
pFun
;

562 
I8
 
mi8Id
[
LENGTH_WIFI_DATA_ONE
];

563 
I8
 
mId
[
LENGTH_WIFI_ID_ONE
+1];

565 
U8
 
mu8Func
 = 0U;

566 
U8
 
mu8FuncFöish
 = 0U;

567 
U8
 
mu8FuncLi°Check
 = 0U;

568 
I8
 
mi8Func
[
LENGTH_WIFI_DATA_ONE
];

569 
	`_MEMSET_
–(
__FAR
*Ë
mId
, '\0', (mId) );

570 
	`_MEMSET_
–(
__FAR
*Ë
mi8Id
, '\0', (mi8Id) );

571 
	`_MEMSET_
–(
__FAR
*Ë
mi8Func
, '\0', (mi8Func) );

572  
mu8Func
 = 0 ; mu8Fun¯< 
LENGTH_WIFI_ID_ONE
 ; mu8Func++ )

574 
mi8Id
[
mu8Func
] = 
pBuf
[
mu16FuncCou¡
];

575 
mu16FuncCou¡
++;

576 i‡–
mi8Id
[
mu8Func
] =
ASCII_COLON
 )

581  
mu8Func
 = 0 ; mu8Fun¯< 
LENGTH_WIFI_DATA_ONE
 ; mu8Func++ )

583 
mi8Func
[
mu8Func
] = 
pBuf
[
mu16FuncCou¡
];

584 
mu16FuncCou¡
++;

585 i‡–
mi8Func
[
mu8Func
] =
ASCII_COMMA
)

587 
mu8FuncLi°Check
 = 
SET
;

589 i‡(
mi8Func
[
mu8Func
] =
ASCII_CLOSE
)

591 
mu8FuncFöish
 = 
SET
;

593 i‡–
mi8Func
[
mu8Func
] =
ASCII_COMMA
 || mi8Func[mu8Func] =
ASCII_CLOSE
 )

595 
mi8Func
[
mu8Func
] = 
ASCII_NULL
;

599  
mi
 = 0 ; mò< 
mu16Size
; mi++ )

601 
pFun
 = (
pLi°
+
mi
)->
RxFunc
;

602 
	`MakeCheckId
–
mId
, 0, (
pLi°
+
mi
)->
Id
 );

603 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë
mId
, (c⁄° __FAR*Ë
mi8Id
, 
LENGTH_WIFI_ID_ONE
 ) =
N_TRUE
 )

605 i‡–
pFun
 !
NULL
 )

607 if(
	`IsEx˚±W©îAmou¡ID
((
pLi°
+
mi
)->
Id
Ë=
TRUE
)

609 
mi8QUANTITY_SEL_Def
 = 
mi8Func
[0];

610 
mu8QUANTITY_SEL_LIST_Def_IDNo
 = 
mi
;

611 
mQFöish_DefuÆt
 = 
SET
;

613 if((
	`IsEx˚±W©îAmou¡ID_Li°
((
pLi°
+
mi
)->
Id
Ë=
TRUE
) )

615 
mi8QUANTITY_SEL_LIST_DATA
[
mu8QUANTITY_COUNT
] = 
mi8Func
[0];

616 
mi8QUANTITY_SEL_LIST_IDNo
[
mu8QUANTITY_COUNT
] = 
mi
;

617 
mu8QUANTITY_COUNT
++;

618 i‡((
mu8FuncFöish
 =
SET
Ë|| (
mu8QUANTITY_COUNT
 =
QUANTITY_COUNT
))

620 
mQFöish
 = 
SET
;

623 i‡((
mu8FuncLi°Check
 !
SET
Ë&& ((
	`IsEx˚±W©îAmou¡ID_Li°
((
pLi°
+
mi
)->
Id
Ë=
TRUE
)||(
	`IsEx˚±W©îAmou¡ID
((pList+mi)->Id) == TRUE)))

629 
	`pFun
–(
pLi°
+
mi
)->
Id
, 
mi8Func
 );

631 i‡((
mQFöish
 =
SET
 ) && (
mQFöish_DefuÆt
 =SET ) && (
mu8FuncFöish
 =SETË&& (
mu8QUANTITY_COUNT
 =
QUANTITY_COUNT
))

633 
U8
 
mu8Cou¡Check
 = 0U;

634 
mQi
 = 0; mQò< 
mu8QUANTITY_COUNT
; mQi++)

636 i‡((
mi8QUANTITY_SEL_LIST_DATA
[
mQi
]-0x30) != 0)

638 
mu8Cou¡Check
 += 1;

640 i‡(((
mi8QUANTITY_SEL_Def
-0x30Ë=
mQi
Ë&& ((
mi8QUANTITY_SEL_LIST_DATA
[mQi]-0x30) != 0))

642 
mQEx˚±i⁄Föish_DefuÆt
 = 
SET
;

645 if((
mu8Cou¡Check
 >
USE_MIN_QUANTITY
 ) && (mu8Cou¡Check <
USE_MAX_QUANTITY
) )

647 
mQEx˚±i⁄Föish_QUANTITY
 = 
SET
;

650 i‡((
mu8FuncFöish
 =
SET
Ë&& (
mu8QUANTITY_SEL_LIST_Def_IDNo
 !0UË&& (
mQFöish
 =SETË&& (
mQEx˚±i⁄Föish_DefuÆt
 =SET && (
mQEx˚±i⁄Föish_QUANTITY
 == SET)))

652 
mQi
 = 0; mQò< 
mu8QUANTITY_COUNT
; mQi++)

654 
	`_MEMSET_
–(
__FAR
*Ë
mi8Func
, '\0', (mi8Func) );

655 
mi8Func
[0] = 
mi8QUANTITY_SEL_LIST_DATA
[
mQi
];

656 
mi8Func
[1] = 
ASCII_NULL
;

657 
	`pFun
–(
pLi°
+
mi8QUANTITY_SEL_LIST_IDNo
[
mQi
])->
Id
, 
mi8Func
 );

659 
	`_MEMSET_
–(
__FAR
*Ë
mi8Func
, '\0', (mi8Func) );

660 
mi8Func
[0] = 
mi8QUANTITY_SEL_Def
;

661 
mi8Func
[1] = 
ASCII_NULL
;

662 
	`pFun
–(
pLi°
+
mu8QUANTITY_SEL_LIST_Def_IDNo
)->
Id
, 
mi8Func
 );

664 i‡––
	`IsEx˚±Id
–(
pLi°
+
mi
)->
Id
 ) =
TRUE
 ) && ( 
mi8Func
[0] =
ASCII_NO_1
 ) )

666 
	`SëReque°IdEx˚±
();

672 i‡(
mu8FuncFöish
 =
SET
)

677 
	}
}

681 
	$DoInfoD©a
 ( 
I8
* 
pBuf
 )

683 
WifiTxFuncLi°_T
 *
pLi°
 = 
NULL
;

684 
U16
 
i
 = 0U;

685 
U16
 
mu16Size
 = 0U;

686 
U16
 
mu16InfoCou¡
 = 0U;

687 
U8
 
mi
 = 0U;

691 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiInf‹m©i⁄EvítLi°
();

692 
mu16Size
 = 
	`GëWifiInf‹m©i⁄Li°Size
();

695  
i
 = 0 ; i < 
mu16Size
; i++ )

697 
U8
 
mu8Info
 = 0U;

698 
WifiRxFun_T
 
pFun
;

699 
I8
 
mi8Id
[
LENGTH_WIFI_ID_ONE
+1];

700 
I8
 
mId
[
LENGTH_WIFI_ID_ONE
+1];

701 
I8
 
mi8Info
[
LENGTH_WIFI_DATA_ONE
];

703 
	`_MEMSET_
–(
__FAR
*Ë
mId
, '\0', (mId) );

704 
	`_MEMSET_
–(
__FAR
*Ë
mi8Id
, '\0', (mi8Id) );

705 
	`_MEMSET_
–(
__FAR
*Ë
mi8Info
, '\0', (mi8Info) );

707  
mu8Info
 = 0 ; mu8Infÿ< 
LENGTH_WIFI_ID_ONE
 ; mu8Info++ )

709 
mi8Id
[
mu8Info
] = 
pBuf
[
mu16InfoCou¡
];

710 
mu16InfoCou¡
++;

711 i‡–
mi8Id
[
mu8Info
] =
ASCII_COLON
 )

717  
mu8Info
 = 0 ; mu8Infÿ< 
LENGTH_WIFI_DATA_ONE
 ; mu8Info++ )

719 
mi8Info
[
mu8Info
] = 
pBuf
[
mu16InfoCou¡
];

720 
mu16InfoCou¡
++;

721 i‡–
mi8Info
[
mu8Info
] =
ASCII_COMMA
 || mi8Info[mu8Info] =
ASCII_CLOSE
 )

723 
mi8Info
[
mu8Info
] = 
ASCII_NULL
;

728  
mi
 = 0 ; mò< 
mu16Size
; mi++ )

730 
pFun
 = (
pLi°
+
mi
)->
RxFunc
;

731 
	`MakeCheckId
–
mId
, 0, (
pLi°
+
mi
)->
Id
 );

733 i‡–
	`_STRNCMP_
–(c⁄° 
__FAR
*Ë
mId
, (c⁄° __FAR*Ë
mi8Id
, 
LENGTH_WIFI_ID_ONE
 ) =
N_TRUE
 )

735 i‡–
pFun
 !
NULL
 )

737 
	`pFun
–(
pLi°
+
mi
)->
Id
, 
mi8Info
 );

743 
	}
}

745 
	$DoM⁄ô‹D©a
 (
U8
 
rw_£l
, 
I8
* 
pBuf
 )

747 
WifiTxFuncLi°_M⁄ô‹_T
 *
pLi°
 = 
NULL
;

748 
U16
 
i
 = 0U;

749 
U16
 
mu16Size
 = 0U;

750 
U16
 
mu16D©aCou¡
 = 0U;

751 
U8
 
mi
 = 0U;

752 
U8
 
mcou¡
 = 0U;

753 
pLi°
 = (
WifiTxFuncLi°_M⁄ô‹_T
 *)
	`GëWifiM⁄ô‹EvítLi°
();

754  
i
 = 0 ; i < 
LENGTH_WIFI_ALL_MAX_N
; i++ )

756 i‡(
pBuf
[
i
] =
ASCII_COMMA
)

758 
mcou¡
++;

760 i‡(
pBuf
[
i
] =
ASCII_CLOSE
)

762 
mcou¡
++;

766 
mu16Size
 = 
mcou¡
;

767 
gu16_RAM_M⁄ô‹_RESP_SIZE
 = 
mu16Size
;

768  
i
 = 0 ; i < 
mu16Size
; i++ )

770 
U8
 
mu8LíCou¡
 = 0U;

771 
WifiRxFun_T
 
pFun
;

772 
I8
 
mi8Addªss
[
LENGTH_WIFI_ID_ONE
+1];

773 
I8
 
mi8D©a
[
LENGTH_WIFI_RAM_DATA
];

774 
U16
 
m16Addªss_HEX
 = 0U;

775 
U16
 
m16Addªss_HEX_buf
;

776 
U8
 
mu8WrôeFœg
 = 
FALSE
;

777 
U8
 
mu8RódFœg
 = 
FALSE
;

778 
	`_MEMSET_
–(
__FAR
*Ë
mi8Addªss
, '\0', (mi8Address) );

779 
	`_MEMSET_
–(
__FAR
*Ë
mi8D©a
, '\0', (mi8Data) );

781  
mu8LíCou¡
 = 0 ; mu8LíCou¡ < 
LENGTH_WIFI_ID_ONE
+1 ; mu8LenCount++ )

784 if(
pBuf
[
mu16D©aCou¡
] =
ASCII_COLON
)

786 
mu16D©aCou¡
++;

789 i‡(
pBuf
[
mu16D©aCou¡
] =
ASCII_Z
)

791 
mu16D©aCou¡
 +
LENGTH_WIFI_A90xx_PASS
;

792 
mu8LíCou¡
--;

795 
mi8Addªss
[
mu8LíCou¡
] = 
pBuf
[
mu16D©aCou¡
];

796 
mu16D©aCou¡
++;

800  
mu8LíCou¡
 = 0 ; mu8LíCou¡ < 
LENGTH_WIFI_RAM_DATA
-1; mu8LenCount++ )

803 
mi8D©a
[
mu8LíCou¡
] = 
pBuf
[
mu16D©aCou¡
];

804 
mu16D©aCou¡
++;

805 i‡((
rw_£l
 =
WiFi_M_RAM_Wrôe
Ë&& (
mu8WrôeFœg
 =
FALSE
))

807 
mi8D©a
[++
mu8LíCou¡
] = 0x31;

808 
mu8WrôeFœg
 = 
TRUE
;

811 i‡((
rw_£l
 =
WiFi_M_RAM_Ród
Ë&& (
mu8RódFœg
 =
FALSE
)) {

812 
mi8D©a
[++
mu8LíCou¡
] = 0x30;

813 
mi8D©a
[++
mu8LíCou¡
] = 0x30;

814 
mu8RódFœg
 = 
TRUE
;

817 i‡–
mi8D©a
[
mu8LíCou¡
] =
ASCII_COMMA
 || mi8D©a[mu8LíCou¡] =
ASCII_CLOSE
 )

819 
mi8D©a
[
mu8LíCou¡
] = 
ASCII_NULL
;

824 
mi8D©a
[
LENGTH_WIFI_RAM_DATA
-1] = (
I8
)((
mu8LíCou¡
)-2);

826 
gu16_RAM_Addªss_Àn
[
i
] = 
	`WIFI_ASCII2HEX
(
mi8D©a
[0]) & 0x000F;

828  
mi
 = 0 ; mò< 
mu16Size
; mi++ )

830 
m16Addªss_HEX_buf
 = (
	`WIFI_ASCII2HEX
(
mi8Addªss
[0])) ;

831 
m16Addªss_HEX
 = (
m16Addªss_HEX_buf
 << 12) & 0xF000;

832 
m16Addªss_HEX_buf
 = (
	`WIFI_ASCII2HEX
(
mi8Addªss
[1])) ;

833 
m16Addªss_HEX
 +(
m16Addªss_HEX_buf
 << 8) & 0x0F00;

836 
m16Addªss_HEX
 +(
	`WIFI_ASCII2HEX
(
mi8Addªss
[2]) << 4) & 0x00F0;

837 
m16Addªss_HEX
 +
	`WIFI_ASCII2HEX
(
mi8Addªss
[3]) & 0x000F;

839 
gu16_START_RAM_Addªss
[
i
] = 
m16Addªss_HEX
;

841 
pFun
 = (
pLi°
)->
RxFunc_M
;

842 i‡–
pFun
 !
NULL
 )

844 
	`pFun
(
m16Addªss_HEX
, 
mi8D©a
 );

850 
	}
}

853 
	$MakeCheckId
 ( 
I8
* 
pBuf
, 
U16
 
mLí
, U16 
mId
 )

855 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
 >> 12) & 0x000F));

856 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
 >> 8) & 0x000F));

857 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
 >> 4) & 0x000F));

858 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
) & 0x000F));

859 
pBuf
[
mLí
++] = 
ASCII_COLON
;

860 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxServer.h

2 #i‚de‡
_WIFI_RxSîvî_H_


3 
	#_WIFI_RxSîvî_H_


	)

6 
InôülizeWifiRxSîvî
 ( );

9 
WifiIn£πRxAPI
 ( 
I8
* 
mai8Recv
 );

10 
WifiIn£πRxBLEAPI
 ( 
I8
* 
mai8Recv
 );

12 
U16
 
GëWifiInfoD©a
 ( U16 
mId
 );

13 
SëWifiInfoD©a
 ( 
U16
 
mId
, U16 
mD©a
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetAccumulateData.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_SëComm⁄.h
"

17 
	~"WIFI_TxF‹m.h
"

18 
	~"WIFI_SëAccumuœãD©a.h
"

30 c⁄° 
WifiTxFuncLi°_T
 
	gWifiAccumuœãLi°
[] =

32 { 
WIFI_ACCM_0000_MONTH_WATER_USER
, 
NULL
, NULL },

33 { 
WIFI_ACCM_0001_MONTH_WATER_A
, 
NULL
, NULL },

34 { 
WIFI_ACCM_0002_MONTH_WATER_B
, 
NULL
, NULL },

35 { 
WIFI_ACCM_0003_MONTH_WATER_C
, 
NULL
, NULL },

36 { 
WIFI_ACCM_0004_DAY_WATER_USER
, 
NULL
, NULL },

37 { 
WIFI_ACCM_0005_DAY_WATER_A
, 
NULL
, NULL },

38 { 
WIFI_ACCM_0006_DAY_WATER_B
, 
NULL
, NULL },

39 { 
WIFI_ACCM_0007_DAY_WATER_C
, 
NULL
, NULL },

41 { 
WIFI_ACCM_0010_LAST_MONTH_WATT_KRW
, 
NULL
, NULL }

44 
	#SZ_AC_LIST
 ( (
WifiAccumuœãLi°
Ë/ (
WifiTxFuncLi°_T
Ë)

	)

50 * 
	$GëWifiAccumuœãEvítLi°
 ( )

52  (*)
WifiAccumuœãLi°
;

53 
	}
}

55 
U16
 
	$GëWifiAccumuœãLi°Size
 ( )

57  
SZ_AC_LIST
;

58 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetAccumulateData.h

2 #i‚de‡
_WIFI_SëAccumuœãD©a_H_


3 
	#_WIFI_SëAccumuœãD©a_H_


	)

7 
	mWIFI_ACCM_0000_MONTH_WATER_USER
 = 0x0000,

8 
	mWIFI_ACCM_0001_MONTH_WATER_A
,

9 
	mWIFI_ACCM_0002_MONTH_WATER_B
,

10 
	mWIFI_ACCM_0003_MONTH_WATER_C
,

11 
	mWIFI_ACCM_0004_DAY_WATER_USER
,

12 
	mWIFI_ACCM_0005_DAY_WATER_A
,

13 
	mWIFI_ACCM_0006_DAY_WATER_B
,

14 
	mWIFI_ACCM_0007_DAY_WATER_C
,

16 
	mWIFI_ACCM_0010_LAST_MONTH_WATT_KRW
 = 0x0010,

18 
	mWIFI_ACCUMULATE_NUM


19 }
	tE_API_A10A0_T
;

21 * 
GëWifiAccumuœãEvítLi°
 ( );

22 
U16
 
GëWifiAccumuœãLi°Size
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetCommon.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_Sètus.h
"

17 
	~"WIFI_DefU£r.h
"

18 
	~"WIFI_SëComm⁄.h
"

19 
	~"WIFI_TxF‹m.h
"

20 
	~"WIFI_U£rI¡îÁ˚.h
"

21 
	~"WIFI_SëFun˘i⁄D©a.h
"

22 
	~"WIFI_SëInf‹m©i⁄D©a.h
"

23 
	~"WIFI_SëSís‹D©a.h
"

24 
	~"WIFI_RxSîvî.h
"

27 
U32
 
GëD©a
 ( 
U8
 
mTy≥
, 
U16
 
mId
 );

28 
U32
 
GëD©a_M⁄ô‹
 ( 
U8
 
mTy≥
, 
U16
 
mId
, U16 
mLí
);

29 
I16
 
GëNeg©iveD©a
 ( 
U8
 
mTy≥
, 
U16
 
mId
 );

30 
SëU£rInfoD©aI8
 ( 
U16
 
mId
, 
I8
 
mInfoD©a
 );

31 
SëU£rInfoD©aU16
 ( 
U16
 
mId
, U16 
mD©a
 );

32 
MakeNeg©iveD©a
 ( 
I16
 
mNegaD©a
 );

33 
MakePoötD©a
 ( 
I16
 
mPoötD©a
 );

34 
MakeD©a
 ( 
U32
 
mD©a
 );

37 
I8
 
	gmaiD©aBuf
[
LENGTH_WIFI_DATA_ONE_MAX
];

45 
U8
 
	$IsU£rModñCHP
 ( )

47 i‡–
	`GëU£rI¡îÁ˚
–
USER_MODEL_TYPE
 ) =
USER_MODEL_CHP
 )

49  
TRUE
;

51  
FALSE
;

52 
	}
}

55 
	$AµlyM⁄ô‹D©a
 ( 
U16
 
mAddªss
, 
I8
 *
pBuf
 )

57 
	`SëU£rM⁄ô‹D©a
(
mAddªss
, 
pBuf
 );

58 
	}
}

59 
	$AµlyFun˘i⁄D©a
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

61 
U8
 
mu8Size
 = 0U;

62 
U8
 
i
 = 0U;

63 
U8
 
mu8Buf
 = 0U;

64 
U8
 
mu8D©a
 = 0U;

65 
U16
 
mD©a
 = 0U;

67 
mu8Size
 = (
U8
)
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
pBuf
 );

69  
i
 = 0 ; i < 
mu8Size
 ; i++ )

71 
mu8Buf
 = 
pBuf
[
i
];

72 
mu8Buf
 = (
U8
)(mu8Buf & 0x0F);

73 
mu8D©a
 = 
	`WIFI_ASCII2HEX
(
mu8Buf
);

74 
mD©a
 = (mData*10);

75 
mD©a
 = mD©®+ ((
U16
)(
mu8D©a
));

77 
	`SëU£rFun˘i⁄D©a
–
mId
, 
mD©a
 );

78 
	}
}

81 
	$AµlyInfoD©a
 ( 
U16
 
mId
, 
I8
 *
pBuf
)

83 
U16
 
mu16InfoD©a
 = 0U;

84 
I8
 
mi8InfoD©a
 = 0;

85 
U8
 
mu8Size
 = 0U;

86 
U8
 
mCheck
 = 0U;

87 
U8
 
i
 = 0U;

90 
mu8Size
 = (
U8
)
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
pBuf
 );

91 
mCheck
 = 
	`IsPosôiveD©a
–
mId
 );

93 i‡–
mCheck
 =
TRUE
 )

95 
U8
 
mu8D©a
 = 0;

97  
i
 = 0 ; i < 
mu8Size
 ; i++ )

99 
mu8D©a
 = 
pBuf
[
i
];

100 
mu8D©a
 = 
	`WIFI_ASCII2HEX
((
U8
)(mu8Data & 0x0F));

101 
mu16InfoD©a
 = (mu16InfoData*10);

102 
mu16InfoD©a
 = mu16InfoD©®+ ((
U16
)(
mu8D©a
));

104 
	`SëU£rInfoD©aU16
–
mId
, 
mu16InfoD©a
 );

108 
I8
 
mi8D©a
 = 0;

109 
I8
 
mi8Info
 = 0;

111 i‡–
pBuf
[0] =
ASCII_MINUS
 )

113  
i
 = 1 ; i < 
mu8Size
 ; i++ )

115 
mi8D©a
 = 
pBuf
[
i
];

116 
mi8D©a
 = 
	`WIFI_ASCII2HEX
((
U8
)(mi8Data & 0x0F));

117 
mi8Info
 = (
I8
)(
mi8InfoD©a
*10);

118 
mi8InfoD©a
 = (
I8
)(
mi8Info
 + 
mi8D©a
);

120 
mi8InfoD©a
 = (
I8
)((mi8InfoData^0xFF)+1);

124  
i
 = 0 ; i < 
mu8Size
 ; i++ )

126 
mi8D©a
 = 
pBuf
[
i
];

127 
mi8D©a
 = 
	`WIFI_ASCII2HEX
((
U8
)(mi8Data & 0x0F));

128 
mi8Info
 = (
I8
)(
mi8InfoD©a
*10);

129 
mi8InfoD©a
 = (
I8
)(
mi8Info
 + 
mi8D©a
);

132 
	`SëU£rInfoD©aI8
–
mId
, 
mi8InfoD©a
 );

134 
	}
}

136 
	$C⁄vîtD©aHexToAscii
 ( 
U8
 
mTy≥
, 
U16
 
mId
, 
I8
 *
pBuf
 )

138 
U32
 
mD©a
 = 0UL;

139 
I16
 
miD©a
 = 0;

140 
U8
 
mCheck
 = 0U;

141 
U8
 
mCheckID
 = 0U;

143 
	`_MEMSET_
–(
__FAR
*Ë
maiD©aBuf
, '\0', (maiDataBuf) );

146 i‡–
mTy≥
 =
TYPE_SENSOR_CMD
 )

148 
mCheck
 = 
	`IsPoötD©a
–
mTy≥
, 
mId
 );

149 
miD©a
 = 
	`GëNeg©iveD©a
–
mTy≥
, 
mId
 );

150 i‡–
mCheck
 =
TRUE
 )

152 
	`MakePoötD©a
–
miD©a
 );

156 i‡–
miD©a
 >= 0 )

158 
mD©a
 = (
U32
)(
miD©a
);

159 
	`MakeD©a
–
mD©a
 );

163 
	`MakeNeg©iveD©a
–
miD©a
 );

167 if(
mTy≥
 =
TYPE_BLE_CERT_CMD
)

169 
mCheckID
 = 
	`GëWifiCîtID
();

170 if(
mCheckID
 =
WIFI_BLE_CERT_0002
)

172 
mD©a
 = 
	`GëWifiCîtSètus
();

174 i‡(
mCheckID
 =
WIFI_BLE_CERT_0003
)

176 
mD©a
 = 
	`GëWifiCîtResu…
();

178 
	`MakeD©a
–
mD©a
 );

182 
mD©a
 = 
	`GëD©a
–
mTy≥
, 
mId
 );

183 
	`MakeD©a
–
mD©a
 );

187 
	`Ár_•rötf_s
–
pBuf
, 0, 
maiD©aBuf
 );

188 
	`_MEMSET_
–(
__FAR
*Ë
maiD©aBuf
, '\0', (maiDataBuf) );

189 
	}
}

191 
	$C⁄vîtD©aHexToAscii_RAM_M⁄ô‹
 ( 
U8
 
mTy≥
, 
U16
 
mAddªss
, 
I8
 *
pBuf
, U16 
mLí
 )

193 
U32
 
mD©a
 = 0UL;

195 
	`_MEMSET_
–(
__FAR
*Ë
maiD©aBuf
, '\0', (maiDataBuf) );

196 
mD©a
 = 
	`GëD©a_M⁄ô‹
–
mTy≥
, 
mAddªss
, 
mLí
);

197 
	`MakeD©a
–
mD©a
 );

198 
	`Ár_•rötf_s
–
pBuf
, 0, 
maiD©aBuf
 );

199 
	`_MEMSET_
–(
__FAR
*Ë
maiD©aBuf
, '\0', (maiDataBuf) );

200 
	}
}

205 
U32
 
	$GëD©a
 ( 
U8
 
mTy≥
, 
U16
 
mId
 )

207 
U32
 
mD©a
 = 0UL;

209 i‡–
mTy≥
 =
TYPE_FUNC_CMD
 )

211 
mD©a
 = (
U32
)
	`GëU£rFun˘i⁄D©a
–
mId
 );

217 i‡–
mTy≥
 =
TYPE_ERROR_CMD
 )

219 
mD©a
 = (
U32
)
	`GëU£rEº‹D©a
–
mId
 );

221 i‡–
mTy≥
 =
TYPE_PARA_CMD
 )

223 
mD©a
 = 0UL;

225 i‡–
mTy≥
 =
TYPE_PART_CMD
 )

227 
mD©a
 = (
U32
)
	`GëU£rP¨tD©a
–
mId
 );

229 i‡–
mTy≥
 =
TYPE_ACCUMULATE_CMD
 )

231 
mD©a
 = (
U32
)
	`GëU£rAccumuœãD©a
–
mId
 );

235 
mD©a
 = 0UL;

238  
mD©a
;

239 
	}
}

240 
U32
 
	$GëD©a_M⁄ô‹
 ( 
U8
 
mTy≥
, 
U16
 
mId
, U16 
mLí
 )

242 
U32
 
mD©a
 = 0UL;

243 
mD©a
 = (
U32
)
	`GëU£rM⁄ô‹D©a
–
mId
, 
mLí
 );

244  
mD©a
;

245 
	}
}

247 
I16
 
	$GëNeg©iveD©a
 ( 
U8
 
mTy≥
, 
U16
 
mId
 )

249 
I16
 
mD©a
 = 0;

251 i‡–
mTy≥
 =
TYPE_SENSOR_CMD
 )

253 
mD©a
 = (
I16
)
	`GëU£rSís‹D©a
–
mId
 );

255 i‡–
mTy≥
 =
TYPE_PART_CMD
 )

257 
mD©a
 = (
I16
)
	`GëU£rP¨tD©a
–
mId
 );

261 
mD©a
 = 0;

263  
mD©a
;

264 
	}
}

266 
	$SëU£rInfoD©aU16
 ( 
U16
 
mId
, U16 
mInfoD©a
 )

268 
	`SëWifiInfoD©a
(
mId
,
mInfoD©a
);

269 
	}
}

271 
	$SëU£rInfoD©aI8
 ( 
U16
 
mId
, 
I8
 
mInfoD©a
 )

273 
U8
 
u8Temp
 = 0U;

274 
U16
 
u16Temp
 = 0U;

276 
u8Temp
 = (
U8
)
mInfoD©a
;

277 
u16Temp
 = (
U16
)
u8Temp
;

278 
	`SëWifiInfoD©a
(
mId
,
u16Temp
);

279 
	}
}

281 
	$MakeNeg©iveD©a
 ( 
I16
 
mNegaD©a
 )

283 
U8
 
mu8D©a
 = 0U;

284 
U16
 
mD©a
 = 0U;

286 
mD©a
 = (
U16
)(
mNegaD©a
-1);

287 
mD©a
 = (
U16
)(mData^0xFFFF);

289 
maiD©aBuf
[0] = 
ASCII_MINUS
;

290 i‡–
mD©a
 >= 10000 )

292 
mu8D©a
 = (
U8
)(
mD©a
/10000);

293 
maiD©aBuf
[1] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

294 
mD©a
 = (mData%10000);

296 
mu8D©a
 = (
U8
)(
mD©a
/1000);

297 
maiD©aBuf
[2] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

298 
mD©a
 = (mData%1000);

300 
mu8D©a
 = (
U8
)(
mD©a
/100);

301 
maiD©aBuf
[3] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

302 
mD©a
 = (mData%100);

304 
mu8D©a
 = (
U8
)(
mD©a
/10);

305 
maiD©aBuf
[4] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

306 
mu8D©a
 = (
U8
)(
mD©a
%10);

308 
maiD©aBuf
[5] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

310 i‡–
mD©a
 >= 1000 )

312 
mu8D©a
 = (
U8
)(
mD©a
/1000);

313 
maiD©aBuf
[1] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

314 
mD©a
 = (mData%1000);

316 
mu8D©a
 = (
U8
)(
mD©a
/100);

317 
maiD©aBuf
[2] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

318 
mD©a
 = (mData%100);

320 
mu8D©a
 = (
U8
)(
mD©a
/10);

321 
maiD©aBuf
[3] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

322 
mu8D©a
 = (
U8
)(
mD©a
%10);

324 
maiD©aBuf
[4] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

326 i‡–
mD©a
 >= 100 )

328 
mu8D©a
 = (
U8
)(
mD©a
/100);

329 
maiD©aBuf
[1] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

330 
mD©a
 = (mData%100);

332 
mu8D©a
 = (
U8
)(
mD©a
/10);

333 
maiD©aBuf
[2] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

334 
mu8D©a
 = (
U8
)(
mD©a
%10);

336 
maiD©aBuf
[3] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

338 i‡–
mD©a
 >= 10 )

340 
mu8D©a
 = (
U8
)(
mD©a
/10);

341 
maiD©aBuf
[1] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

342 
mu8D©a
 = (
U8
)(
mD©a
%10);

344 
maiD©aBuf
[2] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

348 
mu8D©a
 = (
U8
)(
mD©a
);

349 
maiD©aBuf
[1] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

351 
	}
}

353 
	$MakePoötD©a
 ( 
I16
 
mPoötD©a
 )

355 
U8
 
mu8D©a
 = 0U;

356 
U16
 
mD©a
 = 0U;

362 i‡–
mPoötD©a
 >= 65535U )

364 
mD©a
 = 65535U;

368 
mD©a
 = (
U16
)
mPoötD©a
;

370 i‡–
mD©a
 >= 10000U )

372 
mu8D©a
 = (
U8
)(
mD©a
/10000);

373 
maiD©aBuf
[0] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

374 
mD©a
 = (mData%10000);

375 
mu8D©a
 = (
U8
)(
mD©a
/1000);

376 
maiD©aBuf
[1] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

377 
mD©a
 = (mData%1000);

378 
mu8D©a
 = (
U8
)(
mD©a
/100);

379 
maiD©aBuf
[2] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

380 
maiD©aBuf
[3] = '.';

381 
mD©a
 = (mData%100);

382 
mu8D©a
 = (
U8
)(
mD©a
/10);

383 
maiD©aBuf
[4] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

384 
mu8D©a
 = (
U8
)(
mD©a
%10);

385 
maiD©aBuf
[5] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

388 i‡–
mD©a
 >= 1000U )

390 
mu8D©a
 = (
U8
)(
mD©a
/1000);

391 
maiD©aBuf
[0] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

392 
mD©a
 = (mData%1000);

393 
mu8D©a
 = (
U8
)(
mD©a
/100);

394 
maiD©aBuf
[1] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

395 
maiD©aBuf
[2] = '.';

396 
mD©a
 = (mData%100);

397 
mu8D©a
 = (
U8
)(
mD©a
/10);

398 
maiD©aBuf
[3] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

399 
mu8D©a
 = (
U8
)(
mD©a
%10);

400 
maiD©aBuf
[4] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

402 i‡–
mD©a
 >= 100U )

404 
mu8D©a
 = (
U8
)(
mD©a
/100);

405 
maiD©aBuf
[0] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

406 
maiD©aBuf
[1] = '.';

407 
mD©a
 = (mData%100);

408 
mu8D©a
 = (
U8
)(
mD©a
/10);

409 
maiD©aBuf
[2] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

410 
mu8D©a
 = (
U8
)(
mD©a
%10);

411 
maiD©aBuf
[3] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

413 i‡–
mD©a
 >= 10U )

415 
maiD©aBuf
[0] = '0';

416 
maiD©aBuf
[1] = '.';

417 
mu8D©a
 = (
U8
)(
mD©a
/10);

418 
maiD©aBuf
[2] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

419 
mu8D©a
 = (
U8
)(
mD©a
%10);

420 
maiD©aBuf
[3] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

424 
maiD©aBuf
[0] = '0';

425 
maiD©aBuf
[1] = '.';

426 
maiD©aBuf
[2] = '0';

427 
maiD©aBuf
[3] = 
	`WIFI_HEX2ASCII
((
U8
)(
mD©a
 & 0x0F));

429 
	}
}

432 
	#W_DEFAULT_MCU_DATA
 9999U

	)

433 
	#W_DEFAULT_SVR_DATA
 65535U

	)

434 
	$MakeD©a
 ( 
U32
 
mPosiD©a
 )

436 
U8
 
mu8D©a
 = 0U;

437 
U32
 
mD©a
 = 0UL;

438 
U32
 
mD©aTemp
 = 0UL;

439 
U8
 
mu8LíCou¡
;

440 
U8
 
mu8LíSize
;

441 
U32
 
mu32Posôi⁄
=1UL;

443 i‡–
mPosiD©a
 =
W_DEFAULT_MCU_DATA
 )

445 
mD©a
 = 
W_DEFAULT_SVR_DATA
;

449 
mD©a
 = 
mPosiD©a
;

451 
mD©aTemp
 = 
mD©a
;

453 
mu8LíSize
=1; 
mD©aTemp
>9; mu8LenSize++)

455 
mD©aTemp
 /= 10;

456 
mu32Posôi⁄
 *= 10;

459 
mu8LíCou¡
=0; mu8LíCou¡<
mu8LíSize
; mu8LenCount++)

461 i‡(
mu8LíCou¡
 < (
mu8LíSize
-1))

463 
mu8D©a
 = (
U8
)(
mD©a
/
mu32Posôi⁄
);

465 i‡(
mu8LíSize
 == 1)

467 
mu8D©a
 = (
U8
)(
mD©a
);

469 
maiD©aBuf
[
mu8LíCou¡
] = 
	`WIFI_HEX2ASCII
((
U8
)(
mu8D©a
 & 0x0F));

470 i‡(
mu8LíCou¡
 < (
mu8LíSize
-2))

472 
mD©a
 = (mD©a%
mu32Posôi⁄
);

476 
mu8D©a
 = (
U8
)(
mD©a
%
mu32Posôi⁄
);

478 
mu32Posôi⁄
 = mu32Position / 10;

481 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetCommon.h

2 #i‚de‡
_WIFI_SëComm⁄_H_


3 
	#_WIFI_SëComm⁄_H_


	)

8 
	mWIFI_BLE_CERT_0001
 = 0x0001,

9 
	mWIFI_BLE_CERT_0002
,

10 
	mWIFI_BLE_CERT_0003
,

11 }
	tE_API_A7010_T
;

12 * 
GëWifiM⁄ô‹EvítLi°
 ( );

13 
U8
 
IsU£rModñCHP
 ( );

15 
AµlyFun˘i⁄D©a
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

17 
AµlyInfoD©a
 ( 
U16
 
mId
, 
I8
 *
pBuf
);

19 
AµlyM⁄ô‹D©a
 ( 
U16
 
mId
, 
I8
 *
pBuf
);

20 
C⁄vîtD©aHexToAscii
 ( 
U8
 
mTy≥
, 
U16
 
mu16Id
, 
I8
 *
pBuf
 );

22 
C⁄vîtD©aHexToAscii_RAM_M⁄ô‹
–
U8
 
mTy≥
, 
U16
 
mu16Addªss
, 
I8
 *
pBuf
, U16 
mLí
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetErrorData.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_DefU£r.h
"

17 
	~"WIFI_SëComm⁄.h
"

18 
	~"WIFI_TxF‹m.h
"

19 
	~"WIFI_SëEº‹D©a.h
"

25 
EvtWifiEº
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

31 #ifde‡
MODEL_NO_1


32 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°
[] =

34 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

35 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

36 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

37 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

38 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

39 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
EvtWifiEº
, 
NULL
 },

40 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
EvtWifiEº
, 
NULL
 },

41 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

42 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

43 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

44 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

45 { 
WIFI_ERROR_000C_BLDC_COMP
, 
EvtWifiEº
, 
NULL
 },

46 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

47 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
EvtWifiEº
, 
NULL
 },

48 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

49 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
EvtWifiEº
, 
NULL
 },

50 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

51 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

52 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

53 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

54 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

55 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

56 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

57 { 
WIFI_ERROR_0018_TEM_TEMP
, 
NULL
, NULL },

58 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

59 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
NULL
, NULL },

60 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
EvtWifiEº
, 
NULL
 },

61 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

62 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

63 { 
WIFI_ERROR_001E_HOT_OVER
, 
EvtWifiEº
, 
NULL
 },

64 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
EvtWifiEº
, 
NULL
 },

65 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
EvtWifiEº
, 
NULL
 },

66 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
EvtWifiEº
, 
NULL
 },

67 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
EvtWifiEº
, 
NULL
 },

68 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

69 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

70 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

71 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

72 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

73 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

74 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
EvtWifiEº
, 
NULL
 },

75 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
NULL
, NULL },

76 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

77 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
NULL
, NULL },

78 { 
WIFI_ERROR_002D_UV_OPERATION
, 
NULL
, NULL },

79 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

80 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL }

83 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°Cp
[] =

85 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

86 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

87 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

88 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

89 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

90 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
NULL
, NULL },

91 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
NULL
, NULL },

92 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

93 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

94 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

95 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

96 { 
WIFI_ERROR_000C_BLDC_COMP
, 
EvtWifiEº
, 
NULL
 },

97 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

98 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
EvtWifiEº
, 
NULL
 },

99 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

100 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
NULL
, NULL },

101 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

102 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

103 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

104 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

105 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

106 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

107 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

108 { 
WIFI_ERROR_0018_TEM_TEMP
, 
NULL
, NULL },

109 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

110 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
NULL
, NULL },

111 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
NULL
, NULL },

112 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

113 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

114 { 
WIFI_ERROR_001E_HOT_OVER
, 
NULL
, NULL },

115 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
NULL
, NULL },

116 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
EvtWifiEº
, 
NULL
 },

117 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
EvtWifiEº
, 
NULL
 },

118 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
EvtWifiEº
, 
NULL
 },

119 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

120 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

121 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

122 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

123 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

124 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

125 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
EvtWifiEº
, 
NULL
 },

126 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
NULL
, NULL },

127 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

128 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
NULL
, NULL },

129 { 
WIFI_ERROR_002D_UV_OPERATION
, 
NULL
, NULL },

130 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

131 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL }

135 #ifde‡
MODEL_NO_2


136 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°
[] =

138 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

139 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

140 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

141 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

142 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

143 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
EvtWifiEº
, 
NULL
 },

144 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
EvtWifiEº
, 
NULL
 },

145 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

146 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

147 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

148 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

149 { 
WIFI_ERROR_000C_BLDC_COMP
, 
EvtWifiEº
, 
NULL
 },

150 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

151 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
NULL
, NULL },

152 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

153 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
NULL
, NULL },

154 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

155 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

156 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

157 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

158 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

159 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

160 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

161 { 
WIFI_ERROR_0018_TEM_TEMP
, 
NULL
, NULL },

162 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

163 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
NULL
, NULL },

164 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
EvtWifiEº
, 
NULL
 },

165 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

166 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

167 { 
WIFI_ERROR_001E_HOT_OVER
, 
EvtWifiEº
, 
NULL
 },

168 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
NULL
, NULL },

169 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
NULL
, NULL },

170 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
NULL
, NULL },

171 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
NULL
, NULL },

172 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

173 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

174 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

175 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

176 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

177 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

178 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
EvtWifiEº
, 
NULL
 },

179 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
EvtWifiEº
, 
NULL
 },

180 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

181 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
EvtWifiEº
, 
NULL
 },

182 { 
WIFI_ERROR_002D_UV_OPERATION
, 
EvtWifiEº
, 
NULL
 },

183 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

184 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL }

187 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°Cp
[] =

189 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

190 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

191 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

192 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

193 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

194 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
NULL
, NULL },

195 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
NULL
, NULL },

196 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

197 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

198 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

199 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

200 { 
WIFI_ERROR_000C_BLDC_COMP
, 
EvtWifiEº
, 
NULL
 },

201 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

202 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
NULL
, NULL },

203 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

204 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
NULL
, NULL },

205 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

206 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

207 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

208 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

209 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

210 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

211 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

212 { 
WIFI_ERROR_0018_TEM_TEMP
, 
NULL
, NULL },

213 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

214 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
NULL
, NULL },

215 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
NULL
, NULL },

216 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

217 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

218 { 
WIFI_ERROR_001E_HOT_OVER
, 
NULL
, NULL },

219 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
NULL
, NULL },

220 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
NULL
, NULL },

221 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
NULL
, NULL },

222 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
NULL
, NULL },

223 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

224 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

225 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

226 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

227 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

228 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

229 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
EvtWifiEº
, 
NULL
 },

230 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
EvtWifiEº
, 
NULL
 },

231 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

232 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
EvtWifiEº
, 
NULL
 },

233 { 
WIFI_ERROR_002D_UV_OPERATION
, 
EvtWifiEº
, 
NULL
 },

234 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

235 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL }

239 #ifde‡
MODEL_NO_3


240 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°
[] =

242 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

243 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

244 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

245 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

246 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

247 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
EvtWifiEº
, 
NULL
 },

248 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
EvtWifiEº
, 
NULL
 },

249 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

250 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

251 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

252 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

253 { 
WIFI_ERROR_000C_BLDC_COMP
, 
NULL
, NULL },

254 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

255 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
NULL
, NULL },

256 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

257 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
NULL
, NULL },

258 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

259 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

260 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

261 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

262 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

263 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

264 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

265 { 
WIFI_ERROR_0018_TEM_TEMP
, 
EvtWifiEº
, 
NULL
 },

266 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

267 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
EvtWifiEº
, 
NULL
 },

268 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
EvtWifiEº
, 
NULL
 },

269 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

270 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

271 { 
WIFI_ERROR_001E_HOT_OVER
, 
EvtWifiEº
, 
NULL
 },

272 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
EvtWifiEº
, 
NULL
 },

273 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
NULL
, NULL },

274 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
NULL
, NULL },

275 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
NULL
, NULL },

276 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

277 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

278 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

279 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

280 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

281 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

282 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
NULL
, NULL },

283 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
NULL
, NULL },

284 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

285 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
NULL
, NULL },

286 { 
WIFI_ERROR_002D_UV_OPERATION
, 
NULL
, NULL },

287 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

288 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL },

289 { 
WIFI_ERROR_0030_TDS_REMOVE
, 
NULL
, NULL }

292 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°Cp
[] =

294 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

295 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

296 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

297 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

298 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

299 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
NULL
, NULL },

300 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
NULL
, NULL },

301 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

302 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

303 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

304 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

305 { 
WIFI_ERROR_000C_BLDC_COMP
, 
NULL
, NULL },

306 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

307 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
NULL
, NULL },

308 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

309 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
NULL
, NULL },

310 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

311 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

312 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

313 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

314 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

315 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

316 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

317 { 
WIFI_ERROR_0018_TEM_TEMP
, 
EvtWifiEº
, 
NULL
 },

318 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

319 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
EvtWifiEº
, 
NULL
 },

320 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
NULL
, NULL },

321 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

322 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

323 { 
WIFI_ERROR_001E_HOT_OVER
, 
NULL
, NULL },

324 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
NULL
, NULL },

325 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
NULL
, NULL },

326 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
NULL
, NULL },

327 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
NULL
, NULL },

328 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

329 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

330 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

331 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

332 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

333 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

334 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
NULL
, NULL },

335 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
NULL
, NULL },

336 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

337 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
NULL
, NULL },

338 { 
WIFI_ERROR_002D_UV_OPERATION
, 
NULL
, NULL },

339 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

340 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL },

341 { 
WIFI_ERROR_0030_TDS_REMOVE
, 
NULL
, NULL }

345 #ifde‡
MODEL_NO_4


346 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°
[] =

348 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

349 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

350 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

351 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

352 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

353 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
EvtWifiEº
, 
NULL
 },

354 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
EvtWifiEº
, 
NULL
 },

355 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

356 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

357 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

358 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

359 { 
WIFI_ERROR_000C_BLDC_COMP
, 
NULL
, NULL },

360 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

361 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
NULL
, NULL },

362 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

363 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
NULL
, NULL },

364 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

365 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

366 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

367 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

368 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

369 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

370 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

371 { 
WIFI_ERROR_0018_TEM_TEMP
, 
EvtWifiEº
, 
NULL
 },

372 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

373 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
EvtWifiEº
, 
NULL
 },

374 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
EvtWifiEº
, 
NULL
 },

375 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

376 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

377 { 
WIFI_ERROR_001E_HOT_OVER
, 
EvtWifiEº
, 
NULL
 },

378 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
EvtWifiEº
, 
NULL
 },

379 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
NULL
, NULL },

380 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
NULL
, NULL },

381 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
NULL
, NULL },

382 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

383 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

384 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

385 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

386 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

387 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

388 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
NULL
, NULL },

389 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
NULL
, NULL },

390 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

391 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
NULL
, NULL },

392 { 
WIFI_ERROR_002D_UV_OPERATION
, 
NULL
, NULL },

393 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

394 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL }

397 c⁄° 
WifiTxFuncLi°_T
 
	gWifiEº‹Li°Cp
[] =

399 { 
WIFI_ERROR_0001_LOW_LEVEL
, 
NULL
, NULL },

400 { 
WIFI_ERROR_0002_HIGH_LEVEL
, 
NULL
, NULL },

401 { 
WIFI_ERROR_0003_COMPLEX_LEVEL
, 
NULL
, NULL },

402 { 
WIFI_ERROR_0004_FEED_VALVE
, 
NULL
, NULL },

403 { 
WIFI_ERROR_0005_LEAK_WATER
, 
NULL
, NULL },

404 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
NULL
, NULL },

405 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
NULL
, NULL },

406 { 
WIFI_ERROR_0008_COLD_TEMP
, 
EvtWifiEº
, 
NULL
 },

407 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
EvtWifiEº
, 
NULL
 },

408 { 
WIFI_ERROR_000A_TDSIN_TEMP
, 
NULL
, NULL },

409 { 
WIFI_ERROR_000B_TDSOUT_TEMP
, 
NULL
, NULL },

410 { 
WIFI_ERROR_000C_BLDC_COMP
, 
NULL
, NULL },

411 { 
WIFI_ERROR_000D_STERILIZE_TRAY
, 
NULL
, NULL },

412 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
NULL
, NULL },

413 { 
WIFI_ERROR_000F_STERILIZE_STATE
, 
NULL
, NULL },

414 { 
WIFI_ERROR_0010_HOTDRAIN_CLOSE
, 
NULL
, NULL },

415 { 
WIFI_ERROR_0011_TDSIN_SENSOR
, 
NULL
, NULL },

416 { 
WIFI_ERROR_0012_TDSOUT_SENSOR
, 
NULL
, NULL },

417 { 
WIFI_ERROR_0013_EVA_TEMP
, 
NULL
, NULL },

418 { 
WIFI_ERROR_0014_ICE_MOTOR
, 
NULL
, NULL },

419 { 
WIFI_ERROR_0015_COLD_PUMP
, 
NULL
, NULL },

420 { 
WIFI_ERROR_0016_COLD_LEVEL
, 
NULL
, NULL },

421 { 
WIFI_ERROR_0017_SPARKLING_PUMP
, 
NULL
, NULL },

422 { 
WIFI_ERROR_0018_TEM_TEMP
, 
EvtWifiEº
, 
NULL
 },

423 { 
WIFI_ERROR_0019_STOP_WATER
, 
EvtWifiEº
, 
NULL
 },

424 { 
WIFI_ERROR_001A_TEM_OPERATION
, 
EvtWifiEº
, 
NULL
 },

425 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
NULL
, NULL },

426 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
EvtWifiEº
, 
NULL
 },

427 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
EvtWifiEº
, 
NULL
 },

428 { 
WIFI_ERROR_001E_HOT_OVER
, 
NULL
, NULL },

429 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
NULL
, NULL },

430 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
NULL
, NULL },

431 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
NULL
, NULL },

432 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
NULL
, NULL },

433 { 
WIFI_ERROR_0023_ICE_TRAY_IN
, 
NULL
, NULL },

434 { 
WIFI_ERROR_0024_COLD_TEMP_UP
, 
NULL
, NULL },

435 { 
WIFI_ERROR_0025_COLD_TEMP_DOWN
, 
NULL
, NULL },

436 { 
WIFI_ERROR_0026_HOT_TANK_TEMP
, 
NULL
, NULL },

437 { 
WIFI_ERROR_0027_HOT_LEVEL
, 
NULL
, NULL },

438 { 
WIFI_ERROR_0028_ICE_SHAFT_LEVEL
, 
NULL
, NULL },

439 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
NULL
, NULL },

440 { 
WIFI_ERROR_002A_STIRRING_MOTOR
, 
NULL
, NULL },

441 { 
WIFI_ERROR_002B_COMP_OUT_TEMP
, 
NULL
, NULL },

442 { 
WIFI_ERROR_002C_STERILIZE_MODULE
, 
NULL
, NULL },

443 { 
WIFI_ERROR_002D_UV_OPERATION
, 
NULL
, NULL },

444 { 
WIFI_ERROR_002E_OUT_TRAY_MOTOR
, 
NULL
, NULL },

445 { 
WIFI_ERROR_002F_PRESSURE_SENSOR
, 
NULL
, NULL }

450 
	#SZ_ER_LIST
 ( (
WifiEº‹Li°
Ë/ (
WifiTxFuncLi°_T
Ë)

	)

456 * 
	$GëWifiEº‹EvítLi°
 ( )

458 i‡–
	`IsU£rModñCHP
(Ë=
TRUE
 )

460  (*)
WifiEº‹Li°
;

464  (*)
WifiEº‹Li°Cp
;

466 
	}
}

468 
U16
 
	$GëWifiEº‹Li°Size
 ( )

470  
SZ_ER_LIST
;

471 
	}
}

477 
	$EvtWifiEº
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

479 
I8
 
mai8Buf
[
LENGTH_WIFI_DATA_ONE
];

481 
	`_MEMSET_
–(
__FAR
*Ë
mai8Buf
, '\0', (mai8Buf) );

483 
	`C⁄vîtD©aHexToAscii
–
TYPE_ERROR_CMD
, 
mId
, 
mai8Buf
 );

485 
	`Ár_•rötf_s
–
pBuf
, 0, 
mai8Buf
 );

486 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetErrorData.h

2 #i‚de‡
_WIFI_SëEº‹D©a_H_


3 
	#_WIFI_SëEº‹D©a_H_


	)

7 
	mWIFI_ERROR_0001_LOW_LEVEL
 = 0x0001,

8 
	mWIFI_ERROR_0002_HIGH_LEVEL
,

9 
	mWIFI_ERROR_0003_COMPLEX_LEVEL
,

10 
	mWIFI_ERROR_0004_FEED_VALVE
,

11 
	mWIFI_ERROR_0005_LEAK_WATER
,

12 
	mWIFI_ERROR_0006_HOTIN_TEMP
,

13 
	mWIFI_ERROR_0007_HOTOUT_TEMP
,

14 
	mWIFI_ERROR_0008_COLD_TEMP
,

15 
	mWIFI_ERROR_0009_NATURAL_TEMP
,

16 
	mWIFI_ERROR_000A_TDSIN_TEMP
,

17 
	mWIFI_ERROR_000B_TDSOUT_TEMP
,

18 
	mWIFI_ERROR_000C_BLDC_COMP
,

19 
	mWIFI_ERROR_000D_STERILIZE_TRAY
,

20 
	mWIFI_ERROR_000E_DRAIN_PUMP
,

21 
	mWIFI_ERROR_000F_STERILIZE_STATE
,

22 
	mWIFI_ERROR_0010_HOTDRAIN_CLOSE
,

23 
	mWIFI_ERROR_0011_TDSIN_SENSOR
,

24 
	mWIFI_ERROR_0012_TDSOUT_SENSOR
,

25 
	mWIFI_ERROR_0013_EVA_TEMP
,

26 
	mWIFI_ERROR_0014_ICE_MOTOR
,

27 
	mWIFI_ERROR_0015_COLD_PUMP
,

28 
	mWIFI_ERROR_0016_COLD_LEVEL
,

29 
	mWIFI_ERROR_0017_SPARKLING_PUMP
,

30 
	mWIFI_ERROR_0018_TEM_TEMP
,

31 
	mWIFI_ERROR_0019_STOP_WATER
,

32 
	mWIFI_ERROR_001A_TEM_OPERATION
,

33 
	mWIFI_ERROR_001B_STOP_HOTWATER
,

34 
	mWIFI_ERROR_001C_LEAK_FLOW
,

35 
	mWIFI_ERROR_001D_LEAK_SENSOR
,

36 
	mWIFI_ERROR_001E_HOT_OVER
,

37 
	mWIFI_ERROR_001F_HEATER_SENSOR
,

38 
	mWIFI_ERROR_0020_ROOM_TEMP
,

39 
	mWIFI_ERROR_0021_MICRO_SW_DETECT
,

40 
	mWIFI_ERROR_0022_MICRO_SW_MOVE
,

41 
	mWIFI_ERROR_0023_ICE_TRAY_IN
,

42 
	mWIFI_ERROR_0024_COLD_TEMP_UP
,

43 
	mWIFI_ERROR_0025_COLD_TEMP_DOWN
,

44 
	mWIFI_ERROR_0026_HOT_TANK_TEMP
,

45 
	mWIFI_ERROR_0027_HOT_LEVEL
,

46 
	mWIFI_ERROR_0028_ICE_SHAFT_LEVEL
,

47 
	mWIFI_ERROR_0029_BLDC_STATUS
,

48 
	mWIFI_ERROR_002A_STIRRING_MOTOR
,

49 
	mWIFI_ERROR_002B_COMP_OUT_TEMP
,

50 
	mWIFI_ERROR_002C_STERILIZE_MODULE
,

51 
	mWIFI_ERROR_002D_UV_OPERATION
,

52 
	mWIFI_ERROR_002E_OUT_TRAY_MOTOR
,

53 
	mWIFI_ERROR_002F_PRESSURE_SENSOR
,

54 
	mWIFI_ERROR_0030_TDS_REMOVE
,

56 
	mWIFI_ERROR_NUM


57 }
	tE_API_A1030_T
;

59 * 
GëWifiEº‹EvítLi°
 ( );

60 
U16
 
GëWifiEº‹Li°Size
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetFunctionData.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_SëComm⁄.h
"

17 
	~"WIFI_TxF‹m.h
"

18 
	~"WIFI_SëFun˘i⁄D©a.h
"

24 
EvtWifiTxFunc
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

25 
EvtWifiRxFunc
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

31 #ifde‡
MODEL_NO_1


32 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°
[] =

34 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

35 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

36 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

37 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

38 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

39 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

40 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

41 { 
WIFI_FUNC_0008_ICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

42 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

43 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

44 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

45 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

46 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

47 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

48 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

49 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

50 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

51 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

52 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
NULL
, NULL },

53 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
NULL
, NULL },

54 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

55 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

56 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

57 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

58 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

59 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

60 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

61 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

62 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

63 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

64 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
NULL
, NULL },

65 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

66 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

67 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

68 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

69 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

70 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

71 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

72 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

73 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

74 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

75 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

76 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

77 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

78 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

79 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

80 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

81 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
EvtWifiTxFunc
, 
NULL
 },

82 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

83 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

84 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

85 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

86 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

87 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

88 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
NULL
, NULL },

89 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

90 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

91 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

92 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

93 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
NULL
, NULL },

94 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

95 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
NULL
, NULL },

96 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
, 
NULL
, NULL },

97 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

98 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

99 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

100 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

101 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

102 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

103 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

104 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

105 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

106 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

107 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

108 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
NULL
, NULL },

109 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
NULL
, NULL },

110 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
NULL
, NULL },

111 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
NULL
, NULL },

112 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

113 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

114 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

115 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

116 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

117 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

118 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

119 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

120 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
NULL
, NULL },

121 { 
WIFI_FUNC_0058_ICE_SIZE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

122 { 
WIFI_FUNC_0059_ICE_ONOFF_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

123 { 
WIFI_FUNC_005A_UV_ICE_TANK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

124 { 
WIFI_FUNC_005B_UV_ICE_TRAY_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

125 { 
WIFI_FUNC_005C_SMART_CHECK_RESULT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

126 { 
WIFI_FUNC_005D_UV_ICE_FAUCET_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

127 { 
WIFI_FUNC_005E_SLEEP_MODE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

128 { 
WIFI_FUNC_005F_SLEEP_START_HOUR
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

129 { 
WIFI_FUNC_0060_SLEEP_START_MIN
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

130 { 
WIFI_FUNC_0061_SLEEP_END_HOUR
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

131 { 
WIFI_FUNC_0062_SLEEP_END_MIN
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

134 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°Cp
[] =

136 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

137 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

138 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
NULL
, NULL },

139 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

140 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

141 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

142 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

143 { 
WIFI_FUNC_0008_ICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

144 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

145 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

146 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

147 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

148 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

149 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

150 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

151 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

152 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

153 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

154 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
NULL
, NULL },

155 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
NULL
, NULL },

156 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

157 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

158 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

159 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

160 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

161 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
NULL
, NULL },

162 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
NULL
, NULL },

163 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
NULL
, NULL },

164 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

165 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

166 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
NULL
, NULL },

167 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

168 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

169 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

170 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

171 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

172 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

173 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

174 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

175 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

176 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

177 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

178 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

179 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

180 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

181 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

182 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

183 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
EvtWifiTxFunc
, 
NULL
 },

184 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

185 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

186 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

187 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

188 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

189 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

190 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
NULL
, NULL },

191 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

192 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

193 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

194 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
NULL
, NULL },

195 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
NULL
, NULL },

196 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

197 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
NULL
, NULL },

198 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
, 
NULL
, NULL },

199 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

200 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

201 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

202 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

203 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

204 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

205 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

206 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

207 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

208 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

209 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

210 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
NULL
, NULL },

211 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
NULL
, NULL },

212 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
NULL
, NULL },

213 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
NULL
, NULL },

214 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

215 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

216 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

217 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

218 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

219 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

220 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

221 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

222 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
NULL
, NULL },

223 { 
WIFI_FUNC_0058_ICE_SIZE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

224 { 
WIFI_FUNC_0059_ICE_ONOFF_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

225 { 
WIFI_FUNC_005A_UV_ICE_TANK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

226 { 
WIFI_FUNC_005B_UV_ICE_TRAY_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

227 { 
WIFI_FUNC_005C_SMART_CHECK_RESULT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

228 { 
WIFI_FUNC_005D_UV_ICE_FAUCET_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

229 { 
WIFI_FUNC_005E_SLEEP_MODE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

230 { 
WIFI_FUNC_005F_SLEEP_START_HOUR
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

231 { 
WIFI_FUNC_0060_SLEEP_START_MIN
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

232 { 
WIFI_FUNC_0061_SLEEP_END_HOUR
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

233 { 
WIFI_FUNC_0062_SLEEP_END_MIN
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

237 #ifde‡
MODEL_NO_2


238 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°
[] =

240 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

241 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

242 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

243 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

244 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

245 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

246 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

247 { 
WIFI_FUNC_0008_ICE_SEL
, 
NULL
, NULL },

248 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

249 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

250 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

251 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

252 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

253 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

254 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

255 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

256 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

257 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

258 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

259 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

260 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

261 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

262 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

263 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

264 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

265 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

266 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

267 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

268 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

269 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

270 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

271 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

272 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

273 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

274 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

275 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

276 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

277 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

278 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

279 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

280 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

281 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

282 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

283 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

284 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

285 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

286 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

287 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
NULL
, NULL },

288 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

289 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
NULL
, NULL },

290 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

291 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

292 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

293 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
NULL
, NULL },

294 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
NULL
, NULL },

295 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

296 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

297 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

298 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
NULL
, NULL },

299 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
NULL
, NULL },

300 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

301 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
NULL
, NULL },

302 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
, 
NULL
, NULL },

303 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

304 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

305 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

306 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

307 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

308 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

309 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

310 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

311 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

312 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
NULL
, NULL },

313 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

314 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

315 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

316 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

317 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

318 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

319 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

320 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

321 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

322 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

323 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

324 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

325 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

326 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

329 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°Cp
[] =

331 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

332 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

333 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
NULL
, NULL },

334 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

335 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

336 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

337 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

338 { 
WIFI_FUNC_0008_ICE_SEL
, 
NULL
, NULL },

339 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

340 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

341 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

342 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

343 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

344 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

345 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

346 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

347 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

348 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

349 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

350 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

351 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

352 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

353 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

354 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

355 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

356 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
NULL
, NULL },

357 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
NULL
, NULL },

358 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
NULL
, NULL },

359 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

360 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

361 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

362 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

363 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

364 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

365 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

366 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

367 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

368 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

369 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

370 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

371 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

372 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

373 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

374 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

375 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

376 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

377 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

378 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
NULL
, NULL },

379 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

380 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
NULL
, NULL },

381 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

382 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

383 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

384 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
NULL
, NULL },

385 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
NULL
, NULL },

386 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

387 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

388 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

389 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
NULL
, NULL },

390 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
NULL
, NULL },

391 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

392 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
NULL
, NULL },

393 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
, 
NULL
, NULL },

394 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

395 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

396 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

397 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

398 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

399 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

400 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

401 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

402 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

403 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
NULL
, NULL },

404 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

405 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

406 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

407 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

408 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

409 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

410 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

411 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

412 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

413 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

414 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

415 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

416 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

417 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

421 #ifde‡
MODEL_NO_3


422 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°
[] =

424 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

425 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

426 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

427 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

428 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

429 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

430 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

431 { 
WIFI_FUNC_0008_ICE_SEL
, 
NULL
, NULL },

432 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

433 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

434 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

435 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

436 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

437 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

438 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

439 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

440 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

441 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

442 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
NULL
, NULL },

443 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
NULL
, NULL },

444 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

445 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

446 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

447 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

448 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

449 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

450 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

451 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

452 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

453 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

454 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
NULL
, NULL },

455 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

456 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

457 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

458 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

459 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

460 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

461 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

462 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

463 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

464 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

465 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

466 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

467 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

468 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

469 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

470 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

471 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
NULL
, NULL },

472 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

473 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
NULL
, NULL },

474 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

475 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

476 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

477 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
NULL
, NULL },

478 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

479 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

480 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

481 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

482 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

483 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
NULL
, NULL },

484 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

485 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

486 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
, 
EvtWifiTxFunc
, 
NULL
 },

487 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

488 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

489 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

490 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

491 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

492 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

493 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

494 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

495 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

496 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

497 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
NULL
, NULL },

498 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
NULL
, NULL },

499 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
NULL
, NULL },

500 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
NULL
, NULL },

501 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
NULL
, NULL },

502 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

503 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

504 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

505 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

506 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

507 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

508 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

509 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

510 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
NULL
, NULL },

511 { 
WIFI_FUNC_0058_ICE_SIZE_SEL
, 
NULL
, NULL },

512 { 
WIFI_FUNC_0059_ICE_ONOFF_SEL
, 
NULL
, NULL },

513 { 
WIFI_FUNC_005A_UV_ICE_TANK_STATUS
, 
NULL
, NULL },

514 { 
WIFI_FUNC_005B_UV_ICE_TRAY_STATUS
, 
NULL
, NULL },

515 { 
WIFI_FUNC_005C_SMART_CHECK_RESULT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

518 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°Cp
[] =

520 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

521 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

522 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
NULL
, NULL },

523 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

524 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

525 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

526 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

527 { 
WIFI_FUNC_0008_ICE_SEL
, 
NULL
, NULL },

528 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

529 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

530 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

531 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

532 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

533 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

534 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

535 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

536 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

537 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

538 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
NULL
, NULL },

539 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
NULL
, NULL },

540 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

541 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

542 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

543 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

544 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

545 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
NULL
, NULL },

546 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
NULL
, NULL },

547 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
NULL
, NULL },

548 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

549 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

550 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
NULL
, NULL },

551 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

552 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

553 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

554 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

555 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

556 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

557 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

558 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

559 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

560 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

561 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

562 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

563 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

564 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

565 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

566 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

567 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
NULL
, NULL },

568 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

569 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
NULL
, NULL },

570 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

571 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

572 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

573 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
NULL
, NULL },

574 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

575 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

576 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

577 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

578 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
NULL
, NULL },

579 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
NULL
, NULL },

580 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

581 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

582 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
, 
EvtWifiTxFunc
, 
NULL
 },

583 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

584 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

585 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

586 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

587 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

588 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

589 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

590 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

591 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

592 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

593 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
NULL
, NULL },

594 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
NULL
, NULL },

595 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
NULL
, NULL },

596 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
NULL
, NULL },

597 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
NULL
, NULL },

598 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

599 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

600 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

601 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

602 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

603 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

604 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

605 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

606 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
NULL
, NULL },

607 { 
WIFI_FUNC_0058_ICE_SIZE_SEL
, 
NULL
, NULL },

608 { 
WIFI_FUNC_0059_ICE_ONOFF_SEL
, 
NULL
, NULL },

609 { 
WIFI_FUNC_005A_UV_ICE_TANK_STATUS
, 
NULL
, NULL },

610 { 
WIFI_FUNC_005B_UV_ICE_TRAY_STATUS
, 
NULL
, NULL },

611 { 
WIFI_FUNC_005C_SMART_CHECK_RESULT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

615 #ifde‡
MODEL_NO_4


616 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°
[] =

618 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

619 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

620 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

621 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

622 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

623 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

624 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

625 { 
WIFI_FUNC_0008_ICE_SEL
, 
NULL
, NULL },

626 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

627 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

628 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

629 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

630 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

631 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

632 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

633 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

634 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

635 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

636 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
NULL
, NULL },

637 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
NULL
, NULL },

638 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

639 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

640 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

641 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

642 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

643 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

644 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

645 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
EvtWifiTxFunc
, 
NULL
 },

646 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

647 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

648 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

649 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

650 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

651 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

652 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

653 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

654 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

655 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

656 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

657 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

658 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

659 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

660 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

661 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

662 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

663 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

664 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

665 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
NULL
, NULL },

666 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

667 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
NULL
, NULL },

668 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

669 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

670 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

671 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
NULL
, NULL },

672 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
NULL
, NULL },

673 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

674 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

675 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

676 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
NULL
, NULL },

677 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

678 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

679 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
NULL
, NULL },

680 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
, 
NULL
, NULL },

681 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

682 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

683 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

684 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

685 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

686 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

687 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

688 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

689 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

690 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
NULL
, NULL },

691 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

692 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

693 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

694 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

695 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

696 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

697 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

698 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

699 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

700 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

701 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

702 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

703 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

704 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

707 c⁄° 
WifiTxFuncLi°_T
 
	gWifiFuncLi°Cp
[] =

709 { 
WIFI_FUNC_0001_POWER_SEL
, 
NULL
, NULL },

710 { 
WIFI_FUNC_0002_COLD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

711 { 
WIFI_FUNC_0003_HOT_LOCK_SEL
, 
NULL
, NULL },

712 { 
WIFI_FUNC_0004_SAVE_SEL
, 
NULL
, NULL },

713 { 
WIFI_FUNC_0005_LOCK_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

714 { 
WIFI_FUNC_0006_MUTE_SEL
, 
NULL
, NULL },

715 { 
WIFI_FUNC_0007_STERILIZE_SEL
, 
NULL
, NULL },

716 { 
WIFI_FUNC_0008_ICE_SEL
, 
NULL
, NULL },

717 { 
WIFI_FUNC_0009_HOT_TEMP
, 
NULL
, NULL },

718 { 
WIFI_FUNC_000A_COLD_TEMP
, 
EvtWifiTxFunc
, 
NULL
 },

719 { 
WIFI_FUNC_000B_WATER_SEL
, 
EvtWifiTxFunc
, 
NULL
 },

720 { 
WIFI_FUNC_000C_USER_SEL
, 
NULL
, NULL },

721 { 
WIFI_FUNC_000D_WATER_OUTQUANTITY
, 
EvtWifiTxFunc
, 
NULL
 },

722 { 
WIFI_FUNC_000E_TIME_YEAR
, 
NULL
, NULL },

723 { 
WIFI_FUNC_000F_TIME_MONTHDAY
, 
NULL
, NULL },

724 { 
WIFI_FUNC_0010_TIME_MINSEC
, 
NULL
, NULL },

725 { 
WIFI_FUNC_0011_STERILIZE_CYCLE
, 
NULL
, NULL },

726 { 
WIFI_FUNC_0012_STERILIZE_MODE
, 
NULL
, NULL },

727 { 
WIFI_FUNC_0013_STERILIZE_TIME
, 
NULL
, NULL },

728 { 
WIFI_FUNC_0014_STERILIZE_STATUS
, 
NULL
, NULL },

729 { 
WIFI_FUNC_0015_TDS_IN
, 
NULL
, NULL },

730 { 
WIFI_FUNC_0016_TDS_OUT
, 
NULL
, NULL },

731 { 
WIFI_FUNC_0017_WATER_PRESSURE
, 
NULL
, NULL },

732 { 
WIFI_FUNC_0018_TDS_INTEMP
, 
NULL
, NULL },

733 { 
WIFI_FUNC_0019_TDS_OUTTEMP
, 
NULL
, NULL },

734 { 
WIFI_FUNC_001A_HOT_INTEMP
, 
NULL
, NULL },

735 { 
WIFI_FUNC_001B_HOT_MEANTEMP
, 
NULL
, NULL },

736 { 
WIFI_FUNC_001C_HOT_SELTEMP
, 
NULL
, NULL },

737 { 
WIFI_FUNC_001D_WATER_INQUANTITY
, 
NULL
, NULL },

738 { 
WIFI_FUNC_001E_AUTODRAIN_SEL
, 
NULL
, NULL },

739 { 
WIFI_FUNC_001F_DRAIN_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

740 { 
WIFI_FUNC_0020_WATER_REQUANTITY
, 
NULL
, NULL },

741 { 
WIFI_FUNC_0021_HEART_TIME1
, 
NULL
, NULL },

742 { 
WIFI_FUNC_0022_HEART_TIME2
, 
NULL
, NULL },

743 { 
WIFI_FUNC_0023_HEART_TIME3
, 
NULL
, NULL },

744 { 
WIFI_FUNC_0024_HEART_TIME4
, 
EvtWifiTxFunc
, 
NULL
 },

745 { 
WIFI_FUNC_0025_FILTER_NOTICE1
, 
NULL
, NULL },

746 { 
WIFI_FUNC_0026_FILTER_NOTICE2
, 
NULL
, NULL },

747 { 
WIFI_FUNC_0027_FILTER_NOTICE3
, 
NULL
, NULL },

748 { 
WIFI_FUNC_0028_FILTER_NOTICE4
, 
NULL
, NULL },

749 { 
WIFI_FUNC_0029_SERVICE_TIME
, 
NULL
, NULL },

750 { 
WIFI_FUNC_002A_REMOVE_STATE
, 
NULL
, NULL },

751 { 
WIFI_FUNC_002B_SAVE_DETECT
, 
NULL
, NULL },

752 { 
WIFI_FUNC_002C_SILVER_CARE
, 
EvtWifiTxFunc
, 
NULL
 },

753 { 
WIFI_FUNC_002D_DRAIN_QUANTITY
, 
NULL
, NULL },

754 { 
WIFI_FUNC_002E_STERILIZE_QUANTITY
, 
NULL
, NULL },

755 { 
WIFI_FUNC_002F_SPARKLING_SEL
, 
NULL
, NULL },

756 { 
WIFI_FUNC_0030_ICE_MAKETIME
, 
NULL
, NULL },

757 { 
WIFI_FUNC_0031_VOICE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

758 { 
WIFI_FUNC_0032_ICELOCK_SEL
, 
NULL
, NULL },

759 { 
WIFI_FUNC_0033_VOICE_VOL_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

760 { 
WIFI_FUNC_0034_LIGHT_SEL
, 
NULL
, NULL },

761 { 
WIFI_FUNC_0035_COVER1_OPEN
, 
EvtWifiTxFunc
, 
NULL
 },

762 { 
WIFI_FUNC_0036_COVER2_OPEN
, 
NULL
, NULL },

763 { 
WIFI_FUNC_0037_SLEEP_SEL
, 
NULL
, NULL },

764 { 
WIFI_FUNC_0038_MASH_CLEAN
, 
NULL
, NULL },

765 { 
WIFI_FUNC_0039_HOT_SEL
, 
NULL
, NULL },

766 { 
WIFI_FUNC_003A_FREEZE_BURST
, 
NULL
, NULL },

767 { 
WIFI_FUNC_003B_HOT_TEMP_SEL
, 
NULL
, NULL },

768 { 
WIFI_FUNC_003C_COLD_STRENGTH_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

769 { 
WIFI_FUNC_003D_HEIGHT_SEL
, 
NULL
, NULL },

770 { 
WIFI_FUNC_003E_WATER_COURSE_STATUS
, 
NULL
, NULL },

771 { 
WIFI_FUNC_003F_WATER_COURSE_RESET
 
NULL
, NULL },

772 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

773 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

774 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 
EvtWifiTxFunc
, 
NULL
 },

775 { 
WIFI_FUNC_0043_FILTER_STATUS1
, 
EvtWifiTxFunc
, 
NULL
 },

776 { 
WIFI_FUNC_0044_FILTER_STATUS2
, 
NULL
, NULL },

777 { 
WIFI_FUNC_0045_FILTER_STATUS3
, 
NULL
, NULL },

778 { 
WIFI_FUNC_0046_FILTER_STATUS4
, 
NULL
, NULL },

779 { 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

780 { 
WIFI_FUNC_0048_HOT_TEMP_SEL
, 
NULL
, NULL },

781 { 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
, 
NULL
, NULL },

782 { 
WIFI_FUNC_004A_WELCOME_LIGHT
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

783 { 
WIFI_FUNC_004B_HIDDEN_LCD_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

784 { 
WIFI_FUNC_004C_FAUCET_MOVE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

785 { 
WIFI_FUNC_004D_FAUCET_MOVE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

786 { 
WIFI_FUNC_004E_CUP_SENSING_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

787 { 
WIFI_FUNC_004F_SOUND_VOL_SEL
, 
NULL
, NULL },

788 { 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
, 
EvtWifiTxFunc
, 
NULL
 },

789 { 
WIFI_FUNC_0051_QUANTITY_USE_SEL
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 },

790 { 
WIFI_FUNC_0052_VOICE_MODE_SEL
, 
NULL
, NULL },

791 { 
WIFI_FUNC_0053_FILTER_RESET1
, 
EvtWifiTxFunc
, 
NULL
 },

792 { 
WIFI_FUNC_0054_FILTER_RESET2
, 
NULL
, NULL },

793 { 
WIFI_FUNC_0055_FILTER_RESET3
, 
NULL
, NULL },

794 { 
WIFI_FUNC_0056_FILTER_RESET4
, 
NULL
, NULL },

795 { 
WIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
, 
EvtWifiTxFunc
, 
EvtWifiRxFunc
 }

799 
	#SZ_FN_LIST
 ( (
WifiFuncLi°
Ë/ (
WifiTxFuncLi°_T
Ë)

	)

805 * 
	$GëWifiFuncEvítLi°
 ( )

807 i‡–
	`IsU£rModñCHP
(Ë=
TRUE
 )

809  (*)
WifiFuncLi°
;

813  (*)
WifiFuncLi°Cp
;

815 
	}
}

817 
U16
 
	$GëWifiFuncLi°Size
 ( )

819  
SZ_FN_LIST
;

820 
	}
}

823 
U8
 
	$IsEx˚±Id
 ( 
U16
 
mId
 )

825 i‡–
mId
 =
WIFI_FUNC_0040_SMART_CHECK_RQST
 )

827  
TRUE
;

829  
FALSE
;

830 
	}
}

832 
U8
 
	$IsEx˚±W©îAmou¡ID
 ( 
U16
 
mId
 )

834 i‡–
mId
 =
WIFI_FUNC_0066_DEFAULT_QUANTITY_SEL
 )

836  
TRUE
;

838  
FALSE
;

839 
	}
}

841 
U8
 
	$IsEx˚±W©îAmou¡ID_Li°
 ( 
U16
 
mId
 )

843 i‡(–
mId
 >
WIFI_FUNC_0067_WATER_QUANTITY_USE_SEL0
 )&&–mId <
WIFI_FUNC_0071_WATER_QUANTITY_USE_SEL10
 ))

845  
TRUE
;

847  
FALSE
;

848 
	}
}

854 
	$EvtWifiTxFunc
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

856 
I8
 
mai8Buf
[
LENGTH_WIFI_DATA_ONE
];

858 
	`_MEMSET_
–(
__FAR
*Ë
mai8Buf
, '\0', (mai8Buf) );

860 
	`C⁄vîtD©aHexToAscii
–
TYPE_FUNC_CMD
, 
mId
, 
mai8Buf
 );

862 
	`Ár_•rötf_s
–
pBuf
, 0, 
mai8Buf
 );

863 
	}
}

865 
	$EvtWifiRxFunc
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

867 
	`AµlyFun˘i⁄D©a
–
mId
, 
pBuf
 );

868 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetFunctionData.h

2 #i‚de‡
_WIFI_SëFun˘i⁄D©a_H_


3 
	#_WIFI_SëFun˘i⁄D©a_H_


	)

7 
	mWIFI_FUNC_0001_POWER_SEL
 = 0x0001,

8 
	mWIFI_FUNC_0002_COLD_SEL
,

9 
	mWIFI_FUNC_0003_HOT_LOCK_SEL
,

10 
	mWIFI_FUNC_0004_SAVE_SEL
,

11 
	mWIFI_FUNC_0005_LOCK_SEL
,

12 
	mWIFI_FUNC_0006_MUTE_SEL
,

13 
	mWIFI_FUNC_0007_STERILIZE_SEL
,

14 
	mWIFI_FUNC_0008_ICE_SEL
,

15 
	mWIFI_FUNC_0009_HOT_TEMP
,

16 
	mWIFI_FUNC_000A_COLD_TEMP
,

17 
	mWIFI_FUNC_000B_WATER_SEL
,

18 
	mWIFI_FUNC_000C_USER_SEL
,

19 
	mWIFI_FUNC_000D_WATER_OUTQUANTITY
,

20 
	mWIFI_FUNC_000E_TIME_YEAR
,

21 
	mWIFI_FUNC_000F_TIME_MONTHDAY
,

22 
	mWIFI_FUNC_0010_TIME_MINSEC
,

23 
	mWIFI_FUNC_0011_STERILIZE_CYCLE
,

24 
	mWIFI_FUNC_0012_STERILIZE_MODE
,

25 
	mWIFI_FUNC_0013_STERILIZE_TIME
,

26 
	mWIFI_FUNC_0014_STERILIZE_STATUS
,

27 
	mWIFI_FUNC_0015_TDS_IN
,

28 
	mWIFI_FUNC_0016_TDS_OUT
,

29 
	mWIFI_FUNC_0017_WATER_PRESSURE
,

30 
	mWIFI_FUNC_0018_TDS_INTEMP
,

31 
	mWIFI_FUNC_0019_TDS_OUTTEMP
,

32 
	mWIFI_FUNC_001A_HOT_INTEMP
,

33 
	mWIFI_FUNC_001B_HOT_MEANTEMP
,

34 
	mWIFI_FUNC_001C_HOT_SELTEMP
,

35 
	mWIFI_FUNC_001D_WATER_INQUANTITY
,

36 
	mWIFI_FUNC_001E_AUTODRAIN_SEL
,

37 
	mWIFI_FUNC_001F_DRAIN_STATUS
,

38 
	mWIFI_FUNC_0020_WATER_REQUANTITY
,

39 
	mWIFI_FUNC_0021_HEART_TIME1
,

40 
	mWIFI_FUNC_0022_HEART_TIME2
,

41 
	mWIFI_FUNC_0023_HEART_TIME3
,

42 
	mWIFI_FUNC_0024_HEART_TIME4
,

43 
	mWIFI_FUNC_0025_FILTER_NOTICE1
,

44 
	mWIFI_FUNC_0026_FILTER_NOTICE2
,

45 
	mWIFI_FUNC_0027_FILTER_NOTICE3
,

46 
	mWIFI_FUNC_0028_FILTER_NOTICE4
,

47 
	mWIFI_FUNC_0029_SERVICE_TIME
,

48 
	mWIFI_FUNC_002A_REMOVE_STATE
,

49 
	mWIFI_FUNC_002B_SAVE_DETECT
,

50 
	mWIFI_FUNC_002C_SILVER_CARE
,

51 
	mWIFI_FUNC_002D_DRAIN_QUANTITY
,

52 
	mWIFI_FUNC_002E_STERILIZE_QUANTITY
,

53 
	mWIFI_FUNC_002F_SPARKLING_SEL
,

54 
	mWIFI_FUNC_0030_ICE_MAKETIME
,

55 
	mWIFI_FUNC_0031_VOICE_SEL
,

56 
	mWIFI_FUNC_0032_ICELOCK_SEL
,

57 
	mWIFI_FUNC_0033_VOICE_VOL_SEL
,

58 
	mWIFI_FUNC_0034_LIGHT_SEL
,

59 
	mWIFI_FUNC_0035_COVER1_OPEN
,

60 
	mWIFI_FUNC_0036_COVER2_OPEN
,

61 
	mWIFI_FUNC_0037_SLEEP_SEL
,

62 
	mWIFI_FUNC_0038_MASH_CLEAN
,

63 
	mWIFI_FUNC_0039_HOT_SEL
,

64 
	mWIFI_FUNC_003A_FREEZE_BURST
,

65 
	mWIFI_FUNC_003B_HOT_TEMP_SEL
,

66 
	mWIFI_FUNC_003C_COLD_STRENGTH_SEL
,

67 
	mWIFI_FUNC_003D_HEIGHT_SEL
,

68 
	mWIFI_FUNC_003E_WATER_COURSE_STATUS
,

69 
	mWIFI_FUNC_003F_WATER_COURSE_RESET
,

70 
	mWIFI_FUNC_0040_SMART_CHECK_RQST
,

71 
	mWIFI_FUNC_0041_SMART_CHECK_STATUS
,

72 
	mWIFI_FUNC_0042_SMART_CHECK_PROGRESS
,

73 
	mWIFI_FUNC_0043_FILTER_STATUS1
,

74 
	mWIFI_FUNC_0044_FILTER_STATUS2
,

75 
	mWIFI_FUNC_0045_FILTER_STATUS3
,

76 
	mWIFI_FUNC_0046_FILTER_STATUS4
,

77 
	mWIFI_FUNC_0047_WATER_QUANTITY_SEL
,

78 
	mWIFI_FUNC_0048_HOT_TEMP_SEL
,

79 
	mWIFI_FUNC_0049_OUT_BUTTON_LIGHT
,

80 
	mWIFI_FUNC_004A_WELCOME_LIGHT
,

81 
	mWIFI_FUNC_004B_HIDDEN_LCD_SEL
,

82 
	mWIFI_FUNC_004C_FAUCET_MOVE_SEL
,

83 
	mWIFI_FUNC_004D_FAUCET_MOVE_STATUS
,

84 
	mWIFI_FUNC_004E_CUP_SENSING_SEL
,

85 
	mWIFI_FUNC_004F_SOUND_VOL_SEL
,

86 
	mWIFI_FUNC_0050_UV_STERILIZE_STATUS
,

87 
	mWIFI_FUNC_0051_QUANTITY_USE_SEL
,

88 
	mWIFI_FUNC_0052_VOICE_MODE_SEL
,

89 
	mWIFI_FUNC_0053_FILTER_RESET1
,

90 
	mWIFI_FUNC_0054_FILTER_RESET2
,

91 
	mWIFI_FUNC_0055_FILTER_RESET3
,

92 
	mWIFI_FUNC_0056_FILTER_RESET4
,

93 
	mWIFI_FUNC_0057_CUP_SENSING_SENSITIVITY
,

94 
	mWIFI_FUNC_0058_ICE_SIZE_SEL
,

95 
	mWIFI_FUNC_0059_ICE_ONOFF_SEL
,

96 
	mWIFI_FUNC_005A_UV_ICE_TANK_STATUS
,

97 
	mWIFI_FUNC_005B_UV_ICE_TRAY_STATUS
,

98 
	mWIFI_FUNC_005C_SMART_CHECK_RESULT
,

99 
	mWIFI_FUNC_005D_UV_ICE_FAUCET_STATUS
,

100 
	mWIFI_FUNC_005E_SLEEP_MODE_SEL
,

101 
	mWIFI_FUNC_005F_SLEEP_START_HOUR
,

102 
	mWIFI_FUNC_0060_SLEEP_START_MIN
,

103 
	mWIFI_FUNC_0061_SLEEP_END_HOUR
,

104 
	mWIFI_FUNC_0062_SLEEP_END_MIN
,

105 
	mWIFI_FUNC_0063_DEFAULT_QUANTITY_ML_SEL
,

106 
	mWIFI_FUNC_0064_STERILIZE_EXPECTED_TIME
,

107 
	mWIFI_FUNC_0065_DEFAULT_TEMP_SEL
,

108 
	mWIFI_FUNC_0066_DEFAULT_QUANTITY_SEL
,

109 
	mWIFI_FUNC_0067_WATER_QUANTITY_USE_SEL0
,

110 
	mWIFI_FUNC_0068_WATER_QUANTITY_USE_SEL1
,

111 
	mWIFI_FUNC_0069_WATER_QUANTITY_USE_SEL2
,

112 
	mWIFI_FUNC_006A_WATER_QUANTITY_USE_SEL3
,

113 
	mWIFI_FUNC_006B_WATER_QUANTITY_USE_SEL4
,

114 
	mWIFI_FUNC_006C_WATER_QUANTITY_USE_SEL5
,

115 
	mWIFI_FUNC_006D_WATER_QUANTITY_USE_SEL6
,

116 
	mWIFI_FUNC_006E_WATER_QUANTITY_USE_SEL7
,

117 
	mWIFI_FUNC_006F_WATER_QUANTITY_USE_SEL8
,

118 
	mWIFI_FUNC_0070_WATER_QUANTITY_USE_SEL9
,

119 
	mWIFI_FUNC_0071_WATER_QUANTITY_USE_SEL10
,

120 
	mWIFI_FUNC_0072_WATER_QUANTITY_SORT_SEL
,

121 
	mWIFI_FUNC_0073_WATER_TEMP_SORT_SEL
,

122 
	mWIFI_FUNC_0074_UNUSE_POWER_SAVING_SEL
,

123 
	mWIFI_FUNC_0075_TEMP_UNIT_SEL
,

124 
	mWIFI_FUNC_0076_WATER_QUANTITY_UNIT_SEL
,

125 
	mWIFI_FUNC_0077_HOT_TARGET_TEMP_TIME
,

126 
	mWIFI_FUNC_0078_COLD_TARGET_TEMP_TIME
,

127 
	mWIFI_FUNC_0079_MIXED_WATER_AVE_TEMP
,

128 
	mWIFI_FUNC_007A_MIXED_WATER_MIN_TEMP
,

129 
	mWIFI_FUNC_007B_MIXED_WATER_MAX_TEMP
,

130 
	mWIFI_FUNC_007C_COLDTANK_LOW_WATERLEVEL
,

131 
	mWIFI_FUNC_007D_COLDTANK_HIGH_WATERLEVEL
,

132 
	mWIFI_FUNC_007E_HIGH_TEMP_STL_SEL
,

133 
	mWIFI_FUNC_007F_HIGH_TEMP_STL_STATUS
,

135 
	mWIFI_FUNC_0080_HIGH_TEMP_STL_TIME
,

136 
	mWIFI_FUNC_0081_HIGH_TEMP_STL_TIME_M
,

137 
	mWIFI_FUNC_0082_UNUSE_POW_SAVING_STATUS
,

138 
	mWIFI_FUNC_0083_POWER_SAVING_STATUS
,

139 
	mWIFI_FUNC_0084_HOT_RESTARTING_TEMP
,

140 
	mWIFI_FUNC_0085_HOT_STOP_TEMP
,

141 
	mWIFI_FUNC_0086_COLD_RESTARTING_TEMP
,

142 
	mWIFI_FUNC_0087_COLD_STOP_TEMP
,

143 
	mWIFI_FUNC_0088_COLD_ADDITIONAL_TIME
,

144 
	mWIFI_FUNC_0089_BOOST_PUMP_STATUS
,

145 
	mWIFI_FUNC_008A_COLDTANK_UV_STL_STATUS
,

146 
	mWIFI_FUNC_008B_HEATER_STATUS
,

147 
	mWIFI_FUNC_008C_COMP_STATUS
,

148 
	mWIFI_FUNC_008D_FILTER_WATER_USAGE
,

149 
	mWIFI_FUNC_008E_FILTER_REMAINING_DAY
,

150 
	mWIFI_FUNC_008F_ICE_FULL_STATUS
,

151 
	mWIFI_FUNC_0090_ICE_TRAY_POSITION_STATUS
,

152 
	mWIFI_FUNC_0091_REFRIGERANT_SWC_STATUS
,

153 
	mWIFI_FUNC_0092_DEICING_STAUTS
,

154 
	mWIFI_FUNC_0093_ICEMAKING_STAUTS
,

155 
	mWIFI_FUNC_0094_DUMMY_DEICING_STAUTS
,

156 
	mWIFI_FUNC_0095_ICEMAKING_COMPLET_TIME
,

157 
	mWIFI_FUNC_0096_DEICING_COMPLET_TIME
,

158 
	mWIFI_FUNC_0097_TARY_WATER_COMPLET_TIME
,

159 
	mWIFI_FUNC_0098_TARY_WATER_QUANTITY
,

160 
	mWIFI_FUNC_0099_COMP_TARGET_RPS
,

161 
	mWIFI_FUNC_009A_COMP_CURRENT_RPS
,

162 
	mWIFI_FUNC_009B_DRAINTANK_LOW_WLEVEL
,

163 
	mWIFI_FUNC_009C_DRAINTANK_HIGH_WLEVEL
,

164 
	mWIFI_FUNC_009D_DRAINTANK_DRAIN_STAUTS
,

165 
	mWIFI_FUNC_009E_COLD_EVA_TEMP
,

166 
	mWIFI_FUNC_009F_ICE_EVA_TEMP
,

167 
	mWIFI_FUNC_00A0_COLD_TANK_TEMP
,

168 
	mWIFI_FUNC_00A1_HOT_TANK_TEMP
,

169 
	mWIFI_FUNC_00A2_CHILD_LOCK
,

170 
	mWIFI_FUNC_00A3_FLOWPATH_EMPTY
,

171 
	mWIFI_FUNC_00A4_HOTTANK_LOW_W_LEVEL
,

172 
	mWIFI_FUNC_00A5_HOTTANK_HIGH_W_LEVEL
,

173 
	mWIFI_FUNC_00A6_PURETANK_LOW_W_LEVEL
,

174 
	mWIFI_FUNC_00A7_PURETANK_HIGH_W_LEVEL
,

175 
	mWIFI_FUNC_00A8_COLDTANK_MID_W_LEVEL
,

176 
	mWIFI_FUNC_00A9_UNUSED_TIME
,

177 
	mWIFI_FUNC_00AA_SMART_SAVING_SET_TIME
,

178 
	mWIFI_FUNC_00AB_SAMRT_SAVING_STATE
,

179 
	mWIFI_FUNC_00AC_FILTER1_WATER_USAGE
,

180 
	mWIFI_FUNC_00AD_FILTER1_UASGE_DAY
,

181 
	mWIFI_FUNC_00AE_FILTER2_WATER_USAGE
,

182 
	mWIFI_FUNC_00AF_FILTER2_UASGE_DAY
,

183 
	mWIFI_FUNC_00B0_FILTER3_WATER_USAGE
,

184 
	mWIFI_FUNC_00B1_FILTER3_UASGE_DAY
,

185 
	mWIFI_FUNC_00B2_FILTER_NOTICE1
,

186 
	mWIFI_FUNC_00B3_FILTER_NOTICE2
,

187 
	mWIFI_FUNC_00B4_FILTER_NOTICE3
,

188 
	mWIFI_FUNC_00B5_FILTER_FLUSHING
,

189 
	mWIFI_FUNC_00B6_VOICE_LANGUAGE
,

190 
	mWIFI_FUNC_00B7_FILTER_SEQ
,

191 
	mWIFI_FUNC_00B8_DEFAULT_TEMP_SET
,

192 
	mWIFI_FUNC_NUM


193 }
	tE_API_A1010_T
;

195 * 
GëWifiFuncEvítLi°
 ( );

196 
U16
 
GëWifiFuncLi°Size
 ( );

198 
U8
 
IsEx˚±Id
 ( 
U16
 
mId
 );

199 
U8
 
IsEx˚±W©îAmou¡ID
 ( 
U16
 
mId
 );

200 
U8
 
IsEx˚±W©îAmou¡ID_Li°
 ( 
U16
 
mId
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetInformationData.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_SëComm⁄.h
"

17 
	~"WIFI_TxF‹m.h
"

18 
	~"WIFI_SëInf‹m©i⁄D©a.h
"

24 
EvtWifiTxInfo
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

25 
EvtWifiRxInfo
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

31 c⁄° 
WifiTxFuncLi°_T
 
	gWifiInf‹m©i⁄Li°
[] =

33 { 
WIFI_INFO_0000_YEAR
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

34 { 
WIFI_INFO_0001_MONTH
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

35 { 
WIFI_INFO_0002_DATE
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

36 { 
WIFI_INFO_0003_HOUR
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

37 { 
WIFI_INFO_0004_MINUTE
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

38 { 
WIFI_INFO_0005_SECOND
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

39 { 
WIFI_INFO_0006_DAY
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

40 { 
WIFI_INFO_0007_PART_PERIOD
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

42 { 
WIFI_INFO_0010_WEATHER
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

43 { 
WIFI_INFO_0011_AQI
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

44 { 
WIFI_INFO_0012_PM10
, 
NULL
, NULL },

45 { 
WIFI_INFO_0013_PM25
, 
NULL
, NULL },

46 { 
WIFI_INFO_0014_CURRENT_TEMP
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

47 { 
WIFI_INFO_0015_HIGH_TEMP
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

48 { 
WIFI_INFO_0016_LOW_TEMP
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

50 { 
WIFI_INFO_0020_LAST_HEART_YEAR
, 
NULL
, NULL },

51 { 
WIFI_INFO_0021_LAST_HEART_MONTH
, 
NULL
, NULL },

52 { 
WIFI_INFO_0022_LAST_HEART_DAY
, 
NULL
, NULL },

53 { 
WIFI_INFO_0023_NEXT_HEART_YEAR
, 
NULL
, NULL },

54 { 
WIFI_INFO_0024_NEXT_HEART_MONTH
, 
NULL
, NULL },

55 { 
WIFI_INFO_0025_NEXT_HEART_DAY
, 
NULL
, NULL },

56 { 
WIFI_INFO_0026_FILTER_CHANGE_DAY1
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

57 { 
WIFI_INFO_0027_FILTER_CHANGE_DAY2
, 
NULL
, NULL }

60 c⁄° 
WifiTxFuncLi°_T
 
	gWifiInf‹m©i⁄Li°_USER
[] =

62 { 
WIFI_INFO_0000_YEAR
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

63 { 
WIFI_INFO_0001_MONTH
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

64 { 
WIFI_INFO_0002_DATE
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

65 { 
WIFI_INFO_0003_HOUR
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

66 { 
WIFI_INFO_0004_MINUTE
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

67 { 
WIFI_INFO_0005_SECOND
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

68 { 
WIFI_INFO_0006_DAY
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

69 { 
WIFI_INFO_0007_PART_PERIOD
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

71 { 
WIFI_INFO_0010_WEATHER
, 
NULL
, NULL },

72 { 
WIFI_INFO_0011_AQI
, 
NULL
, NULL },

73 { 
WIFI_INFO_0012_PM10
, 
NULL
, NULL },

74 { 
WIFI_INFO_0013_PM25
, 
NULL
, NULL },

75 { 
WIFI_INFO_0014_CURRENT_TEMP
, 
NULL
, NULL },

76 { 
WIFI_INFO_0015_HIGH_TEMP
, 
NULL
, NULL },

77 { 
WIFI_INFO_0016_LOW_TEMP
, 
NULL
, NULL },

79 { 
WIFI_INFO_0020_LAST_HEART_YEAR
, 
NULL
, NULL },

80 { 
WIFI_INFO_0021_LAST_HEART_MONTH
, 
NULL
, NULL },

81 { 
WIFI_INFO_0022_LAST_HEART_DAY
, 
NULL
, NULL },

82 { 
WIFI_INFO_0023_NEXT_HEART_YEAR
, 
NULL
, NULL },

83 { 
WIFI_INFO_0024_NEXT_HEART_MONTH
, 
NULL
, NULL },

84 { 
WIFI_INFO_0025_NEXT_HEART_DAY
, 
NULL
, NULL },

85 { 
WIFI_INFO_0026_FILTER_CHANGE_DAY1
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

86 { 
WIFI_INFO_0027_FILTER_CHANGE_DAY2
, 
NULL
, NULL }

89 c⁄° 
WifiTxFuncLi°_T
 
	gWifiInf‹m©i⁄Li°_DATA
[] =

91 { 
WIFI_INFO_0000_YEAR
, 
NULL
, NULL },

92 { 
WIFI_INFO_0001_MONTH
, 
NULL
, NULL },

93 { 
WIFI_INFO_0002_DATE
, 
NULL
, NULL },

94 { 
WIFI_INFO_0003_HOUR
, 
NULL
, NULL },

95 { 
WIFI_INFO_0004_MINUTE
, 
NULL
, NULL },

96 { 
WIFI_INFO_0005_SECOND
, 
NULL
, NULL },

97 { 
WIFI_INFO_0006_DAY
, 
NULL
, NULL },

98 { 
WIFI_INFO_0007_PART_PERIOD
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

100 { 
WIFI_INFO_0010_WEATHER
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

101 { 
WIFI_INFO_0011_AQI
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

102 { 
WIFI_INFO_0012_PM10
, 
NULL
, NULL },

103 { 
WIFI_INFO_0013_PM25
, 
NULL
, NULL },

104 { 
WIFI_INFO_0014_CURRENT_TEMP
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

105 { 
WIFI_INFO_0015_HIGH_TEMP
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

106 { 
WIFI_INFO_0016_LOW_TEMP
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

108 { 
WIFI_INFO_0020_LAST_HEART_YEAR
, 
NULL
, NULL },

109 { 
WIFI_INFO_0021_LAST_HEART_MONTH
, 
NULL
, NULL },

110 { 
WIFI_INFO_0022_LAST_HEART_DAY
, 
NULL
, NULL },

111 { 
WIFI_INFO_0023_NEXT_HEART_YEAR
, 
NULL
, NULL },

112 { 
WIFI_INFO_0024_NEXT_HEART_MONTH
, 
NULL
, NULL },

113 { 
WIFI_INFO_0025_NEXT_HEART_DAY
, 
NULL
, NULL },

114 { 
WIFI_INFO_0026_FILTER_CHANGE_DAY1
, 
EvtWifiTxInfo
, 
EvtWifiRxInfo
 },

115 { 
WIFI_INFO_0027_FILTER_CHANGE_DAY2
, 
NULL
, NULL }

118 
	#SZ_INFO_LIST
 ( (
WifiInf‹m©i⁄Li°
Ë/ (
WifiTxFuncLi°_T
Ë)

	)

124 * 
	$GëWifiInf‹m©i⁄EvítLi°
 ( )

126  (*)
WifiInf‹m©i⁄Li°
;

127 
	}
}

129 * 
	$GëWifiInfoU£rEvítLi°
 ( )

131  (*)
WifiInf‹m©i⁄Li°_USER
;

132 
	}
}

134 * 
	$GëWifiInfoD©aEvítLi°
 ( )

136  (*)
WifiInf‹m©i⁄Li°_DATA
;

137 
	}
}

139 
U16
 
	$GëWifiInf‹m©i⁄Li°Size
 ( )

141  
SZ_INFO_LIST
;

142 
	}
}

145 
U8
 
	$IsPosôiveD©a
 ( 
U16
 
mId
 )

147 i‡––
mId
 =
WIFI_INFO_0014_CURRENT_TEMP
 )

148 || ( 
mId
 =
WIFI_INFO_0015_HIGH_TEMP
 )

149 || ( 
mId
 =
WIFI_INFO_0016_LOW_TEMP
 ) )

151  
FALSE
;

153  
TRUE
;

154 
	}
}

160 
	$EvtWifiTxInfo
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

162 
I8
 
mai8Buf
[
LENGTH_WIFI_DATA_ONE
];

164 
	`_MEMSET_
–(
__FAR
*Ë
mai8Buf
, '\0', (mai8Buf) );

166 
	`C⁄vîtD©aHexToAscii
–
TYPE_INFO_RQST_CMD
, 
mId
, 
mai8Buf
 );

168 
	`Ár_•rötf_s
–
pBuf
, 0, 
mai8Buf
 );

169 
	}
}

171 
	$EvtWifiRxInfo
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

173 
	`AµlyInfoD©a
–
mId
, 
pBuf
 );

174 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetInformationData.h

2 #i‚de‡
_WIFI_SëInfoD©a_H_


3 
	#_WIFI_SëInfoD©a_H_


	)

7 
	mWIFI_INFO_0000_YEAR
 = 0x0000,

8 
	mWIFI_INFO_0001_MONTH
,

9 
	mWIFI_INFO_0002_DATE
,

10 
	mWIFI_INFO_0003_HOUR
,

11 
	mWIFI_INFO_0004_MINUTE
,

12 
	mWIFI_INFO_0005_SECOND
,

13 
	mWIFI_INFO_0006_DAY
,

14 
	mWIFI_INFO_0007_PART_PERIOD
,

16 
	mWIFI_INFO_0010_WEATHER
 = 0x0010,

17 
	mWIFI_INFO_0011_AQI
,

18 
	mWIFI_INFO_0012_PM10
,

19 
	mWIFI_INFO_0013_PM25
,

20 
	mWIFI_INFO_0014_CURRENT_TEMP
,

21 
	mWIFI_INFO_0015_HIGH_TEMP
,

22 
	mWIFI_INFO_0016_LOW_TEMP
,

24 
	mWIFI_INFO_0020_LAST_HEART_YEAR
 = 0x0020,

25 
	mWIFI_INFO_0021_LAST_HEART_MONTH
,

26 
	mWIFI_INFO_0022_LAST_HEART_DAY
,

27 
	mWIFI_INFO_0023_NEXT_HEART_YEAR
,

28 
	mWIFI_INFO_0024_NEXT_HEART_MONTH
,

29 
	mWIFI_INFO_0025_NEXT_HEART_DAY
,

30 
	mWIFI_INFO_0026_FILTER_CHANGE_DAY1
,

31 
	mWIFI_INFO_0027_FILTER_CHANGE_DAY2
,

33 
	mWIFI_INFO_NUM


34 }
	tE_API_A2010_T
;

36 * 
GëWifiInf‹m©i⁄EvítLi°
 ( );

37 * 
GëWifiInfoU£rEvítLi°
 ( );

38 * 
GëWifiInfoD©aEvítLi°
 ( );

39 
U16
 
GëWifiInf‹m©i⁄Li°Size
 ( );

41 
U8
 
IsPosôiveD©a
 ( 
U16
 
mId
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetMonitorData.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_DefU£r.h
"

17 
	~"WIFI_SëComm⁄.h
"

18 
	~"WIFI_TxF‹m.h
"

19 
	~"WIFI_SëM⁄ô‹D©a.h
"

25 
EvtWifiTxM⁄ô‹
 ( 
U16
 
mAddªss
, 
I8
 *
pBuf
, U16 
mLí
 );

26 
EvtWifiRxM⁄ô‹
 ( 
U16
 
mAddªss
, 
I8
 *
pBuf
 );

32 c⁄° 
WifiTxFuncLi°_M⁄ô‹_T
 
	gWifiM⁄ô‹Li°
[] =

34 { 
WIFI_MNT_0000_RamAddªss
, 
EvtWifiTxM⁄ô‹
, 
EvtWifiRxM⁄ô‹
 },

38 
	#SZ_M⁄ô‹_LIST
 ( (
WifiM⁄ô‹Li°
Ë/ (
WifiTxFuncLi°_M⁄ô‹_T
Ë)

	)

44 * 
	$GëWifiM⁄ô‹EvítLi°
 ( )

46  (*)
WifiM⁄ô‹Li°
;

47 
	}
}

49 
U16
 
	$GëWifiM⁄ô‹Li°Size
 ( )

51  
SZ_M⁄ô‹_LIST
;

52 
	}
}

59 
	$EvtWifiTxM⁄ô‹
 ( 
U16
 
mAddªss
, 
I8
 *
pBuf
, U16 
mLí
 )

61 
I8
 
mai8Buf
[
LENGTH_WIFI_DATA_ONE_MAX
];

63 
	`_MEMSET_
–(
__FAR
*Ë
mai8Buf
, '\0', (mai8Buf) );

66 
	`C⁄vîtD©aHexToAscii_RAM_M⁄ô‹
(
TYPE_MONITOR_DATA_CMD
, 
mAddªss
, 
mai8Buf
, 
mLí
 );

68 
	`Ár_•rötf_s
–
pBuf
, 0, 
mai8Buf
 );

69 
	}
}

71 
	$EvtWifiRxM⁄ô‹
 ( 
U16
 
mAddªss
, 
I8
 *
pBuf
 )

73 
	`AµlyM⁄ô‹D©a
–
mAddªss
, 
pBuf
 );

74 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetMonitorData.h

4 
	mWIFI_MNT_0000_RamAddªss
 = 0x0000,

6 }
	tE_API_A9010_T
;

8 * 
GëWifiM⁄ô‹EvítLi°
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetPartData.c

16 
	~"WIFI_Comm⁄.h
"

17 
	~"WIFI_SëComm⁄.h
"

18 
	~"WIFI_TxF‹m.h
"

19 
	~"WIFI_SëP¨tD©a.h
"

25 
EvtWifiTxP¨t
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

31 #ifde‡
MODEL_NO_1


32 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°
[] =

34 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

35 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

36 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

37 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

38 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

39 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
NULL
, NULL },

40 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
NULL
, NULL },

41 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
NULL
, NULL },

42 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

43 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

44 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
EvtWifiTxP¨t
, 
NULL
 },

45 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
EvtWifiTxP¨t
, 
NULL
 },

46 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

47 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
EvtWifiTxP¨t
, 
NULL
 },

48 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

49 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

50 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

51 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
NULL
, NULL },

52 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
NULL
, NULL },

53 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

54 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

55 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

56 { 
WIFI_PART_0016_VALVE_COLD_ROTATE
, 
NULL
, NULL },

57 { 
WIFI_PART_0017_VALVE_EW_IN
, 
NULL
, NULL },

58 { 
WIFI_PART_0018_VALVE_FLUSHING
, 
NULL
, NULL },

60 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

61 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

62 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

63 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

64 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
NULL
, NULL },

65 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

66 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

67 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

68 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

69 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

70 { 
WIFI_PART_010A_LEVEL_DRAIN_OVER
, 
NULL
, NULL },

71 { 
WIFI_PART_010B_LEVEL_DRAIN_HIGH
, 
EvtWifiTxP¨t
, 
NULL
 },

72 { 
WIFI_PART_010C_LEVEL_DRAIN_MID
, 
NULL
, NULL },

73 { 
WIFI_PART_010D_LEVEL_DRAIN_LOW
, 
EvtWifiTxP¨t
, 
NULL
 },

75 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

76 { 
WIFI_PART_0201_COLD_BLDC
, 
EvtWifiTxP¨t
, 
NULL
 },

77 { 
WIFI_PART_0202_COLD_TEM
, 
NULL
, NULL },

78 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
NULL
, NULL },

79 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

80 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
NULL
, NULL },

81 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

82 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

83 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

84 { 
WIFI_PART_0209_COLD_ROTATE_PUMP
, 
NULL
, NULL },

86 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

87 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

88 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
EvtWifiTxP¨t
, 
NULL
 },

89 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
EvtWifiTxP¨t
, 
NULL
 },

90 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

91 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

92 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

93 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

95 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

96 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

97 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

98 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

99 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

100 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

101 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

102 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
NULL
, NULL },

103 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

104 { 
WIFI_PART_0409_SENSOR_TANK_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

105 { 
WIFI_PART_040A_SENSOR_LIGHT
, 
NULL
, NULL },

106 { 
WIFI_PART_040B_SENSOR_WATER_COURSE_REED
, 
NULL
, NULL },

108 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
NULL
, NULL },

109 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

110 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
EvtWifiTxP¨t
, 
NULL
 },

111 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
EvtWifiTxP¨t
, 
NULL
 },

112 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
EvtWifiTxP¨t
, 
NULL
 },

113 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

115 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

116 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

117 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

118 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

120 { 
WIFI_PART_0700_FAUCET_REED_1
, 
NULL
, NULL },

121 { 
WIFI_PART_0701_FAUCET_REED_2
, 
NULL
, NULL },

122 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
NULL
, NULL },

123 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
NULL
, NULL },

125 { 
WIFI_PART_0800_ICE_PURE_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

126 { 
WIFI_PART_0801_ICE_FULL_SENSOR
, 
EvtWifiTxP¨t
, 
NULL
 },

127 { 
WIFI_PART_0802_ICE_SWING_BAR
, 
EvtWifiTxP¨t
, 
NULL
 },

128 { 
WIFI_PART_0803_ICE_TRAY_AC
, 
NULL
, NULL },

129 { 
WIFI_PART_0804_ICE_TRAY_STEPMOTOR
, 
NULL
, NULL },

130 { 
WIFI_PART_0805_ICE_TRAY_SENSING_SW
, 
EvtWifiTxP¨t
, 
NULL
 },

131 { 
WIFI_PART_0806_ICE_MOTOR_OUT
, 
NULL
, NULL },

132 { 
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

133 { 
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
, 
EvtWifiTxP¨t
, 
NULL
 },

134 { 
WIFI_PART_0809_ICE_HOT_GAS_VV
, 
NULL
, NULL },

135 { 
WIFI_PART_080A_ICE_DRAIN_PUMP
, 
EvtWifiTxP¨t
, 
NULL
 }

138 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°Cp
[] =

140 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

141 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

142 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
NULL
, NULL },

143 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

144 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

145 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
NULL
, NULL },

146 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
NULL
, NULL },

147 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
NULL
, NULL },

148 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

149 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
NULL
, NULL },

150 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
NULL
, NULL },

151 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
EvtWifiTxP¨t
, 
NULL
 },

152 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

153 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
EvtWifiTxP¨t
, 
NULL
 },

154 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

155 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

156 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

157 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
NULL
, NULL },

158 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
NULL
, NULL },

159 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

160 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

161 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

162 { 
WIFI_PART_0016_VALVE_COLD_ROTATE
, 
NULL
, NULL },

163 { 
WIFI_PART_0017_VALVE_EW_IN
, 
NULL
, NULL },

164 { 
WIFI_PART_0018_VALVE_FLUSHING
, 
EvtWifiTxP¨t
, 
NULL
 },

166 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

167 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

168 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

169 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

170 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
NULL
, NULL },

171 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

172 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

173 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

174 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

175 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

176 { 
WIFI_PART_010A_LEVEL_DRAIN_OVER
, 
NULL
, NULL },

177 { 
WIFI_PART_010B_LEVEL_DRAIN_HIGH
, 
EvtWifiTxP¨t
, 
NULL
 },

178 { 
WIFI_PART_010C_LEVEL_DRAIN_MID
, 
NULL
, NULL },

179 { 
WIFI_PART_010D_LEVEL_DRAIN_LOW
, 
EvtWifiTxP¨t
, 
NULL
 },

181 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

182 { 
WIFI_PART_0201_COLD_BLDC
, 
EvtWifiTxP¨t
, 
NULL
 },

183 { 
WIFI_PART_0202_COLD_TEM
, 
NULL
, NULL },

184 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
NULL
, NULL },

185 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

186 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
NULL
, NULL },

187 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

188 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

189 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

190 { 
WIFI_PART_0209_COLD_ROTATE_PUMP
, 
NULL
, NULL },

192 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

193 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

194 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
NULL
, NULL },

195 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
NULL
, NULL },

196 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
NULL
, NULL },

197 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
NULL
, NULL },

198 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
NULL
, NULL },

199 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
NULL
, NULL },

201 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

202 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

203 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

204 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

205 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

206 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

207 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

208 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
NULL
, NULL },

209 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

210 { 
WIFI_PART_0409_SENSOR_TANK_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

211 { 
WIFI_PART_040A_SENSOR_LIGHT
, 
NULL
, NULL },

212 { 
WIFI_PART_040B_SENSOR_WATER_COURSE_REED
, 
NULL
, NULL },

214 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
NULL
, NULL },

215 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

216 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
EvtWifiTxP¨t
, 
NULL
 },

217 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
EvtWifiTxP¨t
, 
NULL
 },

218 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
EvtWifiTxP¨t
, 
NULL
 },

219 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

221 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

222 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

223 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

224 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

226 { 
WIFI_PART_0700_FAUCET_REED_1
, 
NULL
, NULL },

227 { 
WIFI_PART_0701_FAUCET_REED_2
, 
NULL
, NULL },

228 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
NULL
, NULL },

229 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
NULL
, NULL },

231 { 
WIFI_PART_0800_ICE_PURE_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

232 { 
WIFI_PART_0801_ICE_FULL_SENSOR
, 
EvtWifiTxP¨t
, 
NULL
 },

233 { 
WIFI_PART_0802_ICE_SWING_BAR
, 
EvtWifiTxP¨t
, 
NULL
 },

234 { 
WIFI_PART_0803_ICE_TRAY_AC
, 
NULL
, NULL },

235 { 
WIFI_PART_0804_ICE_TRAY_STEPMOTOR
, 
NULL
, NULL },

236 { 
WIFI_PART_0805_ICE_TRAY_SENSING_SW
, 
EvtWifiTxP¨t
, 
NULL
 },

237 { 
WIFI_PART_0806_ICE_MOTOR_OUT
, 
NULL
, NULL },

238 { 
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

239 { 
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
, 
EvtWifiTxP¨t
, 
NULL
 },

240 { 
WIFI_PART_0809_ICE_HOT_GAS_VV
, 
NULL
, NULL },

241 { 
WIFI_PART_080A_ICE_DRAIN_PUMP
, 
EvtWifiTxP¨t
, 
NULL
 }

245 #ifde‡
MODEL_NO_2


246 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°
[] =

248 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

249 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

250 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
NULL
, NULL },

251 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
NULL
, NULL },

252 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
NULL
, NULL },

253 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
NULL
, NULL },

254 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

255 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

256 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

257 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

258 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
NULL
, NULL },

259 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
NULL
, NULL },

260 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

261 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
NULL
, NULL },

262 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

263 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

265 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

266 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
EvtWifiTxP¨t
, 
NULL
 },

267 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

268 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

269 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

270 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
NULL
, NULL },

272 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

273 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

274 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

275 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

276 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
EvtWifiTxP¨t
, 
NULL
 },

277 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

278 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

279 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

280 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

281 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

283 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

284 { 
WIFI_PART_0201_COLD_BLDC
, 
EvtWifiTxP¨t
, 
NULL
 },

285 { 
WIFI_PART_0202_COLD_TEM
, 
NULL
, NULL },

286 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
NULL
, NULL },

287 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

288 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

289 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

290 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

291 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

293 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

294 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

295 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
EvtWifiTxP¨t
, 
NULL
 },

296 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
EvtWifiTxP¨t
, 
NULL
 },

297 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

298 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

299 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

300 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
NULL
, NULL },

302 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

303 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

304 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

305 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

306 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

307 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

308 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

309 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
NULL
, NULL },

310 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

312 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
EvtWifiTxP¨t
, 
NULL
 },

313 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

314 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
NULL
, NULL },

315 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
NULL
, NULL },

316 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
NULL
, NULL },

317 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

319 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

320 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

321 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

322 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

324 { 
WIFI_PART_0700_FAUCET_REED_1
, 
EvtWifiTxP¨t
, 
NULL
 },

325 { 
WIFI_PART_0701_FAUCET_REED_2
, 
NULL
, NULL },

326 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
EvtWifiTxP¨t
, 
NULL
 },

327 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
NULL
, NULL }

330 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°Cp
[] =

332 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

333 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

334 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
NULL
, NULL },

335 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
NULL
, NULL },

336 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
NULL
, NULL },

337 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
NULL
, NULL },

338 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

339 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

340 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

341 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
NULL
, NULL },

342 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
NULL
, NULL },

343 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
NULL
, NULL },

344 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

345 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
NULL
, NULL },

346 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

347 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

349 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

350 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
EvtWifiTxP¨t
, 
NULL
 },

351 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

352 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

353 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

354 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
NULL
, NULL },

356 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

357 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

358 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

359 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

360 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
EvtWifiTxP¨t
, 
NULL
 },

361 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

362 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

363 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

364 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

365 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

367 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

368 { 
WIFI_PART_0201_COLD_BLDC
, 
EvtWifiTxP¨t
, 
NULL
 },

369 { 
WIFI_PART_0202_COLD_TEM
, 
NULL
, NULL },

370 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
NULL
, NULL },

371 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

372 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

373 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

374 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

375 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

377 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

378 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

379 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
NULL
, NULL },

380 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
NULL
, NULL },

381 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
NULL
, NULL },

382 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
NULL
, NULL },

383 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
NULL
, NULL },

384 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
NULL
, NULL },

386 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

387 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

388 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

389 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

390 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

391 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

392 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

393 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
NULL
, NULL },

394 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

396 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
EvtWifiTxP¨t
, 
NULL
 },

397 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

398 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
NULL
, NULL },

399 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
NULL
, NULL },

400 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
NULL
, NULL },

401 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

403 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

404 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

405 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

406 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

408 { 
WIFI_PART_0700_FAUCET_REED_1
, 
EvtWifiTxP¨t
, 
NULL
 },

409 { 
WIFI_PART_0701_FAUCET_REED_2
, 
NULL
, NULL },

410 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
EvtWifiTxP¨t
, 
NULL
 },

411 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
NULL
, NULL }

415 #ifde‡
MODEL_NO_3


416 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°
[] =

418 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

419 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

420 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

421 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

422 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

423 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
NULL
, NULL },

424 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
NULL
, NULL },

425 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
NULL
, NULL },

426 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

427 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

428 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
NULL
, NULL },

429 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
NULL
, NULL },

430 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

431 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
NULL
, NULL },

432 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

433 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

434 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

435 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
NULL
, NULL },

436 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
NULL
, NULL },

437 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

438 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

439 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
NULL
, NULL },

440 { 
WIFI_PART_0016_VALVE_COLD_ROTATE
, 
NULL
, NULL },

441 { 
WIFI_PART_0017_VALVE_EW_IN
, 
NULL
, NULL },

443 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

444 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

445 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

446 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

447 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
NULL
, NULL },

448 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

449 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

450 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

451 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

452 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

453 { 
WIFI_PART_010A_LEVEL_DRAIN_OVER
, 
NULL
, NULL },

454 { 
WIFI_PART_010B_LEVEL_DRAIN_HIGH
, 
NULL
, NULL },

455 { 
WIFI_PART_010C_LEVEL_DRAIN_MID
, 
NULL
, NULL },

456 { 
WIFI_PART_010D_LEVEL_DRAIN_LOW
, 
NULL
, NULL },

458 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

459 { 
WIFI_PART_0201_COLD_BLDC
, 
NULL
, NULL },

460 { 
WIFI_PART_0202_COLD_TEM
, 
EvtWifiTxP¨t
, 
NULL
 },

461 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

462 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

463 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
NULL
, NULL },

464 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

465 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

466 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

467 { 
WIFI_PART_0209_COLD_ROTATE_PUMP
, 
NULL
, NULL },

469 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

470 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

471 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
EvtWifiTxP¨t
, 
NULL
 },

472 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
EvtWifiTxP¨t
, 
NULL
 },

473 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

474 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

475 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

476 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

478 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

479 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

480 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

481 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

482 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

483 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

484 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

485 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
NULL
, NULL },

486 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

487 { 
WIFI_PART_0409_SENSOR_TANK_REED
, 
NULL
, NULL },

488 { 
WIFI_PART_040A_SENSOR_LIGHT
, 
NULL
, NULL },

489 { 
WIFI_PART_040B_SENSOR_WATER_COURSE_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

491 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
NULL
, NULL },

492 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

493 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
NULL
, NULL },

494 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
NULL
, NULL },

495 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
NULL
, NULL },

496 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

498 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

499 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

500 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

501 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

503 { 
WIFI_PART_0700_FAUCET_REED_1
, 
NULL
, NULL },

504 { 
WIFI_PART_0701_FAUCET_REED_2
, 
NULL
, NULL },

505 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
NULL
, NULL },

506 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
NULL
, NULL },

508 { 
WIFI_PART_0800_ICE_PURE_TEMP
, 
NULL
, NULL },

509 { 
WIFI_PART_0801_ICE_TRAY_TEMP_IN
, 
NULL
, NULL },

510 { 
WIFI_PART_0802_ICE_FULL_SENSOR
, 
NULL
, NULL },

511 { 
WIFI_PART_0803_ICE_SWING_BAR
, 
NULL
, NULL },

512 { 
WIFI_PART_0804_ICE_TRAY_AC
, 
NULL
, NULL },

513 { 
WIFI_PART_0805_ICE_TRAY_STEPMOTOR
, 
NULL
, NULL },

514 { 
WIFI_PART_0806_ICE_TRAY_SENSING_SW
, 
NULL
, NULL },

515 { 
WIFI_PART_0807_DEICE_TRAY_SENSING_SW
, 
NULL
, NULL },

516 { 
WIFI_PART_0808_ICE_MOTOR_OUT
, 
NULL
, NULL },

517 { 
WIFI_PART_0809_ICE_DOOR_STEPMOTOR
, 
NULL
, NULL },

518 { 
WIFI_PART_080A_ICE_COURSE_CHANGE_VV
, 
NULL
, NULL },

519 { 
WIFI_PART_080B_ICE_HOT_GAS_VV
, 
NULL
, NULL },

520 { 
WIFI_PART_080C_ICE_DRAIN_PUMP
, 
NULL
, NULL }

523 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°Cp
[] =

525 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

526 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

527 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
NULL
, NULL },

528 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

529 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

530 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
NULL
, NULL },

531 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
NULL
, NULL },

532 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
NULL
, NULL },

533 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

534 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
NULL
, NULL },

535 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
NULL
, NULL },

536 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
NULL
, NULL },

537 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

538 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
NULL
, NULL },

539 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

540 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

541 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

542 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
NULL
, NULL },

543 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
NULL
, NULL },

544 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

545 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

546 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
NULL
, NULL },

547 { 
WIFI_PART_0016_VALVE_COLD_ROTATE
, 
NULL
, NULL },

548 { 
WIFI_PART_0017_VALVE_EW_IN
, 
NULL
, NULL },

550 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

551 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

552 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

553 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

554 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
NULL
, NULL },

555 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

556 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

557 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

558 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

559 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

560 { 
WIFI_PART_010A_LEVEL_DRAIN_OVER
, 
NULL
, NULL },

561 { 
WIFI_PART_010B_LEVEL_DRAIN_HIGH
, 
NULL
, NULL },

562 { 
WIFI_PART_010C_LEVEL_DRAIN_MID
, 
NULL
, NULL },

563 { 
WIFI_PART_010D_LEVEL_DRAIN_LOW
, 
NULL
, NULL },

565 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

566 { 
WIFI_PART_0201_COLD_BLDC
, 
NULL
, NULL },

567 { 
WIFI_PART_0202_COLD_TEM
, 
EvtWifiTxP¨t
, 
NULL
 },

568 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

569 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

570 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
NULL
, NULL },

571 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

572 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

573 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

574 { 
WIFI_PART_0209_COLD_ROTATE_PUMP
, 
NULL
, NULL },

576 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

577 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

578 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
NULL
, NULL },

579 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
NULL
, NULL },

580 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
NULL
, NULL },

581 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
NULL
, NULL },

582 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
NULL
, NULL },

583 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
NULL
, NULL },

585 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

586 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

587 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

588 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

589 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

590 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

591 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

592 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
NULL
, NULL },

593 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

594 { 
WIFI_PART_0409_SENSOR_TANK_REED
, 
NULL
, NULL },

595 { 
WIFI_PART_040A_SENSOR_LIGHT
, 
NULL
, NULL },

596 { 
WIFI_PART_040B_SENSOR_WATER_COURSE_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

598 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
NULL
, NULL },

599 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

600 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
NULL
, NULL },

601 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
NULL
, NULL },

602 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
NULL
, NULL },

603 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

605 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

606 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

607 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

608 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

610 { 
WIFI_PART_0700_FAUCET_REED_1
, 
NULL
, NULL },

611 { 
WIFI_PART_0701_FAUCET_REED_2
, 
NULL
, NULL },

612 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
NULL
, NULL },

613 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
NULL
, NULL },

615 { 
WIFI_PART_0800_ICE_PURE_TEMP
, 
NULL
, NULL },

616 { 
WIFI_PART_0801_ICE_TRAY_TEMP_IN
, 
NULL
, NULL },

617 { 
WIFI_PART_0802_ICE_FULL_SENSOR
, 
NULL
, NULL },

618 { 
WIFI_PART_0803_ICE_SWING_BAR
, 
NULL
, NULL },

619 { 
WIFI_PART_0804_ICE_TRAY_AC
, 
NULL
, NULL },

620 { 
WIFI_PART_0805_ICE_TRAY_STEPMOTOR
, 
NULL
, NULL },

621 { 
WIFI_PART_0806_ICE_TRAY_SENSING_SW
, 
NULL
, NULL },

622 { 
WIFI_PART_0807_DEICE_TRAY_SENSING_SW
, 
NULL
, NULL },

623 { 
WIFI_PART_0808_ICE_MOTOR_OUT
, 
NULL
, NULL },

624 { 
WIFI_PART_0809_ICE_DOOR_STEPMOTOR
, 
NULL
, NULL },

625 { 
WIFI_PART_080A_ICE_COURSE_CHANGE_VV
, 
NULL
, NULL },

626 { 
WIFI_PART_080B_ICE_HOT_GAS_VV
, 
NULL
, NULL },

627 { 
WIFI_PART_080C_ICE_DRAIN_PUMP
, 
NULL
, NULL }

631 #ifde‡
MODEL_NO_4


632 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°
[] =

634 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

635 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

636 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

637 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

638 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
NULL
, NULL },

639 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

640 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
NULL
, NULL },

641 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
NULL
, NULL },

642 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

643 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

644 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
EvtWifiTxP¨t
, 
NULL
 },

645 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
NULL
, NULL },

646 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

647 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
NULL
, NULL },

648 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

649 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

650 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

651 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
NULL
, NULL },

652 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
NULL
, NULL },

653 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

654 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

655 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
NULL
, NULL },

657 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

658 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

659 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

660 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

661 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
NULL
, NULL },

662 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

663 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

664 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

665 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

666 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

668 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

669 { 
WIFI_PART_0201_COLD_BLDC
, 
NULL
, NULL },

670 { 
WIFI_PART_0202_COLD_TEM
, 
EvtWifiTxP¨t
, 
NULL
 },

671 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

672 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

673 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
NULL
, NULL },

674 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

675 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

676 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

678 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

679 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

680 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
EvtWifiTxP¨t
, 
NULL
 },

681 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
EvtWifiTxP¨t
, 
NULL
 },

682 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 },

683 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

684 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

685 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

687 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

688 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

689 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

690 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

691 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

692 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

693 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

694 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
EvtWifiTxP¨t
, 
NULL
 },

695 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

697 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
NULL
, NULL },

698 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

699 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
NULL
, NULL },

700 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
NULL
, NULL },

701 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
NULL
, NULL },

702 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

704 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

705 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

706 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

707 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

709 { 
WIFI_PART_0700_FAUCET_REED_1
, 
EvtWifiTxP¨t
, 
NULL
 },

710 { 
WIFI_PART_0701_FAUCET_REED_2
, 
EvtWifiTxP¨t
, 
NULL
 },

711 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
EvtWifiTxP¨t
, 
NULL
 },

712 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 }

714 c⁄° 
WifiTxFuncLi°_T
 
	gWifiP¨tLi°Cp
[] =

716 { 
WIFI_PART_0000_VALVE_FEED
, 
NULL
, NULL },

717 { 
WIFI_PART_0001_VALVE_NOS
, 
EvtWifiTxP¨t
, 
NULL
 },

718 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

719 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

720 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
NULL
, NULL },

721 { 
WIFI_PART_0005_VALVE_CP_OUT
, 
EvtWifiTxP¨t
, 
NULL
 },

722 { 
WIFI_PART_0006_VALVE_CHP_OUT
, 
NULL
, NULL },

723 { 
WIFI_PART_0007_VALVE_PURE_IN
, 
NULL
, NULL },

724 { 
WIFI_PART_0008_VALVE_HOT_AIR
, 
NULL
, NULL },

725 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
NULL
, NULL },

726 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
NULL
, NULL },

727 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
NULL
, NULL },

728 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
EvtWifiTxP¨t
, 
NULL
 },

729 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
NULL
, NULL },

730 { 
WIFI_PART_000E_VALVE_ICE_STORAGE_IN
, 
NULL
, NULL },

731 { 
WIFI_PART_000F_VALVE_PRESSURE_IN
, 
NULL
, NULL },

732 { 
WIFI_PART_0010_VALVE_PRESSURE_DRAIN
, 
NULL
, NULL },

733 { 
WIFI_PART_0011_VALVE_STERILIZE
, 
NULL
, NULL },

734 { 
WIFI_PART_0012_VALVE_DRAIN_NOS
, 
NULL
, NULL },

735 { 
WIFI_PART_0013_VALVE_ION_CHANGE
, 
NULL
, NULL },

736 { 
WIFI_PART_0014_VALVE_INNO_CENCE
, 
NULL
, NULL },

737 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
NULL
, NULL },

739 { 
WIFI_PART_0100_LEVEL_COLD_OVER
, 
NULL
, NULL },

740 { 
WIFI_PART_0101_LEVEL_COLD_HIGH
, 
NULL
, NULL },

741 { 
WIFI_PART_0102_LEVEL_COLD_MID
, 
NULL
, NULL },

742 { 
WIFI_PART_0103_LEVEL_COLD_LOW
, 
NULL
, NULL },

743 { 
WIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
, 
NULL
, NULL },

744 { 
WIFI_PART_0105_LEVEL_PURE_OVER
, 
NULL
, NULL },

745 { 
WIFI_PART_0106_LEVEL_PURE_HIGH
, 
NULL
, NULL },

746 { 
WIFI_PART_0107_LEVEL_PURE_MID
, 
NULL
, NULL },

747 { 
WIFI_PART_0108_LEVEL_PURE_LOW
, 
NULL
, NULL },

748 { 
WIFI_PART_0109_LEVEL_HOT_HIGH
, 
NULL
, NULL },

750 { 
WIFI_PART_0200_COLD_COMP
, 
NULL
, NULL },

751 { 
WIFI_PART_0201_COLD_BLDC
, 
NULL
, NULL },

752 { 
WIFI_PART_0202_COLD_TEM
, 
EvtWifiTxP¨t
, 
NULL
 },

753 { 
WIFI_PART_0203_COLD_TEM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

754 { 
WIFI_PART_0204_COLD_FAN
, 
EvtWifiTxP¨t
, 
NULL
 },

755 { 
WIFI_PART_0205_COLD_STIRRING_MOTOR
, 
NULL
, NULL },

756 { 
WIFI_PART_0206_COLD_TEMP_1
, 
EvtWifiTxP¨t
, 
NULL
 },

757 { 
WIFI_PART_0207_COLD_TEMP_2
, 
NULL
, NULL },

758 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 
EvtWifiTxP¨t
, 
NULL
 },

760 { 
WIFI_PART_0300_HOT_TANK_HEATER
, 
NULL
, NULL },

761 { 
WIFI_PART_0301_HOT_TEMP
, 
NULL
, NULL },

762 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
NULL
, NULL },

763 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
NULL
, NULL },

764 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
NULL
, NULL },

765 { 
WIFI_PART_0305_HOT_TEMP_IN
, 
NULL
, NULL },

766 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 
NULL
, NULL },

767 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 
NULL
, NULL },

769 { 
WIFI_PART_0400_SENSOR_PRESSURE_1
, 
NULL
, NULL },

770 { 
WIFI_PART_0401_SENSOR_PRESSURE_2
, 
NULL
, NULL },

771 { 
WIFI_PART_0402_SENSOR_LEAK
, 
EvtWifiTxP¨t
, 
NULL
 },

772 { 
WIFI_PART_0403_SENSOR_FLOW
, 
EvtWifiTxP¨t
, 
NULL
 },

773 { 
WIFI_PART_0404_SENSOR_FLOW_REED
, 
NULL
, NULL },

774 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
EvtWifiTxP¨t
, 
NULL
 },

775 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
EvtWifiTxP¨t
, 
NULL
 },

776 { 
WIFI_PART_0407_SENSOR_FILTER_SW_2
, 
EvtWifiTxP¨t
, 
NULL
 },

777 { 
WIFI_PART_0408_SENSOR_FILTER_SW_3
, 
NULL
, NULL },

779 { 
WIFI_PART_0500_STER_CSI_MODULE
, 
NULL
, NULL },

780 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
EvtWifiTxP¨t
, 
NULL
 },

781 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
NULL
, NULL },

782 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
NULL
, NULL },

783 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
NULL
, NULL },

784 { 
WIFI_PART_0505_STER_UV_COLD_TANK
, 
NULL
, NULL },

786 { 
WIFI_PART_0600_TDS_TEMP_IN
, 
NULL
, NULL },

787 { 
WIFI_PART_0601_TDS_TEMP_OUT
, 
NULL
, NULL },

788 { 
WIFI_PART_0602_TDS_SENSOR_IN
, 
NULL
, NULL },

789 { 
WIFI_PART_0603_TDS_SENSOR_OUT
, 
NULL
, NULL },

791 { 
WIFI_PART_0700_FAUCET_REED_1
, 
EvtWifiTxP¨t
, 
NULL
 },

792 { 
WIFI_PART_0701_FAUCET_REED_2
, 
EvtWifiTxP¨t
, 
NULL
 },

793 { 
WIFI_PART_0702_FAUCET_CUP_SENSOR
, 
EvtWifiTxP¨t
, 
NULL
 },

794 { 
WIFI_PART_0703_FAUCET_MOTOR
, 
EvtWifiTxP¨t
, 
NULL
 }

798 
	#SZ_PT_LIST
 ( (
WifiP¨tLi°
Ë/ (
WifiTxFuncLi°_T
Ë)

	)

804 * 
	$GëWifiP¨tEvítLi°
 ( )

806 i‡–
	`IsU£rModñCHP
(Ë=
TRUE
 )

808  (*)
WifiP¨tLi°
;

812  (*)
WifiP¨tLi°Cp
;

814 
	}
}

816 
U16
 
	$GëWifiP¨tLi°Size
 ( )

818  
SZ_PT_LIST
;

819 
	}
}

825 
	$EvtWifiTxP¨t
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

827 
I8
 
mai8Buf
[
LENGTH_WIFI_DATA_ONE
];

829 
	`_MEMSET_
–(
__FAR
*Ë
mai8Buf
, '\0', (mai8Buf));

831 
	`C⁄vîtD©aHexToAscii
–
TYPE_PART_CMD
, 
mId
, 
mai8Buf
 );

833 
	`Ár_•rötf_s
–
pBuf
, 0, 
mai8Buf
 );

834 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetPartData.h

2 #i‚de‡
_WIFI_SëP¨tD©a_H_


3 
	#_WIFI_SëP¨tD©a_H_


	)

7 
	mWIFI_PART_0000_VALVE_FEED
 = 0x0000,

8 
	mWIFI_PART_0001_VALVE_NOS
,

9 
	mWIFI_PART_0002_VALVE_HOT_OUT
,

10 
	mWIFI_PART_0003_VALVE_PURE_OUT
,

11 
	mWIFI_PART_0004_VALVE_COLD_OUT
,

12 
	mWIFI_PART_0005_VALVE_CP_OUT
,

13 
	mWIFI_PART_0006_VALVE_CHP_OUT
,

14 
	mWIFI_PART_0007_VALVE_PURE_IN
,

15 
	mWIFI_PART_0008_VALVE_HOT_AIR
,

16 
	mWIFI_PART_0009_VALVE_HOT_IN
,

17 
	mWIFI_PART_000A_VALVE_HOT_DRAIN
,

18 
	mWIFI_PART_000B_VALVE_COLD_AIR
,

19 
	mWIFI_PART_000C_VALVE_COLD_IN
,

20 
	mWIFI_PART_000D_VALVE_COLD_DRAIN
,

21 
	mWIFI_PART_000E_VALVE_ICE_STORAGE_IN
,

22 
	mWIFI_PART_000F_VALVE_PRESSURE_IN
,

23 
	mWIFI_PART_0010_VALVE_PRESSURE_DRAIN
,

24 
	mWIFI_PART_0011_VALVE_STERILIZE
,

25 
	mWIFI_PART_0012_VALVE_DRAIN_NOS
,

26 
	mWIFI_PART_0013_VALVE_ION_CHANGE
,

27 
	mWIFI_PART_0014_VALVE_INNO_CENCE
,

28 
	mWIFI_PART_0015_VALVE_ICE_TRAY_IN
,

29 
	mWIFI_PART_0016_VALVE_COLD_ROTATE
,

30 
	mWIFI_PART_0017_VALVE_EW_IN
,

31 
	mWIFI_PART_0018_VALVE_FLUSHING
,

33 
	mWIFI_PART_0100_LEVEL_COLD_OVER
 = 0x0100,

34 
	mWIFI_PART_0101_LEVEL_COLD_HIGH
,

35 
	mWIFI_PART_0102_LEVEL_COLD_MID
,

36 
	mWIFI_PART_0103_LEVEL_COLD_LOW
,

37 
	mWIFI_PART_0104_LEVEL_ICE_STORAGE_HIGH
,

38 
	mWIFI_PART_0105_LEVEL_PURE_OVER
,

39 
	mWIFI_PART_0106_LEVEL_PURE_HIGH
,

40 
	mWIFI_PART_0107_LEVEL_PURE_MID
,

41 
	mWIFI_PART_0108_LEVEL_PURE_LOW
,

42 
	mWIFI_PART_0109_LEVEL_HOT_HIGH
,

43 
	mWIFI_PART_010A_LEVEL_DRAIN_OVER
,

44 
	mWIFI_PART_010B_LEVEL_DRAIN_HIGH
,

45 
	mWIFI_PART_010C_LEVEL_DRAIN_MID
,

46 
	mWIFI_PART_010D_LEVEL_DRAIN_LOW
,

48 
	mWIFI_PART_0200_COLD_COMP
 = 0x0200,

49 
	mWIFI_PART_0201_COLD_BLDC
,

50 
	mWIFI_PART_0202_COLD_TEM
,

51 
	mWIFI_PART_0203_COLD_TEM_TEMP
,

52 
	mWIFI_PART_0204_COLD_FAN
,

53 
	mWIFI_PART_0205_COLD_STIRRING_MOTOR
,

54 
	mWIFI_PART_0206_COLD_TEMP_1
,

55 
	mWIFI_PART_0207_COLD_TEMP_2
,

56 
	mWIFI_PART_0208_COLD_ROOM_TEMP
,

57 
	mWIFI_PART_0209_COLD_ROTATE_PUMP
,

59 
	mWIFI_PART_0300_HOT_TANK_HEATER
 = 0x0300,

60 
	mWIFI_PART_0301_HOT_TEMP
,

61 
	mWIFI_PART_0302_HOT_INSTANT_HEATER_1
,

62 
	mWIFI_PART_0303_HOT_INSTANT_HEATER_2
,

63 
	mWIFI_PART_0304_HOT_FLOW_MOTOR
,

64 
	mWIFI_PART_0305_HOT_TEMP_IN
,

65 
	mWIFI_PART_0306_HOT_TEMP_OUT
,

66 
	mWIFI_PART_0307_HOT_HEATER_TEMP
,

68 
	mWIFI_PART_0400_SENSOR_PRESSURE_1
 = 0x0400,

69 
	mWIFI_PART_0401_SENSOR_PRESSURE_2
,

70 
	mWIFI_PART_0402_SENSOR_LEAK
,

71 
	mWIFI_PART_0403_SENSOR_FLOW
,

72 
	mWIFI_PART_0404_SENSOR_FLOW_REED
,

73 
	mWIFI_PART_0405_SENSOR_FILTER_REED
,

74 
	mWIFI_PART_0406_SENSOR_FILTER_SW_1
,

75 
	mWIFI_PART_0407_SENSOR_FILTER_SW_2
,

76 
	mWIFI_PART_0408_SENSOR_FILTER_SW_3
,

77 
	mWIFI_PART_0409_SENSOR_TANK_REED
,

78 
	mWIFI_PART_040A_SENSOR_LIGHT
,

79 
	mWIFI_PART_040B_SENSOR_WATER_COURSE_REED
,

81 
	mWIFI_PART_0500_STER_CSI_MODULE
 = 0x0500,

82 
	mWIFI_PART_0501_STER_UV_FAUCET
,

83 
	mWIFI_PART_0502_STER_UV_FAUCET_ICE
,

84 
	mWIFI_PART_0503_STER_UV_ICE_TANK
,

85 
	mWIFI_PART_0504_STER_UV_ICE_TRAY
,

86 
	mWIFI_PART_0505_STER_UV_COLD_TANK
,

88 
	mWIFI_PART_0600_TDS_TEMP_IN
 = 0x0600,

89 
	mWIFI_PART_0601_TDS_TEMP_OUT
,

90 
	mWIFI_PART_0602_TDS_SENSOR_IN
,

91 
	mWIFI_PART_0603_TDS_SENSOR_OUT
,

93 
	mWIFI_PART_0700_FAUCET_REED_1
 = 0x0700,

94 
	mWIFI_PART_0701_FAUCET_REED_2
,

95 
	mWIFI_PART_0702_FAUCET_CUP_SENSOR
,

96 
	mWIFI_PART_0703_FAUCET_MOTOR
,

98 
	mWIFI_PART_0800_ICE_PURE_TEMP
 = 0x0800,

99 
	mWIFI_PART_0801_ICE_FULL_SENSOR
,

100 
	mWIFI_PART_0802_ICE_SWING_BAR
,

101 
	mWIFI_PART_0803_ICE_TRAY_AC
,

102 
	mWIFI_PART_0804_ICE_TRAY_STEPMOTOR
,

103 
	mWIFI_PART_0805_ICE_TRAY_SENSING_SW
,

104 
	mWIFI_PART_0806_ICE_MOTOR_OUT
,

105 
	mWIFI_PART_0807_ICE_DOOR_STEPMOTOR
,

106 
	mWIFI_PART_0808_ICE_COURSE_CHANGE_VV
,

107 
	mWIFI_PART_0809_ICE_HOT_GAS_VV
,

108 
	mWIFI_PART_080A_ICE_DRAIN_PUMP
,

110 
	mWIFI_PART_NUM


111 }
	tE_API_A1080_T
;

113 * 
GëWifiP¨tEvítLi°
 ( );

115 
U16
 
GëWifiP¨tLi°Size
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetSensorData.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_SëComm⁄.h
"

17 
	~"WIFI_TxF‹m.h
"

18 
	~"WIFI_SëSís‹D©a.h
"

24 
EvtWifiSís‹
 ( 
U16
 
mId
, 
I8
 *
pBuf
 );

30 #ifde‡
MODEL_NO_1


31 c⁄° 
WifiTxFuncLi°_T
 
	gWifiSís‹Li°
[] =

33 { 
WIFI_SENSOR_0001_COLD_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

34 { 
WIFI_SENSOR_0002_HOT_TEMP
, 
NULL
, NULL },

35 { 
WIFI_SENSOR_0003_WATER_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

36 { 
WIFI_SENSOR_0004_OUT_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

37 { 
WIFI_SENSOR_0005_LUX_DATA
, 
NULL
, NULL },

38 { 
WIFI_SENSOR_0006_FILTER1_DATA
, 
NULL
, NULL },

39 { 
WIFI_SENSOR_0007_FILTER2_DATA
, 
NULL
, NULL },

40 { 
WIFI_SENSOR_0008_FILTER3_DATA
, 
NULL
, NULL },

41 { 
WIFI_SENSOR_0009_FILTER4_DATA
, 
NULL
, NULL },

42 { 
WIFI_SENSOR_000A_VOLTAGE_DATA
, 
NULL
, NULL },

43 { 
WIFI_SENSOR_000B_CURRENT_DATA
, 
NULL
, NULL },

44 { 
WIFI_SENSOR_000C_FACTOR_DATA
, 
NULL
, NULL },

45 { 
WIFI_SENSOR_000D_RSSI_DATA
, 
NULL
, NULL },

46 { 
WIFI_SENSOR_000E_WATT_DATA
, 
EvtWifiSís‹
, 
NULL
 },

47 { 
WIFI_SENSOR_000F_COMP_DATA
, 
EvtWifiSís‹
, 
NULL
 },

48 { 
WIFI_SENSOR_0010_TEM_TEMP
, 
NULL
, NULL },

49 { 
WIFI_SENSOR_0011_WATT_KRW
, 
NULL
, NULL },

50 { 
WIFI_SENSOR_0012_COLD_UP_TEMP
, 
NULL
, NULL },

51 { 
WIFI_SENSOR_0013_COLD_DOWN_TEMP
, 
NULL
, NULL }

55 #ifde‡
MODEL_NO_2


56 c⁄° 
WifiTxFuncLi°_T
 
	gWifiSís‹Li°
[] =

58 { 
WIFI_SENSOR_0001_COLD_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

59 { 
WIFI_SENSOR_0002_HOT_TEMP
, 
NULL
, NULL },

60 { 
WIFI_SENSOR_0003_WATER_TEMP
, 
NULL
, NULL },

61 { 
WIFI_SENSOR_0004_OUT_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

62 { 
WIFI_SENSOR_0005_LUX_DATA
, 
NULL
, NULL },

63 { 
WIFI_SENSOR_0006_FILTER1_DATA
, 
NULL
, NULL },

64 { 
WIFI_SENSOR_0007_FILTER2_DATA
, 
NULL
, NULL },

65 { 
WIFI_SENSOR_0008_FILTER3_DATA
, 
NULL
, NULL },

66 { 
WIFI_SENSOR_0009_FILTER4_DATA
, 
NULL
, NULL },

67 { 
WIFI_SENSOR_000A_VOLTAGE_DATA
, 
NULL
, NULL },

68 { 
WIFI_SENSOR_000B_CURRENT_DATA
, 
NULL
, NULL },

69 { 
WIFI_SENSOR_000C_FACTOR_DATA
, 
NULL
, NULL },

70 { 
WIFI_SENSOR_000D_RSSI_DATA
, 
NULL
, NULL },

71 { 
WIFI_SENSOR_000E_WATT_DATA
, 
EvtWifiSís‹
, 
NULL
 },

72 { 
WIFI_SENSOR_000F_COMP_DATA
, 
EvtWifiSís‹
, 
NULL
 },

73 { 
WIFI_SENSOR_0010_TEM_TEMP
, 
NULL
, NULL },

74 { 
WIFI_SENSOR_0011_WATT_KRW
, 
NULL
, NULL },

75 { 
WIFI_SENSOR_0012_COLD_UP_TEMP
, 
NULL
, NULL },

76 { 
WIFI_SENSOR_0013_COLD_DOWN_TEMP
, 
NULL
, NULL }

80 #ifde‡
MODEL_NO_3


81 c⁄° 
WifiTxFuncLi°_T
 
	gWifiSís‹Li°
[] =

83 { 
WIFI_SENSOR_0001_COLD_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

84 { 
WIFI_SENSOR_0002_HOT_TEMP
, 
NULL
, NULL },

85 { 
WIFI_SENSOR_0003_WATER_TEMP
, 
NULL
, NULL },

86 { 
WIFI_SENSOR_0004_OUT_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

87 { 
WIFI_SENSOR_0005_LUX_DATA
, 
NULL
, NULL },

88 { 
WIFI_SENSOR_0006_FILTER1_DATA
, 
NULL
, NULL },

89 { 
WIFI_SENSOR_0007_FILTER2_DATA
, 
NULL
, NULL },

90 { 
WIFI_SENSOR_0008_FILTER3_DATA
, 
NULL
, NULL },

91 { 
WIFI_SENSOR_0009_FILTER4_DATA
, 
NULL
, NULL },

92 { 
WIFI_SENSOR_000A_VOLTAGE_DATA
, 
NULL
, NULL },

93 { 
WIFI_SENSOR_000B_CURRENT_DATA
, 
NULL
, NULL },

94 { 
WIFI_SENSOR_000C_FACTOR_DATA
, 
NULL
, NULL },

95 { 
WIFI_SENSOR_000D_RSSI_DATA
, 
NULL
, NULL },

96 { 
WIFI_SENSOR_000E_WATT_DATA
, 
EvtWifiSís‹
, 
NULL
 },

97 { 
WIFI_SENSOR_000F_COMP_DATA
, 
NULL
, NULL },

98 { 
WIFI_SENSOR_0010_TEM_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

99 { 
WIFI_SENSOR_0011_WATT_KRW
, 
NULL
, NULL },

100 { 
WIFI_SENSOR_0012_COLD_UP_TEMP
, 
NULL
, NULL },

101 { 
WIFI_SENSOR_0013_COLD_DOWN_TEMP
, 
NULL
, NULL }

105 #ifde‡
MODEL_NO_4


106 c⁄° 
WifiTxFuncLi°_T
 
	gWifiSís‹Li°
[] =

108 { 
WIFI_SENSOR_0001_COLD_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

109 { 
WIFI_SENSOR_0002_HOT_TEMP
, 
NULL
, NULL },

110 { 
WIFI_SENSOR_0003_WATER_TEMP
, 
NULL
, NULL },

111 { 
WIFI_SENSOR_0004_OUT_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

112 { 
WIFI_SENSOR_0005_LUX_DATA
, 
NULL
, NULL },

113 { 
WIFI_SENSOR_0006_FILTER1_DATA
, 
NULL
, NULL },

114 { 
WIFI_SENSOR_0007_FILTER2_DATA
, 
NULL
, NULL },

115 { 
WIFI_SENSOR_0008_FILTER3_DATA
, 
NULL
, NULL },

116 { 
WIFI_SENSOR_0009_FILTER4_DATA
, 
NULL
, NULL },

117 { 
WIFI_SENSOR_000A_VOLTAGE_DATA
, 
NULL
, NULL },

118 { 
WIFI_SENSOR_000B_CURRENT_DATA
, 
NULL
, NULL },

119 { 
WIFI_SENSOR_000C_FACTOR_DATA
, 
NULL
, NULL },

120 { 
WIFI_SENSOR_000D_RSSI_DATA
, 
NULL
, NULL },

121 { 
WIFI_SENSOR_000E_WATT_DATA
, 
EvtWifiSís‹
, 
NULL
 },

122 { 
WIFI_SENSOR_000F_COMP_DATA
, 
NULL
, NULL },

123 { 
WIFI_SENSOR_0010_TEM_TEMP
, 
EvtWifiSís‹
, 
NULL
 },

124 { 
WIFI_SENSOR_0011_WATT_KRW
, 
NULL
, NULL },

125 { 
WIFI_SENSOR_0012_COLD_UP_TEMP
, 
NULL
, NULL },

126 { 
WIFI_SENSOR_0013_COLD_DOWN_TEMP
, 
NULL
, NULL }

131 
	#SZ_SS_LIST
 ( (
WifiSís‹Li°
Ë/ (
WifiTxFuncLi°_T
Ë)

	)

137 * 
	$GëWifiSís‹EvítLi°
 ( )

139  (*)
WifiSís‹Li°
;

140 
	}
}

142 
U16
 
	$GëWifiSís‹Li°Size
 ( )

144  
SZ_SS_LIST
;

145 
	}
}

148 
U8
 
	$IsPoötD©a
 ( 
U8
 
mTy≥
, 
U16
 
mId
 )

150 i‡–
mTy≥
 =
TYPE_SENSOR_CMD
 && 
mId
 =
WIFI_SENSOR_000E_WATT_DATA
 )

152  
TRUE
;

154  
FALSE
;

155 
	}
}

161 
	$EvtWifiSís‹
 ( 
U16
 
mId
, 
I8
 *
pBuf
 )

163 
I8
 
mai8Buf
[
LENGTH_WIFI_DATA_ONE
];

165 
	`_MEMSET_
–(
__FAR
*Ë
mai8Buf
, '\0', (mai8Buf) );

167 
	`C⁄vîtD©aHexToAscii
–
TYPE_SENSOR_CMD
, 
mId
, 
mai8Buf
 );

169 
	`Ár_•rötf_s
–
pBuf
, 0, 
mai8Buf
 );

170 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetSensorData.h

2 #i‚de‡
_WIFI_SëSís‹D©a_H_


3 
	#_WIFI_SëSís‹D©a_H_


	)

7 
	mWIFI_SENSOR_0001_COLD_TEMP
 = 0x0001,

8 
	mWIFI_SENSOR_0002_HOT_TEMP
,

9 
	mWIFI_SENSOR_0003_WATER_TEMP
,

10 
	mWIFI_SENSOR_0004_OUT_TEMP
,

11 
	mWIFI_SENSOR_0005_LUX_DATA
,

12 
	mWIFI_SENSOR_0006_FILTER1_DATA
,

13 
	mWIFI_SENSOR_0007_FILTER2_DATA
,

14 
	mWIFI_SENSOR_0008_FILTER3_DATA
,

15 
	mWIFI_SENSOR_0009_FILTER4_DATA
,

16 
	mWIFI_SENSOR_000A_VOLTAGE_DATA
,

17 
	mWIFI_SENSOR_000B_CURRENT_DATA
,

18 
	mWIFI_SENSOR_000C_FACTOR_DATA
,

19 
	mWIFI_SENSOR_000D_RSSI_DATA
,

20 
	mWIFI_SENSOR_000E_WATT_DATA
,

21 
	mWIFI_SENSOR_000F_COMP_DATA
,

22 
	mWIFI_SENSOR_0010_TEM_TEMP
,

23 
	mWIFI_SENSOR_0011_WATT_KRW
,

24 
	mWIFI_SENSOR_0012_COLD_UP_TEMP
,

25 
	mWIFI_SENSOR_0013_COLD_DOWN_TEMP
,

26 
	mWIFI_SENSOR_0014_HEATER_DATA
,

28 
	mWIFI_SENSOR_NUM


29 }
	tE_API_A1020_T
;

31 * 
GëWifiSís‹EvítLi°
 ( );

32 
U16
 
GëWifiSís‹Li°Size
 ( );

34 
U8
 
IsPoötD©a
 ( U8 
mTy≥
, 
U16
 
mId
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxForm.c

13 
	~"WIFI_Comm⁄.h
"

14 
	~"WIFI_DefU£r.h
"

15 
	~"WIFI_TxF‹m.h
"

16 
	~"WIFI_Sètus.h
"

17 
	~"WIFI_U£rI¡îÁ˚.h
"

22 c⁄° sig√d 
	gAT_CMD_SEND
[] = "AT*ICT*AWS_SEND=";

23 c⁄° sig√d 
	gAT_CMD_BLE_SEND
[] = "AT*ICT*BLE_SEND=";

25 c⁄° sig√d 
	gAT_CMD_VERSION
[] = "AT*ICT*AWS_SET=11 ";

26 c⁄° sig√d 
	gAT_CMD_TESTMODE
[] = "AT*ICT*SMODE=99";

27 c⁄° sig√d 
	gAT_CMD_DIRECTFOTA
[] = "AT*ICT*SMODE=98";

28 c⁄° sig√d 
	gAT_CMD_AUTO_OFF
[] = "AT*ICT*AUCONMODE=0 0";

29 c⁄° sig√d 
	gAT_CMD_AUTO_ON
[] = "AT*ICT*AUCONMODE=0 1";

30 c⁄° sig√d 
	gAT_CMD_APMODE
[] = "AT*ICT*SMODE=0 ";

31 c⁄° sig√d 
	gAT_CMD_SCONN
[] = "AT*ICT*SCONN=";

32 c⁄° sig√d 
	gAT_BLE_APMODE
[] = "AT*ICT*BLE_STATE=2";

33 c⁄° sig√d 
	gAT_BLE_ADV
[] = "AT*ICT*BLE_ADV=";

34 c⁄° sig√d 
	gAT_BLE_OFF
[] = "AT*ICT*BLE_STATE=0";

36 c⁄° sig√d 
	gAT_CMD_FOTA_CHECK
[] = "AT*ICT*OTA_SEND_START";

37 c⁄° sig√d 
	gAT_CMD_SIZE_ERR
[] = "AT*ICT*OTA_SEND_END=42";

38 c⁄° sig√d 
	gAT_CMD_TYPE_ERR
[] = "AT*ICT*OTA_SEND_END=41";

39 c⁄° sig√d 
	gAT_CMD_DEVICE_RUN
[] = "AT*ICT*OTA_SEND_END=43";

40 c⁄° sig√d 
	gAT_CMD_DEVICE_ERR
[] = "AT*ICT*OTA_SEND_END=44";

43 c⁄° sig√d 
	gAPI_TX_STOP_CONNECT
[] = "A1002";

44 c⁄° sig√d 
	gAPI_TX_STATUS_SEND
[] = "A1010";

45 c⁄° sig√d 
	gAPI_TX_STATUS_RESPONSE
[] = "A1012";

46 c⁄° sig√d 
	gAPI_TX_STATUS_SEND_CONTROL
[] = "A1014";

47 c⁄° sig√d 
	gAPI_TX_SENSOR_SEND
[] = "A1020";

48 c⁄° sig√d 
	gAPI_TX_SENSOR_RESPONSE
[] = "A1022";

49 c⁄° sig√d 
	gAPI_TX_ERROR_SEND
[] = "A1030";

50 c⁄° sig√d 
	gAPI_TX_ERROR_RESPONSE
[] = "A1032";

51 c⁄° sig√d 
	gAPI_TX_ERROR_SELF_RESPONSE
[] = "A1034";

52 c⁄° sig√d 
	gAPI_TX_PARAMETER_SEND
[] = "A1050";

53 c⁄° sig√d 
	gAPI_TX_PARAMETER_RESPONSE
[] = "A1052";

55 c⁄° sig√d 
	gAPI_TX_PART_SEND
[] = "A1080";

56 c⁄° sig√d 
	gAPI_TX_PART_RESPONSE
[] = "A1082";

57 c⁄° sig√d 
	gAPI_TX_EXAMINE_SEND
[] = "A1090";

58 c⁄° sig√d 
	gAPI_TX_ACCUMULATE_SEND
[] = "A10A0";

59 c⁄° sig√d 
	gAPI_TX_ACCUMULATE_RESPONSE
[] = "A10A2";

61 c⁄° sig√d 
	gAPI_TX_INFO_REQUEST
[] = "A2010";

62 c⁄° sig√d 
	gAPI_TX_BLE_CERT
[] = "A7010";

63 c⁄° sig√d 
	gAPI_TX_MONITOR_RESPONSE_W
[] = "A9010";

64 c⁄° sig√d 
	gAPI_TX_MONITOR_RESPONSE_R
[] = "A9012";

74 
Ex˚±AtCmd
 ( 
U8
 
mEx˚±
, 
I8
* 
pBuf
, 
U16
 
mLí
 );

80 c⁄° 
WifiTxTy≥Li°_T
 
	gWifiSídAtLi°
[] =

82 { 
WIFI_AT_APMODE
, 
PARA_AT_APMODE
, 
WIFI_TX_SEQ_APMODE
 },

83 { 
WIFI_AT_BLE_AP
, 
PARA_AT_BLE_AP
, 
WIFI_TX_SEQ_APMODE
 },

84 { 
WIFI_AT_VERSION
, 
PARA_AT_VERSION
, 
WIFI_TX_SEQ_ATCMD
 },

85 { 
WIFI_AT_TESTMODE
, 
PARA_AT_TESTMODE
, 
WIFI_TX_SEQ_ATCMD
 },

86 { 
WIFI_AT_AUTO_OFF
, 
PARA_AT_AUTO_OFF
, 
WIFI_TX_SEQ_ATCMD
 },

87 { 
WIFI_AT_AUTO_ON
, 
PARA_AT_AUTO_ON
, 
WIFI_TX_SEQ_ATCMD
 },

88 { 
WIFI_AT_BLE_ADV
, 
PARA_AT_BLE_ADV
, 
WIFI_TX_SEQ_ATCMD
 },

89 { 
WIFI_AT_SCONN
, 
PARA_AT_SCONN
, 
WIFI_TX_SEQ_ATCMD
 },

90 { 
WIFI_AT_BLE_OFF
, 
PARA_AT_BLE_OFF
, 
WIFI_TX_SEQ_ATCMD
 },

91 { 
WIFI_AT_DIRECTFOTAMODE
, 
PARA_AT_DIRECTFOTAMODE
, 
WIFI_TX_SEQ_ATCMD
 },

93 { 
WIFI_AT_FOTA_CHECK
, 
PARA_AT_FOTA_CHECK
, 
WIFI_TX_SEQ_ATCMD
 },

94 { 
WIFI_AT_SIZE_ERR
, 
PARA_AT_SIZE_ERR
, 
WIFI_TX_SEQ_ATCMD
 },

95 { 
WIFI_AT_TYPE_ERR
, 
PARA_AT_TYPE_ERR
, 
WIFI_TX_SEQ_ATCMD
 },

96 { 
WIFI_AT_DEVICE_RUN
, 
PARA_AT_DEVICE_RUN
, 
WIFI_TX_SEQ_ATCMD
 },

97 { 
WIFI_AT_DEVICE_ERR
, 
PARA_AT_DEVICE_ERR
, 
WIFI_TX_SEQ_ATCMD
 }

100 
	#SZ_ATCMD_LIST
 ( (
WifiSídAtLi°
Ë/ (
WifiTxTy≥Li°_T
Ë)

	)

103 c⁄° 
WifiTxTy≥Li°_T
 
	gWifiSídD©aLi°
[] =

105 { 
WIFI_TX_SEND_STOP
, 
PARA_STOP_CONNECT
, 
WIFI_TX_SEQ_STOP
 },

106 { 
WIFI_TX_RESP_RECV
, 
PARA_RECV_RESPONSE
, 
WIFI_TX_SEQ_SEND
 },

107 { 
WIFI_TX_RESP_FUNC
, 
PARA_STATUS_RESPONSE
, 
WIFI_TX_SEQ_SEND
 },

108 { 
WIFI_TX_RESP_SENSOR
, 
PARA_SENSOR_RESPONSE
, 
WIFI_TX_SEQ_SEND
 },

109 { 
WIFI_TX_RESP_ERR
, 
PARA_ERROR_RESPONSE
, 
WIFI_TX_SEQ_SEND
 },

110 { 
WIFI_TX_RESP_PARA
, 
PARA_PARA_RESPONSE
, 
WIFI_TX_SEQ_SEND
 },

111 { 
WIFI_TX_SEND_FUNC
, 
PARA_STATUS_SEND
, 
WIFI_TX_SEQ_SEND
 },

112 { 
WIFI_TX_SEND_FUNC_CONTROL
, 
PARA_STATUS_SEND_CONTROL
, 
WIFI_TX_SEQ_SEND
 },

113 { 
WIFI_TX_SEND_SENSOR
, 
PARA_SENSOR_SEND
, 
WIFI_TX_SEQ_SEND
 },

114 { 
WIFI_TX_SEND_ERR
, 
PARA_ERROR_SEND
, 
WIFI_TX_SEQ_SEND
 },

115 { 
WIFI_TX_SEND_PARA
, 
PARA_PARA_SEND
, 
WIFI_TX_SEQ_SEND
 },

116 { 
WIFI_TX_SELF_ERR
, 
PARA_ERROR_SELF
, 
WIFI_TX_SEQ_SEND
 },

117 { 
WIFI_TX_EXCEPT_FUNC
, 
PARA_FUNC_EXCEPT
, 
WIFI_TX_SEQ_SEND
 },

119 { 
WIFI_TX_SEND_PART
, 
PARA_PART_SEND
, 
WIFI_TX_SEQ_SEND
 },

120 { 
WIFI_TX_RESP_PART
, 
PARA_PART_RESPONSE
, 
WIFI_TX_SEQ_SEND
 },

121 { 
WIFI_TX_SEND_EXAMINE
, 
PARA_EXAMINE_SEND
, 
WIFI_TX_SEQ_SEND
 },

122 { 
WIFI_TX_SEND_ACCUMULATE
, 
PARA_ACCUMULATE_SEND
, 
WIFI_TX_SEQ_SEND
 },

123 { 
WIFI_TX_RESP_ACCUMULATE
, 
PARA_ACCUMULATE_RESPONSE
, 
WIFI_TX_SEQ_SEND
 },

125 { 
WIFI_TX_RQST_INFO
, 
PARA_INFO_REQUEST
, 
WIFI_TX_SEQ_SEND
 },

126 { 
WIFI_TX_RQST_INFO_USER
, 
PARA_INFO_REQUEST_USER
, 
WIFI_TX_SEQ_SEND
 },

127 { 
WIFI_TX_RQST_INFO_DATA
, 
PARA_INFO_REQUEST_DATA
, 
WIFI_TX_SEQ_SEND
 },

128 { 
WIFI_TX_RESP_MNT_DATA_W
, 
PARA_MONITOR_RESPONSE_W
, 
WIFI_TX_SEQ_SEND
 },

129 { 
WIFI_TX_RESP_MNT_DATA_R
, 
PARA_MONITOR_RESPONSE_R
, 
WIFI_TX_SEQ_SEND
 },

130 { 
WIFI_TX_SEND_BLE_CERT
, 
PARA_BLE_CERT_TX
, 
WIFI_TX_SEQ_SEND
 }

133 
	#SZ_DATA_LIST
 ( (
WifiSídD©aLi°
Ë/ (
WifiTxTy≥Li°_T
Ë)

	)

136 c⁄° 
WifiTxComm™dLi°_T
 
	gWifiTxCmdLi°
[] =

138 { 
PARA_AT_APMODE
, 
TYPE_AT_CMD
, 
TO_APMODE
, 
AT_CMD_APMODE
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

139 { 
PARA_AT_BLE_AP
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_BLE_APMODE
, 
NULL
, 
UNUSED
, NULL },

140 { 
PARA_AT_VERSION
, 
TYPE_AT_CMD
, 
TO_VERSION
, 
AT_CMD_VERSION
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

141 { 
PARA_AT_TESTMODE
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_TESTMODE
, 
NULL
, 
UNUSED
, NULL },

142 { 
PARA_AT_AUTO_OFF
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_AUTO_OFF
, 
NULL
, 
UNUSED
, NULL },

143 { 
PARA_AT_AUTO_ON
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_AUTO_ON
, 
NULL
, 
UNUSED
, NULL },

144 { 
PARA_AT_BLE_ADV
, 
TYPE_AT_CMD
, 
TO_BLEADV
, 
AT_BLE_ADV
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

145 { 
PARA_AT_SCONN
, 
TYPE_AT_CMD
, 
TO_SCONN
, 
AT_CMD_SCONN
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

146 { 
PARA_AT_BLE_OFF
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_BLE_OFF
, 
NULL
, 
UNUSED
, NULL },

148 { 
PARA_AT_FOTA_CHECK
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_FOTA_CHECK
, 
NULL
, 
UNUSED
, NULL },

149 { 
PARA_AT_SIZE_ERR
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_SIZE_ERR
, 
NULL
, 
UNUSED
, NULL },

150 { 
PARA_AT_TYPE_ERR
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_TYPE_ERR
, 
NULL
, 
UNUSED
, NULL },

151 { 
PARA_AT_DEVICE_RUN
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_DEVICE_RUN
, 
NULL
, 
UNUSED
, NULL },

152 { 
PARA_AT_DEVICE_ERR
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_DEVICE_ERR
, 
NULL
, 
UNUSED
, NULL },

153 { 
PARA_AT_DIRECTFOTAMODE
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_DIRECTFOTA
, 
NULL
, 
UNUSED
, NULL },

155 { 
PARA_STOP_CONNECT
, 
TYPE_STOP_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STOP_CONNECT
, 
UNUSED
, 
NULL
 },

156 { 
PARA_RECV_RESPONSE
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND
, 
USED
, 
NULL
 },

157 { 
PARA_STATUS_RESPONSE
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_RESPONSE
, 
USED
, 
NULL
 },

158 { 
PARA_SENSOR_RESPONSE
, 
TYPE_SENSOR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_SENSOR_RESPONSE
, 
USED
, 
NULL
 },

159 { 
PARA_ERROR_RESPONSE
, 
TYPE_ERROR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ERROR_RESPONSE
, 
USED
, 
NULL
 },

160 { 
PARA_PARA_RESPONSE
, 
TYPE_PARA_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PARAMETER_RESPONSE
, 
USED
, 
NULL
 },

161 { 
PARA_STATUS_SEND
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND
, 
UNUSED
, 
NULL
 },

162 { 
PARA_STATUS_SEND_CONTROL
, 
TYPE_FUNC_CONTROL_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND_CONTROL
, 
UNUSED
, 
NULL
 },

163 { 
PARA_SENSOR_SEND
, 
TYPE_SENSOR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_SENSOR_SEND
, 
UNUSED
, 
NULL
 },

164 { 
PARA_ERROR_SEND
, 
TYPE_ERROR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ERROR_SEND
, 
UNUSED
, 
NULL
 },

165 { 
PARA_PARA_SEND
, 
TYPE_PARA_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PARAMETER_SEND
, 
USED
, 
NULL
 },

166 { 
PARA_ERROR_SELF
, 
TYPE_ERROR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ERROR_SELF_RESPONSE
, 
USED
, 
NULL
 },

167 { 
PARA_FUNC_EXCEPT
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND
, 
UNUSED
, 
NULL
 },

169 { 
PARA_PART_SEND
, 
TYPE_PART_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PART_SEND
, 
UNUSED
, 
NULL
 },

170 { 
PARA_PART_RESPONSE
, 
TYPE_PART_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PART_RESPONSE
, 
USED
, 
NULL
 },

171 { 
PARA_EXAMINE_SEND
, 
TYPE_PART_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_EXAMINE_SEND
, 
REUSED
, 
NULL
 },

172 { 
PARA_ACCUMULATE_SEND
, 
TYPE_ACCUMULATE_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ACCUMULATE_SEND
, 
UNUSED
, 
NULL
 },

173 { 
PARA_ACCUMULATE_RESPONSE
, 
TYPE_ACCUMULATE_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ACCUMULATE_RESPONSE
, 
USED
, 
NULL
 },

175 { 
PARA_INFO_REQUEST
, 
TYPE_INFO_RQST_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_INFO_REQUEST
, 
UNUSED
, 
NULL
 },

176 { 
PARA_INFO_REQUEST_USER
, 
TYPE_INFO_RQST_USER_CMD
,
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_INFO_REQUEST
, 
UNUSED
, 
NULL
 },

177 { 
PARA_INFO_REQUEST_DATA
, 
TYPE_INFO_RQST_DATA_CMD
,
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_INFO_REQUEST
, 
UNUSED
, 
NULL
 },

178 { 
PARA_MONITOR_RESPONSE_W
, 
TYPE_MONITOR_DATA_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_MONITOR_RESPONSE_W
, 
USED
, 
NULL
 },

179 { 
PARA_MONITOR_RESPONSE_R
, 
TYPE_MONITOR_DATA_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_MONITOR_RESPONSE_R
, 
USED
, 
NULL
 },

180 { 
PARA_BLE_CERT_TX
, 
TYPE_BLE_CERT_CMD
, 
TO_SERVER
, 
AT_CMD_BLE_SEND
, 
API_TX_BLE_CERT
, 
USED
, 
NULL
 }

182 
	#SZ_TX_CMD_LIST
 ( (
WifiTxCmdLi°
Ë/ (
WifiTxComm™dLi°_T
Ë)

	)

184 c⁄° 
WifiTxComm™dLi°_T
 
	gWifi_BLE_TxCmdLi°
[] =

187 { 
PARA_AT_APMODE
, 
TYPE_AT_CMD
, 
TO_APMODE
, 
AT_CMD_APMODE
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

188 { 
PARA_AT_BLE_AP
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_BLE_APMODE
, 
NULL
, 
UNUSED
, NULL },

189 { 
PARA_AT_VERSION
, 
TYPE_AT_CMD
, 
TO_VERSION
, 
AT_CMD_VERSION
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

190 { 
PARA_AT_TESTMODE
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_TESTMODE
, 
NULL
, 
UNUSED
, NULL },

191 { 
PARA_AT_AUTO_OFF
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_AUTO_OFF
, 
NULL
, 
UNUSED
, NULL },

192 { 
PARA_AT_AUTO_ON
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_AUTO_ON
, 
NULL
, 
UNUSED
, NULL },

193 { 
PARA_AT_BLE_ADV
, 
TYPE_AT_CMD
, 
TO_BLEADV
, 
AT_BLE_ADV
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

194 { 
PARA_AT_SCONN
, 
TYPE_AT_CMD
, 
TO_SCONN
, 
AT_CMD_SCONN
, 
NULL
, 
UNUSED
, 
Ex˚±AtCmd
 },

195 { 
PARA_AT_BLE_OFF
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_BLE_OFF
, 
NULL
, 
UNUSED
, NULL },

196 { 
PARA_AT_DIRECTFOTAMODE
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_DIRECTFOTA
, 
NULL
, 
UNUSED
, NULL },

197 { 
PARA_AT_FOTA_CHECK
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_FOTA_CHECK
, 
NULL
, 
UNUSED
, NULL },

198 { 
PARA_AT_SIZE_ERR
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_SIZE_ERR
, 
NULL
, 
UNUSED
, NULL },

199 { 
PARA_AT_TYPE_ERR
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_TYPE_ERR
, 
NULL
, 
UNUSED
, NULL },

200 { 
PARA_AT_DEVICE_RUN
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_DEVICE_RUN
, 
NULL
, 
UNUSED
, NULL },

201 { 
PARA_AT_DEVICE_ERR
, 
TYPE_AT_CMD
, 
TO_MODULE
, 
AT_CMD_DEVICE_ERR
, 
NULL
, 
UNUSED
, NULL },

202 { 
PARA_STOP_CONNECT
, 
TYPE_STOP_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STOP_CONNECT
, 
UNUSED
, 
NULL
 },

203 { 
PARA_RECV_RESPONSE
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND
, 
USED
, 
NULL
 },

204 { 
PARA_STATUS_RESPONSE
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_RESPONSE
, 
USED
, 
NULL
 },

205 { 
PARA_SENSOR_RESPONSE
, 
TYPE_SENSOR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_SENSOR_RESPONSE
, 
USED
, 
NULL
 },

206 { 
PARA_ERROR_RESPONSE
, 
TYPE_ERROR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ERROR_RESPONSE
, 
USED
, 
NULL
 },

207 { 
PARA_PARA_RESPONSE
, 
TYPE_PARA_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PARAMETER_RESPONSE
, 
USED
, 
NULL
 },

208 { 
PARA_STATUS_SEND
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND
, 
UNUSED
, 
NULL
 },

209 { 
PARA_STATUS_SEND_CONTROL
, 
TYPE_FUNC_CONTROL_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND_CONTROL
, 
UNUSED
, 
NULL
 },

210 { 
PARA_SENSOR_SEND
, 
TYPE_SENSOR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_SENSOR_SEND
, 
UNUSED
, 
NULL
 },

211 { 
PARA_ERROR_SEND
, 
TYPE_ERROR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ERROR_SEND
, 
UNUSED
, 
NULL
 },

212 { 
PARA_PARA_SEND
, 
TYPE_PARA_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PARAMETER_SEND
, 
USED
, 
NULL
 },

213 { 
PARA_ERROR_SELF
, 
TYPE_ERROR_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ERROR_SELF_RESPONSE
, 
USED
, 
NULL
 },

214 { 
PARA_FUNC_EXCEPT
, 
TYPE_FUNC_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_STATUS_SEND
, 
UNUSED
, 
NULL
 },

215 { 
PARA_PART_SEND
, 
TYPE_PART_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PART_SEND
, 
UNUSED
, 
NULL
 },

216 { 
PARA_PART_RESPONSE
, 
TYPE_PART_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_PART_RESPONSE
, 
USED
, 
NULL
 },

217 { 
PARA_EXAMINE_SEND
, 
TYPE_PART_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_EXAMINE_SEND
, 
REUSED
, 
NULL
 },

218 { 
PARA_ACCUMULATE_SEND
, 
TYPE_ACCUMULATE_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ACCUMULATE_SEND
, 
UNUSED
, 
NULL
 },

219 { 
PARA_ACCUMULATE_RESPONSE
, 
TYPE_ACCUMULATE_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_ACCUMULATE_RESPONSE
, 
USED
, 
NULL
 },

220 { 
PARA_INFO_REQUEST
, 
TYPE_INFO_RQST_CMD
, 
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_INFO_REQUEST
, 
UNUSED
, 
NULL
 },

221 { 
PARA_INFO_REQUEST_USER
, 
TYPE_INFO_RQST_USER_CMD
,
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_INFO_REQUEST
, 
UNUSED
, 
NULL
 },

222 { 
PARA_INFO_REQUEST_DATA
, 
TYPE_INFO_RQST_DATA_CMD
,
TO_SERVER
, 
AT_CMD_SEND
, 
API_TX_INFO_REQUEST
, 
UNUSED
, 
NULL
 },

223 { 
PARA_MONITOR_RESPONSE_W
, 
TYPE_MONITOR_DATA_CMD
, 
TO_SERVER
, 
AT_CMD_BLE_SEND
, 
API_TX_MONITOR_RESPONSE_W
, 
USED
, 
NULL
 },

224 { 
PARA_MONITOR_RESPONSE_R
, 
TYPE_MONITOR_DATA_CMD
, 
TO_SERVER
, 
AT_CMD_BLE_SEND
, 
API_TX_MONITOR_RESPONSE_R
, 
USED
, 
NULL
 },

225 { 
PARA_BLE_CERT_TX
, 
TYPE_BLE_CERT_CMD
, 
TO_SERVER
, 
AT_CMD_BLE_SEND
, 
API_TX_BLE_CERT
, 
USED
, 
NULL
 }

227 
	#SZ_BLE_TX_CMD_LIST
 ( (
Wifi_BLE_TxCmdLi°
Ë/ (
WifiTxComm™dLi°_T
Ë)

	)

229 * 
	$GëWifiTxTy≥EvítLi°
 ( 
U8
 
mTy≥
 )

231 i‡–
mTy≥
 =
TX_ATCMD
 )

233  (*)
WifiSídAtLi°
;

237  (*)
WifiSídD©aLi°
;

239 
	}
}

241 
U16
 
	$GëWifiTxTy≥Li°Size
 ( 
U8
 
mTy≥
 )

243 i‡–
mTy≥
 =
TX_ATCMD
 )

245  
SZ_ATCMD_LIST
;

249  
SZ_DATA_LIST
;

251 
	}
}

253 * 
	$GëWifiTxCmdEvítLi°
 ( 
U8
 
mTy≥
 )

255 i‡(–
mTy≥
 =
BLEDATA
 ) )

257  (*)
Wifi_BLE_TxCmdLi°
;

261  (*)
WifiTxCmdLi°
;

263 
	}
}

265 
U16
 
	$GëWifiTxCmdLi°Size
 ( 
U8
 
mTy≥
 )

267 i‡(–
mTy≥
 =
BLEDATA
 ) )

269  
SZ_BLE_TX_CMD_LIST
;

273  
SZ_TX_CMD_LIST
;

275 
	}
}

279 
	$Ex˚±AtCmd
 ( 
U8
 
mEx˚±
, 
I8
* 
pBuf
, 
U16
 
mLí
 )

281 
I8
 
mai8ModñTy≥
[
LENGTH_MODEL_TYPE
+1];

282 
I8
 
mai8ModñName
[
LENGTH_MODEL_NAME
+1];

284 
	`_MEMSET_
–(
__FAR
*Ë
mai8ModñTy≥
, '\0', (mai8ModelType) );

285 
	`_MEMSET_
–(
__FAR
*Ë
mai8ModñName
, '\0', (mai8ModelName) );

288 i‡–
	`GëU£rI¡îÁ˚
(
USER_MODEL_TYPE
Ë=
USER_MODEL_CHP
 )

290 
	`Ár_•rötf_s
–
mai8ModñTy≥
, 0, (
I8
 *
__√¨
)
FOTA_TYPE_CHP
 );

291 
	`Ár_•rötf_s
–
mai8ModñName
, 0, (
I8
 *
__√¨
)
MODEL_NAME_CHP
 );

293 i‡–
	`GëU£rI¡îÁ˚
(
USER_MODEL_TYPE
Ë=
USER_MODEL_CP
 )

295 
	`Ár_•rötf_s
–
mai8ModñTy≥
, 0, (
I8
 *
__√¨
)
FOTA_TYPE_CP
 );

296 
	`Ár_•rötf_s
–
mai8ModñName
, 0, (
I8
 *
__√¨
)
MODEL_NAME_CP
 );

298 i‡–
	`GëU£rI¡îÁ˚
(
USER_MODEL_TYPE
Ë=
USER_MODEL_HP
 )

300 
	`Ár_•rötf_s
–
mai8ModñTy≥
, 0, (
I8
 *
__√¨
)
FOTA_TYPE_HP
 );

301 
	`Ár_•rötf_s
–
mai8ModñName
, 0, (
I8
 *
__√¨
)
MODEL_NAME_HP
 );

305 
	`Ár_•rötf_s
–
mai8ModñTy≥
, 0, (
I8
 *
__√¨
)
FOTA_TYPE_CHP
 );

306 
	`Ár_•rötf_s
–
mai8ModñName
, 0, (
I8
 *
__√¨
)
MODEL_NAME_CHP
 );

310 i‡–
mEx˚±
 =
TO_VERSION
 )

312 
	`Ár_•rötf_s
–&
pBuf
[
mLí
], 0, (
I8
 *
__√¨
)
WIFI_VERSION
 );

314 i‡–
mEx˚±
 =
TO_APMODE
 )

316 
mLí
 +
	`Ár_•rötf_s
–&
pBuf
[mLí], 0, (
I8
 *
__√¨
)
COWAY_SSID
 );

317 
	`Ár_•rötf_s
–&
pBuf
[
mLí
], 0, 
mai8ModñName
 );

319 i‡–
mEx˚±
 =
TO_SCONN
 )

321 
mLí
 +
	`Ár_•rötf_s
–&
pBuf
[mLí], 0, (
I8
 *
__√¨
)
TEST_MODEM_SSID
 );

322 
	`Ár_•rötf_s
–&
pBuf
[
mLí
], 0, (
I8
 *
__√¨
)
TEST_MODEM_PW
 );

324 i‡–
mEx˚±
 =
TO_BLEADV
 )

326 
mLí
 +
	`Ár_•rötf_s
–&
pBuf
[mLí], 0, 
mai8ModñTy≥
 );

327 
pBuf
[
mLí
++] = 
ASCII_SPACE
;

328 
mLí
 +
	`Ár_•rötf_s
–&
pBuf
[mLí], 0, 
mai8ModñName
 );

329 
pBuf
[
mLí
++] = 
ASCII_UNDERBAR
;

331 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxForm.h

2 #i‚de‡
_WIFI_TxF‹m_H_


3 
	#_WIFI_TxF‹m_H_


	)

8 
	mTYPE_UNDEFINED
 = 0,

10 
	mTYPE_AT_CMD
 = 0x01,

11 
	mTYPE_STOP_CMD
,

12 
	mTYPE_FUNC_CMD
,

13 
	mTYPE_FUNC_CONTROL_CMD
,

14 
	mTYPE_SENSOR_CMD
,

15 
	mTYPE_ERROR_CMD
,

16 
	mTYPE_PARA_CMD
,

17 
	mTYPE_PART_CMD
,

18 
	mTYPE_EXAMINE_CMD
,

19 
	mTYPE_ACCUMULATE_CMD
,

20 
	mTYPE_INFO_RQST_CMD
,

21 
	mTYPE_INFO_RQST_USER_CMD
,

22 
	mTYPE_INFO_RQST_DATA_CMD
,

23 
	mTYPE_MONITOR_DATA_CMD
,

24 
	mTYPE_BLE_CERT_CMD


25 }
	tE_WIFI_TX_TYPE_T
;

27 
	s_wifi_£nd_li°_S


29 
U32
 
	mId
;

30 
U8
 
	mmu8P¨a
;

31 
U8
 
	mmu8Seq
;

32 } 
	tWifiTxTy≥Li°_T
;

34 
	s_wifi_txcmd_li°_


36 
U8
 
	mP¨a
;

37 
E_WIFI_TX_TYPE_T
 
	mTy≥
;

38 
U8
 
	mT¨gë
;

39 c⁄° 
I8
* 
	mAtCmd
;

40 c⁄° 
I8
* 
	mApi
;

41 
U8
 
	mReId
;

42 
WifiExFun_T
 
	mFunc
;

43 } 
	tWifiTxComm™dLi°_T
;

49 
	mPARA_NULL
 = 0x00,

50 
	mPARA_AT_APMODE
,

51 
	mPARA_AT_BLE_AP
,

52 
	mPARA_AT_VERSION
,

53 
	mPARA_AT_TESTMODE
,

54 
	mPARA_AT_AUTO_OFF
,

55 
	mPARA_AT_AUTO_ON
,

56 
	mPARA_AT_BLE_ADV
,

57 
	mPARA_AT_SCONN
,

58 
	mPARA_AT_BLE_OFF
,

59 
	mPARA_AT_DIRECTFOTAMODE
,

61 
	mPARA_AT_FOTA_CHECK
,

62 
	mPARA_AT_SIZE_ERR
,

63 
	mPARA_AT_TYPE_ERR
,

64 
	mPARA_AT_DEVICE_RUN
,

65 
	mPARA_AT_DEVICE_ERR
,

67 
	mPARA_STOP_CONNECT
,

68 
	mPARA_RECV_RESPONSE
,

69 
	mPARA_STATUS_RESPONSE
,

70 
	mPARA_SENSOR_RESPONSE
,

71 
	mPARA_ERROR_RESPONSE
,

72 
	mPARA_PARA_RESPONSE
,

73 
	mPARA_STATUS_SEND
,

74 
	mPARA_STATUS_SEND_CONTROL
,

75 
	mPARA_SENSOR_SEND
,

76 
	mPARA_ERROR_SEND
,

77 
	mPARA_PARA_SEND
,

78 
	mPARA_ERROR_SELF
,

79 
	mPARA_FUNC_EXCEPT
,

81 
	mPARA_PART_SEND
,

82 
	mPARA_PART_RESPONSE
,

83 
	mPARA_EXAMINE_SEND
,

84 
	mPARA_ACCUMULATE_SEND
,

85 
	mPARA_ACCUMULATE_RESPONSE
,

87 
	mPARA_INFO_REQUEST
,

88 
	mPARA_INFO_REQUEST_USER
,

89 
	mPARA_INFO_REQUEST_DATA
,

90 
	mPARA_MONITOR_RESPONSE_W
,

91 
	mPARA_MONITOR_RESPONSE_R
,

92 
	mPARA_BLE_CERT_TX
,

106 * 
GëWifiTxTy≥EvítLi°
 ( 
U8
 
mTy≥
 );

107 
U16
 
GëWifiTxTy≥Li°Size
 ( 
U8
 
mTy≥
 );

123 * 
GëWifiTxCmdEvítLi°
 ( 
U8
 
mTy≥
 );

124 
U16
 
GëWifiTxCmdLi°Size
 ( 
U8
 
mTy≥
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxMake.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_DefU£r.h
"

17 
	~"WIFI_TxMake.h
"

18 
	~"WIFI_Sètus.h
"

19 
	~"WIFI_TxF‹m.h
"

20 
	~"WIFI_TxPrŸocﬁ.h
"

21 
	~"WIFI_U£rI¡îÁ˚.h
"

23 
	~"WIFI_SëComm⁄.h
"

24 
	~"WIFI_SëEº‹D©a.h
"

25 
	~"WIFI_SëFun˘i⁄D©a.h
"

26 
	~"WIFI_SëSís‹D©a.h
"

27 
	~"WIFI_SëP¨tD©a.h
"

28 
	~"WIFI_SëInf‹m©i⁄D©a.h
"

29 
	~"WIFI_SëAccumuœãD©a.h
"

30 
	~"WIFI_SëM⁄ô‹D©a.h
"

32 
	~"WIFI_RxSîvî.h
"

45 
E_WIFI_STATUS_SEND_T
 
Sñe˘TxTy≥
 ( );

46 
MakeTxD©a
 ( 
U8
 
mu8TxP¨a
 );

47 
U16
 
MakeTagId
 ( 
I8
 *
pBuf
, U16 
mLí
, U16 
mId
 );

48 
U16
 
MakeTagD©a
 ( 
I8
 *
pBuf
, U16 
mLí
, I8 *
pD©a
 );

49 
U16
 
DñëeComma
 ( 
I8
 *
pBuf
, U16 
mLí
 );

50 * 
GëCmdLi°
 ( 
E_WIFI_TX_TYPE_T
 
mTy≥
 );

51 
U16
 
GëCmdSize
 ( 
E_WIFI_TX_TYPE_T
 
mTy≥
 );

58 
	$WifiTxD©aSñe˘
 ( )

60 
WifiTxTy≥Li°_T
 *
pLi°
 = 
NULL
;

61 
U8
 
i
 = 0U;

62 
U8
 
mSize
 = 0U;

63 
E_WIFI_STATUS_SEND_T
 
mCmd
 = 
TX_ATCMD
;

64 
U32
 
mD©a
 = 0UL;

67 
mCmd
 = 
	`Sñe˘TxTy≥
();

68 
mD©a
 = 
	`GëWifiSídSètus
(
mCmd
);

71 
pLi°
 = (
WifiTxTy≥Li°_T
 *)
	`GëWifiTxTy≥EvítLi°
(
mCmd
);

72 
mSize
 = (
U8
)
	`GëWifiTxTy≥Li°Size
(
mCmd
);

75  
i
 = 0 ; i < 
mSize
; i++ )

77 
U32
 
mId
 = 0UL;

78 
U32
 
mCheck
 = 0UL;

79 
mId
 = (
pLi°
+
i
)->
Id
;

80 
mCheck
 = (
mD©a
&
mId
);

81 i‡–
mCheck
 =
mId
 )

83 i‡–(
pLi°
+
i
)->
mu8Seq
 =
WIFI_TX_SEQ_SEND
 )

85 
	`SëWifiTxSètus
–
STATUS_TX_STATE
, 
SET
 );

87 
	`SëWifiTxSètus
–
STATUS_TX_SEQ
, (
pLi°
+
i
)->
mu8Seq
 );

88 
	`MakeTxD©a
–(
pLi°
+
i
)->
mu8P¨a
 );

89 
	`CÀ¨WifiSídSètus
–
mCmd
, 
mId
 );

90 
	`SëWifiTxSètus
–
STATUS_TX_SEQ
, 
WIFI_TX_SEQ_NULL
 );

94 
	}
}

98 
E_WIFI_STATUS_SEND_T
 
	$Sñe˘TxTy≥
 ( )

100 
E_WIFI_STATUS_SEND_T
 
mCmd
 = 
TX_ATCMD
;

101 
U32
 
mD©a
 = 0UL;

103 
mD©a
 = 
	`GëWifiSídSètus
–
TX_ATCMD
 );

104 i‡–
mD©a
 == 0UL )

106 
mCmd
 = 
TX_DATA
;

110 
mCmd
 = 
TX_ATCMD
;

113  
mCmd
;

114 
	}
}

117 
	$MakeTxD©a
 ( 
U8
 
mu8TxP¨a
 )

119 
WifiTxComm™dLi°_T
 *
pCmdLi°
 = 
NULL
;

120 
U16
 
mu16CmdSize
 = 0U;

121 
U8
 
i
 = 0U;

122 
E_WIFI_TX_TYPE_T
 
mTy≥
 = 
TYPE_UNDEFINED
;

123 
U8
 
mu8T¨gë
 = 0U;

124 
U8
 
mu8Reque°Id
 = 0U;

125 
WifiTxFuncLi°_T
 *
pLi°
 = 
NULL
;

126 
WifiTxFuncLi°_M⁄ô‹_T
 *
pLi°_m⁄ô‹
 = 
NULL
;

127 
U16
 
mu16Size
 = 0U;

128 
U16
 
mu16Lí
 = 0U;

129 
U16
 
mAddªss
 = 0U;

130 
U16
 
mAddªss_Àn
 = 0U;

131 
U8
 
mD©a
 = 0U;

132 
U8
 
mu8C⁄åﬁID
 = 0U;

133 
U16
 
mId
 = 0U;

134 
I8
 
mai8AtCmd
[
LENGTH_AT_CMD_MAX
];

135 
I8
 
mai8Api
[
LENGTH_API_NO
+1];

136 
I8
 
mai8GëD©aBuf
[
LENGTH_WIFI_DATA_ONE_MAX
];

137 
I8
 
mai8D©aBuff
[
LENGTH_WIFI_ALL_MAX_N
];

139 
	`_MEMSET_
–(
__FAR
*Ë
mai8AtCmd
, '\0', (mai8AtCmd) );

140 
	`_MEMSET_
–(
__FAR
*Ë
mai8Api
, '\0', (mai8Api) );

141 
	`_MEMSET_
–(
__FAR
*Ë
mai8GëD©aBuf
, '\0', (mai8GetDataBuf) );

142 
	`_MEMSET_
–(
__FAR
*Ë
mai8D©aBuff
, '\0', (mai8DataBuff) );

145 
mD©a
 = 
	`GëWifiBLESídSètus
(
TX_BLE_WIFI
);

146 
pCmdLi°
 = (
WifiTxComm™dLi°_T
 *)
	`GëWifiTxCmdEvítLi°
(
mD©a
);

147 
mu16CmdSize
 = 
	`GëWifiTxCmdLi°Size
(
mD©a
);

148  
i
 = 0 ; i < 
mu16CmdSize
; i++ )

150 i‡–
mu8TxP¨a
 =(
pCmdLi°
+
i
)->
P¨a
 )

152 
mTy≥
 = (
pCmdLi°
+
i
)->
Ty≥
;

153 
mu8T¨gë
 = (
pCmdLi°
+
i
)->
T¨gë
;

154 
mu8Reque°Id
 = (
pCmdLi°
+
i
)->
ReId
;

155 
	`Ár_•rötf_s
–
mai8AtCmd
, 0, (
pCmdLi°
+
i
)->
AtCmd
 );

156 
	`Ár_•rötf_s
–
mai8Api
, 0, (
pCmdLi°
+
i
)->
Api
 );

162 i‡(
mTy≥
 =
TYPE_MONITOR_DATA_CMD
 )

164 
pLi°_m⁄ô‹
 = 
	`GëCmdLi°
–
mTy≥
 );

165 
mu16Size
 = 
	`GëCmdSize
–
mTy≥
 );

166 i‡–
pLi°_m⁄ô‹
 !
NULL
 )

168  
i
 = 0 ; i < 
mu16Size
; i++ )

170 
WifiTxFun_M⁄ô‹_T
 
pFun_M
;

171 
pFun_M
 = 
pLi°_m⁄ô‹
->
TxFunc_M
;

172 
	`_MEMSET_
–(
__FAR
*Ë
mai8GëD©aBuf
, '\0', (mai8GetDataBuf) );

173 
mAddªss
 = 
gu16_START_RAM_Addªss
[
i
];

174 
mAddªss_Àn
 = 
gu16_RAM_Addªss_Àn
[
i
];

175 
	`pFun_M
(
mAddªss
, 
mai8GëD©aBuf
, 
mAddªss_Àn
);

176 
mu16Lí
 = 
	`MakeTagId
–
mai8D©aBuff
, mu16Lí, 
mAddªss
 );

177 
mu16Lí
 = 
	`MakeTagD©a
–
mai8D©aBuff
, mu16Lí, 
mai8GëD©aBuf
 );

181 if(
mTy≥
 =
TYPE_BLE_CERT_CMD
)

183 
mId
 = 
	`GëWifiCîtID
();

184 
mu16Lí
 = 
	`MakeTagId
–
mai8D©aBuff
, mu16Lí, 
mId
 );

185 
	`_MEMSET_
–(
__FAR
*Ë
mai8GëD©aBuf
, '\0', (mai8GetDataBuf) );

186 
	`C⁄vîtD©aHexToAscii
(
mTy≥
, 
mId
, 
mai8GëD©aBuf
);

187 
mu16Lí
 = 
	`MakeTagD©a
–
mai8D©aBuff
, mu16Lí, 
mai8GëD©aBuf
 );

191 
pLi°
 = 
	`GëCmdLi°
–
mTy≥
 );

192 
mu16Size
 = 
	`GëCmdSize
–
mTy≥
 );

193 i‡(
mu8TxP¨a
 =
PARA_STATUS_SEND_CONTROL
)

195 
mu8C⁄åﬁID
 = 
	`GëWifiSídSètusC⁄åﬁ
();

196 
	`SëWifiSídSètusC⁄åﬁ
(0U);

197 i‡(
pLi°
 !
NULL
 ){

198 
U8
 
mu8pLi°C⁄åoId
 = 0U;

199 
WifiTxFun_T
 
pFun
;

200 i‡(
mu8C⁄åﬁID
 != 0U)

202  
i
 = 0 ; i < 
mu16Size
; i++ )

204 i‡((
pLi°
+
i
)->
Id
 =
mu8C⁄åﬁID
)

206 
mu8pLi°C⁄åoId
 = 
i
;

210 
pFun
 = (
pLi°
+(
mu8pLi°C⁄åoId
))->
TxFunc
;

211 i‡–
pFun
 !
NULL
 )

213 
	`_MEMSET_
–(
__FAR
*Ë
mai8GëD©aBuf
, '\0', (mai8GetDataBuf) );

214 
mId
 = 
mu8C⁄åﬁID
;

215 
	`pFun
–
mId
, 
mai8GëD©aBuf
 );

216 
mu16Lí
 = 
	`MakeTagId
–
mai8D©aBuff
, mu16Lí, 
mId
 );

217 
mu16Lí
 = 
	`MakeTagD©a
–
mai8D©aBuff
, mu16Lí, 
mai8GëD©aBuf
 );

225 i‡–
pLi°
 !
NULL
 )

227  
i
 = 0 ; i < 
mu16Size
; i++ )

229 
WifiTxFun_T
 
pFun
;

230 
pFun
 = (
pLi°
+
i
)->
TxFunc
;

231 i‡–
pFun
 !
NULL
 )

234 
	`_MEMSET_
–(
__FAR
*Ë
mai8GëD©aBuf
, '\0', (mai8GetDataBuf) );

235 
mId
 = (
pLi°
+
i
)->
Id
;

236 
	`pFun
–
mId
, 
mai8GëD©aBuf
 );

237 
mu16Lí
 = 
	`MakeTagId
–
mai8D©aBuff
, mu16Lí, 
mId
 );

238 
mu16Lí
 = 
	`MakeTagD©a
–
mai8D©aBuff
, mu16Lí, 
mai8GëD©aBuf
 );

246 
mu16Lí
 = 
	`DñëeComma
–
mai8D©aBuff
, mu16Len );

247 i‡–
	`GëU£rI¡îÁ˚
–
USER_SMART_SENSING_STATUS
 ) !
TRUE
 )

249 
	`SëWifiBLESídSètus
(
TX_BLE_WIFI
, 
WIFIDATA
);

252 
	`WifiSídPrŸocﬁ
–
mu8T¨gë
, 
mu8Reque°Id
, 
mai8D©aBuff
, 
mai8AtCmd
, 
mai8Api
 );

253 
	}
}

256 
U16
 
	$MakeTagId
 ( 
I8
* 
pBuf
, 
U16
 
mLí
, U16 
mId
 )

258 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
 >> 12) & 0x000F));

259 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
 >> 8) & 0x000F));

260 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
 >> 4) & 0x000F));

261 
pBuf
[
mLí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mId
) & 0x000F));

262 
pBuf
[
mLí
++] = 
ASCII_COLON
;

263  
mLí
;

264 
	}
}

267 
U16
 
	$MakeTagD©a
 ( 
I8
 *
pBuf
, 
U16
 
mLí
, I8 *
pD©a
 )

269 
mLí
 +
	`Ár_•rötf_s
–&
pBuf
[mLí], mLí, 
pD©a
 );

270 
pBuf
[
mLí
++] = 
ASCII_COMMA
;

271  
mLí
;

272 
	}
}

275 
U16
 
	$DñëeComma
 ( 
I8
 *
pBuf
, 
U16
 
mLí
 )

277 i‡–
mLí
 == 0 )

281 i‡–
pBuf
[
mLí
-1] =
ASCII_COMMA
 )

283 
mLí
 = mLen-1;

284 
pBuf
[
mLí
] = 
ASCII_NULL
;

286  
mLí
;

287 
	}
}

289 * 
	$GëCmdLi°
 ( 
E_WIFI_TX_TYPE_T
 
mTy≥
 )

291 
WifiTxFuncLi°_T
 *
pLi°
 = 
NULL
;

292 
WifiTxFuncLi°_M⁄ô‹_T
 *
pLi°_m⁄ô‹
 = 
NULL
;

293 i‡–(
mTy≥
 =
TYPE_FUNC_CMD
Ë|| (mTy≥ =
TYPE_FUNC_CONTROL_CMD
))

295 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiFuncEvítLi°
();

298 i‡–
mTy≥
 =
TYPE_SENSOR_CMD
 )

300 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiSís‹EvítLi°
();

303 i‡–
mTy≥
 =
TYPE_ERROR_CMD
 )

305 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiEº‹EvítLi°
();

308 i‡–
mTy≥
 =
TYPE_PART_CMD
 )

310 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiP¨tEvítLi°
();

313 i‡–
mTy≥
 =
TYPE_ACCUMULATE_CMD
 )

315 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiAccumuœãEvítLi°
();

318 i‡–
mTy≥
 =
TYPE_INFO_RQST_CMD
 )

320 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiInf‹m©i⁄EvítLi°
();

323 i‡–
mTy≥
 =
TYPE_INFO_RQST_USER_CMD
 )

325 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiInfoU£rEvítLi°
();

327 i‡–
mTy≥
 =
TYPE_INFO_RQST_DATA_CMD
 )

329 
pLi°
 = (
WifiTxFuncLi°_T
 *)
	`GëWifiInfoD©aEvítLi°
();

331 i‡–
mTy≥
 =
TYPE_MONITOR_DATA_CMD
 )

333 
pLi°_m⁄ô‹
 = (
WifiTxFuncLi°_M⁄ô‹_T
 *)
	`GëWifiM⁄ô‹EvítLi°
();

334  
pLi°_m⁄ô‹
;

338 
pLi°
 = 
NULL
;

341  
pLi°
;

342 
	}
}

344 
U16
 
	$GëCmdSize
 ( 
E_WIFI_TX_TYPE_T
 
mTy≥
 )

346 
U16
 
mSize
 = 0U;

347 i‡–(
mTy≥
 =
TYPE_FUNC_CMD
Ë|| (mTy≥ =
TYPE_FUNC_CONTROL_CMD
) )

349 
mSize
 = 
	`GëWifiFuncLi°Size
();

351 i‡–
mTy≥
 =
TYPE_SENSOR_CMD
 )

353 
mSize
 = 
	`GëWifiSís‹Li°Size
();

355 i‡–
mTy≥
 =
TYPE_ERROR_CMD
 )

357 
mSize
 = 
	`GëWifiEº‹Li°Size
();

359 i‡–
mTy≥
 =
TYPE_PART_CMD
 )

361 
mSize
 = 
	`GëWifiP¨tLi°Size
();

363 i‡–
mTy≥
 =
TYPE_ACCUMULATE_CMD
 )

365 
mSize
 = 
	`GëWifiAccumuœãLi°Size
();

367 i‡–
mTy≥
 =
TYPE_INFO_RQST_CMD
 )

369 
mSize
 = 
	`GëWifiInf‹m©i⁄Li°Size
();

371 i‡–
mTy≥
 =
TYPE_INFO_RQST_USER_CMD
 )

373 
mSize
 = 
	`GëWifiInf‹m©i⁄Li°Size
();

375 i‡–
mTy≥
 =
TYPE_INFO_RQST_DATA_CMD
 )

377 
mSize
 = 
	`GëWifiInf‹m©i⁄Li°Size
();

379 i‡–
mTy≥
 =
TYPE_MONITOR_DATA_CMD
 )

381 
mSize
 = 
gu16_RAM_M⁄ô‹_RESP_SIZE
;

385 
mSize
 = 0U;

387  
mSize
;

388 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxMake.h

2 #i‚de‡
_WIFI_TxMake_H_


3 
	#_WIFI_TxMake_H_


	)

16 
WifiTxD©aSñe˘
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxProtocol.c

15 
	~"WIFI_Comm⁄.h
"

16 
	~"WIFI_DefU£r.h
"

17 
	~"WIFI_TxPrŸocﬁ.h
"

18 
	~"WIFI_TxF‹m.h
"

19 
	~"WIFI_Sètus.h
"

20 
	~"WIFI_U¨tI¡îru±.h
"

25 c⁄° sig√d 
	gREQUEST_ID_START
[] = "23MCU2SVR";

26 c⁄° sig√d 
	gREQUEST_ID_END
[] = "-01";

30 
I8
 
	gai8Reque°Id
[
LENGTH_REQUEST_ID
+1];

31 
I8
 
	gai8Reque°IdEx˚±i⁄
[
LENGTH_REQUEST_ID
+1];

38 
MakeAtCmd
 ( 
I8
* 
pBuf
, I8* 
pAtcmd
, 
U8
 
mu8To
 );

39 
MakePackë
 ( 
I8
* 
pBuf
, I8* 
pApi
, I8* 
pD©a
, 
U8
 
mu8ReId
 );

40 
SídPackë
 ( 
I8
* 
mi8AtCmd
, I8* 
mai8D©aBuf
 );

47 
	$InôülizeWifiTxPrŸocﬁ
 ( )

49 
	`_MEMSET_
–(
__FAR
*Ë
ai8Reque°Id
, '\0', (ai8RequestId) );

50 
	}
}

52 
	$SëReque°Id
 ( 
I8
* 
mi8RqId
 )

54 
	`_MEMSET_
–(
__FAR
*Ë
ai8Reque°Id
, '\0', (ai8RequestId) );

55 
	`_STRCPY_
–(
__FAR
*Ë
ai8Reque°Id
, (c⁄° __FAR*Ë
mi8RqId
 );

56 
	}
}

58 
	$SëReque°IdEx˚±
 ( )

60 
	`_MEMSET_
–(
__FAR
*Ë
ai8Reque°IdEx˚±i⁄
, '\0', (ai8RequestIdException) );

61 
	`_STRCPY_
–(
__FAR
*Ë
ai8Reque°IdEx˚±i⁄
, (c⁄° __FAR*Ë
ai8Reque°Id
 );

62 
	`_MEMSET_
–(
__FAR
*Ë
ai8Reque°Id
, '\0', (ai8RequestId) );

63 
	}
}

65 
	$WifiSídPrŸocﬁ
 ( 
U8
 
mu8T¨gë
, U8 
mu8ReId
, 
I8
* 
mi8D©a
, I8* 
mi8AtCmd
, I8* 
mi8Api
 )

67 
I8
 
mai8TxBuff
[
LENGTH_WIFI_ALL_MAX_N
];

68 
I8
 
mai8ATCmd
[
LENGTH_AT_CMD_MAX
];

70 
	`_MEMSET_
–(
__FAR
*Ë
mai8TxBuff
, '\0', (mai8TxBuff) );

71 
	`_MEMSET_
–(
__FAR
*Ë
mai8ATCmd
, '\0', (mai8ATCmd) );

74 i‡–
mu8T¨gë
 =
TO_SERVER
 )

76 
	`Ár_•rötf_s
–
mai8ATCmd
, 0, 
mi8AtCmd
 );

77 
	`MakePackë
–
mai8TxBuff
, 
mi8Api
, 
mi8D©a
, 
mu8ReId
 );

81 
	`MakeAtCmd
–
mai8ATCmd
, 
mi8AtCmd
, 
mu8T¨gë
 );

85 
	`SídPackë
–
mai8ATCmd
, 
mai8TxBuff
 );

86 
	}
}

90 
	$MakeAtCmd
 ( 
I8
* 
pBuf
, I8* 
pAtcmd
, 
U8
 
mu8T¨gë
 )

92 
WifiTxComm™dLi°_T
 *
pLi°
 = 
NULL
;

93 
U16
 
mu16CmdSize
 = 0U;

94 
U16
 
i
 = 0U;

95 
U16
 
mu16Lí
 = 0U;

96 
U8
 
mD©a
 = 0U;

98 
mD©a
 = 
	`GëWifiBLESídSètus
(
TX_BLE_WIFI
);

99 
pLi°
 = (
WifiTxComm™dLi°_T
 *)
	`GëWifiTxCmdEvítLi°
(
mD©a
);

100 
mu16CmdSize
 = 
	`GëWifiTxCmdLi°Size
(
mD©a
);

102 
mu16Lí
 = 
	`Ár_•rötf_s
–
pBuf
, 0, 
pAtcmd
 );

104  
i
 = 0 ; i < 
mu16CmdSize
; i++ )

106 
WifiExFun_T
 
pFun
;

107 i‡–
mu8T¨gë
 =(
pLi°
+
i
)->
T¨gë
 )

109 
pFun
 = (
pLi°
+
i
)->
Func
;

110 i‡–
pFun
 !
NULL
 )

113 
	`pFun
–
mu8T¨gë
, 
pBuf
, 
mu16Lí
 );

118 
	}
}

120 
	$MakePackë
 ( 
I8
* 
pBuf
, I8* 
pApi
, I8* 
pD©a
, 
U8
 
mu8ReId
 )

122 
U16
 
mu16Reque°Cou¡
 = 0U;

123 
U16
 
mu16Lí
 = 0U;

124 
U16
 
mu16BodyLígth
 = 0U;

125 
U32
 
mu32Checksum
 = 0UL;

126 
U8
 
mu8Checksum
 = 0U;

127 
U16
 
mu16i
 = 0U;

131 
pBuf
[
mu16Lí
++] = 
ASCII_STX
;

135 
mu16BodyLígth
 = 
LENGTH_API_NO
 + 
LENGTH_REQUEST_ID
 + 1 + 
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
pD©a
 ) + 1 + 2 + 1;

136 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16BodyLígth
 >> 12) & 0x000F));

137 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16BodyLígth
 >> 8) & 0x000F));

138 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16BodyLígth
 >> 4) & 0x000F));

139 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16BodyLígth
) & 0x000F));

142 
mu16Lí
 +
	`Ár_•rötf_s
–&
pBuf
[mu16Lí], mu16Lí, 
pApi
 );

145 i‡––
mu8ReId
 =
REUSED
 ) && ( 
ai8Reque°IdEx˚±i⁄
[0] !
ASCII_NULL
 ) )

147 
mu16Lí
 +
	`Ár_•rötf_s
–&
pBuf
[mu16Lí], mu16Lí, 
ai8Reque°IdEx˚±i⁄
 );

148 
	`_MEMSET_
–(
__FAR
*Ë
ai8Reque°IdEx˚±i⁄
, '\0', (ai8RequestIdException) );

150 i‡––
mu8ReId
 =
USED
 ) && ( 
ai8Reque°Id
[0] !
ASCII_NULL
 ) )

152 
mu16Lí
 +
	`Ár_•rötf_s
–&
pBuf
[mu16Lí], mu16Lí, 
ai8Reque°Id
 );

153 
	`_MEMSET_
–(
__FAR
*Ë
ai8Reque°Id
, '\0', (ai8RequestId) );

157 
mu16Lí
 +
	`Ár_•rötf_s
–&
pBuf
[mu16Lí], mu16Lí, 
REQUEST_ID_START
 );

158 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16Reque°Cou¡
 >> 12) & 0x000F));

159 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16Reque°Cou¡
 >> 8) & 0x000F));

160 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16Reque°Cou¡
 >> 4) & 0x000F));

161 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu16Reque°Cou¡
) & 0x000F));

162 
mu16Lí
 +
	`Ár_•rötf_s
–&
pBuf
[mu16Lí], mu16Lí, 
REQUEST_ID_END
 );

163 
mu16Reque°Cou¡
++;

164 i‡–
mu16Reque°Cou¡
 == 0xFFFF )

166 
mu16Reque°Cou¡
 = 0U;

171 
pBuf
[
mu16Lí
++] = 
ASCII_OPEN
;

172 
mu16Lí
 +
	`Ár_•rötf_s
–&
pBuf
[mu16Lí], mu16Lí, 
pD©a
 );

173 
pBuf
[
mu16Lí
++] = 
ASCII_CLOSE
;

176  
mu16i
 = 0 ; mu16ò< 
mu16Lí
 ; mu16i++ )

178 
mu32Checksum
 +
pBuf
[
mu16i
];

180 
mu8Checksum
 = (
U8
)(
mu32Checksum
);

181 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu8Checksum
 >> 4) & 0x0F));

182 
pBuf
[
mu16Lí
++] = 
	`WIFI_HEX2ASCII
((
U8
)((
mu8Checksum
) & 0x0F));

185 
pBuf
[
mu16Lí
++] = 
ASCII_ETX
;

186 
	}
}

188 
	$SídPackë
 ( 
I8
* 
mi8AtCmd
, I8* 
mai8D©aBuf
 )

190 
U16
 
mu16Lí
 = 0U;

191 
I8
 
mai8D©a
[
LENGTH_WIFI_ALL_MAX_N
];

193 
	`_MEMSET_
–(
__FAR
*Ë
mai8D©a
, '\0', (mai8Data) );

197 
mu16Lí
 = 
	`Ár_•rötf_s
–
mai8D©a
, 0, 
mi8AtCmd
 );

201 
mu16Lí
 +
	`Ár_•rötf_s
–&
mai8D©a
[mu16Lí], mu16Lí, 
mai8D©aBuf
 );

204 
mai8D©a
[
mu16Lí
++] = 
ASCII_DONE
;

207 
	`SídWifiU¨t
–
mu16Lí
, 
mai8D©a
 );

208 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxProtocol.h

2 #i‚de‡
_WIFI_TxPrŸocﬁ_H_


3 
	#_WIFI_TxPrŸocﬁ_H_


	)

16 
InôülizeWifiTxPrŸocﬁ
 ( );

29 
SëReque°Id
 ( 
I8
* 
mi8RqId
 );

30 
SëReque°IdEx˚±
 ( );

43 
WifiSídPrŸocﬁ
 ( 
U8
 
mu8T¨gë
, U8 
mu8ReId
, 
I8
* 
mi8D©a
, I8* 
mi8AtCmd
, I8* 
mi8Api
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_MonitorFixRAM.c

2 
	~"WIFI_Comm⁄.h
"

3 
	~"WIFI_DefU£r.h
"

4 
	~"WIFI_SëComm⁄.h
"

5 
	~"WIFI_U£rI¡îÁ˚.h
"

6 
	~"WIFI_M⁄ô‹FixRAM.h
"

7 
	~"WIFI_U£rI¡îÁ˚_Ic⁄AIS.h
"

19 
	~"îr‹.h
"

20 
	~"di•œy_îr‹.h
"

21 
	~"ãmp.h
"

22 
	~"cﬁd_w©î.h
"

23 
	~"comp.h
"

24 
	~"comp_bldc.h
"

26 
	~"¥o˚ss_di•œy.h
"

31 #¥agm®
addªss
 
_RamCﬁdTemp
 = 0xFFC00

32 #¥agm®
addªss
 
_RamAmbiTemp
 = 0xFFC02

33 #¥agm®
addªss
 
_RamCﬁdRegi⁄
 = 0xFFC10

34 #¥agm®
addªss
 
_RamCompT¨gëRps
 = 0xFFC12

35 #¥agm®
addªss
 
_RamCompFìdbackRps
 = 0xFFC14

36 #¥agm®
addªss
 
_RamCompPrŸe˘Time
 = 0xFFC18

37 #¥agm®
addªss
 
_RamCompOnTime
 = 0xFFC1A

38 #¥agm®
addªss
 
_RamCompOffTime
 = 0xFFC1C

39 #¥agm®
addªss
 
_RamEº‹
 = 0xFFC20

40 #¥agm®
addªss
 
_RamCﬁd2Temp
 = 0xFFC40

41 #¥agm®
addªss
 
_RamCﬁdExåaTime
 = 0xFFC80

42 #¥agm®
addªss
 
_RamCﬁdSèπög
 = 0xFFCA0

43 #¥agm®
addªss
 
_RamCﬁdTempMöus
 = 0xFFCA2

44 #¥agm®
addªss
 
_RamCﬁd2TempMöus
 = 0xFFCA4

46 
U16
 
__√¨
 
	g_RamCﬁdTemp
;

47 
U16
 
__√¨
 
	g_RamAmbiTemp
;

48 
U8
 
__√¨
 
	g_RamCﬁdRegi⁄
;

49 
U8
 
__√¨
 
	g_RamCompT¨gëRps
;

50 
U8
 
__√¨
 
	g_RamCompFìdbackRps
;

51 
U16
 
__√¨
 
	g_RamCompPrŸe˘Time
;

52 
U16
 
__√¨
 
	g_RamCompOnTime
;

53 
U16
 
__√¨
 
	g_RamCompOffTime
;

54 
U8
 
__√¨
 
	g_RamEº‹
;

55 
U16
 
__√¨
 
	g_RamCﬁd2Temp
;

56 
U16
 
__√¨
 
	g_RamCﬁdExåaTime
;

57 
U16
 
__√¨
 
	g_RamCﬁdSèπög
;

58 
U16
 
__√¨
 
	g_RamCﬁd2TempMöus
;

59 
U16
 
__√¨
 
	g_RamCﬁdTempMöus
;

63 
	#A_RAM_COLD_TEMP
 0xFC00

	)

64 
	#A_RAM_AMBI_TEMP
 0xFC02

	)

65 
	#A_RAM_COLD_REGION
 0xFC10

	)

66 
	#A_RAM_COMP_TARGET_RPS
 0xFC12

	)

67 
	#A_RAM_COMP_FEEDBACK_RPS
 0xFC14

	)

68 
	#A_RAM_COMP_PROTECT_TIME
 0xFC18

	)

69 
	#A_RAM_COMP_ON_TIME
 0xFC1A

	)

70 
	#A_RAM_COMP_OFF_TIME
 0xFC1C

	)

71 
	#A_RAM_ERROR
 0xFC20

	)

72 
	#A_RAM_COLD_2_TEMP
 0xFC40

	)

73 
	#A_RAM_COLD_EXTRA_TIME
 0xFC80

	)

74 
	#A_RAM_COLD_STARTING
 0xFCA0

	)

75 
	#A_RAM_COLD_TEMP_MINUS
 0xFCA2

	)

76 
	#A_RAM_COLD_2_TEMP_MINUS
 0xFCA4

	)

77 
U16
 
	gRamCﬁdTemp
;

78 
U16
 
	gRamAmbiTemp
;

79 
U8
 
	gRamCﬁdRegi⁄
;

80 
U8
 
	gRamCompT¨gëRps
;

81 
U8
 
	gRamCompFìdbackRps
;

82 
U16
 
	gRamCompPrŸe˘Time
;

83 
U16
 
	gRamCompOnTime
;

84 
U16
 
	gRamCompOffTime
;

85 
U8
 
	gRamEº‹
;

86 
U16
 
	gRamCﬁd2Temp
;

87 
U16
 
	gRamCﬁdExåaTime
;

88 
U16
 
	gRamCﬁdSèπög
;

89 
U16
 
	gRamCﬁdTempMöus
;

90 
U16
 
	gRamCﬁd2TempMöus
;

92 
U8
 
A_NULL
=0;

95 
	gU8
 *(*
	tWifiWrôeFun_T
)(
	tU16
);

98 
U16
 
	mAddªssLi°
;

99 
U8
 *
	mT¨gëV¨übÀ
;

100 
U8
 
	mV¨Size
;

101 
WifiWrôeFun_T
 
	mWrôeFunc
;

102 } 
	tWifiFixRamLi°_T
;

104 c⁄° 
WifiFixRamLi°_T
 
	gWifiRamLi°
[] =

106 { 
A_RAM_COLD_TEMP
, (
U8
*)(&
RamCﬁdTemp
), 
TwoByã
, 
Ród_O∆y
 },

107 { 
A_RAM_AMBI_TEMP
, (
U8
*)(&
RamAmbiTemp
), 
TwoByã
, 
Ród_O∆y
 },

108 { 
A_RAM_COLD_REGION
, (
U8
*)(&
RamCﬁdRegi⁄
), 
O√Byã
, 
Ród_O∆y
 },

109 { 
A_RAM_COMP_TARGET_RPS
, (
U8
*)(&
RamCompT¨gëRps
), 
O√Byã
, 
Ród_O∆y
 },

110 { 
A_RAM_COMP_FEEDBACK_RPS
, (
U8
*)(&
RamCompFìdbackRps
), 
O√Byã
, 
Ród_O∆y
 },

111 { 
A_RAM_COMP_PROTECT_TIME
, (
U8
*)(&
RamCompPrŸe˘Time
), 
TwoByã
, 
Ród_O∆y
 },

112 { 
A_RAM_COMP_ON_TIME
, (
U8
*)(&
RamCompOnTime
), 
TwoByã
, 
Ród_O∆y
 },

113 { 
A_RAM_COMP_OFF_TIME
, (
U8
*)(&
RamCompOffTime
), 
TwoByã
, 
Ród_O∆y
 },

114 { 
A_RAM_ERROR
, (
U8
*)(&
RamEº‹
), 
O√Byã
, 
Ród_O∆y
 },

115 { 
A_RAM_COLD_2_TEMP
, (
U8
*)(&
RamCﬁd2Temp
), 
TwoByã
, 
Ród_O∆y
 },

116 { 
A_RAM_COLD_EXTRA_TIME
, (
U8
*)(&
RamCﬁdExåaTime
), 
TwoByã
, 
Ród_O∆y
 },

117 { 
A_RAM_COLD_STARTING
, (
U8
*)(&
RamCﬁdSèπög
), 
O√Byã
, 
Ród_O∆y
 },

118 { 
A_RAM_COLD_TEMP_MINUS
, (
U8
*)(&
RamCﬁdTempMöus
), 
TwoByã
, 
Ród_O∆y
 },

119 { 
A_RAM_COLD_2_TEMP_MINUS
, (
U8
*)(&
RamCﬁd2TempMöus
), 
TwoByã
, 
Ród_O∆y
 },

122 
	#SZ_RAM_ADR_LIST
 ( (
WifiRamLi°
Ë/ (
WifiFixRamLi°_T
Ë)

	)

128 
U8
 *
	$SëRamD©a
 (
U16
 
mu16addªss
)

130 
U16
 
mu16D©a
 = 0U;

131 
U8
 *
buf
;

132  
mu16addªss
 )

134 
buf
 = (
U8
*)
mu16addªss
;

137  (
U8
*)(&
mu16D©a
);

138 
	}
}

141 
CﬁdW©î_T
 
Cﬁd
;

142 
	$Upd©eRamD©a
()

144 
TEMP_T
 
ãmp
;

147 
RamCﬁdTemp
 = (
U16
)–
	`GëTemp
–
TEMP_ID_COLD_WATER
 ) * 100.0f );

148 
RamAmbiTemp
 = (
U16
)–
	`GëTemp
–
TEMP_ID_AMBIENT
 ) * 100.0f );

149 
RamCﬁdRegi⁄
 = 
Cﬁd
.
Regi⁄Ambi
;

150 
RamCompT¨gëRps
 = 
	`GëCompBldcT¨gëRps
();

151 
RamCompFìdbackRps
 = 
	`GëCompBldcCuºítRps
();

152 
RamCompPrŸe˘Time
 = 
	`GëCompPrŸe˘OffTime
();

153 
RamCompOnTime
 = 
	`GëCompOnTime
();

154 
RamCompOffTime
 = 
	`GëCompOffTime
();

155 
RamEº‹
 = 
	`GëEº‹Di•œyId
–
	`GëEº‹Id
() );

156 
RamCﬁd2Temp
 = (
U16
)–
	`GëTemp
–
TEMP_ID_EVA_1
 ) * 100.0f );

157 
RamCﬁdExåaTime
 = 
Cﬁd
.
ExåaMakeTime
;

158 
RamCﬁdSèπög
 = 
Cﬁd
.
SèπögMode
;

160 
ãmp
 = ( 
	`GëTemp
–
TEMP_ID_COLD_WATER
 ) * 100.0f );

161 if–
ãmp
 < 0.0f )

163 
ãmp
 = -temp;

164 
RamCﬁdTempMöus
 = (
U16
)
ãmp
;

168 
RamCﬁdTempMöus
 = 0;

171 
ãmp
 = ( 
	`GëTemp
–
TEMP_ID_EVA_1
 ) * 100.0f );

172 if–
ãmp
 < 0.0f )

174 
ãmp
 = -temp;

175 
RamCﬁd2TempMöus
 = (
U16
)
ãmp
;

179 
RamCﬁd2TempMöus
 = 0;

181 
	}
}

183 
	$GëRamD©a
 ()

185 
__√¨
 
U8
 *
pFixRamAddªss
;

186 
U8
 *
pTempPå
 ;

187 
U8
 *
pTempPåRëu∫
 ;

188 
U16
 
RamCheckAddªss
 =0;

189 
U8
 
i
=0;

190 
WifiWrôeFun_T
 
pWrôeFunc
;

192 
	`Upd©eRamD©a
();

194  
i
 = 0 ; i < 
SZ_RAM_ADR_LIST
; i++ )

196 
pFixRamAddªss
 = ((
__√¨
 
U8
*)
WifiRamLi°
[
i
].
AddªssLi°
);

197 
pTempPå
 = 
WifiRamLi°
[
i
].
T¨gëV¨übÀ
;

198 
RamCheckAddªss
 = (
U16
)(
	`GëU£rSy°emRamWrôeSètus
((U16)(
WifiRamLi°
[
i
].
AddªssLi°
)));

199 i‡(
pTempPå
 =&
A_NULL
)

201 
RamCheckAddªss
 = 
CLEAR_ADR
;

202 
	`SëU£rSy°emRamWrôeSètus
((
U16
)
RamCheckAddªss
);

206 i‡(
RamCheckAddªss
 !
CLEAR_ADR
)

208 
pWrôeFunc
 = 
WifiRamLi°
[
i
].
WrôeFunc
;

209 i‡–
pWrôeFunc
 !
Ród_O∆y
 )

211 
pTempPåRëu∫
 = (
U8
*)
	`pWrôeFunc
((
U16
)(
RamCheckAddªss
));

212 *(
pTempPå
Ë*(
pTempPåRëu∫
);

214 i‡(
WifiRamLi°
[
i
].
V¨Size
 =
TwoByã
 )

216 
pTempPå
++;

217 
RamCheckAddªss
++;

218 
pTempPåRëu∫
 = (
U8
*)
RamCheckAddªss
;

219 *(
pTempPå
Ë*(
pTempPåRëu∫
);

221 
RamCheckAddªss
 = 
CLEAR_ADR
;

222 
	`SëU£rSy°emRamWrôeSètus
((
U16
)
RamCheckAddªss
);

227 
RamCheckAddªss
 = 
CLEAR_ADR
;

228 
	`SëU£rSy°emRamWrôeSètus
((
U16
)
RamCheckAddªss
);

233 *
pFixRamAddªss
 = *(
WifiRamLi°
[
i
].
T¨gëV¨übÀ
);

235 i‡(
WifiRamLi°
[
i
].
V¨Size
 =
TwoByã
 )

237 
pTempPå
 = 
WifiRamLi°
[
i
].
T¨gëV¨übÀ
;

238 
pFixRamAddªss
++;

239 
pTempPå
++;

240 *
pFixRamAddªss
 = *
pTempPå
;

246 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_MonitorFixRAM.h

1 #i‚de‡
__WIFI_MONITOR_FIX_RAM_H__


2 
	#__WIFI_MONITOR_FIX_RAM_H__


	)

5 
GëRamD©a
 ();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_UserCommon_IconAIS.h

2 #i‚de‡
_WIFI_COMMON_BUILTIN_H_


3 
	#_WIFI_COMMON_BUILTIN_H_


	)

5 #ifde‡
ICON_AIS


7 
	~"mcu.h
"

8 
	~"r_smc_íåy.h
"

9 
	~"C⁄fig_UART1.h
"

10 
	~"WIFI_DefU£r.h
"

15 
	tU8
;

16 sig√d 
	tI8
;

17 
	tU16
;

18 sig√d 
	tI16
;

19 c⁄° sig√d 
	tCI8
;

20 c⁄° sig√d 
	tCI16
;

21 
	tU32
;

22 
	tF32
;

23 
	tD64
;

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°d¨g.h
>

30 
	~<°rög.h
>

31 
	~<m©h.h
>

34 
	#MODEL_NO_1


	)

35 
	#WIFI_VERSION
 "V1.0.0.12"

	)

36 
	#MODEL_NAME_CHP
 "CHPI-7400N"

	)

37 
	#MODEL_NAME_CP
 "CPI-7400N"

	)

38 
	#MODEL_NAME_HP
 "HPI-7400N"

	)

41 
	#R_TXD
 
TXD1


	)

42 
	#R_RXD
 
RXD1


	)

43 
	#R_STIF
 
STIF1


	)

44 
	#P_WIFI_ON
 0,4

45 
	#P_WIFI_RSTN
 0,1

46 

	)

48 
	#USER_DATA_MAX_NUM
 75

49 
	#USER_DATA_MAX_NUM_1BYTE
 58

50 
	#USER_DATA_MAX_NUM_3BYTE
 9

51 
	#USER_DATA_MAX_NUM_5BYTE
 9

52 
	#USER_INFO_MAX_NUM
 10

53 
	#USER_USE_ACK


	)

55 
	#FOTA_SIZE_256K


	)

57 
	#FOTA
 0

58 

	)

59 #ifde‡
FOTA_SIZE_128K


60 
	#FOTA_SIZE
 "513"

62 

	)

63 #ifde‡
FOTA_SIZE_192K


64 
	#FOTA_SIZE
 "769"

66 

	)

67 #ifde‡
FOTA_SIZE_256K


68 
	#FOTA_SIZE
 "1025"

70 
	#FOTA_TYPE_CHP
 "113315"

71 
	#FOTA_TYPE_CP
 "113316"

72 
	#FOTA_TYPE_HP
 "113317"

73 

	)

75 
	#EEPROM_ADDR_WIFI_POWER
 0x005E

76 
	#EEPROM_ADDR_FIRST_PARING
 0x005F

77 
	#EEPROM_ADDR_FOTA_MODULE
 0x0060

78 
	#EEPROM_ADDR_FOTA_MCU
 0x0061

79 

	)

80 
	#Z_ømmax
 (0xFFFF)

81 
	#Z_ømmö
 (0xB300)

83 
	#WIFI_BUZZER_SELECT
 0x01

84 
	#WIFI_BUZZER_AP_CONNECT
 0x02

85 
	#WIFI_BUZZER_SETUP
 0x03

86 
	#WIFI_BUZZER_SERVER_CONNECT
 0x04

87 
	#WIFI_BUZZER_AP_FAIL
 0x05

88 
	#WIFI_BUZZER_CANCEL
 0x06

89 
	#WIFI_BUZZER_AP_START
 0x07

90 
	#WIFI_BUZZER_ERROR
 0x08

91 
	#WIFI_BUZZER_SERVER_FIRST
 0x09

92 
	#WIFI_BUZZER_WiFi_OFF
 0x0A

93 
	#WIFI_BUZZER_BLE_OFF
 0x0B

94 
	#WIFI_BUZZER_BLE_CONNECT
 0x0C

	)

95 
	#WIFI_BUZZER_BLE_CERT
 0x49

96 
	#WIFI_BUZZER_SMART_CHECK_START
 0x50

97 
	#WIFI_BUZZER_SMART_CHECK_OK
 0x51

98 
	#WIFI_BUZZER_SMART_CHECK_ERROR
 0x52

99 

	)

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_UserInterface_IconAIS.c

2 
	~"WIFI_Comm⁄.h
"

3 
	~"WIFI_SëFun˘i⁄D©a.h
"

4 
	~"WIFI_SëSís‹D©a.h
"

5 
	~"WIFI_SëEº‹D©a.h
"

6 
	~"WIFI_SëP¨tD©a.h
"

7 
	~"WIFI_SëAccumuœãD©a.h
"

8 
	~"WIFI_SëM⁄ô‹D©a.h
"

9 
	~"WIFI_SëSís‹D©a.h
"

10 
	~"WIFI_U£rI¡îÁ˚.h
"

11 
	~"WIFI_C⁄åﬁ.h
"

12 
	~"WIFI_U£rI¡îÁ˚_Ic⁄AIS.h
"

15 
	~"sound.h
"

16 
	~"‰⁄t.h
"

17 
	~"eﬁ.h
"

18 
	~"f˘.h
"

19 
	~"πc.h
"

20 
	~"îr‹.h
"

21 
	~"fûãr.h
"

22 
	~"Êush_w©î_out.h
"

23 
	~"cﬁd_w©î.h
"

24 
	~"i˚.h
"

25 
	~"¥o˚ss_di•œy.h
"

26 
	~"hŸ_w©î.h
"

27 
	~"hŸ_w©î_out.h
"

28 
	~"w©î_out.h
"

29 
	~"ì¥om.h
"

30 
	~"ãmp.h
"

31 
	~"powî_ßvög.h
"

32 
	~"íîgy.h
"

33 
	~"u£r.h
"

34 
	~"i˚_do‹.h
"

35 
	~"uv.h
"

36 
	~"voi˚.h
"

37 
	~"£rvi˚.h
"

38 
	~"sm¨t_check.h
"

39 
	~"dügnosis.h
"

41 #ifde‡
MODEL_NO_1


43 
	#PROGRESS_ID_UV_WATER_OUT
 0

	)

44 
	#PROGRESS_ID_UV_ICE_OUT
 1

	)

45 
	#PROGRESS_ID_UV_ICE_TRAY
 2

	)

46 
	#PROGRESS_ID_UV_ICE_TANK
 3

	)

47 
	#PROGRESS_ID_SILVER_CARE
 4

	)

48 
	#PROGRESS_ID_DRAIN_WATER
 5

	)

49 
	#MAX_PROGRESS_NUM
 6

	)

50 
U16
 
GëProgªssVÆ
(
U8
 
id
);

53 
SWifiSètus_T
 
	gWiFi
;

55 
U16
 
WifiRamWrôeCheck_addªss
 = 0;

56 
U8
 
WifiSm¨tCheckResu…D©a
 = 0;

57 
	$SëU£rSy°emRamWrôeSètus
 ( 
U16
 
mu16Addªss
)

59 
WifiRamWrôeCheck_addªss
 = (
U16
)
mu16Addªss
;

60 
	}
}

62 
U16
 
	$GëU£rSy°emRamWrôeSètus
 ( 
U16
 
mu16Addªss
 )

64 i‡(
WifiRamWrôeCheck_addªss
 =
mu16Addªss
)

66  
WifiRamWrôeCheck_addªss
;

68  
CLEAR
;

69 
	}
}

70 
	$U£rWrôeEï
 ( 
U16
 
mu16Addr
, 
U8
 
mu8VÆ
 )

72 if–
mu16Addr
 =
EEPROM_ADDR_WIFI_POWER
 )

74 
WiFi
.
mU⁄Off
 = 
mu8VÆ
;

75 
	`SaveEïromId
 ( 
EEP_ID_WIFI_POWER
 );

77 if–
mu16Addr
 =
EEPROM_ADDR_FIRST_PARING
 )

79 
WiFi
.
mUfú°P¨ög
 = 
mu8VÆ
;

80 
	`SaveEïromId
 ( 
EEP_ID_WIFI_FIRST_PARING
 );

82 if–
mu16Addr
 =
EEPROM_ADDR_FOTA_MODULE
 )

84 
WiFi
.
mUfŸaModuÀ
 = 
mu8VÆ
;

85 
	`SaveEïromId
 ( 
EEP_ID_WIFI_FOTA_MODULE
 );

87 if–
mu16Addr
 =
EEPROM_ADDR_FOTA_MCU
 )

89 
WiFi
.
mUfŸaMaö
 = 
mu8VÆ
;

90 
	`SaveEïromId
 ( 
EEP_ID_WIFI_FOTA_MCU
 );

92 
	}
}

94 
U8
 
	$U£rRódEï
 ( 
U16
 
mu16Addr
 )

96 if–
mu16Addr
 =
EEPROM_ADDR_WIFI_POWER
 )

98  
WiFi
.
mU⁄Off
;

100 if–
mu16Addr
 =
EEPROM_ADDR_FIRST_PARING
 )

102  
WiFi
.
mUfú°P¨ög
;

104 if–
mu16Addr
 =
EEPROM_ADDR_FOTA_MODULE
 )

106  
WiFi
.
mUfŸaModuÀ
;

108 if–
mu16Addr
 =
EEPROM_ADDR_FOTA_MCU
 )

110  
WiFi
.
mUfŸaMaö
;

114 
	}
}

116 
	$U£rBuzzSound
 ( 
U8
 
mu8Buzz
 )

118 
SoundId_T
 
mSound
 = 
SOUND_NONE
;

120  
mu8Buzz
 )

122 
WIFI_BUZZER_SELECT
:

123 
mSound
 = 
SOUND_SELECT
;

126 
WIFI_BUZZER_AP_CONNECT
:

127 
mSound
 = 
SOUND_WIFI_CONNECTING
;

130 
WIFI_BUZZER_BLE_CONNECT
 :

132 
mSound
 = 
SOUND_NONE
;

135 
WIFI_BUZZER_SETUP
:

136 
mSound
 = 
SOUND_WIFI_CONNECTING
;

139 
WIFI_BUZZER_SERVER_CONNECT
:

140 
mSound
 = 
SOUND_WIFI_CONNECTED
;

143 
WIFI_BUZZER_AP_FAIL
:

144 
mSound
 = 
SOUND_WIFI_FAIL_CONNECTING
;

147 
WIFI_BUZZER_CANCEL
:

148 
mSound
 = 
SOUND_WIFI_DISCONNECTED
;

151 
WIFI_BUZZER_AP_START
:

152 
mSound
 = 
SOUND_SETUP
;

155 
WIFI_BUZZER_ERROR
:

156 
mSound
 = 
SOUND_ERROR
;

159 
WIFI_BUZZER_SERVER_FIRST
:

160 
mSound
 = 
SOUND_WIFI_CONNECTED_FIRST
;

163 
WIFI_BUZZER_WiFi_OFF
 :

165 
mSound
 = 
SOUND_NONE
;

168 
WIFI_BUZZER_BLE_OFF
:

169 
mSound
 = 
SOUND_CANCEL
;

172 
WIFI_BUZZER_BLE_CERT
 :

173 
mSound
 = 
SOUND_NONE
;

178 
	`Sound
–
mSound
 );

179 
	}
}

181 
U8
 
	$GëU£rSy°emSètus
 ( 
U8
 
mu8VÆue
 )

207 
U8
 
mu8Rëu∫
 = 0;

208 i‡–
mu8VÆue
 =
USER_MODEL_TYPE
 )

210 i‡–
	`GëSy°em
(Ë=
SYSTEM_CP
)

212 
mu8Rëu∫
 = 
USER_MODEL_CP
;

216 
mu8Rëu∫
 = 
USER_MODEL_CHP
;

219 i‡–
mu8VÆue
 =
USER_FACTORY_STATUS
 )

222 i‡–
	`GëEﬁSètus
(Ë=
TRUE


223 || 
	`GëF˘Sètus
(Ë=
TRUE


226 
mu8Rëu∫
 = 
SET
;

230 
mu8Rëu∫
 = 
CLEAR
;

233 i‡–
mu8VÆue
 =
USER_RX_STATUS
 )

236 i‡–
	`GëW©îOut
(Ë=
TRUE


237 || 
	`IsO≥nFûãr
–
ID_FILTER_COVER
 ) =
FILTER_OPEN


238 || 
	`IsO≥nFûãr
–
ID_FILTER
 ) =
FILTER_OPEN


239 || 
	`IsD⁄eFlushInôSëup
(Ë=
FALSE


240 || 
	`IsO≥nI˚Do‹
(Ë=
TRUE


243 
mu8Rëu∫
 = 
FALSE
;

247 
mu8Rëu∫
 = 
TRUE
;

250 i‡–
mu8VÆue
 =
USER_SMART_POSSIBLE_STATUS
 )

254 i‡–
	`IsVÆidSèπSm¨tCheck
(Ë=
FALSE
 )

256 
mu8Rëu∫
 = 
FALSE
;

260 
mu8Rëu∫
 = 
TRUE
;

264 i‡–
mu8VÆue
 =
USER_ERROR_STATUS
 )

266 i‡–
	`GëEº‹Id
(Ë!
ERR_NONE
 )

268 
mu8Rëu∫
 = 
TRUE
;

272 
mu8Rëu∫
 = 
FALSE
;

275 i‡–
mu8VÆue
 =
USER_FOTA_POSSIBLE_STATUS
 )

277 i‡–
	`GëW©îOut
(Ë=
TRUE


278 || 
	`IsD⁄eFlushInôSëup
(Ë=
FALSE


281 
mu8Rëu∫
 = 
FALSE
;

285 
mu8Rëu∫
 = 
TRUE
;

288 i‡–
mu8VÆue
 =
USER_SMART_SENSING_STATUS
 )

290 if–
	`IsSèπDügnosis
(Ë=
TRUE
 )

292 
mu8Rëu∫
 = 
TRUE
 ;

296 
mu8Rëu∫
 = 
FALSE
;

301 
mu8Rëu∫
 = 0U;

303  
mu8Rëu∫
;

304 
	}
}

311 
	$CÀ¨U£rSy°emD©a
 ( )

314 
	`Re£tSîvi˚O≥nTime
();

317 
	`CÀ¨AŒE√rgyW©t
();

320 
	`SëFûãrCh™gedFlushSètus
–
FILTER_CHANGED_NONE
 );

323 
	`CÀ¨AŒUßgeW©î
();

324 
	}
}

330 
	$SëU£rSy°emDi•œy
 ( 
U8
 
mu8Di•œy
 )

332 i‡–
mu8Di•œy
 =
USER_DISPLAY_FOTA
 )

334 
	`SëFŸaDi•
–
TRUE
 );

336 
	}
}

339 
	$SëU£rSy°emTime
 ( 
U16
 
mYór
, U16 
mM⁄th
, U16 
mD©e
, U16 
mHour
, U16 
mMö
, U16 
mSec
, U16 
mDay
 )

341 
TimeD©a_T
 
mTime
;

343 
mTime
.
Y2K
 = 20;

344 
mTime
.
DayWìk
 = (
U8
)
mDay
;

345 
mTime
.
M⁄th
 = (
U8
)
mM⁄th
;

346 
mTime
.
D©e
 = (
U8
)
mD©e
;

347 
mTime
.
Hour
 = (
U8
)
mHour
;

348 
mTime
.
Mö
 = (
U8
)
mMö
;

349 
mTime
.
Sec
 = (
U8
)
mSec
;

351 
	`SëRtcTime
–&
mTime
 );

352 
	`SëRtcC⁄figInô
–
TRUE
 );

353 
	}
}

357 
	s_u£r_wifi_îr‹_


359 
U16
 
	mAPI_Id
;

360 
Eº‹Id_T
 
	mEº‹Id
;

361 } 
	tWifiEº‹_T
;

363 c⁄° 
WifiEº‹_T
 
	gEº‹TabÀ
[] =

365 { 
WIFI_ERROR_0006_HOTIN_TEMP
, 
ERR_TEMP_HOT_WATER_IN
 },

366 { 
WIFI_ERROR_0007_HOTOUT_TEMP
, 
ERR_TEMP_HOT_WATER
 },

367 { 
WIFI_ERROR_0008_COLD_TEMP
, 
ERR_TEMP_COLD_WATER
 },

368 { 
WIFI_ERROR_0009_NATURAL_TEMP
, 
ERR_TEMP_AMBIENT
 },

369 { 
WIFI_ERROR_000C_BLDC_COMP
, 
ERR_COMP_COMM
 },

370 { 
WIFI_ERROR_000E_DRAIN_PUMP
, 
ERR_DRAIN_PUMP
 },

371 { 
WIFI_ERROR_0019_STOP_WATER
, 
ERR_OUTAGE_WATER
 },

372 { 
WIFI_ERROR_001B_STOP_HOTWATER
, 
ERR_OUTAGE_HOT_WATER
 },

373 { 
WIFI_ERROR_001C_LEAK_FLOW
, 
ERR_LEAK_FLOW
 },

374 { 
WIFI_ERROR_001D_LEAK_SENSOR
, 
ERR_LEAK
 },

375 { 
WIFI_ERROR_001E_HOT_OVER
, 
ERR_HEATER_OVERHEAT
 },

376 { 
WIFI_ERROR_001F_HEATER_SENSOR
, 
ERR_TEMP_HEATER
 },

377 { 
WIFI_ERROR_0020_ROOM_TEMP
, 
ERR_TEMP_ROOM_WATER
 },

378 { 
WIFI_ERROR_0021_MICRO_SW_DETECT
, 
ERR_MICRO_SW_DETECT
 },

379 { 
WIFI_ERROR_0022_MICRO_SW_MOVE
, 
ERR_MICRO_SW_MOVE
 },

381 { 
WIFI_ERROR_0029_BLDC_STATUS
, 
ERR_COMP
 }

383 
	#SZ_ERROR_TABLE
 ((
Eº‹TabÀ
)/(
WifiEº‹_T
))

	)

384 
U16
 
	$GëU£rSy°emEº‹
 ( 
U16
 
mu16Eº
 )

386 
U8
 
i
;

387 
U16
 
mu16D©a
 = 0U;

389  
i
 = 0; i < 
SZ_ERROR_TABLE
; i++)

391 if–
Eº‹TabÀ
[ 
i
 ].
API_Id
 =
mu16Eº
 )

393 
mu16D©a
 = 
	`GëEº‹Sètus
–
Eº‹TabÀ
[ 
i
 ].
Eº‹Id
 );

398  
mu16D©a
;

399 
	}
}

401 
U16
 
	$C⁄vWifiTemp
(
TEMP_T
 
mTemp
)

403 
U16
 
mu16VÆ
 = 0U;

407 
mTemp
 = mTemp + 0.5f;

408 if–
mTemp
 > 999.0f )

410 
mTemp
 = 999.0f;

412 if–
mTemp
 < -999.0f )

414 
mTemp
 = -999.0f;

417 
mu16VÆ
 = (
U16
)
mTemp
;

418  
mu16VÆ
;

419 
	}
}

422 
I16
 
	$GëU£rSy°emSís‹
 ( 
U16
 
mu16Sí
 )

424 
I16
 
mu16D©a
 = 0;

425 
TEMP_T
 
mTemp
;

426 
U32
 
mu32W©t
;

428  
mu16Sí
 )

430 
WIFI_SENSOR_0001_COLD_TEMP
 :

431 
mTemp
 = 
	`GëTemp
–
TEMP_ID_COLD_WATER
 );

432 
mu16D©a
 = 
	`C⁄vWifiTemp
–
mTemp
 );

435 
WIFI_SENSOR_0003_WATER_TEMP
 :

436 
mTemp
 = 
	`GëTemp
–
TEMP_ID_ROOM_WATER
 );

437 
mu16D©a
 = 
	`C⁄vWifiTemp
–
mTemp
 );

440 
WIFI_SENSOR_0004_OUT_TEMP
 :

441 
mTemp
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

442 
mu16D©a
 = 
	`C⁄vWifiTemp
–
mTemp
 );

445 
WIFI_SENSOR_000E_WATT_DATA
 :

448 
mu32W©t
 = 
	`GëE√rgyW©tAŒ
();

449 
mu32W©t
 /= 10;

451 if–
mu32W©t
 > 5000 )

453 
mu32W©t
 = 5000;

455 if–
mu32W©t
 < 1 )

457 
mu32W©t
 = 1;

460 
mu16D©a
 = (
U16
)
mu32W©t
;

463 
	`CÀ¨AŒE√rgyW©t
();

466 
WIFI_SENSOR_000F_COMP_DATA
 :

471 if–
	`GëCompBldcT¨gëRps
() > 0

472 && 
	`GëCompBldcCuºítRps
() > 0 )

474 
mu16D©a
 = 
ON
;

478 
mu16D©a
 = 
OFF
;

483 
mu16D©a
 = 0U;

487  
mu16D©a
;

488 
	}
}

492 
U16
 
	$GëU£rSy°emP¨t
 ( 
U16
 
mu16P¨t
 )

494 if–
	`IsVÆidP¨tID
–(
E_API_A1080_T
)
mu16P¨t
 ) =
TRUE
 )

496  
	`GëSm¨tCheckD©aId
–(
E_API_A1080_T
)
mu16P¨t
 );

500 
	}
}

503 
U32
 
	$GëU£rSy°emAccumuœã
 ( 
U16
 
mu16Acc
 )

505 
U32
 
mu32D©a
 = 0U;

507  
mu16Acc
 )

509 
WIFI_ACCM_0000_MONTH_WATER_USER
 :

510 
mu32D©a
 = 1000000;

513 
WIFI_ACCM_0004_DAY_WATER_USER
 :

514 
mu32D©a
 = 1010;

518 
mu32D©a
 = 0U;

522 i‡–
mu32D©a
 >= 999999U )

524 
mu32D©a
 = 999999U;

526  
mu32D©a
;

527 
	}
}

530 
	#W_OFF
 0

	)

531 
	#W_ON
 1

	)

533 
	#W_CLOSE
 0

	)

534 
	#W_OPEN
 1

	)

536 
	#W_INSTALLED
 0

	)

537 
	#W_REMOVED
 1

	)

539 
	#W_HOT_UNLOCK
 1

	)

540 
	#W_HOT_LOCK
 2

	)

542 
	#W_UNLOCK
 0

	)

543 
	#W_LOCK
 1

	)

545 
	#W_FILTER_NONE
 0

	)

546 
	#W_FILTER_RESET
 1

	)

548 
	#W_PROGRESS_OFF
 0

	)

549 
	#W_PROGRESS_ON
 1

	)

550 
	#W_PROGRESS_GOING
 2

	)

553 
	#W_ICE_MODE_COLD
 1

	)

555 
	#W_ICE_MODE_ICE
 3

	)

557 
	#W_COLD_OFF
 0

	)

558 
	#W_COLD_MODE_1
 1

	)

559 
	#W_COLD_MODE_2
 2

	)

561 
	#W_WATER_ROOM
 1

	)

562 
	#W_WATER_COLD
 2

	)

563 
	#W_WATER_HOT
 3

	)

565 
	#W_ICE_LARGE
 0

	)

566 
	#W_ICE_SMALL
 2

	)

568 
	#W_ICE_OFF
 0

	)

569 
	#W_ICE_ON
 1

	)

571 
	#W_MIN_SAVIN_HOUR
 0

	)

572 
	#W_MAX_SAVIN_HOUR
 23

	)

574 
	#W_MIN_SAVIN_MIN
 0

	)

575 
	#W_MAX_SAVIN_MIN
 59

	)

577 
	#W_SMART_CHECK_START
 1

	)

578 
	#W_SMART_CHECK_STOP
 0

	)

580 
	#W_SMART_CHECK_ERROR
 1

	)

581 
	#W_SMART_CHECK_OK
 0

	)

584 
U8
 
	gmu8IsSkùSídD©a
 = 
FALSE
;

585 
	$SëU£rSy°emFun˘i⁄
 ( 
U16
 
mu16Func
, U16 
mD©a
 )

587 
U8
 
mu8IsSídD©a
 = 
FALSE
;

590  
mu16Func
 )

592 
WIFI_FUNC_0002_COLD_SEL
 :

593 if(
mD©a
 =
W_ON
 )

595 
	`SëCﬁdW©îC⁄figMake
–
TRUE
 );

596 
	`Sound
–
SOUND_SETUP_COLD
 );

598 if–
mD©a
 =
W_OFF
 )

600 
	`SëCﬁdW©îC⁄figMake
–
FALSE
 );

601 
	`Sound
–
SOUND_CANCEL_COLD
 );

605 
mu8IsSídD©a
 = 
TRUE
;

609 
WIFI_FUNC_0003_HOT_LOCK_SEL
 :

610 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

612 i‡(
mD©a
 =
W_HOT_UNLOCK
)

614 
	`SëLockHŸ
–
UNLOCK
 );

615 
	`Sound
–
SOUND_UNLOCK_HOT
 );

617 if(
mD©a
 =
W_HOT_LOCK
 )

619 
	`SëLockHŸ
–
LOCK
 );

620 
	`Sound
–
SOUND_LOCK_HOT
 );

624 
mu8IsSídD©a
 = 
TRUE
;

629 
mu8IsSídD©a
 = 
TRUE
;

633 
WIFI_FUNC_0005_LOCK_SEL
 :

634 i‡–
mD©a
 =
W_LOCK
 )

636 
	`SëLockAŒ
–
LOCK
 );

637 
	`Sound
–
SOUND_LOCK_ALL
 );

639 if–
mD©a
 =
W_UNLOCK
 )

641 
	`SëLockAŒ
–
UNLOCK
 );

642 
	`Sound
–
SOUND_UNLOCK_ALL
 );

646 
mu8IsSídD©a
 = 
TRUE
;

650 
WIFI_FUNC_0008_ICE_SEL
:

651 if–
mD©a
 =
W_ICE_MODE_ICE
 )

653 
	`SëI˚Turbo
–
TRUE
 );

654 
	`Sound
–
SOUND_SETUP
 );

656 if–
mD©a
 =
W_ICE_MODE_COLD
 )

658 
	`SëI˚Turbo
–
FALSE
 );

659 
	`Sound
–
SOUND_SETUP
 );

663 
mu8IsSídD©a
 = 
TRUE
;

667 
WIFI_FUNC_0031_VOICE_SEL
 :

668 if–
mD©a
 >
MIN_VOICE_LEVEL
 && mD©®<
MAX_VOICE_LEVEL
 )

670 
U8
 
mSound
;

672 
	`SëVoi˚Levñ
–(
U8
)
mD©a
 );

673 
mSound
 = 
SOUND_SETTING_MUTE
 + ( 
mD©a
 - 1 );

674 
	`Sound
–(
SoundId_T
)
mSound
 );

678 
mu8IsSídD©a
 = 
TRUE
;

682 
WIFI_FUNC_0032_ICELOCK_SEL
 :

683 i‡–
mD©a
 =
W_LOCK
 )

685 
	`SëLockI˚
–
LOCK
 );

686 
	`Sound
–
SOUND_LOCK_ICE
 );

688 if–
mD©a
 =
W_UNLOCK
 )

690 
	`SëLockI˚
–
UNLOCK
 );

691 
	`Sound
–
SOUND_UNLOCK_ICE
 );

695 
mu8IsSídD©a
 = 
TRUE
;

699 
WIFI_FUNC_0033_VOICE_VOL_SEL
 :

700 if–
mD©a
 >
MIN_VOICE_VOLUME
 && mD©®<
MAX_VOICE_VOLUME
 )

702 
	`SëVoi˚Vﬁume
–(
U8
)
mD©a
 );

703 
	`Sound
–
SOUND_SETUP
 );

707 
mu8IsSídD©a
 = 
TRUE
;

712 
WIFI_FUNC_003B_HOT_TEMP_SEL
 :

713 if–
mD©a
 =
W_OFF
 || mD©®=
W_ON
 )

715 
	`SëHŸC⁄figU£r
–(
U8
)
mD©a
 );

716 if–
mD©a
 =
W_ON
 )

718 
	`Sound
–
SOUND_SETUP
 );

722 
	`Sound
–
SOUND_CANCEL
 );

727 
mu8IsSídD©a
 = 
TRUE
;

732 
WIFI_FUNC_0040_SMART_CHECK_RQST
 :

733 if–
mD©a
 =
W_SMART_CHECK_START
 )

735 
	`SèπSm¨tCheck
();

736 
	`Sound
–
SOUND_SMART_DIAG_START
 );

740 
	`St›Sm¨tCheck
();

744 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
 :

745 if–
mD©a
 >
MIN_USER_AMOUNT_LITER


746 && 
mD©a
 <
MAX_USER_AMOUNT_LITER
 )

748 
	`SëW©îOutU£rAmou¡Lôî
–
mD©a
 );

749 
	`Sound
–
SOUND_SETUP_MY_AMOUNT
 );

753 
mu8IsSídD©a
 = 
TRUE
;

757 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
 :

758 if–
mD©a
 =
W_OFF
 || mD©®=
W_ON
 )

760 
	`SëC⁄figDeco
–
DECO_LED_BUTTON
, (
U8
)
mD©a
 );

761 if–
mD©a
 =
W_OFF
 )

763 
	`Sound
–
SOUND_CANCEL
 );

767 
	`Sound
–
SOUND_SETUP
 );

772 
mu8IsSídD©a
 = 
TRUE
;

776 
WIFI_FUNC_004A_WELCOME_LIGHT
 :

777 if–
mD©a
 =
W_OFF
 || mD©®=
W_ON
 )

779 
	`SëC⁄figDeco
–
DECO_LED_WELCOME
, (
U8
)
mD©a
 );

780 if–
mD©a
 =
W_OFF
 )

782 
	`Sound
–
SOUND_CANCEL
 );

786 
	`Sound
–
SOUND_SETUP
 );

791 
mu8IsSídD©a
 = 
TRUE
;

795 
WIFI_FUNC_0051_QUANTITY_USE_SEL
 :

796 if–
mD©a
 =
W_OFF
 || mD©®=
W_ON
 )

798 
	`SëW©îOutC⁄figU£r
–(
U8
)
mD©a
 );

800 if–
mD©a
 =
W_OFF
 )

802 
	`Sound
–
SOUND_CANCEL
 );

806 
	`Sound
–
SOUND_SETUP
 );

811 
mu8IsSídD©a
 = 
TRUE
;

815 
WIFI_FUNC_0058_ICE_SIZE_SEL
 :

816 if–
mD©a
 =
W_ICE_LARGE
 || mD©®=
W_ICE_SMALL
 )

818 if–
mD©a
 =
W_ICE_LARGE
 )

820 
	`SëI˚Size
–
ICE_LARGE
 );

824 
	`SëI˚Size
–
ICE_SMALL
 );

827 
	`Sound
–
SOUND_SETUP
 );

831 
mu8IsSídD©a
 = 
TRUE
;

835 
WIFI_FUNC_0059_ICE_ONOFF_SEL
 :

836 if–
mD©a
 =
W_ICE_OFF
 || mD©®=
W_ICE_ON
 )

838 if–
mD©a
 =
W_ICE_OFF
 )

840 
	`Sound
–
SOUND_CANCEL_ICE
 );

841 
	`SëI˚C⁄figMake
–
FALSE
 );

845 
	`Sound
–
SOUND_SETUP_ICE
 );

846 
	`SëI˚C⁄figMake
–
TRUE
 );

851 
mu8IsSídD©a
 = 
TRUE
;

856 
WIFI_FUNC_005C_SMART_CHECK_RESULT
 :

857 if–
mD©a
 =
W_SMART_CHECK_OK
 )

859 
	`Sound
–
SOUND_SMART_DIAG_NO_ERR_DONE
 );

863 
	`Sound
–
SOUND_SMART_DIAG_ERR_DONE
 );

867 
WIFI_FUNC_005E_SLEEP_MODE_SEL
 :

868 if–
mD©a
 =
W_OFF
 || mD©®=
W_ON
 )

870 
	`SëSavögC⁄fig
–(
U8
)
mD©a
 );

871 if–
mD©a
 =
W_OFF
 )

873 
	`Sound
–
SOUND_CANCEL_SLEEP
 );

877 
	`Sound
–
SOUND_SETUP_SLEEP
 );

882 
mu8IsSídD©a
 = 
TRUE
;

886 
WIFI_FUNC_005F_SLEEP_START_HOUR
 :

887 if–
mD©a
 <
W_MAX_SAVIN_HOUR
 )

889 
	`SëSavögAœrmHour
–
ALARM_ON
, (
U8
)
mD©a
);

893 
mu8IsSídD©a
 = 
TRUE
;

897 
WIFI_FUNC_0060_SLEEP_START_MIN
 :

898 if–
mD©a
 <
W_MAX_SAVIN_MIN
 )

900 
	`SëSavögAœrmMö
–
ALARM_ON
, (
U8
)
mD©a
);

904 
mu8IsSídD©a
 = 
TRUE
;

908 
WIFI_FUNC_0061_SLEEP_END_HOUR
 :

909 if–
mD©a
 <
W_MAX_SAVIN_HOUR
 )

911 
	`SëSavögAœrmHour
–
ALARM_OFF
, (
U8
)
mD©a
);

915 
mu8IsSídD©a
 = 
TRUE
;

919 
WIFI_FUNC_0062_SLEEP_END_MIN
 :

920 if–
mD©a
 <
W_MAX_SAVIN_MIN
 )

922 
	`SëSavögAœrmMö
–
ALARM_OFF
, (
U8
)
mD©a
);

924 
	`Sound
–
SOUND_SETUP
 );

928 
mu8IsSídD©a
 = 
TRUE
;

937 if–
mu8IsSídD©a
 =
TRUE
 )

939 
	`WifiSídD©a
–
WIFI_DATA_FUNCTION
 );

943 
mu8IsSkùSídD©a
 = 
TRUE
;

945 
	}
}

948 
U8
 
GëVÆ
–
	$U8
 (*
pFun
)(), 
U8
 
VÆ
, U8 
mTrue
, U8 
mFÆ£
 )

950 if–
	`pFun
(Ë=
VÆ
 )

952  
mTrue
;

955  
mFÆ£
;

956 
	}
}

960 
U16
 
	$GëU£rSy°emFun˘i⁄
 ( 
U16
 
mu16Func
 )

962 
U16
 
mu16D©a
 = 0U;

964  
mu16Func
 )

966 
WIFI_FUNC_0002_COLD_SEL
 :

967 
mu16D©a
 = 
	`GëVÆ
–
GëCﬁdW©îC⁄figMake
, 
TRUE
, 
W_ON
, 
W_OFF
 );

970 
WIFI_FUNC_0003_HOT_LOCK_SEL
 :

971 
mu16D©a
 = 
	`GëVÆ
–
GëLockHŸ
, 
LOCK
, 
W_HOT_LOCK
, 
W_HOT_UNLOCK
 );

974 
WIFI_FUNC_0005_LOCK_SEL
 :

975 
mu16D©a
 = 
	`GëVÆ
–
GëLockAŒ
, 
LOCK
, 
W_LOCK
, 
W_UNLOCK
 );

978 
WIFI_FUNC_0008_ICE_SEL
:

979 if–
	`GëI˚Turbo
(Ë=
TRUE
 )

981 
mu16D©a
 = 
W_ICE_MODE_ICE
;

985 
mu16D©a
 = 
W_ICE_MODE_COLD
;

989 
WIFI_FUNC_000A_COLD_TEMP
 :

991 
mu16D©a
 = 
	`GëVÆ
–
GëCﬁdW©îC⁄figMake
, 
FALSE
, 
W_COLD_OFF
, 
W_COLD_MODE_2
 );

993 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

995 
mu16D©a
 = 
W_COLD_OFF
;

999 if–
	`GëCﬁdW©îTempSètus
(Ë=
COLD_STATUS_GOOD
 )

1001 
mu16D©a
 = 
W_COLD_MODE_2
;

1005 
mu16D©a
 = 
W_COLD_MODE_1
;

1013 
WIFI_FUNC_000B_WATER_SEL
 :

1015 
U8
 
mu8Sñ
;

1017 
mu8Sñ
 = 
	`GëW©îOutSñe˘
();

1018 if–
mu8Sñ
 =
SEL_WATER_COLD
 )

1020 
mu16D©a
 = 
W_WATER_COLD
;

1022 if–
mu8Sñ
 =
SEL_WATER_HOT
 )

1024 
mu16D©a
 = 
W_WATER_HOT
;

1028 
mu16D©a
 = 
W_WATER_ROOM
;

1033 
WIFI_FUNC_000D_WATER_OUTQUANTITY
 :

1034 
mu16D©a
 = 
	`GëU£rUßgeDaûyW©î
–
USER_NONE
 ) * 10U ;

1035 
	`CÀ¨AŒUßgeW©î
();

1039 
WIFI_FUNC_001A_HOT_INTEMP
 :

1040 if–
	`GëW©îOutLa°edSñe˘
(Ë!
SEL_WATER_HOT
 )

1042 
mu16D©a
 = 0;

1046 
TEMP_T
 
mTemp
;

1047 
mTemp
 = 
	`GëTemp
–
TEMP_ID_HOT_IN
 );

1048 
mu16D©a
 = 
	`C⁄vWifiTemp
–
mTemp
 );

1052 
WIFI_FUNC_001B_HOT_MEANTEMP
 :

1053 if–
	`GëW©îOutLa°edSñe˘
(Ë!
SEL_WATER_HOT
 )

1055 
mu16D©a
 = 0;

1059 
TEMP_T
 
mTemp
;

1060 
mTemp
 = 
	`GëHŸOutAvîageOutTemp
();

1061 
mu16D©a
 = 
	`C⁄vWifiTemp
–
mTemp
 );

1065 
WIFI_FUNC_001C_HOT_SELTEMP
 :

1066 if–
	`GëW©îOutLa°edSñe˘
(Ë!
SEL_WATER_HOT
 )

1068 
mu16D©a
 = 0;

1072 
U8
 
mu8SñHŸ
;

1074 
mu8SñHŸ
 = 
	`GëHŸSñe˘
();

1075 
mu16D©a
 = 
	`GëHŸSñe˘Temp
–
mu8SñHŸ
 );

1079 
WIFI_FUNC_001F_DRAIN_STATUS
 :

1080 
mu16D©a
 = 
	`GëProgªssVÆ
–
PROGRESS_ID_DRAIN_WATER
 );

1084 
WIFI_FUNC_0024_HEART_TIME4
 :

1085 
mu16D©a
 = 
	`GëSîvi˚O≥nTime
();

1086 
	`Re£tSîvi˚O≥nTime
();

1089 
WIFI_FUNC_002C_SILVER_CARE
 :

1090 
mu16D©a
 = 
	`GëProgªssVÆ
–
PROGRESS_ID_SILVER_CARE
 );

1093 
WIFI_FUNC_0030_ICE_MAKETIME
:

1094 
mu16D©a
 = 
	`GëI˚Do‹O≥nögTimeIŸ
();

1095 
	`SëI˚Do‹O≥nögTimeIŸ
( 0U );

1098 
WIFI_FUNC_0031_VOICE_SEL
 :

1099 
mu16D©a
 = 
	`GëVoi˚Levñ
();

1102 
WIFI_FUNC_0032_ICELOCK_SEL
:

1103 
mu16D©a
 = 
	`GëVÆ
–
GëLockI˚
, 
LOCK
, 
W_LOCK
, 
W_UNLOCK
 );

1106 
WIFI_FUNC_0033_VOICE_VOL_SEL
 :

1107 
mu16D©a
 = 
	`GëVoi˚Vﬁume
();

1110 
WIFI_FUNC_0035_COVER1_OPEN
 :

1111 if–
	`IsO≥nFûãr
–
ID_FILTER_COVER
 ) =
FILTER_OPEN
 )

1113 
mu16D©a
 = 
W_OPEN
;

1117 
mu16D©a
 = 
W_CLOSE
;

1120 
WIFI_FUNC_0036_COVER2_OPEN
 :

1121 if–
	`GëSîvi˚CheckT™kO≥n
(Ë=
W_OPEN
 )

1123 
mu16D©a
 = 
W_OPEN
;

1127 
mu16D©a
 = 
W_CLOSE
;

1131 
WIFI_FUNC_003B_HOT_TEMP_SEL
 :

1132 
mu16D©a
 = 
	`GëHŸC⁄figU£r
();

1135 
WIFI_FUNC_0040_SMART_CHECK_RQST
 :

1136 
mu16D©a
 = 
	`GëSm¨tCheckSètusId
(
WIFI_FUNC_0040_SMART_CHECK_RQST
);

1139 
WIFI_FUNC_0041_SMART_CHECK_STATUS
 :

1140 
mu16D©a
 = 
	`GëSm¨tCheckSètusId
(
WIFI_FUNC_0041_SMART_CHECK_STATUS
);

1143 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
 :

1144 
mu16D©a
 = 
	`GëSm¨tCheckSètusId
(
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
);

1147 
WIFI_FUNC_0043_FILTER_STATUS1
 :

1148 i‡(
	`IsO≥nFûãr
–
ID_FILTER
 ) =
FILTER_OPEN
 )

1150 
mu16D©a
 = 
W_REMOVED
;

1154 
mu16D©a
 = 
W_INSTALLED
;

1158 
WIFI_FUNC_0047_WATER_QUANTITY_SEL
 :

1159 
mu16D©a
 = 
	`GëW©îOutU£rAmou¡Lôî
();

1162 
WIFI_FUNC_0049_OUT_BUTTON_LIGHT
:

1163 if–
	`GëC⁄figDeco
–
DECO_LED_BUTTON
 ) =
TRUE
 )

1165 
mu16D©a
 = 
W_ON
;

1169 
mu16D©a
 = 
W_OFF
;

1173 
WIFI_FUNC_004A_WELCOME_LIGHT
 :

1174 if–
	`GëC⁄figDeco
–
DECO_LED_WELCOME
 ) =
TRUE
 )

1176 
mu16D©a
 = 
W_ON
;

1180 
mu16D©a
 = 
W_OFF
;

1184 
WIFI_FUNC_0050_UV_STERILIZE_STATUS
 :

1185 
mu16D©a
 = 
	`GëProgªssVÆ
–
PROGRESS_ID_UV_WATER_OUT
 );

1188 
WIFI_FUNC_0051_QUANTITY_USE_SEL
 :

1189 
mu16D©a
 = 
	`GëVÆ
–
GëW©îOutC⁄figU£r
, 
TRUE
, 
W_ON
, 
W_OFF
 );

1192 
WIFI_FUNC_0053_FILTER_RESET1
 :

1193 
mu16D©a
 = 
	`GëVÆ
–
GëFûãrCh™gedFlushSètus
, 
FILTER_CHANGED_FLUSH
, 
W_FILTER_RESET
, 
W_FILTER_NONE
 );

1194 if–
mu16D©a
 =
W_FILTER_RESET
 )

1197 
	`Re£tFûãrUßge
();

1198 
	`SëFûãrCh™gedFlushSètus
–
FILTER_CHANGED_NONE
 );

1202 
WIFI_FUNC_0058_ICE_SIZE_SEL
 :

1203 if–
	`GëI˚Size
(Ë=
ICE_LARGE
 )

1205 
mu16D©a
 = 
W_ICE_LARGE
;

1209 
mu16D©a
 = 
W_ICE_SMALL
;

1213 
WIFI_FUNC_0059_ICE_ONOFF_SEL
 :

1214 
mu16D©a
 = (
U16
)
	`GëI˚C⁄figMake
();

1217 
WIFI_FUNC_005A_UV_ICE_TANK_STATUS
 :

1218 
mu16D©a
 = 
	`GëProgªssVÆ
–
PROGRESS_ID_UV_ICE_TANK
 );

1221 
WIFI_FUNC_005B_UV_ICE_TRAY_STATUS
 :

1222 
mu16D©a
 = 
	`GëProgªssVÆ
–
PROGRESS_ID_UV_ICE_TRAY
 );

1225 
WIFI_FUNC_005C_SMART_CHECK_RESULT
 :

1229 
WIFI_FUNC_005D_UV_ICE_FAUCET_STATUS
 :

1230 
mu16D©a
 = 
	`GëProgªssVÆ
–
PROGRESS_ID_UV_ICE_OUT
 );

1233 
WIFI_FUNC_005E_SLEEP_MODE_SEL
 :

1234 
mu16D©a
 = (
U16
)
	`GëSavögC⁄fig
();

1237 
WIFI_FUNC_005F_SLEEP_START_HOUR
 :

1238 
mu16D©a
 = (
U16
)
	`GëSavögAœrmHour
–
ALARM_ON
 );

1241 
WIFI_FUNC_0060_SLEEP_START_MIN
 :

1242 
mu16D©a
 = (
U16
)
	`GëSavögAœrmMö
–
ALARM_ON
 );

1245 
WIFI_FUNC_0061_SLEEP_END_HOUR
 :

1246 
mu16D©a
 = (
U16
)
	`GëSavögAœrmHour
–
ALARM_OFF
 );

1249 
WIFI_FUNC_0062_SLEEP_END_MIN
 :

1250 
mu16D©a
 = (
U16
)
	`GëSavögAœrmMö
–
ALARM_OFF
 );

1254 
mu16D©a
 = 0U;

1258  
mu16D©a
;

1259 
	}
}

1265 
	s_¥ogªss_


1267 
U8
 
	mSètus
;

1269 
U8
 
	mPªvVÆ
;

1270 
U8
 
	mCurVÆ
;

1271 
U8
 (*
pGëSètus
)();

1272 } 
	tProgªss_T
;

1274 
U8
 
GëSètusUvW©îOut
();

1275 
U8
 
GëSètusUvI˚Out
();

1276 
U8
 
GëSètusUvI˚Tøy
();

1277 
U8
 
GëSètusUvI˚T™k
();

1278 
U8
 
GëSètusSûvîC¨e
();

1279 
U8
 
GëSètusDøöW©î
();

1281 
Progªss_T
 
	gProgªssLi°
[ 
MAX_PROGRESS_NUM
 ] =

1283 { 
W_PROGRESS_OFF
, 0, 0, 
GëSètusUvW©îOut
 },

1284 { 
W_PROGRESS_OFF
, 0, 0, 
GëSètusUvI˚Out
 },

1285 { 
W_PROGRESS_OFF
, 0, 0, 
GëSètusUvI˚Tøy
 },

1286 { 
W_PROGRESS_OFF
, 0, 0, 
GëSètusUvI˚T™k
 },

1287 { 
W_PROGRESS_OFF
, 0, 0, 
GëSètusSûvîC¨e
 },

1288 { 
W_PROGRESS_OFF
, 0, 0, 
GëSètusDøöW©î
 },

1291 
U8
 
	$GëProgªssSètus
(
U8
 
id
 )

1293  
ProgªssLi°
[ 
id
 ].
Sètus
;

1294 
	}
}

1296 
	$SëProgªssSètus
(
U8
 
id
, U8 
mu8Sètus
)

1298 
ProgªssLi°
[ 
id
 ].
Sètus
 = 
mu8Sètus
;

1299 
	}
}

1301 
U16
 
	$GëProgªssVÆ
(
U8
 
id
)

1303 
U16
 
mu16D©a
;

1305 
mu16D©a
 = 
	`GëProgªssSètus
–
id
 );

1306 if–
mu16D©a
 =
W_PROGRESS_ON
 )

1308 
	`SëProgªssSètus
–
id
, 
W_PROGRESS_GOING
 );

1311  
mu16D©a
;

1312 
	}
}

1315 
U8
 
	$GëSètusUvW©îOut
()

1317 if–
	`IsTu∫OnUvId
–
UV_WATER_OUT
 ) =
TRUE
 )

1319  
ON
;

1322  
OFF
;

1323 
	}
}

1325 
U8
 
	$GëSètusUvI˚Out
()

1327 if–
	`IsTu∫OnUvId
–
UV_ICE_DOOR
 ) =
TRUE
 )

1329  
ON
;

1332  
OFF
;

1333 
	}
}

1335 
U8
 
	$GëSètusUvI˚Tøy
()

1337 if–
	`IsTu∫OnUvId
–
UV_ICE_TRAY
 ) =
TRUE
 )

1339  
ON
;

1342  
OFF
;

1343 
	}
}

1345 
U8
 
	$GëSètusUvI˚T™k
()

1347 if–
	`IsTu∫OnUvId
–
UV_ICE_TANK
 ) =
TRUE
 )

1349  
ON
;

1352  
OFF
;

1353 
	}
}

1356 
U8
 
	$GëSètusSûvîC¨e
()

1359 if–
	`GëSy°emUnu£dTime
(Ë>
SILVER_CARE_TIME_MIN
 )

1361  
ON
;

1364  
OFF
;

1365 
	}
}

1367 
U8
 
	$GëSètusDøöW©î
()

1369  
OFF
;

1370 
	}
}

1373 
U8
 
	$CheckSèãTy≥3
()

1375 
U8
 
i
;

1376 
Progªss_T
 *
pLi°
;

1377 
U8
 
IsCh™gedSètus
 = 
FALSE
;

1379  
i
 = 0; i < 
MAX_PROGRESS_NUM
; i++ )

1381 
pLi°
 = &
ProgªssLi°
[ 
i
 ];

1383 
pLi°
->
CurVÆ
 =ÖLi°->
	`pGëSètus
();

1384 if–
pLi°
->
PªvVÆ
 !pLi°->
CurVÆ
 )

1386 
pLi°
->
PªvVÆ
 =ÖLi°->
CurVÆ
;

1387 if–
pLi°
->
CurVÆ
 =
ON
 )

1389 if–
pLi°
->
Sètus
 =
W_PROGRESS_OFF
 )

1391 
pLi°
->
Sètus
 = 
W_PROGRESS_ON
;

1392 
IsCh™gedSètus
 = 
TRUE
;

1395 if–
pLi°
->
CurVÆ
 =
OFF
 )

1397 
pLi°
->
Sètus
 = 
W_PROGRESS_OFF
;

1398 
IsCh™gedSètus
 = 
TRUE
;

1403  
IsCh™gedSètus
;

1404 
	}
}

1406 
U32
 
	$GëU£rSy°emRamM⁄ô‹
 ( 
U16
 
mu16Func
, U16 
mLí
 )

1408 
U32
 
mu32D©a
 = 0U;

1409 
__√¨
 
U8
 *
mPRamAddªss_ªad
;

1410 
U16
 
mu16ãmp_2byã_vÆue
 = 0U;

1411 
U32
 
mu32ãmp_4byã_vÆue
 = 0U;

1413 i‡((
mu16Func
 > 
Z_ømmax
Ë|| (mu16Fun¯< 
Z_ømmö
))

1415  
mu32D©a
;

1418 i‡((
mLí
 == 0) && (mLen > 4))

1420  
mu32D©a
;

1422 
mPRamAddªss_ªad
 = (
__√¨
 
U8
*)
mu16Func
;

1423 
mu32D©a
 = *
mPRamAddªss_ªad
;

1425 i‡(
mLí
 > 1)

1427 
mPRamAddªss_ªad
++;

1428 
mu16ãmp_2byã_vÆue
 = *
mPRamAddªss_ªad
;

1429 
mu32D©a
 +(
U16
)((
mu16ãmp_2byã_vÆue
 & 0x00FF) << 8);

1432 i‡(
mLí
 > 2)

1434 
mPRamAddªss_ªad
++;

1435 
mu32ãmp_4byã_vÆue
 = *
mPRamAddªss_ªad
;

1436 
mPRamAddªss_ªad
++;

1437 
mu16ãmp_2byã_vÆue
 = *
mPRamAddªss_ªad
;

1438 
mu32ãmp_4byã_vÆue
 +(
U16
)((
mu16ãmp_2byã_vÆue
 & 0x00FF) << 8);

1439 
mu32D©a
 +(
U32
)((
mu32ãmp_4byã_vÆue
 & 0x0000FFFF) << 16);

1441  
mu32D©a
;

1442 
	}
}

1444 
	$SëU£rSy°emRamM⁄ô‹
 ( 
U16
 
mu16addªss
, 
I8
 *
mD©a
 )

1446 
__√¨
 
U8
 *
mPRamAddªss
;

1447 
U16
 
mLí
 = 0U;

1448 
U16
 
mRWMode
 = 0U;

1449 
U32
 
mRamWrôeD©a_4byã
 = 0U;

1450 
U32
 
mRamWrôeD©a_4byã_buf
 = 0U;

1451 
U8
 
mi
 = 0U;

1452 
U8
 
mDec
 = 0U;

1453 
U32
 
mDEC_Posôi⁄Æ_Numbî
 = 1U;

1455 
mLí
 = 
	`WIFI_ASCII2HEX
(
mD©a
[0]) & 0x000F;

1456 
mRWMode
 = 
	`WIFI_ASCII2HEX
(
mD©a
[1]) & 0x000F;

1458 i‡((
mu16addªss
 > 
Z_ømmax
Ë|| (mu16addªs†< 
Z_ømmö
)){

1461 i‡(
mRWMode
 !
RAM_Wrôe
)

1465 
mi
=0; mi<(
mD©a
[
LENGTH_WIFI_RAM_DATA
-1]-1); mi++)

1467 
mDEC_Posôi⁄Æ_Numbî
 *= 10;

1469 
mi
=0; mi<
mD©a
[
LENGTH_WIFI_RAM_DATA
-1]; mi++)

1471 
mDec
 = (
U8
)((
mD©a
[2+
mi
])-0x30);

1472 
mRamWrôeD©a_4byã
 +
mDec
 * (
mDEC_Posôi⁄Æ_Numbî
);

1473 
mDEC_Posôi⁄Æ_Numbî
 /= 10;

1476 
mPRamAddªss
 = (
__√¨
 
U8
*)
mu16addªss
;

1477 
mRamWrôeD©a_4byã_buf
 = 
mRamWrôeD©a_4byã
;

1478 
mi
 = 0; mò< 
mLí
; mi++)

1480 *
mPRamAddªss
 = (
U8
)(
mRamWrôeD©a_4byã_buf
 & 0x000000FF);

1481 
mRamWrôeD©a_4byã_buf
 = mRamWriteData_4byte_buf >> 8;

1482 *(
mPRamAddªss
++);

1485 
	`SëU£rSy°emRamWrôeSètus
((
U16
)
mu16addªss
);

1486 
	}
}

1499 
	s_°©us_chagíd_evít_


1501 
U16
 
	mCou¡
;

1502 
U16
 
	mPªvVÆ
;

1503 
U16
 
	mCurVÆ
;

1504 
U8
 (*
pGëSètus
)();

1506 } 
	tSètusEvít_T
;

1508 
U8
 
GëDeco_WñcomLed
();

1509 
U8
 
GëDeco_Buâ⁄Led
();

1510 
U8
 
GëFûãrSètus_Fûãr
();

1511 
U8
 
GëFûãrSètus_FûãrCovî
();

1512 
U8
 
GëW©îOutU£rAmou¡LôîEx
();

1514 
SètusEvít_T
 
	gSètusEvítLi°
[] =

1516 { 0, 0, 0, 
GëCﬁdW©îC⁄figMake
 },

1518 { 0, 0, 0, 
GëI˚C⁄figMake
 },

1519 { 0, 0, 0, 
GëI˚Turbo
 },

1520 { 0, 0, 0, 
GëI˚Size
 },

1521 { 0, 0, 0, 
GëLockI˚
 },

1522 { 0, 0, 0, 
IsO≥nI˚Do‹
 },

1524 { 0, 0, 0, 
GëHŸC⁄figU£r
 },

1525 { 0, 0, 0, 
GëLockHŸ
 },

1526 { 0, 0, 0, 
GëLockAŒ
 },

1527 { 0, 0, 0, 
GëSavögC⁄fig
 },

1529 { 0, 0, 0, 
GëVoi˚Levñ
 },

1530 { 0, 0, 0, 
GëVoi˚Vﬁume
 },

1532 { 0, 0, 0, 
GëDeco_WñcomLed
 },

1533 { 0, 0, 0, 
GëDeco_Buâ⁄Led
 },

1535 { 0, 0, 0, 
GëW©îOut
 },

1537 { 0, 0, 0, 
GëFûãrSètus_Fûãr
 },

1538 { 0, 0, 0, 
GëFûãrSètus_FûãrCovî
 },

1539 { 0, 0, 0, 
GëFûãrCh™gedFlushSètus
 },

1541 { 0, 0, 0, 
GëW©îOutU£rAmou¡LôîEx
 },

1542 { 0, 0, 0, 
GëW©îOutC⁄figU£r
 },

1544 { 0, 0, 0, 
GëSm¨tCheckSètus
 },

1545 { 0, 0, 0, 
GëSm¨tCheck
 },

1546 { 0, 0, 0, 
GëDügnosisProgªss
 },

1548 { 0, 0, 0, 
GëSîvi˚CheckT™kO≥n
 }

1550 
	#SZ_STATUS_EVENT_LIST
 ((
SètusEvítLi°
)/(
SètusEvít_T
))

	)

1552 
U8
 
	$GëDeco_WñcomLed
()

1554  
	`GëC⁄figDeco
–
DECO_LED_WELCOME
 );

1555 
	}
}

1557 
U8
 
	$GëDeco_Buâ⁄Led
()

1559  
	`GëC⁄figDeco
–
DECO_LED_BUTTON
 );

1560 
	}
}

1562 
U8
 
	$GëFûãrSètus_Fûãr
()

1564  
	`IsO≥nFûãr
–
ID_FILTER
 );

1565 
	}
}

1567 
U8
 
	$GëFûãrSètus_FûãrCovî
()

1569  
	`IsO≥nFûãr
–
ID_FILTER_COVER
 );

1570 
	}
}

1572 
	#DELAY_TIME
 2

1573 
U8
 
	`GëW©îOutU£rAmou¡LôîEx
()

	)

1575 
U8
 
	gInôPowrOn
 = 
FALSE
;

1576 
U8
 
	gIsCh™gedSètus
 = 
FALSE
;

1577 
U8
 
	gmu8DñayTime
 = 
DELAY_TIME
;

1578 
U32
 
	gmu32PªVÆ
 = 0;

1579 
U32
 
	gmu32CurVÆ
 = 0;

1582 if–
	gInôPowrOn
 =
FALSE
 )

1584 
InôPowrOn
 = 
TRUE
;

1586 
	gmu32PªVÆ
 = 
GëW©îOutU£rAmou¡
();

1587  
	gFALSE
;

1590 
	gmu32CurVÆ
 = 
GëW©îOutU£rAmou¡
();

1591 if–
	gmu32PªVÆ
 !
mu32CurVÆ
 )

1593 
mu32PªVÆ
 = 
mu32CurVÆ
;

1595 
	gIsCh™gedSètus
 = 
TRUE
;

1596 
	gmu8DñayTime
 = 
DELAY_TIME
;

1601 if–
	gIsCh™gedSètus
 =
TRUE
 )

1603 if–
mu8DñayTime
 != 0 )

1605 
mu8DñayTime
--;

1609 
	gIsCh™gedSètus
 = 
FALSE
;

1610  
	gTRUE
;

1614  
	gFALSE
;

1620 
U8
 
	$CheckSèãTy≥2
()

1622 
U8
 
i
;

1623 
SètusEvít_T
 *
pLi°
;

1624 
U8
 
IsCh™gedSètus
 = 
FALSE
;

1626  
i
 = 0; i < 
SZ_STATUS_EVENT_LIST
; i++ )

1628 
pLi°
 = &
SètusEvítLi°
[ 
i
 ];

1630 
pLi°
->
CurVÆ
 =ÖLi°->
	`pGëSètus
();

1631 if–
pLi°
->
PªvVÆ
 !pLi°->
CurVÆ
 )

1633 
pLi°
->
PªvVÆ
 =ÖLi°->
CurVÆ
;

1635 
pLi°
->
Cou¡
++;

1636 
IsCh™gedSètus
 = 
TRUE
;

1640  
IsCh™gedSètus
;

1641 
	}
}

1643 
U8
 
	gdbg_iŸ_fun
 = 0;

1644 
	$Pro˚ssCh™gedSètus
()

1646 if–
	`CheckSèãTy≥2
(Ë=
TRUE
 || 
	`CheckSèãTy≥3
() == TRUE )

1648 
dbg_iŸ_fun
++;

1650 if–
mu8IsSkùSídD©a
 =
TRUE
 )

1652 
mu8IsSkùSídD©a
 = 
FALSE
;

1656 
	`WifiSídD©a
–
WIFI_DATA_FUNCTION
 );

1659 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_UserInterface_IconAIS.h

2 #i‚de‡
_WIFI_U£rI¡îÁ˚_ICON_AIS_H_


3 
	#_WIFI_U£rI¡îÁ˚_ICON_AIS_H_


	)

6 
	s_wifi_°©us_


8 
U8
 
	mmU⁄Off
;

9 
U8
 
	mmUfú°P¨ög
;

10 
U8
 
	mmUfŸaModuÀ
;

11 
U8
 
	mmUfŸaMaö
;

12 } 
	tSWifiSètus_T
;

14 
	e_°©us_key_evít_id_


16 
	mSTATUS_KEY_EVENT_ID_CONF_COLD
 = 0U,

17 
	mSTATUS_KEY_EVENT_ID_LOCK_HOT
,

18 
	mSTATUS_KEY_EVENT_ID_LOCK_ALL
,

19 
	mSTATUS_KEY_EVENT_ID_SOUND
,

20 
	mSTATUS_KEY_EVENT_ID_WATER_SEL
,

21 
	mSTATUS_KEY_EVENT_ID_CONF_AUTO_DRAIN
,

22 
	mSTATUS_KEY_EVENT_ID_CONF_HOT
,

23 
	mSTATUS_KEY_EVENT_ID_HIGH_MODE
,

24 
	mSTATUS_KEY_EVENT_ID_DEFAULT_AMOUNT
,

25 
	mSTATUS_KEY_EVENT_ID_UNIT_AMOUNT
,

26 
	mSTATUS_KEY_EVENT_ID_ANTI_CLEAN
,

27 
	mSTATUS_KEY_EVENT_ID_STER_SETTING_HOUR
,

28 
	mSTATUS_KEY_EVENT_ID_STER_SETTING_MIN
,

29 
	mSTATUS_KEY_EVENT_ID_WATER_OUTQUANTITY
,

30 
	mSTATUS_KEY_EVENT_ID_VOICE_LEVEL
,

31 
	mSTATUS_KEY_EVENT_ID_TEMP_TARGET
,

32 
	mSTATUS_KEY_EVENT_ID_FILTER_SEQ
,

33 } 
	tESètusKeyEvítId_T
;

35 
U£rWrôeEï
 ( 
U16
 
mu8Addr
, 
U8
 
mu8VÆ
 );

36 
U8
 
U£rRódEï
 ( 
U16
 
mu8Addr
 );

37 
U£rBuzzSound
 ( 
U8
 
mu8Buzz
 );

39 
U8
 
GëU£rSy°emSètus
 ( U8 
mu8VÆue
 );

41 
U16
 
GëU£rSy°emEº‹
 ( U16 
mu16Eº
 );

42 
U16
 
GëU£rSy°emFun˘i⁄
 ( U16 
mu16Func
 );

43 
U32
 
GëU£rSy°emRamM⁄ô‹
 ( 
U16
 
mu16Func
, U16 
mLí
);

44 
I16
 
GëU£rSy°emSís‹
 ( 
U16
 
mu16Sí
 );

45 
U16
 
GëU£rSy°emP¨t
 ( U16 
mu16P¨t
 );

46 
U32
 
GëU£rSy°emAccumuœã
 ( 
U16
 
mu16Acc
 );

48 
SëU£rSy°emFun˘i⁄
 ( 
U16
 
mu16Func
, U16 
mD©a
 );

49 
SëU£rSy°emRamM⁄ô‹
 ( 
U16
 
mu16Func
, 
I8
 *
mD©a
 );

51 
CÀ¨U£rSy°emD©a
 ( );

52 
SëU£rSy°emDi•œy
 ( 
U8
 
mu8Di•œy
 );

53 
SëU£rSy°emAµlyD©a
 ( 
U16
 
mId
 );

54 
SëU£rSy°emTime
 ( 
U16
 
mYór
, U16 
mM⁄th
, U16 
mD©e
, U16 
mHour
, U16 
mMö
, U16 
mSec
, U16 
mDay
 );

56 
SëU£rSy°emRamWrôeSètus
 ( 
U16
 
mu16Addªss
 );

57 
U16
 
GëU£rSy°emRamWrôeSètus
 ( U16 
mu16Addªss
 );

58 
SëKeySëtög
–
ESètusKeyEvítId_T
 
xEid
, 
U8
 
xU£t
);

60 
Pro˚ssCh™gedSètus
();

61 
Pro˚ssKeyCh™gedSètus
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Common.c

2 
	~"WIFI_Comm⁄.h
"

3 
	~"WIFI_DefU£r.h
"

10 
U8
 
	$WIFI_HEX2DEC
 ( 
U8
 
mu8HexD©a
 )

12 
U8
 
mu8Rëu∫D©a
 = 0;

13 
mu8Rëu∫D©a
 = (
U8
)((((
mu8HexD©a
 >> 4) & 0x0F) * 10) + (mu8HexData & 0x0F));

14  
mu8Rëu∫D©a
;

15 
	}
}

20 
U8
 
	$WIFI_DEC2HEX
 ( 
U8
 
mu8DecD©a
 )

22 
U8
 
mu8Rëu∫D©a
 = 0;

23 
mu8Rëu∫D©a
 = (
U8
)((((
mu8DecD©a
 / 10) << 4) & 0xF0) + (mu8DecData % 10));

24  
mu8Rëu∫D©a
;

25 
	}
}

30 
U16
 
	$WIFI_Bô16HEX2DEC
 ( 
U16
 
mu16HexD©a
 )

32 
U16
 
mu16Rëu∫D©a
 = 0;

33 
mu16Rëu∫D©a
 = ((
mu16HexD©a
 >> 12) & 0x000F) * 1000;

34 
mu16Rëu∫D©a
 +((
mu16HexD©a
 >> 8) & 0x000F) * 100;

35 
mu16Rëu∫D©a
 +((
mu16HexD©a
 >> 4) & 0x000F) * 10;

36 
mu16Rëu∫D©a
 +
mu16HexD©a
 & 0x000F;

37  
mu16Rëu∫D©a
;

38 
	}
}

43 
U16
 
	$WIFI_DEC2Bô16HEX
 ( 
U16
 
mu16DecD©a
 )

45 
U16
 
mu16Rëu∫D©a
 = 0;

46 
mu16Rëu∫D©a
 = ((
mu16DecD©a
 / 1000) << 12) & 0xF000;

47 
mu16Rëu∫D©a
 +(((
mu16DecD©a
 % 1000) / 100) << 8) & 0x0F00;

48 
mu16Rëu∫D©a
 +(((
mu16DecD©a
 % 100) / 10) << 4) & 0x00F0;

49 
mu16Rëu∫D©a
 +(
mu16DecD©a
 % 10) & 0x000F;

50  
mu16Rëu∫D©a
;

51 
	}
}

56 
I8
 
	$WIFI_HEX2ASCII
 ( 
U8
 
mu8HexD©a
 )

58 
I8
 
mi8Rëu∫D©a
 = 0;

59 i‡(
mu8HexD©a
 < 0x0A)

61 
mi8Rëu∫D©a
 = (
U8
)(
mu8HexD©a
 | 0x30);

65 
mi8Rëu∫D©a
 = (
U8
)((
mu8HexD©a
 - 9) | 0x40);

67  
mi8Rëu∫D©a
;

68 
	}
}

73 
U8
 
	$WIFI_ASCII2HEX
 ( 
U8
 
mu8AsciiD©a
 )

75 
U8
 
mu8Rëu∫D©a
 = 0;

76 i‡(
mu8AsciiD©a
 >= 0x41)

78 
mu8Rëu∫D©a
 = (
U8
)((
mu8AsciiD©a
 & ~0x40) + 9);

82 
mu8Rëu∫D©a
 = (
U8
)(
mu8AsciiD©a
 & ~0x30);

84  
mu8Rëu∫D©a
;

85 
	}
}

89 
U16
 
	$Ár_•rötf_s
 ( 
I8
* 
pBuf
, 
U16
 
mLí
, c⁄° I8* 
pD©a
 )

91 
U16
 
i
 = 0;

92 
U16
 
mu16Size
 = 0;

93 
U16
 
mu16Rëu∫
 = 0;

94 
mu16Size
 = 
	`_STRLEN_
–(c⁄° 
__FAR
*Ë
pD©a
 );

95  
i
 = 0; i < 
mu16Size
; i++ )

97 i‡–
pD©a
[
i
] == '\0' )

101 
pBuf
[
i
] = 
pD©a
[i];

102 
mu16Rëu∫
++;

104  
mu16Rëu∫
;

108 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Common.h

2 #i‚de‡
_WIFI_COMMON_H_


3 
	#_WIFI_COMMON_H_


	)

5 
	#ICON_AIS


	)

11 #ifde‡
ICON_AIS


12 
	~"WIFI_U£rComm⁄_Ic⁄AIS.h
"

15 #ifde‡
HIDDEN_BUILTIN


16 
	~"WIFI_U£rComm⁄_BuûtIn.h
"

19 #ifde‡
HIDDEN_PRO


20 
	~"WIFI_U£rComm⁄_Pro.h
"

23 #ifde‡
HIDDEN_WIDTH


24 
	~"WIFI_U£rComm⁄_Hiddí.h
"

27 #ifde‡
HIDDEN_LENGTH


28 
	~"WIFI_U£rComm⁄_Hiddí.h
"

46 
	#TEST_B1_OTA
 0

47 
	#TEST_WIFI_PJT
 0

48 
	#TEST_MODEM_SSID
 "ssinissi"

49 
	#TEST_MODEM_PW
 " 1234567890"

	)

51 
	#UNUSED_BLE_A1011_RX


52 

	)

53 #i‚de‡
TRUE


54 
	#TRUE
 1

	)

57 #i‚de‡
FALSE


58 
	#FALSE
 0

	)

60 #i‚de‡
RESET


61 
	#RESET
 2

	)

63 #i‚de‡
WAIT


64 
	#WAIT
 3

	)

66 
	#DONE
 2

	)

68 #i‚de‡
N_TRUE


69 
	#N_TRUE
 0

	)

72 #i‚de‡
N_FALSE


73 
	#N_FALSE
 1

	)

76 #i‚de‡
SET


77 
	#SET
 1

	)

80 #i‚de‡
CLEAR


81 
	#CLEAR
 0

	)

84 #i‚de‡
ON


85 
	#ON
 1

	)

88 #i‚de‡
OFF


89 
	#OFF
 0

	)

92 
	#WiFi_M_RAM_Ród
 0

	)

93 
	#WiFi_M_RAM_Wrôe
 1

	)

95 
	#RAM_Wrôe
 1

	)

97 
	#BLEDATA
 1

	)

98 
	#WIFIDATA
 0

	)

100 
	#Ród_O∆y
 0

	)

101 
	#CLEAR_ADR
 0

	)

103 
	#O√Byã
 1

	)

104 
	#TwoByã
 2

	)

106 
	#ZT_BÀCîtC™˚lTime
 70

107 
	#W_COUNT_WIFI_POWER
 100

108 

	)

109 
	#CONCAT
(
a
, 
b
Ëa##
	)
b

111 
	#TURN_ON_WIFI_POW
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_ON
Ë
ON
; }0)

	)

112 
	#TURN_OFF_WIFI_POW
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_ON
Ë
OFF
; }0)

	)

113 
	#TURN_ON_WIFI_RST
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_RSTN
Ë
ON
; }0)

	)

114 
	#TURN_OFF_WIFI_RST
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_RSTN
Ë
OFF
; }0)

	)

117 
	#LENGTH_MODEL_NAME
 13

	)

118 
	#LENGTH_MODEL_TYPE
 6

	)

119 
	#LENGTH_API_NO
 5

	)

120 
	#LENGTH_AT_CMD_MAX
 50

	)

121 
	#LENGTH_REQUEST_ID
 16

122 
	#LENGTH_WIFI_ID_ONE
 5

123 
	#LENGTH_WIFI_DATA_ONE
 7

124 
	#LENGTH_WIFI_DATA_ONE_MAX
 12

	)

125 
	#LENGTH_WIFI_DATA_ID
 13

126 
	#LENGTH_WIFI_DATA_ID_1B
 6

127 
	#LENGTH_WIFI_DATA_ID_3B
 8

128 
	#LENGTH_WIFI_DATA_RX_MAX
 (10 * 
LENGTH_WIFI_DATA_ID
)

	)

129 
	#LENGTH_WIFI_INFO_MAX
 (
USER_INFO_MAX_NUM
*
LENGTH_WIFI_DATA_ID
)

130 
	#LENGTH_WIFI_DATA_MAX
 (
USER_DATA_MAX_NUM
*
LENGTH_WIFI_DATA_ID
)

131 
	#LENGTH_WIFI_DATA_MAX_N
 ((
USER_DATA_MAX_NUM_1BYTE
*
LENGTH_WIFI_DATA_ID_1B
)+(
USER_DATA_MAX_NUM_3BYTE
*
LENGTH_WIFI_DATA_ID_3B
)+(
USER_DATA_MAX_NUM_5BYTE
*
LENGTH_WIFI_DATA_ID
))

132 
	#LENGTH_WIFI_ALL_MAX
 (
LENGTH_WIFI_DATA_MAX
+100)

133 
	#LENGTH_WIFI_ALL_MAX_N
 (
LENGTH_WIFI_DATA_MAX_N
+100)

134 
	#LENGTH_WIFI_RAM_DATA
 15

135 
	#LENGTH_WIFI_RAM_WRITE
 20

136 
	#LENGTH_WIFI_A90xx_PASS
 6

137 
	#LENGTH_RAM_ADDRESS_MAX
 30

138 
	#LENGTH_RAM_DATA_MAX
 (
LENGTH_RAM_ADDRESS_MAX
*
LENGTH_WIFI_DATA_ID
)

	)

141 
	#ASCII_STX
 0x02

	)

142 
	#ASCII_ETX
 0x03

	)

143 
	#ASCII_STAR
 '*'

	)

144 
	#ASCII_QUOTE
 '"'

145 
	#ASCII_COLON
 ':'

146 
	#ASCII_COMMA
 ','

147 
	#ASCII_OPEN
 '{'

148 
	#ASCII_CLOSE
 '}'

149 
	#ASCII_DOT
 '.'

150 
	#ASCII_MINUS
 '-'

151 
	#ASCII_NULL
 '\0'

152 
	#ASCII_DONE
 0x0D

153 
	#ASCII_ATDONE
 0x0A

154 
	#ASCII_SPACE
 ' '

155 
	#ASCII_UNDERBAR
 '_'

156 
	#ASCII_NO_0
 '0'

157 
	#ASCII_NO_1
 '1'

158 
	#ASCII_NO_2
 '2'

159 
	#ASCII_Z
 'Z'

160 

	)

162 
	#COWAY_SSID
 "Coway_"

	)

163 
	#WIFI_NULL
 0xFF

	)

165 
U16
 
gu16_RAM_M⁄ô‹_RESP_SIZE
;

166 
U16
 
gu16_START_RAM_Addªss
[
LENGTH_RAM_ADDRESS_MAX
];

167 
U16
 
gu16_RAM_Addªss_Àn
[
LENGTH_RAM_ADDRESS_MAX
];

175 
	mSTART
 = 0x04,

176 
	mRETRY


182 
	mUNUSED
 = 0x00,

183 
	mUSED
,

184 
	mREUSED


189 
	mUSER_MODEL_CHP
 = 0x00,

190 
	mUSER_MODEL_CP
,

191 
	mUSER_MODEL_CHP_1
,

192 
	mUSER_MODEL_CP_1
,

193 
	mUSER_MODEL_HP


194 } 
	tE_USER_MODEL_T
;

199 
	mUSER_MODEL_TYPE
 = 0x00,

200 
	mUSER_FACTORY_STATUS
,

201 
	mUSER_RX_STATUS
,

202 
	mUSER_SMART_POSSIBLE_STATUS
,

203 
	mUSER_ERROR_STATUS
,

204 
	mUSER_FOTA_POSSIBLE_STATUS
,

205 
	mUSER_SMART_SENSING_STATUS
,

206 
	mUSER_FACTORY_DIRECTFOTA_STATUS


207 } 
	tE_USER_VALUE_T
;

211 
	mUSER_DISPLAY_FOTA
 = 0x00,

212 
	mUSER_DISPLAY_SELFCHECK
,

213 
	mUSER_DISPLAY_PARTCHECK


214 } 
	tE_USER_DISPLAY_T
;

218 
	mTO_SERVER
 = 0x00,

219 
	mTO_MODULE
,

220 
	mTO_APMODE
,

221 
	mTO_VERSION
,

222 
	mTO_SCONN
,

223 
	mTO_BLEADV


224 } 
	tE_TARGET_EXCEPT_T
;

227 (*
	tWifiTxFun_T
)(
	tU16
 
	tmId
, 
	tI8
 *
	tpBuf
);

228 (*
	tWifiRxFun_T
)(
	tU16
 
	tmId
, 
	tI8
 *
	tpBuf
);

229 
	s_wifi_tx_li°_


231 
U16
 
Id
;

232 
WifiTxFun_T
 
TxFunc
;

233 
WifiRxFun_T
 
RxFunc
;

234 } 
	tWifiTxFuncLi°_T
;

235 (*
	tWifiExFun_T
)–
	tU8
 
	tmEx˚±
, 
	tI8
* 
	tpBuf
, 
	tU16
 
	tmLí
 );

237 (*
	tWifiTxFun_M⁄ô‹_T
)(
	tU16
 
	tmId
, 
	tI8
 *
	tpBuf
, U16 
	tmLí
);

238 
	s_wifi_M⁄ô‹_tx_li°_


240 
U16
 
Id
;

241 
WifiTxFun_M⁄ô‹_T
 
TxFunc_M
;

242 
WifiRxFun_T
 
RxFunc_M
;

243 } 
	tWifiTxFuncLi°_M⁄ô‹_T
;

245 #i‡–
FOTA
 == 1 )

246 #i‚de‡
__FAR


247 
	#__FAR
 
__Ár


	)

250 #i‚de‡
_MEMSET_


251 
	#_MEMSET_
 
mem£t


253 

	)

254 #i‚de‡
_MEMCPY_


255 
	#_MEMCPY_
 
mem˝y


257 

	)

258 #i‚de‡
_MEMMOVE_


259 
	#_MEMMOVE_
 
memmove


261 

	)

262 #i‚de‡
_MEMCMP_


263 
	#_MEMCMP_
 
memcmp


265 

	)

266 #i‚de‡
_STRCPY_


267 
	#_STRCPY_
 
°r˝y


269 

	)

270 #i‚de‡
_STRNCPY_


271 
	#_STRNCPY_
 
°∫˝y


273 

	)

274 #i‚de‡
_STRCMP_


275 
	#_STRCMP_
 
°rcmp


277 

	)

278 #i‚de‡
_STRNCMP_


279 
	#_STRNCMP_
 
°∫cmp


281 

	)

282 #i‚de‡
_STRLEN_


283 
	#_STRLEN_
 
°æí


285 

	)

286 #i‚de‡
_SPRINTF_


287 
	#_SPRINTF_
 
•rötf


289 

	)

290 #i‚de‡
_ATOI_


291 
	#_ATOI_
 
©oi


293 

	)

295 
	#__FAR


	)

296 
	#_MEMSET_
 
mem£t


297 
	#_MEMCPY_
 
mem˝y


298 
	#_MEMMOVE_
 
memmove


299 
	#_MEMCMP_
 
memcmp


300 
	#_STRCPY_
 
°r˝y


301 
	#_STRNCPY_
 
°∫˝y


302 
	#_STRCMP_
 
°rcmp


303 
	#_STRNCMP_
 
°∫cmp


304 
	#_STRLEN_
 
°æí


305 
	#_SPRINTF_
 
•rötf


306 
	#_ATOI_
 
©oi


307 

	)

311 
U8
 
	`WIFI_HEX2DEC
 ( U8 
mu8HexD©a
 );

312 
U8
 
	`WIFI_DEC2HEX
 ( U8 
mu8DecD©a
 );

313 
U16
 
	`WIFI_Bô16HEX2DEC
 ( U16 
mu16HexD©a
 );

314 
U16
 
	`WIFI_DEC2Bô16HEX
 ( U16 
mu16DecD©a
 );

315 
I8
 
	`WIFI_HEX2ASCII
 ( 
U8
 
mu8HexD©a
 );

316 
U8
 
	`WIFI_ASCII2HEX
 ( U8 
mu8AsciiD©a
 );

318 
U16
 
	`Ár_•rötf_s
 ( 
I8
* 
pBuf
, U16 
mLí
, c⁄° I8* 
pD©a
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Control.c

12 
	~"WIFI_Comm⁄.h
"

13 
	~"WIFI_SëComm⁄.h
"

14 
	~"WIFI_DefU£r.h
"

15 
	~"WIFI_FŸa.h
"

16 
	~"WIFI_D©aCheck.h
"

17 
	~"WIFI_RxPro˚ss.h
"

18 
	~"WIFI_TxPrŸocﬁ.h
"

19 
	~"WIFI_RxSîvî.h
"

20 
	~"WIFI_Sètus.h
"

21 
	~"WIFI_U¨tI¡îru±.h
"

22 
	~"WIFI_U£rI¡îÁ˚.h
"

23 
	~"WIFI_M⁄ô‹FixRAM.h
"

24 
	~"WIFI_C⁄åﬁ.h
"

31 
WifiRx_T
 
WifiRx
;

37 
InôülizeWifiAŒVÆue
 ( );

38 
WifiDuÆApModeKey
 ( );

39 
WifiApModekey
 ( );

40 
WifiApBLEkey
 ( );

41 
WifiOnOffKey
 ( );

42 
WifiBÀCîtKey
 ( );

43 
WifiTe°Key
 ( );

44 
WifiOnKey
 ( );

45 
WifiOffKey
 ( );

52 
	$WifiC⁄åﬁPro˚ss
 ( 
E_WIFI_TIME_T
 
mu8Time
 )

54 if–
mu8Time
 =
WIFI_TIME_INI
 )

56 
	`InôülizeWifiAŒVÆue
();

58 i‡–
mu8Time
 =
WIFI_TIME_SET
 )

60 
	`WifiOnOffSëtög
();

62 i‡–
mu8Time
 =
WIFI_TIME_FACTORY
 )

64 
	`WifiFa˘‹ySëtög
();

66 i‡–
mu8Time
 =
WIFI_TIME_WHILE
 )

68 
	`WifiRxD©aPro˚ss
();

69 
	`Re˚iveWifiU¨t
();

70 
	`WifiTimîC⁄åﬁ
();

72 i‡–
mu8Time
 =
WIFI_TIME_1MIN
 )

74 
	`WifiD©aCheckPro˚ss
(
mu8Time
);

77 i‡–
mu8Time
 =
WIFI_TIME_1SEC
 )

79 
	`WifiD©aCheckPro˚ss
(
mu8Time
);

82 i‡–
mu8Time
 =
WIFI_TIME_100MS
 )

86 
	`WifiD©aCheckPro˚ss
(
mu8Time
);

88 
	}
}

90 
	$WifiKey
 ( 
E_WIFI_KEY_T
 
mu8Key
 )

92 i‡–
mu8Key
 =
WIFI_KEY_AP
 )

94 
	`WifiApModekey
();

96 i‡–
mu8Key
 =
WIFI_KEY_BLE
 )

98 
	`WifiApBLEkey
();

100 i‡–
mu8Key
 =
WIFI_KEY_ON
 )

102 
	`WifiOnKey
();

104 i‡–
mu8Key
 =
WIFI_KEY_OFF
 )

106 
	`WifiOffKey
();

107 
	`SëWifiBuzzSound
(
WIFI_BUZZER_CANCEL
);

109 i‡–
mu8Key
 =
WIFI_KEY_ONOFF
 )

111 
	`WifiOnOffKey
();

113 i‡–
mu8Key
 =
WIFI_KEY_TEST
 )

115 
	`WifiTe°Key
();

117 i‡–
mu8Key
 =
WIFI_KEY_BLE_CERT
 )

119 
	`WifiBÀCîtKey
();

129 
	}
}

131 
	$WifiSídD©a
 ( 
E_WIFI_DATA_T
 
mu8D©a
 )

134 i‡(–
	`GëWifiSîvîSètus
(
STATUS_SVR_CONNECT
Ë!
SET
 ) && ( 
	`GëWifiBLESídSètus
(
TX_BLE_WIFI
Ë=
WIFIDATA
 ))

139 i‡–
mu8D©a
 =
WIFI_DATA_FUNCTION
 )

141 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_FUNC
);

143 i‡–
mu8D©a
 =
WIFI_DATA_SENSOR
 )

145 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_SENSOR
);

147 i‡–
mu8D©a
 =
WIFI_DATA_ERROR
 )

149 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_ERR
);

151 i‡–
mu8D©a
 =
WIFI_DATA_PART
 )

153 i‡–
	`GëU£rI¡îÁ˚
–
USER_SMART_SENSING_STATUS
 ) !
TRUE
 )

155 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_PART
);

158 i‡–
mu8D©a
 =
WIFI_DATA_EXAMINE
 )

160 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_EXCEPT_FUNC
);

161 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_EXAMINE
);

163 i‡–
mu8D©a
 =
WIFI_DATA_INFO
 )

165 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_RQST_INFO_USER
);

167 
	}
}

169 
	$WifiSídD©aC⁄åﬁ
 ( 
E_WIFI_DATA_T
 
mu8D©a
, 
U8
 
mu8IdD©a
 )

171 i‡–
	`GëWifiSîvîSètus
(
STATUS_SVR_CONNECT
Ë!
SET
 )

176 i‡–
mu8D©a
 =
WIFI_DATA_FUNCTION_CONTROL
 )

178 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_FUNC_CONTROL
);

179 
	`SëWifiSídSètusC⁄åﬁ
(
mu8IdD©a
);

182 
	}
}

184 
U8
 
	$GëWifiSètusVÆue
 ( 
E_WIFI_STATUS_T
 
mTy≥
 )

186 
U8
 
mVÆue
 = 0U;

187 
U8
 
mApSãp
 = 0U;

189 i‡–
mTy≥
 =
WIFI_STATUS_DISP
 )

191 
mApSãp
 = 
	`GëWifiIndiˇãSètus
(
STATUS_PARING
);

192 i‡–
	`GëWifiApSètus
(
STATUS_AP_WIFI
Ë!
CLEAR
 )

194 i‡–
mApSãp
 =
WIFI_AP_STEP_WAIT
 )

196 
mVÆue
 = 
WIFI_DISP_AP_STEP0
;

198 i‡–
mApSãp
 =
WIFI_AP_STEP_START
 )

200 
mVÆue
 = 
WIFI_DISP_AP_STEP1
;

202 i‡–
mApSãp
 =
WIFI_AP_STEP_MODEM
 )

204 
mVÆue
 = 
WIFI_DISP_AP_STEP2
;

206 i‡–
mApSãp
 =
WIFI_AP_STEP_ROOTCA
 )

208 
mVÆue
 = 
WIFI_DISP_AP_STEP3
;

212 
mVÆue
 = 
WIFI_DISP_AP_START
;

215 i‡–
	`GëWifiApSètus
(
STATUS_AP_BLE
Ë!
CLEAR
 )

217 i‡–
mApSãp
 =
WIFI_AP_STEP_WAIT
 )

219 
mVÆue
 = 
WIFI_DISP_BLE_STEP0
;

221 i‡–
mApSãp
 =
WIFI_AP_STEP_START
 )

223 
mVÆue
 = 
WIFI_DISP_BLE_STEP1
;

225 i‡–
mApSãp
 =
WIFI_AP_STEP_MODEM
 )

227 
mVÆue
 = 
WIFI_DISP_BLE_STEP2
;

229 i‡–
mApSãp
 =
WIFI_AP_STEP_ROOTCA
 )

231 
mVÆue
 = 
WIFI_DISP_BLE_STEP3
;

235 
mVÆue
 = 
WIFI_DISP_BLE_START
;

240 
mVÆue
 = 
	`GëWifiIndiˇãSètus
(
STATUS_DISPLAY
);

243 i‡–
mTy≥
 =
WIFI_STATUS_POWER
 )

245 
mVÆue
 = 
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
);

247 i‡–
mTy≥
 =
WIFI_STATUS_TEST
 )

249 
mVÆue
 = 
	`GëWifiIndiˇãSètus
(
STATUS_FACTORY
);

251 i‡–
mTy≥
 =
WIFI_STATUS_ERROR
 )

253 
mVÆue
 = 
	`GëWifiIndiˇãSètus
(
STATUS_ERROR
);

255 i‡–
mTy≥
 =
WIFI_STATUS_AP_FIRST
 )

257 
mVÆue
 = 
	`GëWifiApSètus
(
STATUS_AP_FIRST
);

259 i‡–
mTy≥
 =
WIFI_STATUS_AP_MODE
 )

261 i‡–
	`GëWifiApSètus
(
STATUS_AP_WIFI
Ë!
CLEAR
 )

263 
mVÆue
 = 
SET
;

266 i‡–
mTy≥
 =
WIFI_STATUS_AP_BLE
 )

268 i‡–
	`GëWifiApSètus
(
STATUS_AP_BLE
Ë!
CLEAR
 )

270 
mVÆue
 = 
SET
;

273 i‡–
mTy≥
 =
WIFI_STATUS_BLE_CERT
 )

275 i‡(
	`GëWifiApSètus
(
STATUS_AP_BLE
Ë!
CLEAR
)

277 i‡–
	`GëWifiApSètus
(
STATUS_AP_BLE_CERT
Ë=
SET
 )

279 
mVÆue
 = 
SET
;

281 i‡(
	`GëWifiApSètus
(
STATUS_AP_BLE_CERT
Ë=
DONE
 )

283 
mVÆue
 = 
DONE
;

293 i‡–
mTy≥
 =
WIFI_STATUS_AP_STEP
 )

295 
mVÆue
 = 
	`GëWifiIndiˇãSètus
(
STATUS_PARING
);

297 i‡–
mTy≥
 =
WIFI_STATUS_AP_ERROR
 )

299 i‡–
	`GëWifiIndiˇãSètus
(
STATUS_PARING
Ë>
WIFI_AP_STEP_START
 )

301 
mVÆue
 = 
	`GëWifiIndiˇãSètus
(
STATUS_AP_ERROR
);

305  
mVÆue
;

306 
	}
}

308 
U16
 
	$GëWifiReque°VÆue
 ( 
E_WIFI_RQST_T
 
mId
 )

310 
U16
 
mVÆue
 = 0;

311 
mVÆue
 = 
	`GëWifiInfoD©a
(
mId
);

312  
mVÆue
;

313 
	}
}

315 
	$I¡îru±U¨tWifiTx
 ( )

317 
	`I¡WifiU¨tTx
();

318 
	}
}

320 
	$I¡îru±U¨tWifiRx
 ( 
U8
 
mu8RxD©a
 )

322 
	`I¡WifiU¨tRx
(
mu8RxD©a
);

323 
	}
}

325 
	$I¡îru±U¨tWifiEº‹
 ( )

328 vﬁ©ûê
U8
 
îr_ty≥
;

331 
îr_ty≥
 = (
U8
)(
SSR03
 & 0x0007U);

332 
SIR03
 = (
U16
)
îr_ty≥
;

333 
	}
}

337 
	$InôülizeWifiAŒVÆue
 ( )

339 
	`InôülizeWifiFŸa
();

340 
	`InôülizeWifiSètus
();

341 
	`InôülizeWifiRxPro˚ss
();

342 
	`InôülizeWifiRxSîvî
();

343 
	`InôülizeWifiTxPrŸocﬁ
();

344 
	`InôülizeWifiU¨t
();

345 
	`InôülizeWifiU£rI¡îÁ˚
();

346 
	}
}

348 
	$WifiDuÆApModeKey
 ( )

350 
U8
 
mu8DuÆ
 = 0;

352 i‡–
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë!
ON
 )

354 i‡–
mu8DuÆ
 =
CLEAR
 )

356 
mu8DuÆ
 = 
SET
;

360 
mu8DuÆ
 = 
CLEAR
;

364 i‡–
mu8DuÆ
 =
SET
 )

366 
	`WifiApModekey
();

370 
	`WifiApBLEkey
();

373 
	}
}

376 
	$WifiApModekey
 ( )

379 i‡(
	`GëWifiApSètus
(
STATUS_AP_WIFI
Ë!
CLEAR
 )

381 
	`SëWifiApSètus
(
STATUS_AP_WIFI
, 
CLEAR
);

382 
	`SëWifiApSètus
(
STATUS_AP_BLE
, 
CLEAR
);

383 
	`WifiOffKey
();

384 
	`SëWifiBuzzSound
(
WIFI_BUZZER_WiFi_OFF
);

387 i‡(
	`GëWifiApSètus
(
STATUS_AP_BLE
Ë!
CLEAR
 )

390 
	`SëWifiBuzzSound
(
WIFI_BUZZER_ERROR
);

394 i‡–
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë!
ON
 )

396 
	`HAL_SëWifiOnOff
(
ON
);

397 
	`SëWifiApSètus
(
STATUS_AP_WIFI
,
RESET
);

401 i‡–
	`GëWifiSîvîSètus
(
STATUS_SVR_CONNECT
Ë=
SET
 )

403 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_STOP
);

404 
	`SëWifiApSètus
(
STATUS_AP_WIFI
,
WAIT
);

408 
	`SëWifiApSètus
(
STATUS_AP_WIFI
,
RESET
);

411 
	`CÀ¨RxSètus
();

412 
	`SëWifiIndiˇãSètus
(
STATUS_AP_ERROR
,
WIFI_DISP_OFF
);

413 
	`SëWifiBuzzSound
(
WIFI_BUZZER_AP_START
);

414 
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 = 
CLEAR
;

415 
	}
}

417 
	$WifiApBLEkey
 ( )

419 if(
	`GëWifiApSètus
(
STATUS_AP_BLE_CERT
Ë=
SET
)

421 
	`WifiBÀCîtKey
();

424 i‡(
	`GëWifiApSètus
(
STATUS_AP_BLE_CERT
Ë=
DONE
)

429 i‡(
	`GëWifiApSètus
(
STATUS_AP_BLE
Ë!
CLEAR
 )

431 i‡–
	`GëWifiSîvîSètus
(
STATUS_SVR_CONNECT
Ë=
SET
 )

433 
	`SëWifiApSètus
(
STATUS_AP_BLE
, 
CLEAR
);

434 
	`SëWifiSídSètus
(
TX_ATCMD
,
WIFI_AT_BLE_OFF
);

435 
	`SëWifiIndiˇãSètus
(
STATUS_PARING
,
WIFI_AP_STEP_CLEAR
);

436 
	`SëWifiBuzzSound
(
WIFI_BUZZER_BLE_OFF
);

440 
	`SëWifiApSètus
(
STATUS_AP_BLE
, 
CLEAR
);

441 
	`WifiOffKey
();

442 
	`SëWifiBuzzSound
(
WIFI_BUZZER_BLE_OFF
);

446 i‡–
	`GëWifiApSètus
(
STATUS_AP_WIFI
Ë!
CLEAR
 )

449 
	`SëWifiBuzzSound
(
WIFI_BUZZER_ERROR
);

453 i‡–
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë!
ON
 )

455 
	`HAL_SëWifiOnOff
(
ON
);

461 
	`SëWifiApSètus
(
STATUS_AP_BLE
,
WAIT
);

462 
	`SëWifiBuzzSound
(
WIFI_BUZZER_AP_START
);

463 
WifiRx
.
u8Di•œyC⁄√˘Cou¡
 = 
CLEAR
;

464 
	}
}

467 
	$WifiOnOffKey
 ( )

469 i‡–
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë!
ON
 )

471 
	`WifiOnKey
();

475 
	`WifiOffKey
();

476 
	`SëWifiBuzzSound
(
WIFI_BUZZER_CANCEL
);

478 
	}
}

480 
	$WifiBÀCîtKey
 ( )

482 i‡((
	`GëWifiSètusVÆue
(
WIFI_STATUS_AP_BLE
Ë=
SET
Ë&& (
	`GëWifiApSètus
(
STATUS_AP_BLE_CERT
) == SET))

485 
	`SëWifiCîtID
(
WIFI_BLE_CERT_0003
);

486 
	`SëWifiCîtResu…
(
RESULT_CERT_SUCCESS
);

487 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_BLE_CERT
);

489 
	`SëWifiApSètus
(
STATUS_AP_BLE_CERT
,
DONE
);

490 
	`SëWifiBuzzSound
(
WIFI_BUZZER_SELECT
);

493 
	}
}

496 
	$WifiTe°Key
 ( )

498 
	`HAL_SëWifiOnOff
(
ON
);

499 
	`SëWifiBuzzSound
(
WIFI_BUZZER_SELECT
);

500 
	}
}

503 
	$WifiOnKey
 ( )

505 i‡–
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë=
ON
 )

507 
	`SëWifiBuzzSound
(
WIFI_BUZZER_ERROR
);

511 i‡––
	`GëU£rI¡îÁ˚
(
USER_FACTORY_STATUS
Ë=
SET
 ) || ( 
	`GëWifiApSètus
(
STATUS_AP_FIRST
) == SET ) )

513 
	`HAL_SëWifiOnOff
(
ON
);

514 
	`WifiWrôeEï
(
EEPROM_ADDR_WIFI_POWER
, 
ON
);

515 
	`SëWifiBuzzSound
(
WIFI_BUZZER_SETUP
);

519 
	`SëWifiBuzzSound
(
WIFI_BUZZER_ERROR
);

521 
	`CÀ¨RxSètus
();

522 
	}
}

525 
	$WifiOffKey
 ( )

527 i‡–
	`GëWifiC⁄åﬁSètus
(
STATUS_CON_POWER
Ë=
OFF
 )

529 
	`SëWifiBuzzSound
(
WIFI_BUZZER_ERROR
);

533 i‡–
	`GëWifiSîvîSètus
(
STATUS_SVR_CONNECT
Ë=
SET
 )

535 
	`SëWifiSîvîSètus
(
STATUS_SVR_END
,
SET
);

536 
	`SëWifiSídSètus
(
TX_DATA
,
WIFI_TX_SEND_STOP
);

537 
	`SëWifiIndiˇãSètus
(
STATUS_DISPLAY
,
WIFI_DISP_OFF
);

541 
	`HAL_SëWifiOnOff
(
OFF
);

544 
	`CÀ¨RxSètus
();

545 
	}
}

547 
	$WifiTimîC⁄åﬁ
()

549 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Control.h

2 #i‚de‡
_WIFI_CONTROL_H_


3 
	#_WIFI_CONTROL_H_


	)

5 
	~"WIFI_DefU£r.h
"

6 
	~"WIFI_SëFun˘i⁄D©a.h
"

7 
	~"WIFI_Sètus.h
"

25 
WifiC⁄åﬁPro˚ss
 ( 
E_WIFI_TIME_T
 
mu8Time
 );

36 
WifiKey
 ( 
E_WIFI_KEY_T
 
mu8Key
 );

45 
WifiSídD©a
 ( 
E_WIFI_DATA_T
 
mu8D©a
 );

47 
WifiSídD©aC⁄åﬁ
 ( 
E_WIFI_DATA_T
 
mu8D©a
, 
U8
 
mu8IdD©a
);

60 
U8
 
GëWifiSètusVÆue
 ( 
E_WIFI_STATUS_T
 
mTy≥
 );

72 
U16
 
GëWifiReque°VÆue
 ( 
E_WIFI_RQST_T
 
mId
 );

75 
I¡îru±U¨tWifiTx
 ( );

77 
I¡îru±U¨tWifiRx
 ( 
U8
 
mu8RxD©a
 );

79 
I¡îru±U¨tWifiEº‹
 ( );

81 
WifiTimîC⁄åﬁ
 ( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_DefUser.h

2 #i‚de‡
_WIFI_USER_DEFINE_H_


3 
	#_WIFI_USER_DEFINE_H_


	)

9 
	mWIFI_TIME_INI
 = 0x00,

10 
	mWIFI_TIME_SET
,

11 
	mWIFI_TIME_FACTORY
,

12 
	mWIFI_TIME_WHILE
,

13 
	mWIFI_TIME_100MS
,

14 
	mWIFI_TIME_1SEC
,

15 
	mWIFI_TIME_1MIN


16 } 
	tE_WIFI_TIME_T
;

20 
	mWIFI_KEY_AP
 = 0x00,

21 
	mWIFI_KEY_BLE
,

22 
	mWIFI_KEY_ON
,

23 
	mWIFI_KEY_OFF
,

24 
	mWIFI_KEY_ONOFF
,

25 
	mWIFI_KEY_TEST
,

26 
	mWIFI_KEY_AP_DUAL
,

27 
	mWIFI_KEY_BLE_CERT
,

28 
	mWIFI_KEY_BLE_CERT_CANCEL


29 } 
	tE_WIFI_KEY_T
;

33 
	mWIFI_DATA_FUNCTION
 = 0x00,

34 
	mWIFI_DATA_FUNCTION_CONTROL
,

35 
	mWIFI_DATA_SENSOR
,

36 
	mWIFI_DATA_ERROR
,

37 
	mWIFI_DATA_PART
,

38 
	mWIFI_DATA_EXAMINE
,

39 
	mWIFI_DATA_INFO


40 } 
	tE_WIFI_DATA_T
;

44 
	mWIFI_STATUS_DISP
 = 0x00,

45 
	mWIFI_STATUS_POWER
,

46 
	mWIFI_STATUS_TEST
,

47 
	mWIFI_STATUS_ERROR
,

48 
	mWIFI_STATUS_AP_FIRST
,

49 
	mWIFI_STATUS_AP_MODE
,

50 
	mWIFI_STATUS_AP_BLE
,

51 
	mWIFI_STATUS_BLE_CERT
,

52 
	mWIFI_STATUS_AP_STEP
,

53 
	mWIFI_STATUS_AP_ERROR


54 } 
	tE_WIFI_STATUS_T
;

58 
	mWIFI_DISP_OFF
 = 0x00,

59 
	mWIFI_DISP_AP1
,

60 
	mWIFI_DISP_AP2
,

61 
	mWIFI_DISP_AP3
,

62 
	mWIFI_DISP_AP4
,

63 
	mWIFI_DISP_AP5
,

64 
	mWIFI_DISP_TRY
,

65 
	mWIFI_DISP_APMODE
,

66 
	mWIFI_DISP_CONNECT
,

68 
	mWIFI_DISP_AP_START
 = 0x10,

69 
	mWIFI_DISP_AP_STEP0
,

70 
	mWIFI_DISP_AP_STEP1
,

71 
	mWIFI_DISP_AP_STEP2
,

72 
	mWIFI_DISP_AP_STEP3
,

74 
	mWIFI_DISP_BLE_START
 = 0x20,

75 
	mWIFI_DISP_BLE_STEP0
,

76 
	mWIFI_DISP_BLE_STEP1
,

77 
	mWIFI_DISP_BLE_STEP2
,

78 
	mWIFI_DISP_BLE_STEP3


79 } 
	tE_WIFI_DISPLAY_T
;

83 
	mWIFI_RQST_YEAR
 = 0x0000,

84 
	mWIFI_RQST_MONTH
,

85 
	mWIFI_RQST_DATE
,

86 
	mWIFI_RQST_HOUR
,

87 
	mWIFI_RQST_MINUTE
,

88 
	mWIFI_RQST_SECOND
,

89 
	mWIFI_RQST_DAY
,

90 
	mWIFI_RQST_PART_PERIOD
,

92 
	mWIFI_RQST_WEATHER
 = 0x0010,

93 
	mWIFI_RQST_AQI
,

94 
	mWIFI_RQST_PM10
,

95 
	mWIFI_RQST_PM25
,

96 
	mWIFI_RQST_CURRENT_TEMP
,

97 
	mWIFI_RQST_HIGH_TEMP
,

98 
	mWIFI_RQST_LOW_TEMP
,

100 
	mWIFI_RQST_LAST_HEART_YEAR
 = 0x0020,

101 
	mWIFI_RQST_LAST_HEART_MONTH
,

102 
	mWIFI_RQST_LAST_HEART_DAY
,

103 
	mWIFI_RQST_NEXT_HEART_YEAR
,

104 
	mWIFI_RQST_NEXT_HEART_MONTH
,

105 
	mWIFI_RQST_NEXT_HEART_DAY
,

106 
	mWIFI_RQST_FILTER_D_DAY1
,

107 
	mWIFI_RQST_FILTER_D_DAY2
,

108 
	mWIFI_RQST_FILTER_CHANGE_CYCLE


109 } 
	tE_WIFI_RQST_T
;

113 
	mWIFI_AP_STEP_CLEAR
 = 0U,

114 
	mWIFI_AP_STEP_WAIT
,

115 
	mWIFI_AP_STEP_START
 = 25U,

116 
	mWIFI_AP_STEP_MODEM
 = 50U,

117 
	mWIFI_AP_STEP_ROOTCA
 = 75U

118 } 
	tE_WIFI_AP_STEP_T
;

121 
	#TDEC_Wifi
(
a
Ëi‡◊ !0Ëa--;

	)

126 
	#TDEC_1ms_WiFi
() { \

127 }

	)

128 
	#TDEC_10ms_WiFi
() { \

129 }

	)

130 
	#TDEC_100ms_WiFi
() { \

131 }

	)

132 
	#TDEC_1s_WiFi
() { \

133 }

	)

134 
	#TDEC_10s_WiFi
() { \

135 }

	)

136 
	#TDEC_1mö_WiFi
() { \

137 }

	)

138 
	#TDEC_10mö_WiFi
() { \

139 }

	)

140 
	#TDEC_1h_WiFi
() { \

141 

	)

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_UserInterface.c

2 
	~"WIFI_Comm⁄.h
"

3 
	~"WIFI_DefU£r.h
"

4 
	~"WIFI_U£rI¡îÁ˚.h
"

5 
	~"WIFI_SëFun˘i⁄D©a.h
"

6 
	~"WIFI_SëSís‹D©a.h
"

7 
	~"WIFI_SëEº‹D©a.h
"

8 
	~"WIFI_SëP¨tD©a.h
"

9 
	~"WIFI_SëAccumuœãD©a.h
"

10 
	~"WIFI_SëInf‹m©i⁄D©a.h
"

12 
	~"WIFI_Sètus.h
"

14 #ifde‡
MODEL_NO_1


15 
	~"WIFI_U£rI¡îÁ˚_Ic⁄AIS.h
"

18 #ifde‡
MODEL_NO_2


19 
	~"WIFI_U£rI¡îÁ˚_BuûtIn.h
"

22 #ifde‡
MODEL_NO_3


23 
	~"WIFI_U£rI¡îÁ˚_Ic⁄2_0.h
"

26 #ifde‡
MODEL_NO_4


27 
	~"WIFI_U£rI¡îÁ˚_Hiddí.h
"

30 
	s_öãrÁ˚_


33 (*
	mU£rWrôeEï
)–
U16
 
	mmAddr
, 
U8
 
	mmVÆ
 );

34 
U8
 (*
U£rRódEï
)–
U16
 
	mmAddr
 );

37 (*
	mSëU£rSound
)–
U8
 
	mmBuzz
 );

38 
U8
 (*
GëU£rSètus
Ë–U8 
	mmVÆ
 );

39 (*
	mSëU£rDi•œy
)–
U8
 
	mmVÆ
 );

40 (*
	mCÀ¨U£rD©a
) ( );

43 
U32
 (*
GëU£rA9010Func
)–
U16
 
	mmVÆ
, U16 
	mmLí
);

44 
U16
 (*
GëU£rA1010Func
)–U16 
	mmVÆ
 );

45 
I16
 (*
GëU£rA1020Sís
)–
U16
 
	mmVÆ
 );

46 
U16
 (*
GëU£rA1030Eº
)–U16 
	mmVÆ
 );

47 
U16
 (*
GëU£rA1080P¨t
)–U16 
	mmVÆ
 );

48 
U32
 (*
GëU£rA2010Acc
)–
U16
 
	mmVÆ
 );

51 (*
	mSëU£rA1010Func
)–
U16
 
	mmId
, U16 
	mmVÆ
 );

52 (*
	mSëU£rA9010Func
)–
U16
 
	mmId
, 
I8
 *
	mmVÆ
 );

55 (*
	mSëU£rTime
)–
U16
 
	mmYór
, U16 
	mmM⁄th
, U16 
	mmD©e
, U16 
	mmHour
, U16 
	mmMö
, U16 
	mmSec
, U16 
	mmDay
 );

56 }
	tI¡îFa˚WIFI_T
;

58 
I¡îFa˚WIFI_T
 
	göãrÁ˚
;

60 
InôI¡îÁ˚WIFI
 ( 
I¡îFa˚WIFI_T
 *
pI¡îÁ˚
 );

63 
	$InôülizeWifiU£rI¡îÁ˚
 ( )

65 
I¡îFa˚WIFI_T
 
mI¡îÁ˚
;

67 
mI¡îÁ˚
.
U£rWrôeEï
 = UserWriteEep;

68 
mI¡îÁ˚
.
U£rRódEï
 = UserReadEep;

70 
mI¡îÁ˚
.
SëU£rSound
 = 
U£rBuzzSound
;

71 
mI¡îÁ˚
.
GëU£rSètus
 = 
GëU£rSy°emSètus
;

72 
mI¡îÁ˚
.
SëU£rDi•œy
 = 
SëU£rSy°emDi•œy
;

73 
mI¡îÁ˚
.
CÀ¨U£rD©a
 = 
CÀ¨U£rSy°emD©a
;

75 
mI¡îÁ˚
.
GëU£rA9010Func
 = 
GëU£rSy°emRamM⁄ô‹
;

76 
mI¡îÁ˚
.
GëU£rA1010Func
 = 
GëU£rSy°emFun˘i⁄
;

77 
mI¡îÁ˚
.
GëU£rA1020Sís
 = 
GëU£rSy°emSís‹
;

78 
mI¡îÁ˚
.
GëU£rA1030Eº
 = 
GëU£rSy°emEº‹
;

79 
mI¡îÁ˚
.
GëU£rA1080P¨t
 = 
GëU£rSy°emP¨t
;

80 
mI¡îÁ˚
.
GëU£rA2010Acc
 = 
GëU£rSy°emAccumuœã
;

82 
mI¡îÁ˚
.
SëU£rA1010Func
 = 
SëU£rSy°emFun˘i⁄
;

83 
mI¡îÁ˚
.
SëU£rA9010Func
 = 
SëU£rSy°emRamM⁄ô‹
;

85 
mI¡îÁ˚
.
SëU£rTime
 = 
SëU£rSy°emTime
;

87 
	`InôI¡îÁ˚WIFI
–&
mI¡îÁ˚
 );

88 
	}
}

90 
	$InôI¡îÁ˚WIFI
 ( 
I¡îFa˚WIFI_T
 *
pI¡îÁ˚
 )

92 
öãrÁ˚
.
U£rWrôeEï
 = 
pI¡îÁ˚
->UserWriteEep;

93 
öãrÁ˚
.
U£rRódEï
 = 
pI¡îÁ˚
->UserReadEep;

95 
öãrÁ˚
.
SëU£rSound
 = 
pI¡îÁ˚
->SetUserSound;

96 
öãrÁ˚
.
GëU£rSètus
 = 
pI¡îÁ˚
->GetUserStatus;

97 
öãrÁ˚
.
SëU£rDi•œy
 = 
pI¡îÁ˚
->SetUserDisplay;

98 
öãrÁ˚
.
CÀ¨U£rD©a
 = 
pI¡îÁ˚
->ClearUserData;

100 
öãrÁ˚
.
GëU£rA1010Func
 = 
pI¡îÁ˚
->GetUserA1010Func;

101 
öãrÁ˚
.
GëU£rA1020Sís
 = 
pI¡îÁ˚
->GetUserA1020Sens;

102 
öãrÁ˚
.
GëU£rA1030Eº
 = 
pI¡îÁ˚
->GetUserA1030Err;

103 
öãrÁ˚
.
GëU£rA1080P¨t
 = 
pI¡îÁ˚
->GetUserA1080Part;

104 
öãrÁ˚
.
GëU£rA2010Acc
 = 
pI¡îÁ˚
->GetUserA2010Acc;

105 
öãrÁ˚
.
GëU£rA9010Func
 = 
pI¡îÁ˚
->GetUserA9010Func;

107 
öãrÁ˚
.
SëU£rA1010Func
 = 
pI¡îÁ˚
->SetUserA1010Func;

108 
öãrÁ˚
.
SëU£rA9010Func
 = 
pI¡îÁ˚
->SetUserA9010Func;

110 
öãrÁ˚
.
SëU£rTime
 = 
pI¡îÁ˚
->SetUserTime;

111 
	}
}

113 
	$WifiWrôeEï
 ( 
U16
 
mAddr
, 
U8
 
mVÆ
 )

115 
öãrÁ˚
.
	`U£rWrôeEï
(
mAddr
, 
mVÆ
);

116 
	}
}

118 
U8
 
	$WifiRódEï
 ( 
U16
 
mAddr
 )

120 
U8
 
mu8D©a
 = 0U;

121 
mu8D©a
 = 
öãrÁ˚
.
	`U£rRódEï
(
mAddr
);

122  
mu8D©a
;

123 
	}
}

125 
	$SëWifiBuzzSound
 ( 
U8
 
mBuzz
 )

127 i‡–
	`GëWifiFŸaSètus
–
STATUS_FOTA_MCU
 ) =
CLEAR
 )

129 
öãrÁ˚
.
	`SëU£rSound
(
mBuzz
);

131 
	}
}

134 
U8
 
	$GëU£rI¡îÁ˚
 ( 
U8
 
mVÆ
 )

159 
U8
 
mu8Rëu∫
 = 0U;

160 
mu8Rëu∫
 = 
öãrÁ˚
.
	`GëU£rSètus
(
mVÆ
);

161  
mu8Rëu∫
;

162 
	}
}

165 
	$SëU£rDi•œy
 ( 
U8
 
mDi•œy
 )

167 i‡–
mDi•œy
 =
USER_DISPLAY_FOTA
 )

169 
	`WifiWrôeEï
(
EEPROM_ADDR_FOTA_MCU
,
SET
);

171 i‡–
mDi•œy
 =
USER_DISPLAY_SELFCHECK
 )

175 i‡–
mDi•œy
 =
USER_DISPLAY_PARTCHECK
 )

183 
öãrÁ˚
.
	`SëU£rDi•œy
(
mDi•œy
);

184 
	}
}

187 
	$CÀ¨U£rD©a
 ( )

189 
öãrÁ˚
.
	`CÀ¨U£rD©a
();

190 
	}
}

192 
U32
 
	$GëU£rM⁄ô‹D©a
 ( 
U16
 
mu16Func
, U16 
mu16Lí
 )

194 
U32
 
mu32D©a
 = 0U;

195 
mu32D©a
 = 
öãrÁ˚
.
	`GëU£rA9010Func
(
mu16Func
, 
mu16Lí
);

196  
mu32D©a
;

197 
	}
}

198 
U16
 
	$GëU£rFun˘i⁄D©a
 ( 
U16
 
mu16Func
 )

200 
U16
 
mu16D©a
 = 0U;

201 
mu16D©a
 = 
öãrÁ˚
.
	`GëU£rA1010Func
(
mu16Func
);

202  
mu16D©a
;

203 
	}
}

205 
I16
 
	$GëU£rSís‹D©a
 ( 
U16
 
mu16Sí
 )

207 
I16
 
mi16D©a
 = 0;

208 
mi16D©a
 = 
öãrÁ˚
.
	`GëU£rA1020Sís
(
mu16Sí
);

209  
mi16D©a
;

210 
	}
}

212 
U16
 
	$GëU£rEº‹D©a
 ( 
U16
 
mu16Eº
 )

214 
U16
 
mu16D©a
 = 0U;

215 
mu16D©a
 = 
öãrÁ˚
.
	`GëU£rA1030Eº
(
mu16Eº
);

216  
mu16D©a
;

217 
	}
}

219 
U16
 
	$GëU£rP¨tD©a
 ( 
U16
 
mu16P¨t
 )

221 
U16
 
mu16D©a
 = 0U;

222 
mu16D©a
 = 
öãrÁ˚
.
	`GëU£rA1080P¨t
(
mu16P¨t
);

223  
mu16D©a
;

224 
	}
}

226 
U32
 
	$GëU£rAccumuœãD©a
 ( 
U16
 
mu16Acc
 )

228 
U32
 
mu32D©a
 = 0U;

229 
mu32D©a
 = 
öãrÁ˚
.
	`GëU£rA2010Acc
(
mu16Acc
);

230  
mu32D©a
;

231 
	}
}

233 
	$SëU£rFun˘i⁄D©a
 ( 
U16
 
mu16Func
, U16 
mD©a
 )

235 
öãrÁ˚
.
	`SëU£rA1010Func
(
mu16Func
,
mD©a
);

236 
	}
}

238 
	$SëU£rM⁄ô‹D©a
 ( 
U16
 
mu16addªss
, 
I8
 *
mD©a
 )

240 
öãrÁ˚
.
	`SëU£rA9010Func
(
mu16addªss
, 
mD©a
);

241 
	}
}

242 
	$SëU£rTimeSëtög
 ( 
U16
* 
pD©a
 )

244 
öãrÁ˚
.
	`SëU£rTime
(
pD©a
[
WIFI_INFO_0000_YEAR
],pD©a[
WIFI_INFO_0001_MONTH
],pD©a[
WIFI_INFO_0002_DATE
],

245 
pD©a
[
WIFI_INFO_0003_HOUR
],pD©a[
WIFI_INFO_0004_MINUTE
],pD©a[
WIFI_INFO_0005_SECOND
],pD©a[
WIFI_INFO_0006_DAY
]);

246 
	}
}

248 
	$SèπFŸaO≥øti⁄
 ( )

251 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_UserInterface.h

2 #i‚de‡
_WIFI_U£rI¡îÁ˚_H_


3 
	#_WIFI_U£rI¡îÁ˚_H_


	)

6 
InôülizeWifiU£rI¡îÁ˚
 ( );

9 
WifiWrôeEï
 ( 
U16
 
mAddr
, 
U8
 
mVÆ
 );

10 
U8
 
WifiRódEï
 ( 
U16
 
mAddr
 );

13 
SëWifiBuzzSound
 ( 
U8
 
mu8Buzz
 );

16 
U8
 
GëU£rI¡îÁ˚
 ( U8 
mu8VÆue
 );

17 
SëU£rDi•œy
 ( 
U8
 
mu8Di•œy
 );

18 
CÀ¨U£rD©a
 ( );

21 
U32
 
GëU£rM⁄ô‹D©a
 ( 
U16
 
mu16Func
, U16 
mu16Lí
 );

22 
U16
 
GëU£rEº‹D©a
 ( U16 
mu16Eº
 );

23 
U16
 
GëU£rFun˘i⁄D©a
 ( U16 
mu16Func
 );

24 
I16
 
GëU£rSís‹D©a
 ( 
U16
 
mu16Sí
 );

25 
U16
 
GëU£rP¨tD©a
 ( U16 
mu16P¨t
 );

26 
U32
 
GëU£rAccumuœãD©a
 ( 
U16
 
mu16Acc
 );

29 
SëU£rFun˘i⁄D©a
 ( 
U16
 
mu16Func
, U16 
mD©a
 );

31 
SëU£rM⁄ô‹D©a
 ( 
U16
 
mu16addªss
, 
I8
 *
mD©a
 );

33 
SëU£rTimeSëtög
 ( 
U16
* 
pD©a
 );

36 
SèπFŸaO≥øti⁄
 ( );

37 
BOOT_£tOTAReque°
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\comm.c

1 
	~"comm.h
"

7 
CommHódî_T
 
	gcomm_hódî
[ 
MAX_COMM_ID
 ];

10 
CommHódî_T
 
	$GëCommHódî
–
U8
 
id
 )

13  
comm_hódî
[ 
id
 ];

14 
	}
}

16 
	$SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 )

19 
comm_hódî
[ 
id
 ] = 
vÆ
;

20 
	}
}

27 
I16
 
	$CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
 , 
I16
 
Àn
 )

29 
U8
 
i
;

32 if–
	`HAL_IsFuŒSídBuf„r
–
id
 ) !
TRUE
 )

34  
i
 = 0 ; i < 
Àn
 ; i++ )

36 
	`HAL_SëSídBuf„r
–
id
, 
£nd_pkt
[ 
i
 ] );

39 
	`HAL_SídByã
–
id
 );

40  
Àn
;

44 
	}
}

50 
I16
 
	$CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 )

52 
U16
 
i
;

53 
I16
 
Àn
;

55 if–
	`HAL_IsEm±yRecvBuf„r
–
id
 ) !
TRUE
 )

57 
Àn
 = 
	`HAL_GëRecvLígth
–
id
 );

58  
i
 = 0; i < 
Àn
 ; i++ )

60 
ªcv_pkt
[ 
i
 ] = 
	`HAL_GëRecvBuf„r
–
id
, i );

63  
Àn
;

67 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\comm.h

1 #i‚de‡
__COMM_H__


2 
	#__COMM_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_£rül.h
"

7 
U16
 
	tCommHódî_T
;

9 
CommHódî_T
 
GëCommHódî
–
U8
 
id
 );

10 
SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 );

12 
I16
 
CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
, I16 
Àn
 );

13 
I16
 
CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\crc16.c

1 
	~"¸c16.h
"

5 
	#MASK
 0xA001

	)

6 
	$CÆCrc16
(
Crc
,
C
)

8 
j
;

9 
CrcSum
;

10 
CrcBuf
;

13 
CrcSum
 = 
Crc
;

14 
CrcBuf
 = 
C
;

16 
j
=0;j < 8;j++) {

17 if(((
CrcSum
 ^ 
CrcBuf
Ë& 0x0001Ë!0ËCrcSum = (CrcSum >> 1Ë^ 
MASK
;

18 
CrcSum
 >>= 1;

20 
CrcBuf
 >>= 1;

23  
CrcSum
;

24 
	}
}

29 c⁄° 
U16
 
	g¸c16èb
[256] =

71 
U16
 
	$¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
)

73 
U16
 
ui_¸c
 = 0xFFFF;

74 
U16
 
ui_ãmp_¸c
;

76 ; 
uc_numbî
 > 0; uc_number--) {

77 
ui_ãmp_¸c
 = 
ui_¸c
 ^ (*
uc_d©a
);

78 
ui_¸c
=(ui_¸c>>8)^
¸c16èb
[
ui_ãmp_¸c
 & 0x00ff];

80 
uc_d©a
++;

82 (
ui_¸c
);

83 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\crc16.h

1 #i‚de‡
__CRC16_H__


2 
	#__CRC16_H__


	)

4 
	~"¥j_ty≥.h
"

7 
CÆCrc16
(
Crc
,
C
);

10 
U16
 
¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser.c

4 
	~"hw.h
"

5 
	~"hÆ_£rül.h
"

6 
	~"∑r£r.h
"

7 
	~"comm.h
"

8 
	~"timî.h
"

10 
	~"∑r£r_debug.h
"

11 
	~"∑r£r_eﬁ.h
"

12 
	~"∑r£r_‰⁄t.h
"

13 
	~"∑r£r_comp.h
"

16 #i‡
DEBUG_COMM


17 
	s_debug_comm_


19 
U32
 
	mrx_˙t
;

20 
U32
 
	mrx_îr
;

22 
U32
 
	mtx_˙t
;

23 } 
	tdebug_comm_t
;

24 
debug_comm_t
 
	gd_comm
[ 
MAX_COMM_ID
 ];

29 
U8
 
	gpkt_ªcv
[ 
MAX_COMM_RX_BUF_SZ
 ];

30 
I16
 
	gpkt_ªcv_Àn
 = 0;

34 
U8
 
	gpkt_£nd
[ 
MAX_COMM_TX_BUF_SZ
 ];

35 
I16
 
	gpkt_£nd_Àn
 = 0;

40 
	$I16
 (*
	t‚_∑r£r_rx_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

41 
	s_∑r£r_li°_


43 
U8
 
TimîId
;

44 
U8
 
CommId
;

45 
‚_∑r£r_rx_t
 
IsVÆidPkt
;

46 
‚_∑r£r_rx_t
 
P¨£rPkt
;

47 } 
	t∑r£r_rx_li°_t
;

49 
∑r£r_rx_li°_t
 
∑r£r_rx_li°
[] =

51 { 
TIMER_ID_COMM_COMP_RX
, 
COMM_ID_COMP
, 
IsVÆidPkt_Comp
, 
P¨£rPkt_Comp
 },

52 { 
TIMER_ID_COMM_FRONT_RX
, 
COMM_ID_FRONT
, 
IsVÆidPkt_Fr⁄t
, 
P¨£rPkt_Fr⁄t
 },

53 #i‡
CONFIG_EOL


54 { 
TIMER_ID_COMM_EOL_RX
, 
COMM_ID_EOL
 , 
IsVÆidPkt_EOL
, 
P¨£rPkt_EOL
 },

56 
	}
};

57 
	#MAX_PARSER_RX_NUM
 ( –
∑r£r_rx_li°
Ë/ –
∑r£r_rx_li°_t
 ) )

	)

59 
	$RecvPackëH™dÀr
( )

61 
∑r£r_rx_li°_t
 *
p_li°
;

62 
U8
 
i
;

64  
i
 = 0 ; i < 
MAX_PARSER_RX_NUM
 ; i++ )

67 
p_li°
 = &
∑r£r_rx_li°
[ 
i
 ];

68 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

70 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

72 if––
pkt_ªcv_Àn
 = 
	`CommRecvPackë
–
p_li°
->
CommId
, &
pkt_ªcv
[0] ) ) > 0 )

74 
	`HAL_InôRecvLígth
–
p_li°
->
CommId
 );

76 if–
p_li°
->
	`IsVÆidPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 ) =
TRUE
 )

78 
p_li°
->
	`P¨£rPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 );

79 #i‡
DEBUG_COMM


80 
d_comm
[ 
p_li°
->
CommId
 ].
rx_˙t
++;

85 #i‡
DEBUG_COMM


86 
d_comm
[ 
p_li°
->
CommId
 ].
rx_îr
++;

92 
	}
}

98 
	$I16
 (*
	t‚_∑r£r_tx_t
)–
	tCommHódî_T
 *
	tp_comm
, 
	tU8
 *
	tbuf
 );

99 
	$I16
 (*
	t‚_¸c16_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

100 
	s_∑r£r_tx_li°_


102 
U8
 
TimîId
;

103 
U8
 
CommId
;

104 
‚_∑r£r_tx_t
 
make_pkt
;

105 
‚_¸c16_t
 
¸c16
;

107 } 
	t∑r£r_tx_li°_t
;

109 
∑r£r_tx_li°_t
 
∑r£r_tx_li°
[] =

111 { 
TIMER_ID_COMM_COMP_TX
, 
COMM_ID_COMP
, 
MakePkt_Comp
, 
Crc16_Comp
 },

112 { 
TIMER_ID_COMM_FRONT_TX
, 
COMM_ID_FRONT
, 
MakePkt_Fr⁄t
, 
Crc16_Fr⁄t
 },

113 #i‡
CONFIG_EOL


114 { 
TIMER_ID_COMM_EOL_TX
, 
COMM_ID_EOL
, 
MakePkt_EOL
, 
Crc16_EOL
 },

116 
	}
};

117 
	#MAX_PARSER_TX_NUM
 ( –
∑r£r_tx_li°
Ë/ –
∑r£r_tx_li°_t
 ) )

	)

119 
	$SídPackëH™dÀr
( )

121 
∑r£r_tx_li°_t
 *
p_li°
;

122 
U8
 
i
;

123 
CommHódî_T
 
p_comm
;

126  
i
 = 0 ; i < 
MAX_PARSER_TX_NUM
 ; i++ )

128 
p_li°
 = &
∑r£r_tx_li°
[ 
i
 ];

130 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

132 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

134 
p_comm
 = 
	`GëCommHódî
–
p_li°
->
CommId
 );

137 
	`MEMSET
–(
__FAR
 *)
pkt_£nd
, 0, 
MAX_COMM_TX_BUF_SZ
 );

138 
pkt_£nd_Àn
 = 
p_li°
->
	`make_pkt
–(
CommHódî_T
 *)
p_comm
, &
pkt_£nd
[0] );

139 if–
pkt_£nd_Àn
 > 0 )

142 
pkt_£nd_Àn
 = 
p_li°
->
	`¸c16
–
pkt_£nd
,Ökt_send_len );

145 
	`CommSídPackë
–
p_li°
->
CommId
, 
pkt_£nd
, 
pkt_£nd_Àn
 );

147 #i‡
DEBUG_COMM


148 
d_comm
[ 
p_li°
->
CommId
 ].
tx_˙t
++;

153 
	`HAL_InôCommId
–
p_li°
->
CommId
 );

157 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser.h

1 #i‚de‡
__PARSER_H__


2 
	#__PARSER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
RecvPackëH™dÀr
( );

7 
SídPackëH™dÀr
( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_comp.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	~"∑r£r_comp.h
"

8 
	~"utû.h
"

9 
	~"comp_bldc.h
"

10 
	~"îr_comp_bldc_comm.h
"

11 
	~"timî.h
"

17 
	#CHKSUM_MAGIC_CODE
 0x55

	)

19 
	#FIELD_ERR_CODE
 0

	)

20 
	#FIELD_FEEDBACK_RPS
 1

	)

21 
	#FIELD_CHECKSUM
 2

	)

23 
	#MIN_RX_PKT_SZ
 3

	)

24 
	#MIN_TX_PKT_SZ
 2

	)

27 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

29 
U8
 
mu8Chksum
 = 0;

31 
mu8Chksum
 = (
buf
[ 
FIELD_ERR_CODE
 ] + buf[ 
FIELD_FEEDBACK_RPS
 ]Ë^ 
CHKSUM_MAGIC_CODE
;

32 if–
mu8Chksum
 !
buf
[ 
FIELD_CHECKSUM
 ] )

34  
FALSE
;

37  
TRUE
;

38 
	}
}

40 
I16
 
	$IsVÆidPkt_Comp
–
U8
 *
buf
, 
I16
 
Àn
 )

42 if–
buf
 =
NULL
 )

44  
FALSE
;

47 if–
Àn
 < 
MIN_RX_PKT_SZ
 )

49  
FALSE
;

52 if–
	`check_¸c
–
buf
, 
Àn
 ) =
FALSE
 )

54  
FALSE
;

57  
TRUE
;

58 
	}
}

61 
I16
 
P¨£rAck
(
U8
 *
buf
);

63 
	$I16
 (*
	ta˘i⁄_t
)–
	tU8
 *
	tbuf
 );

65 
I16
 
	$P¨£rPkt_Comp
–
U8
 *
buf
, 
I16
 
Àn
)

67 
	`P¨£rAck
–&
buf
[0] );

69 
	`SèπTimî
–
TIMER_ID_COMM_COMP_RX_ERR
, 
	`TIMER_SEC
–
ERROR_COMP_COMM_TIMEOUT
 ));

70 
	`Re£tCompBldcCommEº‹Cou¡
();

72 
	`SëCompBldcCommTe°
–
TRUE
 );

74  
Àn
;

75 
	}
}

77 
I16
 
	$Crc16_Comp
–
U8
 *
buf
, 
I16
 
Àn
 )

79 if–
Àn
 < 
MIN_TX_PKT_SZ
 )

84 
buf
[ 
Àn
 - 1 ] = buf[0] ^ 
CHKSUM_MAGIC_CODE
;

86  
Àn
;

87 
	}
}

89 
U8
 
	gdbg_comp_îr
 = 0;

90 
I16
 
	$P¨£rAck
(
U8
 *
buf
)

93 
	`SëCompBldcEº‹Code
–(
BldcEº‹Id_T
)
buf
[ 
FIELD_ERR_CODE
 ] );

94 
	`SëCompBldcCuºítRps
–
buf
[ 
FIELD_FEEDBACK_RPS
 ] );

96 
	`SëCompBldcEº‹Code
–
dbg_comp_îr
 );

97 
	`SëCompBldcCuºítRps
–
buf
[ 
FIELD_FEEDBACK_RPS
 ] );

100  
TRUE
;

101 
	}
}

104 
	s_make_li°_t


106 
U8
 
	mTy≥
;

107 
a˘i⁄_t
 
	mMakePkt
;

108 } 
	tmake_li°_t
;

110 
I16
 
MakePktReq
–
U8
 *
buf
 );

111 c⁄° 
make_li°_t
 
	gmake_li°
[] =

113 { 
PKT_COMP_REQ
, 
MakePktReq
 },

115 
	#SZ_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

117 
I16
 
	$MakePkt_Comp
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 )

119 
U8
 
mu8Ty≥
;

120 
a˘i⁄_t
 
p_make_pkt
;

121 
U8
 
i
;

122 
I16
 
Àn
 = -1;

125  
i
 = 0; i < 
SZ_TABLE
; i++ )

127 
mu8Ty≥
 = 
make_li°
[ 
i
 ].
Ty≥
;

128 
p_make_pkt
 = 
make_li°
[ 
i
 ].
MakePkt
;

130 if–
mu8Ty≥
 =(
U8
)
p_comm
 )

132 if–
p_make_pkt
 !
NULL
 )

134 
Àn
 = 
	`p_make_pkt
–
buf
 );

140  
Àn
;

141 
	}
}

144 
I16
 
	$MakePktReq
–
U8
 *
buf
 )

146 
I16
 
mi16Lí
 = 0;

148 
buf
[ 
mi16Lí
++ ] = (
U8
)
	`GëCompBldcT¨gëRps
();

149 
buf
[ 
mi16Lí
++ ] = 0;

151  
mi16Lí
;

152 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_comp.h

1 #i‚de‡
__PARSER_COMP_H__


2 
	#__PARSER_COMP_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

8 
	#PKT_COMP_REQ
 0x01

	)

10 
I16
 
IsVÆidPkt_Comp
–
U8
 *
buf
, I16 
Àn
 );

11 
I16
 
P¨£rPkt_Comp
–
U8
 *
buf
, I16 
Àn
);

12 
I16
 
Crc16_Comp
–
U8
 *
buf
, I16 
Àn
 );

13 
I16
 
MakePkt_Comp
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_debug.c

4 
	~"hw.h
"

5 
	~"Àvñ.h
"

6 
	~"ªœy.h
"

7 
	~"vÆve.h
"

8 
	~"cﬁd_w©î.h
"

9 
	~"comp.h
"

10 
	~"i˚.h
"

11 
	~"i˚_fuŒ.h
"

12 
	~"i˚_makî.h
"

13 
	~"ãmp.h
"

14 
	~"døö_pump.h
"

15 
	~"hÆ_adc.h
"

16 
	~"gas_swôch_vÆve.h
"

17 
	~"hÆ_°ï_mŸ‹.h
"

18 
	~"i˚_åay.h
"

19 
	~"powî_ßvög.h
"

20 
	~"îr‹.h
"

21 
	~"πc.h
"

22 
	~"hÆ_öput.h
"

23 
	~"fûãr.h
"

25 
	~"£rvi˚.h
"

27 
	~"∑r£r_debug.h
"

28 
	~"utû.h
"

29 
	~"hÆ_°ï_mŸ‹.h
"

30 
	~"u£r.h
"

31 
	~"key_evít_lib.h
"

32 
	~"hÆ_uv.h
"

33 
	~"uv.h
"

34 
	~"íîgy.h
"

35 
	~"Êow_mëî.h
"

36 
	~"‰⁄t.h
"

37 
	~"hŸ_w©î.h
"

38 
	~"hŸ_w©î_out.h
"

39 
	~"hŸ_w©î_out_¥ehót.h
"

40 
	~"hŸ_w©î_hóãr.h
"

41 
	~"hŸ_w©î_Êow.h
"

42 
	~"hóãr_out.h
"

43 
	~"Êow_vÆve.h
"

44 
	~"Êush_w©î_out.h
"

45 
	~"îr_comp_bldc.h
"

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

54 
	#MIN_PKT_SZ
 6

	)

56 
	#DBG_RESET_COMP_PROTECT_TIME
 '1'

	)

57 
	#DBG_RESET_ICING_TIME
 '2'

	)

58 
	#DBG_RESET_DEICING_TIME
 '3'

	)

59 
	#DBG_RESET_ICE_FULL
 '4'

	)

60 
	#DBG_SETTING_CLOCK
 '5'

	)

62 
	#DBG_CANCEL_DUMMY_ICING
 '6'

	)

63 
	#DBG_RESET_SAVING_TIME
 '7'

	)

64 
	#DBG_RESET_FLUSH_OUT
 '8'

	)

65 
	#DBG_RESET_SERVICE_TIME
 '9'

	)

66 
	#DBG_TEST_RTC_24H
 'A'

	)

67 
	#DBG_TEST_RTC_STER
 'B'

	)

68 
	#DBG_TEST_RTC_CURRENT
 'C'

	)

70 
	$P¨£rDebugC⁄åﬁ
–
U8
 *
buf
, 
I16
 
Àn
)

72 
U8
 
mu8MsgTy≥
;

74 
mu8MsgTy≥
 = 
buf
[0];

75 if–
mu8MsgTy≥
 =
DBG_RESET_COMP_PROTECT_TIME
 )

77 
	`SëCompPrŸe˘OffTime
(3);

79 if–
mu8MsgTy≥
 =
DBG_RESET_ICING_TIME
 )

81 
	`SëIcögTime
(0);

83 if–
mu8MsgTy≥
 =
DBG_RESET_DEICING_TIME
 )

85 
	`SëDeIcögTime
(0);

87 if–
mu8MsgTy≥
 =
DBG_RESET_ICE_FULL
 )

89 
	`SëI˚FuŒCheckTimî
(0);

91 if–
mu8MsgTy≥
 =
DBG_CANCEL_DUMMY_ICING
 )

93 
	`St›DummyDeIcög
();

101 if–
mu8MsgTy≥
 =
DBG_RESET_FLUSH_OUT
 )

103 
	`SëFlushSëupInô
–
FLUSH_STATUS_DONE
 );

104 
	`SëFlushSètus
–
FLUSH_STATUS_DONE
 );

105 
	`SëFlushPowîOn
–
FLUSH_STATUS_DONE
 );

106 
	`SëHŸW©îInôFuŒ
–
TRUE
 );

107 
	`SëCﬁdW©îInôFuŒ
–
TRUE
 );

109 if–
mu8MsgTy≥
 =
DBG_RESET_SERVICE_TIME
 )

111 
	`SëSîvi˚Time
( 0 );

117 
	}
}

120 
	$P¨£rDebugSãpMŸ‹
–
U8
 *
buf
, 
I16
 
Àn
)

122 
sm_°ï_t
 
the_°ï
;

124 
the_°ï
 = (
sm_°ï_t
)(
buf
[1] - '0') * 100;

125 
the_°ï
 +(
sm_°ï_t
)(
buf
[2] - '0') * 10;

126 
the_°ï
 +(
sm_°ï_t
)(
buf
[3] - '0') * 1;

127 
	`HAL_SëHﬁdSãp
–
SM_ID_0
, 0 );

128 
	`HAL_SëT¨gëSãp
–
SM_ID_0
, 
the_°ï
 );

129 
	}
}

133 
	$P¨£rDebugTe°Rtc
–
U8
 *
buf
, 
I16
 
Àn
)

135 
TimeD©a_T
 
mTime
;

137 if–
buf
[1] == '4' )

139 
	`GëRtcTime
–&
mTime
 );

140 
mTime
.
Yór
 += 1;

141 
	`SëRtcTime
–&
mTime
 );

143 if–
buf
[1] == '5' )

145 
	`GëRtcTime
–&
mTime
 );

146 
mTime
.
M⁄th
 += 1;

147 if–
mTime
.
M⁄th
 > 12 )

149 
mTime
.
M⁄th
 = 1;

151 
	`SëRtcTime
–&
mTime
 );

153 if–
buf
[1] == '6' )

155 
I8
 
mLa°edDay
;

157 
	`GëRtcTime
–&
mTime
 );

158 
mLa°edDay
 = 
	`GëLa°D©eByM⁄th
–
mTime
.
Yór
, mTime.
M⁄th
 );

160 
mTime
.
D©e
 += 1;

161 if–
mTime
.
D©e
 > 
mLa°edDay
 )

163 
mTime
.
D©e
 = 1;

165 
	`SëRtcTime
–&
mTime
 );

167 
	}
}

171 
	$P¨£rDebugSëtögClock
–
U8
 *
buf
, 
I16
 
Àn
)

173 
I8
 
timeBuf
[20];

174 
TimeD©a_T
 
mTime
;

177 
	`MEMSET
–(
__FAR
 *)&
timeBuf
[0], '\0', (ÅimeBuf) );

178 
	`MEMCPY
–(
__FAR
 *)&
timeBuf
[0], (c⁄° __FAR *)&
buf
[1], 4 );

179 
mTime
.
Y2K
 = 1;

180 
mTime
.
Yór
 = (
U8
)–
	`ATOI
–(c⁄° 
__FAR
 *)
timeBuf
 ) - 2000 );

183 
	`MEMSET
–(
__FAR
 *)&
timeBuf
[0], '\0', (ÅimeBuf) );

184 
	`MEMCPY
–(
__FAR
 *)&
timeBuf
[0], (c⁄° __FAR *)&
buf
[6], 2 );

185 
mTime
.
M⁄th
 = (
U8
)
	`ATOI
–(c⁄° 
__FAR
 *)
timeBuf
 );

188 
	`MEMSET
–(
__FAR
 *)&
timeBuf
[0], '\0', (ÅimeBuf) );

189 
	`MEMCPY
–(
__FAR
 *)&
timeBuf
[0], (c⁄° __FAR *)&
buf
[9], 2 );

190 
mTime
.
D©e
 = (
U8
)
	`ATOI
–(c⁄° 
__FAR
 *)
timeBuf
 );

193 
	`MEMSET
–(
__FAR
 *)&
timeBuf
[0], '\0', (ÅimeBuf) );

194 
	`MEMCPY
–(
__FAR
 *)&
timeBuf
[0], (c⁄° __FAR *)&
buf
[12], 2 );

195 
mTime
.
Hour
 = (
U8
)
	`ATOI
–(c⁄° 
__FAR
 *)
timeBuf
 );

198 
	`MEMSET
–(
__FAR
 *)&
timeBuf
[0], '\0', (ÅimeBuf) );

199 
	`MEMCPY
–(
__FAR
 *)&
timeBuf
[0], (c⁄° __FAR *)&
buf
[15], 2 );

200 
mTime
.
Mö
 = (
U8
)
	`ATOI
–(c⁄° 
__FAR
 *)
timeBuf
 );

203 
	`MEMSET
–(
__FAR
 *)&
timeBuf
[0], '\0', (ÅimeBuf) );

204 
	`MEMCPY
–(
__FAR
 *)&
timeBuf
[0], (c⁄° __FAR *)&
buf
[18], 2 );

205 
mTime
.
Sec
 = (
U8
)
	`ATOI
–(c⁄° 
__FAR
 *)
timeBuf
 );

206 if–
mTime
.
Sec
 != 59 )

208 
mTime
.
Sec
 += 1;

211 
mTime
.
DayWìk
 = 0;

213 
	`SëRtcTime
–&
mTime
 );

214 
	}
}

217 
I16
 
	$MakePkt_Debug_1
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

219 
I16
 
Àn
 = 0;

221 
FlowMëî_T
 
mFlow
;

224 
	`GëFlowMëîD©a
–&
mFlow
 );

227 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"TYPE_1=");

230 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d:%d:%d@",

231 
VERSION_MAJOR
,

232 
	`GëSy°em
(),

233 
	`GëFr⁄tSy°em
(),

234 
	`GëCu°omîTy≥
(),

235 
	`GëCﬁdW©îInôFuŒ
(),

236 
	`GëHŸW©îInôFuŒ
(),

237 
	`GëFlushSëupInô
(),

238 
	`GëFlushSètus
(),

239 
	`GëFlushPowîOn
()

243 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d:%d@",

244 !
	`GET_STATUS_VALVE_NOS
(),

245 
	`GET_STATUS_VALVE_ROOM_OUT
(),

247 !
	`GET_STATUS_VALVE_COLD_AIR
(),

248 
	`GET_STATUS_VALVE_COLD_IN
(),

249 
	`GET_STATUS_VALVE_COLD_OUT
(),

250 
	`GET_STATUS_VALVE_COLD_DRAIN
(),

252 
	`GET_STATUS_VALVE_HOT_IN
(),

253 
	`GET_STATUS_VALVE_HOT_OUT
(),

254 !
	`GET_STATUS_VALVE_HOT_DRAIN
(),

256 
	`GET_STATUS_VALVE_POWER_OUT
(),

257 
	`GET_STATUS_VALVE_ICE_TRAY_IN
(),

258 
	`GET_STATUS_VALVE_COLD_FLUSH
()

262 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d@",

263 
	`IsTu∫OnRñay
–
RELAY_COMP
 ),

264 
	`IsTu∫OnRñay
–
RELAY_FEEDER_CW
 ),

265 
	`IsTu∫OnRñay
–
RELAY_FEEDER_CCW
 ),

267 
	`IsTu∫OnRñay
–
RELAY_ICE_TRAY_CW
 ),

268 
	`IsTu∫OnRñay
–
RELAY_ICE_TRAY_CCW
 )

272 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%.2f:%d@",

273 
mFlow
.
Hz
,

274 
mFlow
.
LPM
,

275 ()
mFlow
.
Ouège


279 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d@",

280 
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN
 ),

281 
	`GëFûãrSètus
–
ID_FILTER_COVER
 ),

282 
	`GëFûãrSètus
–
ID_FILTER
 )

287 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

289  
Àn
;

290 
	}
}

292 
U8
 
	$CheckI˚MakeMode
( )

294 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 ) =
TRUE
 )

298 if–
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 ) =
TRUE
 )

302 if–
	`IsSëI˚MakeMode
–
ICE_MODE_READY
 ) =
TRUE
 )

306 if–
	`IsSëI˚MakeMode
–
ICE_MODE_ICING
 ) =
TRUE
 )

310 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DEICING
 ) =
TRUE
 )

316 
	}
}

318 
I16
 
	$MakePkt_Debug_2
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

320 
I16
 
Àn
 = 0;

322 
I˚_T
 
mI˚D©a
;

323 
I˚FuŒ_T
 
mI˚FuŒD©a
;

324 
DoInô_T
 
mInôD©a
;

325 
DoRódy_T
 
mRódyD©a
;

326 
DoIcög_T
 
mIcögD©a
;

327 
DoDeIcög_T
 
mDeIcögD©a
;

328 
I˚Tøy_T
 
mI˚Tøy
;

332 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"TYPE_2=");

335 
	`GëI˚D©a
–&
mI˚D©a
 );

336 
	`GëI˚FuŒD©a
–&
mI˚FuŒD©a
 );

337 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:",

338 
mI˚D©a
.
C⁄figMake
,

339 
mI˚D©a
.
Make
,

340 
mI˚D©a
.
Turbo
,

341 
	`CheckI˚MakeMode
()

345 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d:",

346 
mI˚FuŒD©a
.
FuŒ
,

347 
mI˚FuŒD©a
.
Sèπ
,

348 
	`GET_STATUS_ICE_INFRARED
(),

349 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_INFRARED
 ),

350 
mI˚FuŒD©a
.
CheckCou¡
,

351 
mI˚FuŒD©a
.
CheckTime
,

352 
mI˚D©a
.
FuŒCheckTimî


356 
	`GëI˚MakîInôD©a
–&
mInôD©a
 );

357 
	`GëI˚MakîRódyD©a
–&
mRódyD©a
 );

358 
	`GëI˚MakîIcögD©a
–&
mIcögD©a
 );

359 
	`GëI˚MakîDeIcögD©a
–&
mDeIcögD©a
 );

360 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%.1f:%.1f:%lu:%d:%d:",

361 
mInôD©a
.
Sãp
,

362 
mRódyD©a
.
Sãp
,

363 
mIcögD©a
.
Sãp
,

364 
	`GëTemp
–
TEMP_ID_ROOM_WATER
 ),

365 
	`GëTemp
–
TEMP_ID_AMBIENT
 ),

366 (
mRódyD©a
.
TøyFìdAmou¡
/10UL),

367 (
mIcögD©a
.
IcögTime
/10U),

368 
	`GET_STATUS_SWING_BAR
()

372 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d@",

373 
mDeIcögD©a
.
Sãp
,

374 
mDeIcögD©a
.
Regi⁄
,

375 
mDeIcögD©a
.
RïótNum
,

376 
mDeIcögD©a
.
Cou¡
,

377 
mDeIcögD©a
.
OnOffCmd
,

378 (
mDeIcögD©a
.
OnOffTime
/10),

379 
mI˚D©a
.
Size


383 
	`GëI˚TøyD©a
–&
mI˚Tøy
 );

384 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%lu:%lu:",

385 
mI˚Tøy
.
Posi_DeIcög
,

386 
mI˚Tøy
.
Posi_Icög
,

387 
mI˚Tøy
.
SèπTime
,

388 
mI˚Tøy
.
MovögTime
 / 100UL

391 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%lu:%d:%d:%lu:%lu:%d:%d@",

392 
mI˚Tøy
.
RR_Cou¡
,

393 
mI˚Tøy
.
RR_WaôTime
 / 100UL,

394 
mI˚Tøy
.
RCF_Cmd
,

395 
mI˚Tøy
.
RCF_CmdCou¡
,

396 
mI˚Tøy
.
RCF_Time
 / 100UL,

397 
mI˚Tøy
.
RFD_WaôTime
 / 100UL,

398 
mI˚Tøy
.
Eº‹IcögCou¡
,

399 
mI˚Tøy
.
Eº‹DeIcögCou¡


403 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

405  
Àn
;

406 
	}
}

409 
I16
 
	$MakePkt_Debug_3
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

411 
I16
 
Àn
 = 0;

413 
CﬁdW©î_T
 
mCﬁdD©a
;

414 
Com¥ess‹_T
 
mCompD©a
;

415 
DøöPump_T
 
mDøöD©a
;

416 
GasSwôchVÆve_T
 
mGasSwôch
;

419 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *) "TYPE_3=");

422 
	`GëCﬁdW©îD©a
–&
mCﬁdD©a
 );

423 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%.1f:%.1f:%.1f:%d:%u@",

424 
mCﬁdD©a
.
C⁄figMake
,

425 
mCﬁdD©a
.
Make
,

426 
mCﬁdD©a
.
TempT¨gëOn
,

427 
mCﬁdD©a
.
TempT¨gëOff
,

428 
mCﬁdD©a
.
TempCuºít
,

429 
mCﬁdD©a
.
ExåaMake
,

430 
mCﬁdD©a
.
ExåaMakeTime


434 
	`GëCompD©a
–&
mCompD©a
 );

435 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%lu:%lu:%d:%d:%d:%d:%d:%d@",

436 
	`GëCompOnOff
(),

437 
mCompD©a
.
PrŸe˘OffTime
,

438 
mCompD©a
.
OnTime
,

439 
mCompD©a
.
OffTime
,

440 
	`GET_STATUS_FAN_MOTOR_1_ONOFF
(),

443 
	`GëCompBldcT¨gëRps
(),

444 
	`GëCompBldcCuºítRps
(),

445 
	`GëCompBldcEº‹Code
()

449 
	`GëDøöD©a
–&
mDøöD©a
 );

450 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d:%d@",

451 
mDøöD©a
.
Cmd
,

452 
mDøöD©a
.
RëryCou¡
,

453 
mDøöD©a
.
RëryCmd
,

454 
mDøöD©a
.
OnOffTime
,

455 
mDøöD©a
.
Eº‹
,

456 
	`GET_DRAIN_TANK_LOW
(),

457 
	`GET_DRAIN_TANK_HIGH
(),

458 
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 )

462 
	`GëGasSwôchD©a
–&
mGasSwôch
 );

463 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d@",

464 
mGasSwôch
.
Sètus
,

465 
mGasSwôch
.
Mode
,

466 
	`HAL_GëT¨gëSãp
–
SM_ID_0
 ),

467 
	`HAL_GëCuºítSãp
–
SM_ID_0
 )

470 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

472  
Àn
;

474 
	}
}

476 
I16
 
	$MakePkt_Debug_4
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

478 
I16
 
Àn
 = 0;

479 
TimeD©a_T
 
mTime
;

482 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"TYPE_4=");

485 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%u:%u:%u:%u:%u:",

486 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HOT_IN
 ),

487 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HOT_OUT
 ),

488 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HEATER
 ),

489 
	`HAL_GëAdcVÆue
–
ANI_TEMP_ROOM_WATER
 ),

490 
	`HAL_GëAdcVÆue
–
ANI_TEMP_COLD_WATER
 )

493 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%u:%u:%u:%u:",

494 
	`HAL_GëAdcVÆue
–
ANI_TEMP_AMBIENT
 ),

495 
	`HAL_GëAdcVÆue
–
ANI_TEMP_EVA_1
 ),

496 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_LEAK
 ),

497 
	`HAL_GëAdcVÆue
–
ANI_DC_FAN
 )

500 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%u:%u:%u:%u:%u:",

501 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_INFRARED
 ),

502 
	`HAL_GëAdcVÆue
–
ANI_PUMP_DRAIN_FB
 ),

503 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TANK
 ),

504 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TRAY
 ),

505 
	`HAL_GëAdcVÆue
–
ANI_UV_WATER_OUT
 )

508 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%u:%u:%u:%u:",

509 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_DOOR
 ),

510 
	`HAL_GëAdcVÆue
–
ANI_HEATER_FB
 ),

511 
	`HAL_GëAdcVÆue
–
ANI_24V_FB
 ),

512 
	`HAL_GëAdcVÆue
–
ANI_12V_FB
 )

516 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%.1f:%.1f:%.1f:%.1f:%.1f:%.1f:%.1f@",

517 
	`GëTemp
–
TEMP_ID_HOT_IN
 ),

518 
	`GëTemp
–
TEMP_ID_HOT_OUT
 ),

519 
	`GëTemp
–
TEMP_ID_HEATER
 ),

520 
	`GëTemp
–
TEMP_ID_ROOM_WATER
 ),

521 
	`GëTemp
–
TEMP_ID_COLD_WATER
 ),

522 
	`GëTemp
–
TEMP_ID_AMBIENT
 ),

523 
	`GëTemp
–
TEMP_ID_EVA_1
 )

527 
	`GëRtcTime
–&
mTime
 );

528 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%02d:%02d:%02d:%02d:%02d:%02x@",

529 
mTime
.
Yór
 + 2000,

530 
mTime
.
M⁄th
,

531 
mTime
.
D©e
,

532 
mTime
.
Hour
,

533 
mTime
.
Mö
,

534 
mTime
.
Sec
,

535 
	`GëRtcRegSètus
()

540 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

542  
Àn
;

544 
	}
}

546 
I16
 
	$MakePkt_Debug_5
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

548 
I16
 
Àn
 = 0;

549 
PowîSavög_T
 
mSavögD©a
;

550 
Sîvi˚_T
 
mSîvi˚D©a
;

553 
	`GëSavögD©a
–&
mSavögD©a
 );

556 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"TYPE_5=");

559 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d@",

560 
mSavögD©a
.
C⁄fig
,

561 
mSavögD©a
.
Sètus


564 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:",

565 
mSavögD©a
.
C⁄fig
,

566 
mSavögD©a
.
Sètus
,

571 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d@",

582 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:",

583 
	`IsEº‹
–
ERR_TEMP_COLD_WATER
 ),

584 
	`IsEº‹
–
ERR_TEMP_ROOM_WATER
 ),

585 
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ),

586 
	`IsEº‹
–
ERR_TEMP_HOT_WATER_IN
 ),

587 
	`IsEº‹
–
ERR_TEMP_HOT_WATER
 )

590 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:",

591 
	`IsEº‹
–
ERR_TEMP_HEATER
 ),

592 
	`IsEº‹
–
ERR_TEMP_EVA_1
 ),

593 
	`IsEº‹
–
ERR_LEAK
 ),

594 
	`IsEº‹
–
ERR_MICRO_SW_DETECT
 )

597 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d:%d@",

598 
	`IsEº‹
–
ERR_MICRO_SW_MOVE
 ),

599 
	`IsEº‹
–
ERR_DRAIN_PUMP
 ),

600 
	`IsEº‹
–
ERR_COMP
 ),

601 
	`IsEº‹
–
ERR_COMP_COMM
 ),

602 
	`IsEº‹
–
ERR_OUTAGE_WATER
 ),

603 
	`IsEº‹
–
ERR_OUTAGE_HOT_WATER
 ),

604 
	`IsEº‹
–
ERR_HEATER_OVERHEAT
 ),

605 
	`IsEº‹
–
ERR_LEAK_FLOW
 )

609 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d:%d:%d:",

610 
	`GëCompBldcEº‹Code
(),

611 
	`GëCompBldcLa°edEº‹Code
(),

612 
	`GëEºCompBldcCou¡
–
ERR_COMP_PRT
, 
ERR_BLDC_STARTING_FAIL
 ),

613 
	`GëEºCompBldcCou¡
–
ERR_COMP_PRT
, 
ERR_BLDC_CURRENT_SENSING_ERROR
 ),

614 
	`GëEºCompBldcCou¡
–
ERR_COMP_PRT
, 
ERR_BLDC_OVER_CURRENT
 ),

615 
	`GëEºCompBldcCou¡
–
ERR_COMP_PRT
, 
ERR_BLDC_ABNORMAL_VOLTAGE
 ),

616 
	`GëEºCompBldcCou¡
–
ERR_COMP_PRT
, 
ERR_BLDC_OVERHEAT_CONTROLLER
 ),

617 
	`GëEºCompBldcCou¡
–
ERR_COMP_PRT
, 
ERR_BLDC_DISCONNECTION_COMM
 ),

618 
	`GëEºCompBldcCou¡
–
ERR_COMP_PRT
, 
ERR_BLDC_OUT_OF_RANGE
 )

622 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%d:%d:%d@",

623 
	`GëEºCompBldcCou¡
–
ERR_COMP_ERR
, 
ERR_BLDC_STARTING_FAIL
 ),

624 
	`GëEºCompBldcCou¡
–
ERR_COMP_ERR
, 
ERR_BLDC_CURRENT_SENSING_ERROR
 ),

625 
	`GëEºCompBldcCou¡
–
ERR_COMP_ERR
, 
ERR_BLDC_OVER_CURRENT
 ),

626 
	`GëEºCompBldcCou¡
–
ERR_COMP_ERR
, 
ERR_BLDC_ABNORMAL_VOLTAGE
 ),

627 
	`GëEºCompBldcCou¡
–
ERR_COMP_ERR
, 
ERR_BLDC_OVERHEAT_CONTROLLER
 ),

628 
	`GëEºCompBldcCou¡
–
ERR_COMP_ERR
, 
ERR_BLDC_DISCONNECTION_COMM
 ),

629 
	`GëEºCompBldcCou¡
–
ERR_COMP_ERR
, 
ERR_BLDC_OUT_OF_RANGE
 )

633 
	`GëSîvi˚CheckD©a
–&
mSîvi˚D©a
 );

634 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%lu:%lu@",

635 
mSîvi˚D©a
.
Sètus
,

636 
mSîvi˚D©a
.
T™kO≥n
,

637 
mSîvi˚D©a
.
Time
,

638 
mSîvi˚D©a
.
SaveTime


643 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

646  
Àn
;

647 
	}
}

649 
PªHót_T
 
PªHót
;

650 
AvîageAdc_T
 
HóãrAdc
;

651 
HóãrOff£t_T
 
HóãrOff£t
;

652 
HŸW©îFlow_T
 
HóãrFlow
;

654 
I16
 
	$MakePkt_Debug_6
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

656 
I16
 
Àn
 = 0;

657 
HŸOut_T
 
mHŸOut
;

658 
HóãrOut_T
 
mHóãrOut
;

659 
FlowVÆve_T
 
mFlowVÆve
;

660 
HŸW©îHóãr_T
 
mHóãr
;

663 
	`GëHŸOutD©a
–&
mHŸOut
 );

664 
	`GëHóãrOutD©a
–&
mHóãrOut
 );

665 
	`GëFlowVÆveD©a
–&
mFlowVÆve
 );

666 
	`GëHŸW©îHóãrD©a
–&
mHóãr
 );

669 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"TYPE_6=");

672 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%.1f:%.1f@",

673 
	`GëLockHŸ
(),

674 
	`GëHŸW©îInôFuŒ
(),

675 
mHŸOut
.
T¨gëOutTemp
,

676 
mHŸOut
.
T¨gëPªHótTemp


681 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d@",

682 
mHóãrOut
.
Ouçut
,

683 
	`GET_STATUS_HEATER_RELAY
(),

684 
	`GET_STATUS_HEATER_TRIAC
(),

685 
	`HAL_GëCuºítSãp
–
SM_ID_2
 )

690 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d@",

691 
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TANK
 ),

692 
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TRAY
 ),

693 
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_DOOR
 ),

694 
	`HAL_GëUvOnOffSètus
–
HAL_UV_WATER_OUT
 )

698 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d@",

699 
	`GëTempSís‹Time
–
TEMP_ID_COLD_WATER
 ),

700 
	`GëTempSís‹Time
–
TEMP_ID_ROOM_WATER
 )

704 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%d:%d:%.2f@",

705 
mHóãr
.
Cœss
,

706 
mHóãr
.
RawW©t
,

707 
mHóãr
.
W©t
,

708 
mHóãr
.
T¨gëW©t
,

709 
HóãrFlow
.
T¨gëLPM


713 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

715  
Àn
;

716 
	}
}

721 
I16
 
	$MakePkt_Debug_8
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

723 
I16
 
Àn
 = 0;

727 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"TYPE_8=");

730 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%d:%.1f:%.1f:%d:%d@",

731 
Flush
.
Sètus
,

732 
Flush
.
T¨gëAmou¡
,

733 
Flush
.
FûãrT¨gëAmou¡
,

734 
Flush
.
CuºítAmou¡
,

735 
Flush
.
FûãrTimeOut
,

736 
Flush
.
CﬁdTimeOut
,

737 
Flush
.
D⁄eWaôTime
,

744 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

746 
	}
}

750 
I16
 
	$MakePkt_Debug_7
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

752 
I16
 
Àn
 = 0;

753 
U£rInfo_T
 
mU£r
;

756 
	`GëU£rD©a
–&
mU£r
 );

759 
Àn
 = 
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"TYPE_7=");

762 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)"%d:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu:%lu@",

763 
	`GëE√rgyM⁄th
(),

764 
	`GëE√rgyW©tM⁄th
–1 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 1 ),

765 
	`GëE√rgyW©tM⁄th
–2 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 2 ),

766 
	`GëE√rgyW©tM⁄th
–3 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 3 ),

767 
	`GëE√rgyW©tM⁄th
–4 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 4 ),

768 
	`GëE√rgyW©tM⁄th
–5 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 5 ),

769 
	`GëE√rgyW©tM⁄th
–6 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 6 ),

770 
	`GëE√rgyW©tM⁄th
–7 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 7 ),

771 
	`GëE√rgyW©tM⁄th
–8 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 8 ),

772 
	`GëE√rgyW©tM⁄th
–9 ) / 1000000UL , 
	`GëE√rgyR©eM⁄th
( 9 ),

773 
	`GëE√rgyW©tM⁄th
–10 ) / 1000000UL, 
	`GëE√rgyR©eM⁄th
( 10 ),

774 
	`GëE√rgyW©tM⁄th
–11 ) / 1000000UL, 
	`GëE√rgyR©eM⁄th
( 11 ),

775 
	`GëE√rgyW©tM⁄th
–12 ) / 1000000UL, 
	`GëE√rgyR©eM⁄th
( 12 )

780 
Àn
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[Üen ], (const __FAR *)" \r\n" );

782  
Àn
;

783 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_debug.h

1 #i‚de‡
__PARSER_DEBUG_H__


2 
	#__PARSER_DEBUG_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

7 
P¨£rDebugC⁄åﬁ
–
U8
 *
buf
, 
I16
 
Àn
);

8 
I16
 
MakePkt_Debug_1
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

9 
I16
 
MakePkt_Debug_2
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

10 
I16
 
MakePkt_Debug_3
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

11 
I16
 
MakePkt_Debug_4
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

12 
I16
 
MakePkt_Debug_5
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

13 
I16
 
MakePkt_Debug_6
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_eol.c

5 
	~"hw.h
"

6 
	~"∑r£r_eﬁ.h
"

7 
	~"∑r£r_debug.h
"

8 
	~"utû.h
"

9 
	~"eﬁ.h
"

10 
	~"¥o˚ss_eﬁ.h
"

11 
	~"timî.h
"

13 
	~"ãmp.h
"

14 
	~"îr_ãmp.h
"

15 
	~"Àvñ.h
"

16 
	~"ªœy.h
"

17 
	~"vÆve.h
"

18 
	~"cﬁd_w©î.h
"

19 
	~"comp.h
"

20 
	~"i˚.h
"

21 
	~"i˚_fuŒ.h
"

22 
	~"i˚_makî.h
"

23 
	~"i˚_do‹.h
"

24 
	~"i˚_åay.h
"

25 
	~"døö_pump.h
"

26 
	~"hÆ_adc.h
"

27 
	~"hÆ_pump.h
"

28 
	~"hÆ_°ï_mŸ‹.h
"

29 
	~"hÆ_Án_mŸ‹.h
"

30 
	~"hÆ_uv.h
"

31 
	~"gas_swôch_vÆve.h
"

32 
	~"powî_ßvög.h
"

33 
	~"îr‹.h
"

34 
	~"Àak.h
"

35 
	~"πc.h
"

36 
	~"fûãr.h
"

37 
	~"‰⁄t.h
"

38 
	~"Êow_vÆve.h
"

40 
	~"£rvi˚.h
"

41 
	~"WIFI_C⁄åﬁ.h
"

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

49 
	#PKT_STX
 0x01

	)

50 
	#PKT_ETX
 0x04

	)

52 
	#PKT_ACK
 0x06

	)

53 
	#PKT_NAK
 0x15

	)

55 
	#FIELD_STX
 0

	)

56 
	#FIELD_PACKET_TYPE
 1

	)

57 
	#FIELD_PAYLOAD
 5

	)

58 
	#FIELD_CHECKSUM
 7

	)

59 
	#FIELD_ETX
 9

	)

61 
	#LENGTH_PACKET_TYPE
 4

	)

62 
	#MIN_PKT_SZ
 6

	)

65 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

67 
U8
 
i
 = 0;

68 
U8
 
mu8Chksum
 = 0;

70  
i
 = 0; i < 
Àn
 - 3 ; i++ )

72 
mu8Chksum
 ^
buf
[ 
i
 ];

75  
mu8Chksum
;

76 
	}
}

78 
U8
 
	$IsTrueChksum
–
U8
 *
buf
, 
I16
 
Àn
 )

80 
U8
 
mu8CÆ
;

81 
U8
 
mu8VÆ
;

84 
mu8CÆ
 = 
	`check_¸c
–
buf
, 
Àn
 );

85 
mu8VÆ
 = 
	`C⁄vAsc2Byã
–
buf
[ 
Àn
 - 3 ], buf[Üen - 2 ] );

86 if–
mu8CÆ
 !
mu8VÆ
 )

88  
FALSE
;

91  
TRUE
;

92 
	}
}

95 
U16
 
	$GëPackëTy≥
(
U8
 *
buf
, U8 
Àn
)

97 
U8
 
mu8High
 = 0;

98 
U8
 
mu8Low
 = 0;

99 
U16
 
mu16PktTy≥
;

102 
mu8High
 = 
	`C⁄vAsc2Byã
–
buf
[0], buf[1] );

103 
mu8Low
 = 
	`C⁄vAsc2Byã
–
buf
[2], buf[3] );

104 
mu16PktTy≥
 = 
	`GET_UINT_WORD
–
mu8Low
, 
mu8High
 );

106  
mu16PktTy≥
;

107 
	}
}

109 
U8
 
	$IsDebugMssßge
(
U8
 *
buf
)

111 
U16
 
mu16PktTy≥
 = 0;

114 
mu16PktTy≥
 = 
	`GëPackëTy≥
–&
buf
[ 
FIELD_PACKET_TYPE
 ], 
LENGTH_PACKET_TYPE
 );

115 if–
mu16PktTy≥
 >
PKT_EOL_DEBUG_CONTROL


116 && 
mu16PktTy≥
 <
PKT_EOL_DEBUG_6
 )

118  
TRUE
;

122  
FALSE
;

124 
	}
}

126 
U8
 
	$IsSèπMesßge
(
U8
 *
buf
)

128 
U16
 
mu16PktTy≥
 = 0;

131 
mu16PktTy≥
 = 
	`GëPackëTy≥
–&
buf
[ 
FIELD_PACKET_TYPE
 ], 
LENGTH_PACKET_TYPE
 );

132 if–
mu16PktTy≥
 =
PKT_EOL_MODEL
 )

134  
TRUE
;

138  
FALSE
;

140 
	}
}

143 
I16
 
	$IsVÆidPkt_EOL
–
U8
 *
buf
, 
I16
 
Àn
 )

145 if–
buf
 =
NULL
 )

147  
FALSE
;

150 if–
Àn
 < 
MIN_PKT_SZ
 )

152  
FALSE
;

155 if–
buf
[ 
FIELD_STX
 ] !
PKT_STX


156 || 
buf
[ 
Àn
 - 1] !
PKT_ETX
 )

158  
FALSE
;

161 if–
	`IsTrueChksum
–
buf
, 
Àn
 ) =
FALSE
 )

163  
FALSE
;

167 if–
	`IsDebugMssßge
–
buf
 ) =
TRUE
 )

169  
TRUE
;

173 if–
	`GëEﬁSètus
(Ë=
FALSE
 )

176 if–
	`IsExpúedEﬁLimôTimî
(Ë=
TRUE
 )

178  
FALSE
;

181 if–
	`IsSèπMesßge
–
buf
 ) =
TRUE
 )

183  
TRUE
;

186  
FALSE
;

191 if–
	`GëEﬁMode
(Ë=
EOL_MODE_SEALED


192 || 
	`GëEﬁMode
(Ë=
EOL_MODE_DONE
 )

194  
FALSE
;

199 if–
	`GëEﬁTe°Mode
(Ë!
EOL_TEST_MODE_2
 )

201 if–
	`IsSèπMesßge
–
buf
 ) =
FALSE
 )

203  
FALSE
;

220 if–
	`GëEﬁSètus
(Ë=
FALSE


221 && 
	`GëEﬁMode
(Ë=
EOL_MODE_READY


225 if–
	`IsExpúedEﬁLimôTimî
(Ë=
TRUE
 )

227  
FALSE
;

230 if–
	`IsSèπMesßge
–
buf
 ) =
TRUE
 )

232  
TRUE
;

238 if–
	`GëEﬁMode
(Ë=
EOL_MODE_SEALED_INIT


239 || 
	`GëEﬁMode
(Ë=
EOL_MODE_SEALED


240 || 
	`GëEﬁMode
(Ë=
EOL_MODE_READY


241 || 
	`GëEﬁMode
(Ë=
EOL_MODE_DONE
 )

244 if–
	`IsDebugMssßge
–
buf
 ) =
TRUE
 )

246  
TRUE
;

251  
FALSE
;

256  
TRUE
;

257 
	}
}

260 (*
	tA˘i⁄P¨£r_t
)(
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
);

261 
	s_∑r£r_li°_t


263 
U16
 
Ty≥
;

264 
A˘i⁄P¨£r_t
 
P¨£rPkt
;

265 } 
	t∑r£r_li°_t
;

267 
	`P¨£rSèπ
(
U8
 *
buf
, 
I16
 
Àn
);

268 
	`P¨£rSís‹
(
U8
 *
buf
, 
I16
 
Àn
);

269 
	`P¨£rNoLﬂd
(
U8
 *
buf
, 
I16
 
Àn
);

272 
	`P¨£rCﬁdInVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

273 
	`P¨£rCﬁdInVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

274 
	`P¨£rHŸInVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

275 
	`P¨£rHŸInVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

276 
	`P¨£rRoomOutVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

277 
	`P¨£rRoomOutVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

278 
	`P¨£rCﬁdOutVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

279 
	`P¨£rCﬁdOutVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

280 
	`P¨£rHŸOutVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

281 
	`P¨£rHŸOutVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

282 
	`P¨£rNosVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

283 
	`P¨£rNosVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

284 
	`P¨£rHŸDøöVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

285 
	`P¨£rHŸDøöVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

286 
	`P¨£rI˚TøyVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

287 
	`P¨£rI˚TøyVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

288 
	`P¨£rDøöVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

289 
	`P¨£rDøöVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

290 
	`P¨£rCﬁdOvfVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

291 
	`P¨£rCﬁdOvfVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

292 
	`P¨£rCﬁdFlushVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

293 
	`P¨£rCﬁdFlushVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

294 
	`P¨£rF™MŸ‹eOn
(
U8
 *
buf
, 
I16
 
Àn
);

295 
	`P¨£rF™MŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
);

296 
	`P¨£rGasSwôchOn
(
U8
 *
buf
, 
I16
 
Àn
);

297 
	`P¨£rGasSwôchOff
(
U8
 *
buf
, 
I16
 
Àn
);

298 
	`P¨£rI˚TøyMŸ‹On
(
U8
 *
buf
, 
I16
 
Àn
);

299 
	`P¨£rI˚TøyMŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
);

300 
	`P¨£rI˚Do‹MŸ‹On
(
U8
 *
buf
, 
I16
 
Àn
);

301 
	`P¨£rI˚Do‹MŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
);

302 
	`P¨£rFìdîMŸ‹On
(
U8
 *
buf
, 
I16
 
Àn
);

303 
	`P¨£rFìdîMŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
);

304 
	`P¨£rSwögB¨On
(
U8
 *
buf
, 
I16
 
Àn
);

305 
	`P¨£rSwögB¨Off
(
U8
 *
buf
, 
I16
 
Àn
);

306 
	`P¨£rHŸFlowVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
);

307 
	`P¨£rHŸFlowVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
);

308 
	`P¨£rDøöPumpOn
(
U8
 *
buf
, 
I16
 
Àn
);

309 
	`P¨£rDøöPumpOff
(
U8
 *
buf
, 
I16
 
Àn
);

310 
	`P¨£rCompOn
(
U8
 *
buf
, 
I16
 
Àn
);

311 
	`P¨£rCompOff
(
U8
 *
buf
, 
I16
 
Àn
);

312 
	`P¨£rI˚Sy°emCﬁd
(
U8
 *
buf
, 
I16
 
Àn
);

313 
	`P¨£rI˚Sy°emI˚
(
U8
 *
buf
, 
I16
 
Àn
);

314 
	`P¨£rI˚Sy°emDeicög
(
U8
 *
buf
, 
I16
 
Àn
);

315 
	`P¨£rCom∂ëe
(
U8
 *
buf
, 
I16
 
Àn
);

317 
∑r£r_li°_t
 
∑r£r_li°
[] =

321 { 
PKT_EOL_COMP_ON
, 
P¨£rCompOn
 },

322 { 
PKT_EOL_COMP_OFF
, 
P¨£rCompOff
 },

323 { 
PKT_EOL_ICE_SYSTEM_COLD
, 
P¨£rI˚Sy°emCﬁd
 },

324 { 
PKT_EOL_ICE_SYSTEM_ICE
, 
P¨£rI˚Sy°emI˚
 },

325 { 
PKT_EOL_ICE_SYSTEM_DEICING
, 
P¨£rI˚Sy°emDeicög
 },

327 { 
PKT_EOL_COMPLETE
, 
P¨£rCom∂ëe
 },

328 { 
PKT_EOL_MODEL
, 
P¨£rSèπ
 },

329 { 
PKT_EOL_SETTING
, 
P¨£rSís‹
 },

332 { 
PKT_EOL_WIFI
, 
NULL
 },

333 { 
PKT_EOL_UV_1_ICE
, 
NULL
 },

334 { 
PKT_EOL_FLOW_SESNOR
, 
NULL
 },

335 { 
PKT_EOL_AC_DC
, 
NULL
 },

336 { 
PKT_EOL_UV_2_WATER
, 
NULL
 },

338 { 
PKT_EOL_UV_3_ICE_TRAY
, 
NULL
 },

339 { 
PKT_EOL_UV_4_ICE_TANK
, 
NULL
 },

340 { 
PKT_EOL_ICE_FULL
, 
NULL
 },

343 { 
PKT_EOL_SENSOR_TEMP
, 
NULL
 },

344 { 
PKT_EOL_SENSOR_LEVEL
, 
NULL
 },

345 { 
PKT_EOL_SENSOR
, 
NULL
 },

346 { 
PKT_EOL_SENSOR_HEATER
, 
NULL
 },

349 { 
PKT_EOL_NO_LOAD
, 
P¨£rNoLﬂd
 },

354 { 
PKT_EOL_COLD_IN_VALVE_ON
, 
P¨£rCﬁdInVÆveOn
 },

355 { 
PKT_EOL_COLD_IN_VALVE_OFF
, 
P¨£rCﬁdInVÆveOff
 },

357 { 
PKT_EOL_HOT_IN_VALVE_ON
, 
P¨£rHŸInVÆveOn
 },

358 { 
PKT_EOL_HOT_IN_VALVE_OFF
, 
P¨£rHŸInVÆveOff
 },

360 { 
PKT_EOL_ROOM_OUT_VALVE_ON
, 
P¨£rRoomOutVÆveOn
 },

361 { 
PKT_EOL_ROOM_OUT_VALVE_OFF
, 
P¨£rRoomOutVÆveOff
 },

363 { 
PKT_EOL_COLD_OUT_VALVE_ON
, 
P¨£rCﬁdOutVÆveOn
 },

364 { 
PKT_EOL_COLD_OUT_VALVE_OFF
, 
P¨£rCﬁdOutVÆveOff
 },

366 { 
PKT_EOL_HOT_OUT_VALVE_ON
, 
P¨£rHŸOutVÆveOn
 },

367 { 
PKT_EOL_HOT_OUT_VALVE_OFF
, 
P¨£rHŸOutVÆveOff
 },

369 { 
PKT_EOL_NOS_VALVE_ON
, 
P¨£rNosVÆveOn
 },

370 { 
PKT_EOL_NOS_VALVE_OFF
, 
P¨£rNosVÆveOff
 },

372 { 
PKT_EOL_HOT_DRAIN_VALVE_ON
, 
P¨£rHŸDøöVÆveOn
 },

373 { 
PKT_EOL_HOT_DRAIN_VALVE_OFF
, 
P¨£rHŸDøöVÆveOff
 },

375 { 
PKT_EOL_ICE_TRAY_VALVE_ON
, 
P¨£rI˚TøyVÆveOn
 },

376 { 
PKT_EOL_ICE_TRAY_VALVE_OFF
, 
P¨£rI˚TøyVÆveOff
 },

378 { 
PKT_EOL_DRAIN_VALVE_ON
, 
P¨£rDøöVÆveOn
 },

379 { 
PKT_EOL_DRAIN_VALVE_OFF
, 
P¨£rDøöVÆveOff
 },

381 { 
PKT_EOL_COLD_OVF_VALVE_ON
, 
P¨£rCﬁdOvfVÆveOn
 },

382 { 
PKT_EOL_COLD_OVF_VALVE_OFF
, 
P¨£rCﬁdOvfVÆveOff
 },

384 { 
PKT_EOL_COLD_FLUSH_VALVE_ON
, 
P¨£rCﬁdFlushVÆveOn
 },

385 { 
PKT_EOL_COLD_FLUSH_VALVE_OFF
, 
P¨£rCﬁdFlushVÆveOff
},

387 { 
PKT_EOL_FAN_MOTOR_ON
, 
P¨£rF™MŸ‹eOn
 },

388 { 
PKT_EOL_FAN_MOTOR_OFF
, 
P¨£rF™MŸ‹Off
 },

390 { 
PKT_EOL_GAS_SWITCH_ON
, 
P¨£rGasSwôchOn
 },

391 { 
PKT_EOL_GAS_SWITCH_OFF
, 
P¨£rGasSwôchOff
 },

393 { 
PKT_EOL_ICE_TRAY_MOTOR_ON
, 
P¨£rI˚TøyMŸ‹On
 },

394 { 
PKT_EOL_ICE_TRAY_MOTOR_OFF
, 
P¨£rI˚TøyMŸ‹Off
 },

396 { 
PKT_EOL_ICE_DOOR_MOTOR_ON
, 
P¨£rI˚Do‹MŸ‹On
 },

397 { 
PKT_EOL_ICE_DOOR_MOTOR_OFF
, 
P¨£rI˚Do‹MŸ‹Off
 },

399 { 
PKT_EOL_ICE_FEEDER_MOTOR_ON
, 
P¨£rFìdîMŸ‹On
 },

400 { 
PKT_EOL_ICE_FEEDER_MOTOR_OFF
, 
P¨£rFìdîMŸ‹Off
 },

402 { 
PKT_EOL_SWING_BAR_ON
, 
P¨£rSwögB¨On
 },

403 { 
PKT_EOL_SWING_BAR_OFF
, 
P¨£rSwögB¨Off
 },

405 { 
PKT_EOL_HOT_FLOW_VALVE_ON
, 
P¨£rHŸFlowVÆveOn
 },

406 { 
PKT_EOL_HOT_FLOW_VALVE_OFF
, 
P¨£rHŸFlowVÆveOff
 },

408 { 
PKT_EOL_DRAIN_PUMP_ON
, 
P¨£rDøöPumpOn
 },

409 { 
PKT_EOL_DRAIN_PUMP_OFF
, 
P¨£rDøöPumpOff
 },

413 { 
PKT_EOL_DEBUG_CONTROL
, 
P¨£rDebugC⁄åﬁ
 },

414 { 
PKT_EOL_DEBUG_1
, 
NULL
 },

415 { 
PKT_EOL_DEBUG_2
, 
NULL
 },

416 { 
PKT_EOL_DEBUG_3
, 
NULL
 },

417 { 
PKT_EOL_DEBUG_4
, 
NULL
 },

418 { 
PKT_EOL_DEBUG_5
, 
NULL
 },

419 { 
PKT_EOL_DEBUG_6
, 
NULL
 },

421 
	}
};

423 
	#SZ_PARSER_TABLE
 (–
∑r£r_li°
 ) / –
∑r£r_li°_t
 ))

	)

426 
I16
 
	$P¨£rPkt_EOL
–
U8
 *
buf
, 
I16
 
Àn
)

428 
U8
 
mu8Index
 = 0;

429 
U16
 
mu16PktTy≥
 = 0;

430 
A˘i⁄P¨£r_t
 
pP¨£r
 = 
NULL
;

434 
mu16PktTy≥
 = 
	`GëPackëTy≥
–&
buf
[
FIELD_PACKET_TYPE
], 
LENGTH_PACKET_TYPE
 );

435  
mu8Index
 = 0; mu8Index < 
SZ_PARSER_TABLE
; mu8Index++ )

437 if–
mu16PktTy≥
 =
∑r£r_li°
[ 
mu8Index
 ].
Ty≥
 )

439 
pP¨£r
 = 
∑r£r_li°
[ 
mu8Index
 ].
P¨£rPkt
;

440 if–
pP¨£r
 !
NULL
 )

442 
	`pP¨£r
(&
buf
[
FIELD_PAYLOAD
], 
Àn
);

446 
	`SëCommHódî
–
COMM_ID_EOL
, 
mu16PktTy≥
 );

447 
	`SèπTimî
–
TIMER_ID_COMM_EOL_TX
, 0 );

453 
	}
}

457 
U8
 
RunCheckI˚Tøy
;

458 
	$Tu∫OffAŒLﬂd
()

461 
	`TEST_St›I˚Do‹
();

462 
	`TEST_St›FlowVÆve
();

463 
	`TEST_St›GasVÆve
();

466 
RunCheckI˚Tøy
 = 
FALSE
;

471 
	`Clo£VÆve
–
VALVE_ALL
 );

473 
	`O≥nVÆve
–
NORMAL_OPEN_VALVES
 );

476 
	`Tu∫OffRñayAŒ
();

479 
	`TURN_OFF_HEATER_RELAY
();

480 
	`TURN_OFF_HEATER_TRIAC
();

483 
	`Tu∫OffDøöPump
();

484 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

487 
	`TURN_OFF_SWING_BAR
();

490 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TANK
 );

491 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TRAY
 );

492 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_DOOR
 );

493 
	`HAL_Tu∫OffUv
–
HAL_UV_WATER_OUT
 );

496 
	`HAL_Tu∫OffF™MŸ‹
();

497 
	`SëCompBldcT¨gëRps
( 0 );

498 
	}
}

501 
	#EOL_LOAD_MODE_1
 0x01

502 
	#EOL_LOAD_MODE_2
 0x02

503 
	`P¨£rSèπ
(
U8
 *
buf
, 
I16
 
Àn
)

	)

505 
U8
 
	gmu8Te°Mode
;

509 
	gmu8Te°Mode
 = 
C⁄vAsc2Byã
–
buf
[0], buf[1] );

512 if–
	gmu8Te°Mode
 !
EOL_LOAD_MODE_1


513 && 
mu8Te°Mode
 !
EOL_LOAD_MODE_2
 )

519 if–
	gmu8Te°Mode
 =
EOL_LOAD_MODE_2


520 && 
GëEﬁTe°Mode
(Ë!
EOL_LOAD_MODE_1
 )

527 
SèπEﬁLﬂd
();

530 if–
GëEﬁSètus
(Ë=
FALSE
 )

536 if–
	gmu8Te°Mode
 =
EOL_LOAD_MODE_1
 )

539 
GasSwôchInô
();

541 
SëEﬁTe°Mode
–
mu8Te°Mode
 );

542 
SëEﬁMode
–
EOL_MODE_READY
 );

544 if–
GëEﬁTe°Mode
(Ë=
EOL_LOAD_MODE_1


545 && 
mu8Te°Mode
 =
EOL_LOAD_MODE_2
 )

547 if–
IsRódyEﬁInôMode
(Ë=
TRUE
 )

549 
SëEﬁTe°Mode
–
mu8Te°Mode
 );

550 
SëEﬁMode
–
EOL_MODE_INIT
 );

560 
	$P¨£rSèπ
(
U8
 *
buf
, 
I16
 
Àn
)

563 
	`SèπEﬁLﬂd
();

566 if–
	`GëEﬁSètus
(Ë=
FALSE
 )

571 if–
	`GëEﬁTe°Mode
(Ë=
EOL_TEST_MODE_0
 )

574 
	`GasSwôchInô
();

576 
	`SëEﬁTe°Mode
–
EOL_TEST_MODE_1
 );

577 
	`SëEﬁMode
–
EOL_MODE_READY
 );

579 
	}
}

581 
	$P¨£rSís‹
(
U8
 *
buf
, 
I16
 
Àn
)

583 
	`SëEﬁMode
–
EOL_MODE_CHECK_SENSOR
 );

584 
	}
}

586 
	$P¨£rNoLﬂd
(
U8
 *
buf
, 
I16
 
Àn
)

588 
	`SëEﬁMode
–
EOL_MODE_CHECK_LOAD
 );

590 
	`Tu∫OffAŒLﬂd
();

591 
	}
}

603 
	$P¨£rCﬁdInVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

605 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

606 
	}
}

608 
	$P¨£rCﬁdInVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

610 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

611 
	}
}

613 
	$P¨£rHŸInVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

615 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

616 
	}
}

618 
	$P¨£rHŸInVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

620 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

621 
	}
}

623 
	$P¨£rRoomOutVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

625 
	`O≥nVÆve
–
VALVE_ROOM_OUT
 );

626 
	}
}

628 
	$P¨£rRoomOutVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

630 
	`Clo£VÆve
–
VALVE_ROOM_OUT
 );

631 
	}
}

633 
	$P¨£rCﬁdOutVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

635 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

636 
	}
}

638 
	$P¨£rCﬁdOutVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

640 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

641 
	}
}

643 
	$P¨£rHŸOutVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

645 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

646 
	}
}

648 
	$P¨£rHŸOutVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

650 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

651 
	}
}

653 
	$P¨£rNosVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

656 
	`Clo£VÆve
–
VALVE_NOS
 );

657 
	}
}

659 
	$P¨£rNosVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

662 
	`O≥nVÆve
–
VALVE_NOS
 );

663 
	}
}

665 
	$P¨£rHŸDøöVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

668 
	`Clo£VÆve
–
VALVE_HOT_DRAIN
 );

669 
	}
}

671 
	$P¨£rHŸDøöVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

674 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

675 
	}
}

677 
	$P¨£rI˚TøyVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

679 
	`O≥nVÆve
–
VALVE_ICE_TRAY_IN
 );

680 
	}
}

682 
	$P¨£rI˚TøyVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

684 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

685 
	}
}

687 
	$P¨£rDøöVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

689 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

690 
	}
}

692 
	$P¨£rDøöVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

694 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

695 
	}
}

697 
	$P¨£rCﬁdOvfVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

700 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

701 
	}
}

703 
	$P¨£rCﬁdOvfVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

706 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

707 
	}
}

709 
	$P¨£rCﬁdFlushVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

711 
	`O≥nVÆve
–
VALVE_COLD_FLUSH
 );

712 
	}
}

714 
	$P¨£rCﬁdFlushVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

716 
	`Clo£VÆve
–
VALVE_COLD_FLUSH
 );

717 
	}
}

719 
	$P¨£rF™MŸ‹eOn
(
U8
 *
buf
, 
I16
 
Àn
)

721 
	`HAL_Tu∫OnF™MŸ‹
();

722 
	}
}

724 
	$P¨£rF™MŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
)

726 
	`HAL_Tu∫OffF™MŸ‹
();

727 
	}
}

729 
	$P¨£rGasSwôchOn
(
U8
 *
buf
, 
I16
 
Àn
)

731 
	`TEST_SèπGasVÆve
();

732 
	}
}

734 
	$P¨£rGasSwôchOff
(
U8
 *
buf
, 
I16
 
Àn
)

736 
	`TEST_St›GasVÆve
();

737 
	}
}

739 
	$P¨£rI˚TøyMŸ‹On
(
U8
 *
buf
, 
I16
 
Àn
)

741 
RunCheckI˚Tøy
 = 
TRUE
;

742 
	}
}

744 
	$P¨£rI˚TøyMŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
)

746 
RunCheckI˚Tøy
 = 
FALSE
;

747 
	}
}

749 
	$P¨£rI˚Do‹MŸ‹On
(
U8
 *
buf
, 
I16
 
Àn
)

751 
	`TEST_SèπI˚Do‹
();

752 
	}
}

754 
	$P¨£rI˚Do‹MŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
)

756 
	`TEST_St›I˚Do‹
();

757 
	}
}

759 
	$P¨£rFìdîMŸ‹On
(
U8
 *
buf
, 
I16
 
Àn
)

761 
	`Tu∫OnRñay
–
RELAY_FEEDER_CW
 );

762 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

763 
	}
}

765 
	$P¨£rFìdîMŸ‹Off
(
U8
 *
buf
, 
I16
 
Àn
)

767 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

768 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

769 
	}
}

771 
	$P¨£rSwögB¨On
(
U8
 *
buf
, 
I16
 
Àn
)

773 
	`TURN_ON_SWING_BAR
();

774 
	}
}

776 
	$P¨£rSwögB¨Off
(
U8
 *
buf
, 
I16
 
Àn
)

778 
	`TURN_OFF_SWING_BAR
();

779 
	}
}

781 
	$P¨£rHŸFlowVÆveOn
(
U8
 *
buf
, 
I16
 
Àn
)

783 
	`TEST_SèπFlowVÆve
();

784 
	}
}

786 
	$P¨£rHŸFlowVÆveOff
(
U8
 *
buf
, 
I16
 
Àn
)

788 
	`TEST_St›FlowVÆve
();

789 
	}
}

791 
	$P¨£rDøöPumpOn
(
U8
 *
buf
, 
I16
 
Àn
)

793 
	`HAL_Tu∫OnPump
–
HAL_PUMP_DRAIN
, 24.0f );

794 
	}
}

796 
	$P¨£rDøöPumpOff
(
U8
 *
buf
, 
I16
 
Àn
)

798 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

799 
	}
}

802 
	$P¨£rCompOn
(
U8
 *
buf
, 
I16
 
Àn
)

804 
RPS_T
 
mRps
;

806 
mRps
 = 
	`C⁄vAsc2Byã
–
buf
[0], buf[1] );

807 
	`SëCompBldcT¨gëRps
–
mRps
 );

808 
	}
}

810 
	$P¨£rCompOff
(
U8
 *
buf
, 
I16
 
Àn
)

812 
	`SëCompBldcT¨gëRps
( 0 );

813 
	}
}

815 
	$P¨£rI˚Sy°emCﬁd
(
U8
 *
buf
, 
I16
 
Àn
)

817 
	`GasSwôchCﬁd
();

818 
	}
}

820 
	$P¨£rI˚Sy°emI˚
(
U8
 *
buf
, 
I16
 
Àn
)

822 
	`GasSwôchI˚
();

823 
	}
}

825 
	$P¨£rI˚Sy°emDeicög
(
U8
 *
buf
, 
I16
 
Àn
)

827 
	`GasSwôchHŸGas
();

828 
	}
}

830 
	$P¨£rCom∂ëe
(
U8
 *
buf
, 
I16
 
Àn
)

832 
	`SëEﬁMode
–
EOL_MODE_DONE
 );

834 
	`Tu∫OffAŒLﬂd
();

835 
	}
}

840 
I16
 
	$Crc16_EOL
–
U8
 *
buf
, 
I16
 
Àn
 )

842 
U8
 
mu8Chksum
 = 0;

843 
U8
 
¸c_buf
[5];

846 if–
Àn
 < 
MIN_PKT_SZ
 )

851 
mu8Chksum
 = 
	`check_¸c
–
buf
, 
Àn
);

852 
	`SPRINTF
–(
__FAR
 *)
¸c_buf
, (c⁄° __FAR *)"%02X", 
mu8Chksum
 );

854 
buf
[ 
Àn
 - 3 ] = 
¸c_buf
[0];

855 
buf
[ 
Àn
 - 2 ] = 
¸c_buf
[1];

857  
Àn
;

858 
	}
}

860 
	$I16
 (*
	tA˘i⁄_t
)–
	tU8
 *
	tbuf
, 
	tU16
 
	tmu16PktTy≥
 );

861 
	s_make_li°_t


863 
U16
 
Ty≥
;

864 
A˘i⁄_t
 
MakePkt
;

865 } 
	tmake_li°_t
;

867 
I16
 
	`MakePkt_Modñ
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

868 
I16
 
	`MakePkt_Sëtög
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

870 
I16
 
	`MakePkt_Wifi
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

871 
I16
 
	`MakePkt_UvI˚
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

872 
I16
 
	`MakePkt_FlowSís‹
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

873 
I16
 
	`MakePkt_CuºítAcDc
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

874 
I16
 
	`MakePkt_UvW©î
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

876 
I16
 
	`MakePkt_UvI˚Tøy
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

877 
I16
 
	`MakePkt_UvI˚T™k
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

878 
I16
 
	`MakePkt_I˚FuŒ
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

880 
I16
 
	`MakePkt_Sís‹Temp
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

881 
I16
 
	`MakePkt_Sís‹Levñ
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

882 
I16
 
	`MakePkt_Sís‹
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

883 
I16
 
	`MakePkt_Sís‹Hóãr
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

884 
I16
 
	`MakePkt_NoPayLﬂd
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 );

886 
make_li°_t
 
make_li°
[] =

889 { 
PKT_EOL_COMP_ON
, 
MakePkt_NoPayLﬂd
 },

890 { 
PKT_EOL_COMP_OFF
, 
MakePkt_NoPayLﬂd
 },

891 { 
PKT_EOL_ICE_SYSTEM_COLD
, 
MakePkt_NoPayLﬂd
 },

892 { 
PKT_EOL_ICE_SYSTEM_ICE
, 
MakePkt_NoPayLﬂd
 },

893 { 
PKT_EOL_ICE_SYSTEM_DEICING
, 
MakePkt_NoPayLﬂd
 },

895 { 
PKT_EOL_COMPLETE
, 
MakePkt_NoPayLﬂd
 },

897 { 
PKT_EOL_MODEL
, 
MakePkt_Modñ
 },

898 { 
PKT_EOL_SETTING
, 
MakePkt_Sëtög
 },

901 { 
PKT_EOL_WIFI
, 
MakePkt_Wifi
 },

902 { 
PKT_EOL_UV_1_ICE
, 
MakePkt_UvI˚
 },

903 { 
PKT_EOL_FLOW_SESNOR
, 
MakePkt_FlowSís‹
 },

904 { 
PKT_EOL_AC_DC
, 
MakePkt_CuºítAcDc
 },

905 { 
PKT_EOL_UV_2_WATER
, 
MakePkt_UvW©î
 },

907 { 
PKT_EOL_UV_3_ICE_TRAY
, 
MakePkt_UvI˚Tøy
 },

908 { 
PKT_EOL_UV_4_ICE_TANK
, 
MakePkt_UvI˚T™k
 },

909 { 
PKT_EOL_ICE_FULL
, 
MakePkt_I˚FuŒ
 },

912 { 
PKT_EOL_SENSOR_TEMP
, 
MakePkt_Sís‹Temp
 },

913 { 
PKT_EOL_SENSOR_LEVEL
, 
MakePkt_Sís‹Levñ
 },

914 { 
PKT_EOL_SENSOR
, 
MakePkt_Sís‹
 },

915 { 
PKT_EOL_SENSOR_HEATER
, 
MakePkt_Sís‹Hóãr
 },

918 { 
PKT_EOL_NO_LOAD
, 
MakePkt_NoPayLﬂd
 },

920 { 
PKT_EOL_HEATER_ON
, 
MakePkt_NoPayLﬂd
 },

921 { 
PKT_EOL_HEATER_OFF
, 
MakePkt_NoPayLﬂd
 },

923 { 
PKT_EOL_COLD_IN_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

924 { 
PKT_EOL_COLD_IN_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

926 { 
PKT_EOL_HOT_IN_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

927 { 
PKT_EOL_HOT_IN_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

929 { 
PKT_EOL_ROOM_OUT_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

930 { 
PKT_EOL_ROOM_OUT_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

932 { 
PKT_EOL_COLD_OUT_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

933 { 
PKT_EOL_COLD_OUT_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

935 { 
PKT_EOL_HOT_OUT_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

936 { 
PKT_EOL_HOT_OUT_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

938 { 
PKT_EOL_NOS_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

939 { 
PKT_EOL_NOS_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

941 { 
PKT_EOL_HOT_DRAIN_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

942 { 
PKT_EOL_HOT_DRAIN_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

944 { 
PKT_EOL_ICE_TRAY_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

945 { 
PKT_EOL_ICE_TRAY_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

947 { 
PKT_EOL_DRAIN_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

948 { 
PKT_EOL_DRAIN_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

950 { 
PKT_EOL_COLD_OVF_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

951 { 
PKT_EOL_COLD_OVF_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

953 { 
PKT_EOL_COLD_FLUSH_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

954 { 
PKT_EOL_COLD_FLUSH_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

956 { 
PKT_EOL_FAN_MOTOR_ON
, 
MakePkt_NoPayLﬂd
 },

957 { 
PKT_EOL_FAN_MOTOR_OFF
, 
MakePkt_NoPayLﬂd
 },

959 { 
PKT_EOL_GAS_SWITCH_ON
, 
MakePkt_NoPayLﬂd
 },

960 { 
PKT_EOL_GAS_SWITCH_OFF
, 
MakePkt_NoPayLﬂd
 },

962 { 
PKT_EOL_ICE_TRAY_MOTOR_ON
, 
MakePkt_NoPayLﬂd
 },

963 { 
PKT_EOL_ICE_TRAY_MOTOR_OFF
, 
MakePkt_NoPayLﬂd
 },

965 { 
PKT_EOL_ICE_DOOR_MOTOR_ON
, 
MakePkt_NoPayLﬂd
 },

966 { 
PKT_EOL_ICE_DOOR_MOTOR_OFF
, 
MakePkt_NoPayLﬂd
 },

968 { 
PKT_EOL_ICE_FEEDER_MOTOR_ON
, 
MakePkt_NoPayLﬂd
 },

969 { 
PKT_EOL_ICE_FEEDER_MOTOR_OFF
, 
MakePkt_NoPayLﬂd
 },

971 { 
PKT_EOL_SWING_BAR_ON
, 
MakePkt_NoPayLﬂd
 },

972 { 
PKT_EOL_SWING_BAR_OFF
, 
MakePkt_NoPayLﬂd
 },

974 { 
PKT_EOL_HOT_FLOW_VALVE_ON
, 
MakePkt_NoPayLﬂd
 },

975 { 
PKT_EOL_HOT_FLOW_VALVE_OFF
, 
MakePkt_NoPayLﬂd
 },

977 { 
PKT_EOL_DRAIN_PUMP_ON
, 
MakePkt_NoPayLﬂd
 },

978 { 
PKT_EOL_DRAIN_PUMP_OFF
, 
MakePkt_NoPayLﬂd
 },

983 { 
PKT_EOL_DEBUG_CONTROL
, 
NULL
 },

984 { 
PKT_EOL_DEBUG_1
, 
MakePkt_Debug_1
 },

985 { 
PKT_EOL_DEBUG_2
, 
MakePkt_Debug_2
 },

986 { 
PKT_EOL_DEBUG_3
, 
MakePkt_Debug_3
 },

987 { 
PKT_EOL_DEBUG_4
, 
MakePkt_Debug_4
 },

988 { 
PKT_EOL_DEBUG_5
, 
MakePkt_Debug_5
 },

989 { 
PKT_EOL_DEBUG_6
, 
MakePkt_Debug_6
 },

991 
	}
};

992 
	#SZ_MAKE_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

994 
I16
 
	$MakePkt_EOL
–
CommHódî_T
 *
pComm
, 
U8
 *
buf
 )

996 
U16
 
mu16Ty≥
;

997 
A˘i⁄_t
 
p_make_pkt
;

998 
U8
 
i
;

999 
I16
 
Àn
 = -1;

1002  
i
 = 0; i < 
SZ_MAKE_TABLE
; i++ )

1004 
mu16Ty≥
 = 
make_li°
[ 
i
 ].
Ty≥
;

1005 
p_make_pkt
 = 
make_li°
[ 
i
 ].
MakePkt
;

1009 if–
mu16Ty≥
 =(
U16
)
pComm
 )

1011 if–
p_make_pkt
 !
NULL
 )

1013 
Àn
 = 
	`p_make_pkt
–
buf
, 
mu16Ty≥
 );

1019  
Àn
;

1020 
	}
}

1023 
I16
 
	$MakePkt_Modñ
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1025 
I16
 
mi16Lí
 = 0;

1028 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1029 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1030 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1031 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
MODEL_CODE
 );

1032 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁTe°Mode
() );

1033 
buf
[ 
mi16Lí
++ ] = 0;

1034 
buf
[ 
mi16Lí
++ ] = 0;

1035 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1037  
mi16Lí
;

1038 
	}
}

1040 
U8
 
	$GëSy°emEﬁ
()

1042 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

1048 
	}
}

1049 
I16
 
	$MakePkt_Sëtög
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1051 
I16
 
mi16Lí
 = 0;

1054 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1055 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1056 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1057 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_EEPROM
 ) );

1058 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Len ], (const __FAR *)"%02X", 0 );

1059 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02d", 
VERSION_MAJOR
 );

1060 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Len ], (const __FAR *)"%02X", 0 );

1061 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
COUNTRY_CODE_KOR
 );

1062 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëSy°emEﬁ
() );

1063 
buf
[ 
mi16Lí
++ ] = 0;

1064 
buf
[ 
mi16Lí
++ ] = 0;

1065 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1067  
mi16Lí
;

1068 
	}
}

1071 
I16
 
	$MakePkt_Wifi
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1073 
I16
 
mi16Lí
 = 0;

1075 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1076 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1077 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1078 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëWifiSètusVÆue
(
WIFI_STATUS_TEST
) );

1079 
buf
[ 
mi16Lí
++ ] = 0;

1080 
buf
[ 
mi16Lí
++ ] = 0;

1081 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1083  
mi16Lí
;

1084 
	}
}

1086 
I16
 
	$MakePkt_UvI˚
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1088 
I16
 
mi16Lí
 = 0;

1091 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1092 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1093 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1094 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_DOOR
 ));

1095 
buf
[ 
mi16Lí
++ ] = 0;

1096 
buf
[ 
mi16Lí
++ ] = 0;

1097 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1099  
mi16Lí
;

1100 
	}
}

1103 
I16
 
	$MakePkt_FlowSís‹
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1105 
I16
 
mi16Lí
 = 0;

1108 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1109 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1110 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1111 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_FLOW_METER
 ) );

1112 
buf
[ 
mi16Lí
++ ] = 0;

1113 
buf
[ 
mi16Lí
++ ] = 0;

1114 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1116  
mi16Lí
;

1117 
	}
}

1120 
U16
 
	$CÆcCuºít
–
U16
 
mu16Adc
 )

1122 
F32
 
mf32Cuºít
 = 0.0f;

1125 
mf32Cuºít
 = (
F32
)
mu16Adc
 * 2.43f;

1126 
mf32Cuºít
 += 0.5f;

1127  (
U16
)(
mf32Cuºít
);

1128 
	}
}

1131 
U16
 
	$CÆcCuºítF™
–
U16
 
mu16Adc
 )

1133 
F32
 
mf32Cuºít
 = 0.0f;

1135 
mf32Cuºít
 = ((
F32
)
mu16Adc
 * 0.0049f) * 100.0f;

1136 
mf32Cuºít
 += 0.5f;

1137  (
U16
)(
mf32Cuºít
);

1138 
	}
}

1140 
I16
 
	$MakePkt_CuºítAcDc
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1142 
I16
 
mi16Lí
 = 0;

1143 
U16
 
mu16RawAdc
 = 0U;

1144 
U16
 
mu16Cuºít
 = 0U;

1147 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1148 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1149 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1152 
mu16RawAdc
 = 
	`HAL_GëAdcVÆue
–
ANI_12V_FB
 );

1153 
mu16Cuºít
 = 
	`CÆcCuºít
–
mu16RawAdc
 );

1154 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%06d", 
mu16Cuºít
 );

1157 
mu16RawAdc
 = 
	`HAL_GëAdcVÆue
–
ANI_24V_FB
 );

1158 
mu16Cuºít
 = 
	`CÆcCuºít
–
mu16RawAdc
 );

1159 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%06d", 
mu16Cuºít
 );

1162 
mu16RawAdc
 = 
	`HAL_GëAdcVÆue
–
ANI_DC_FAN
 );

1163 
mu16Cuºít
 = 
	`CÆcCuºítF™
–
mu16RawAdc
 );

1164 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%06d", 
mu16Cuºít
 );

1166 
buf
[ 
mi16Lí
++ ] = 0;

1167 
buf
[ 
mi16Lí
++ ] = 0;

1168 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1170  
mi16Lí
;

1171 
	}
}

1173 
I16
 
	$MakePkt_UvW©î
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1175 
I16
 
mi16Lí
 = 0;

1178 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1179 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1180 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1182 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`HAL_GëAdcVÆue
–
ANI_UV_WATER_OUT
 ));

1183 
buf
[ 
mi16Lí
++ ] = 0;

1184 
buf
[ 
mi16Lí
++ ] = 0;

1185 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1187  
mi16Lí
;

1188 
	}
}

1207 
I16
 
	$MakePkt_UvI˚Tøy
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1209 
I16
 
mi16Lí
 = 0;

1212 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1213 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1214 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1215 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TRAY
 ) );

1216 
buf
[ 
mi16Lí
++ ] = 0;

1217 
buf
[ 
mi16Lí
++ ] = 0;

1218 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1220  
mi16Lí
;

1221 
	}
}

1223 
I16
 
	$MakePkt_UvI˚T™k
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1225 
I16
 
mi16Lí
 = 0;

1228 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1229 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1230 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1231 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TANK
 ) );

1232 
buf
[ 
mi16Lí
++ ] = 0;

1233 
buf
[ 
mi16Lí
++ ] = 0;

1234 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1236  
mi16Lí
;

1237 
	}
}

1239 
I16
 
	$MakePkt_I˚FuŒ
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1241 
I16
 
mi16Lí
 = 0;

1244 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1245 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1246 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1247 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_ICE_FULL
 ) );

1248 
buf
[ 
mi16Lí
++ ] = 0;

1249 
buf
[ 
mi16Lí
++ ] = 0;

1250 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1252  
mi16Lí
;

1253 
	}
}

1257 
	#TEMP_ERROR
 9999

1258 
U16
 
	`C⁄vEﬁTemp
(
U8
 
mu8AdcId
, 
TEMP_T
 
mTemp
)

	)

1260 
U16
 
	gmu16Temp
 = 
TEMP_ERROR
;

1261 
U16
 
	gmu16Adc
 = 0;

1264 
	gmu16Adc
 = 
HAL_GëAdcVÆue
–
mu8AdcId
 );

1265 if–
GëTempEº‹Ty≥
–
mu16Adc
 ) !
STATUS_NORMAL
 )

1267 
mu16Temp
 = 
TEMP_ERROR
;

1272 if–
	gmTemp
 > 99.9f )

1274 
	gmTemp
 = 99.9f;

1276 if–
	gmTemp
 < -99.9f )

1278 
	gmTemp
 = -99.9f;

1281 if–
	gmTemp
 > 0.0f )

1283 
	gmu16Temp
 = (
U16
)–
mTemp
 * 10.0f );

1288 
	gmTemp
 = -
mTemp
;

1289 
	gmu16Temp
 = (
U16
)–
mTemp
 * 10.0f );

1290 
	gmu16Temp
 += 1000;

1294  
	gmu16Temp
;

1297 
I16
 
	$MakePkt_Sís‹Temp
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1299 
I16
 
mi16Lí
 = 0;

1301 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1302 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1303 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1305 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04d", 
	`C⁄vEﬁTemp
–
ANI_TEMP_AMBIENT
, 
	`GëTemp
–
TEMP_ID_AMBIENT
 ) ));

1306 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04d", 
	`C⁄vEﬁTemp
–
ANI_TEMP_COLD_WATER
, 
	`GëTemp
–
TEMP_ID_COLD_WATER
) ));

1307 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04d", 
	`C⁄vEﬁTemp
–
ANI_TEMP_HOT_IN
, 
	`GëTemp
–
TEMP_ID_HOT_IN
) ));

1308 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04d", 
	`C⁄vEﬁTemp
–
ANI_TEMP_HOT_OUT
, 
	`GëTemp
–
TEMP_ID_HOT_OUT
) ));

1309 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04d", 
	`C⁄vEﬁTemp
–
ANI_TEMP_HEATER
, 
	`GëTemp
–
TEMP_ID_HEATER
) ));

1310 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04d", 
	`C⁄vEﬁTemp
–
ANI_TEMP_EVA_1
, 
	`GëTemp
–
TEMP_ID_EVA_1
) ));

1311 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04d", 
	`C⁄vEﬁTemp
–
ANI_TEMP_ROOM_WATER
, 
	`GëTemp
–
TEMP_ID_ROOM_WATER
) ));

1313 
buf
[ 
mi16Lí
++ ] = 0;

1314 
buf
[ 
mi16Lí
++ ] = 0;

1315 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1317  
mi16Lí
;

1318 
	}
}

1325 
I16
 
	$MakePkt_Sís‹Levñ
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1327 
I16
 
mi16Lí
 = 0;

1330 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1331 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1332 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1334 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", !
	`GET_DRAIN_TANK_LOW
() );

1335 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", !
	`GET_DRAIN_TANK_HIGH
() );

1339 
buf
[ 
mi16Lí
++ ] = 0;

1340 
buf
[ 
mi16Lí
++ ] = 0;

1341 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1343  
mi16Lí
;

1344 
	}
}

1349 
I16
 
	$MakePkt_Sís‹
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1351 
I16
 
mi16Lí
 = 0;

1354 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1355 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1356 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1358 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëFûãrSètus
–
ID_FILTER_COVER
 ) );

1360 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_FILTER_ONOFF
 ));

1362 if–
	`GëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_DEICING
 ) =0 && GëEﬁCheckSètus–
EOL_CHK_ID_ICE_TRAY_ICING
 ) == 0 )

1365 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Len ], (const __FAR *)"%02X", 0 );

1367 if–
	`GëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_DEICING
 ) =0 && GëEﬁCheckSètus–
EOL_CHK_ID_ICE_TRAY_ICING
 ) == 1 )

1370 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Len ], (const __FAR *)"%02X", 1 );

1372 if–
	`GëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_DEICING
 ) =1 && GëEﬁCheckSètus–
EOL_CHK_ID_ICE_TRAY_ICING
 ) == 0 )

1375 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Len ], (const __FAR *)"%02X", 2 );

1380 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Len ], (const __FAR *)"%02X", 3 );

1384 
buf
[ 
mi16Lí
++ ] = 0;

1385 
buf
[ 
mi16Lí
++ ] = 0;

1386 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1388  
mi16Lí
;

1389 
	}
}

1391 
I16
 
	$MakePkt_Sís‹Hóãr
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1393 
I16
 
mi16Lí
 = 0;

1396 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1397 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1398 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1400 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_HEATER_RELAY
 ) );

1401 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_HEATER_TRIAC
 ) );

1404 
buf
[ 
mi16Lí
++ ] = 0;

1405 
buf
[ 
mi16Lí
++ ] = 0;

1406 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1408  
mi16Lí
;

1409 
	}
}

1413 
I16
 
	$MakePkt_NoPayLﬂd
–
U8
 *
buf
, 
U16
 
mu16PktTy≥
 )

1415 
I16
 
mi16Lí
 = 0;

1417 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

1418 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%02X", 
PKT_ACK
 );

1419 
mi16Lí
 +
	`SPRINTF
–(
__FAR
 *)&
buf
[ mi16Lí ], (c⁄° __FAR *)"%04X", 
mu16PktTy≥
 );

1420 
buf
[ 
mi16Lí
++ ] = 0;

1421 
buf
[ 
mi16Lí
++ ] = 0;

1422 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

1424  
mi16Lí
;

1425 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_eol.h

1 #i‚de‡
__PARSER_EOL_H__


2 
	#__PARSER_EOL_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

7 
	#PKT_EOL_NONE
 0x0000

	)

9 
	#PKT_EOL_MODEL
 0x2000

	)

11 
	#PKT_EOL_SETTING
 0x3000

	)

14 
	#PKT_EOL_WIFI
 0x3010

	)

15 
	#PKT_EOL_UV_1_ICE
 0x3011

	)

16 
	#PKT_EOL_FLOW_SESNOR
 0x3012

	)

17 
	#PKT_EOL_AC_DC
 0x3013

	)

18 
	#PKT_EOL_UV_2_WATER
 0x3014

	)

19 
	#PKT_EOL_SAVING_PHOTO
 0x301A

	)

20 
	#PKT_EOL_UV_3_ICE_TRAY
 0x301B

	)

21 
	#PKT_EOL_UV_4_ICE_TANK
 0x301C

	)

22 
	#PKT_EOL_ICE_FULL
 0x301D

	)

25 
	#PKT_EOL_SENSOR_TEMP
 0x3020

	)

26 
	#PKT_EOL_SENSOR_LEVEL
 0x3030

	)

27 
	#PKT_EOL_SENSOR
 0x3040

	)

28 
	#PKT_EOL_SENSOR_HEATER
 0x3050

	)

31 
	#PKT_EOL_NO_LOAD
 0x5000

	)

33 
	#PKT_EOL_HEATER_ON
 0x5001

34 
	#PKT_EOL_HEATER_OFF
 0x5002

	)

36 
	#PKT_EOL_COLD_IN_VALVE_ON
 0x5102

	)

37 
	#PKT_EOL_COLD_IN_VALVE_OFF
 0x5103

	)

39 
	#PKT_EOL_HOT_IN_VALVE_ON
 0x5104

	)

40 
	#PKT_EOL_HOT_IN_VALVE_OFF
 0x5105

	)

42 
	#PKT_EOL_ROOM_OUT_VALVE_ON
 0x5106

	)

43 
	#PKT_EOL_ROOM_OUT_VALVE_OFF
 0x5107

	)

45 
	#PKT_EOL_COLD_OUT_VALVE_ON
 0x5108

	)

46 
	#PKT_EOL_COLD_OUT_VALVE_OFF
 0x5109

	)

48 
	#PKT_EOL_HOT_OUT_VALVE_ON
 0x510A

	)

49 
	#PKT_EOL_HOT_OUT_VALVE_OFF
 0x510B

	)

51 
	#PKT_EOL_NOS_VALVE_ON
 0x5110

	)

52 
	#PKT_EOL_NOS_VALVE_OFF
 0x5111

	)

54 
	#PKT_EOL_HOT_DRAIN_VALVE_ON
 0x5114

	)

55 
	#PKT_EOL_HOT_DRAIN_VALVE_OFF
 0x5115

	)

57 
	#PKT_EOL_ICE_TRAY_VALVE_ON
 0x5116

	)

58 
	#PKT_EOL_ICE_TRAY_VALVE_OFF
 0x5117

	)

60 
	#PKT_EOL_DRAIN_VALVE_ON
 0x5118

61 
	#PKT_EOL_DRAIN_VALVE_OFF
 0x5119

62 

	)

63 
	#PKT_EOL_COLD_OVF_VALVE_ON
 0x512C

64 
	#PKT_EOL_COLD_OVF_VALVE_OFF
 0x512D

65 

	)

66 
	#PKT_EOL_COLD_FLUSH_VALVE_ON
 0x513A

67 
	#PKT_EOL_COLD_FLUSH_VALVE_OFF
 0x513B

68 

	)

69 
	#PKT_EOL_FAN_MOTOR_ON
 0x5200

	)

70 
	#PKT_EOL_FAN_MOTOR_OFF
 0x5201

	)

72 
	#PKT_EOL_GAS_SWITCH_ON
 0x5202

	)

73 
	#PKT_EOL_GAS_SWITCH_OFF
 0x5203

	)

75 
	#PKT_EOL_ICE_TRAY_MOTOR_ON
 0x5206

	)

76 
	#PKT_EOL_ICE_TRAY_MOTOR_OFF
 0x5207

	)

78 
	#PKT_EOL_ICE_DOOR_MOTOR_ON
 0x5208

	)

79 
	#PKT_EOL_ICE_DOOR_MOTOR_OFF
 0x5209

	)

81 
	#PKT_EOL_ICE_FEEDER_MOTOR_ON
 0x520A

	)

82 
	#PKT_EOL_ICE_FEEDER_MOTOR_OFF
 0x520B

	)

84 
	#PKT_EOL_SWING_BAR_ON
 0x5210

	)

85 
	#PKT_EOL_SWING_BAR_OFF
 0x5211

	)

87 
	#PKT_EOL_HOT_FLOW_VALVE_ON
 0x5212

	)

88 
	#PKT_EOL_HOT_FLOW_VALVE_OFF
 0x5213

	)

90 
	#PKT_EOL_DRAIN_PUMP_ON
 0x5302

	)

91 
	#PKT_EOL_DRAIN_PUMP_OFF
 0x5303

	)

95 
	#PKT_EOL_COMP_ON
 0x9900

	)

96 
	#PKT_EOL_COMP_OFF
 0x9901

	)

98 
	#PKT_EOL_ICE_SYSTEM_ICE
 0x9902

	)

99 
	#PKT_EOL_ICE_SYSTEM_COLD
 0x9903

	)

100 
	#PKT_EOL_ICE_SYSTEM_DEICING
 0x9904

	)

102 
	#PKT_EOL_COMPLETE
 0xFF00

	)

105 
	#PKT_EOL_DEBUG_CONTROL
 0x00E0

	)

106 
	#PKT_EOL_DEBUG_1
 0x00E1

	)

107 
	#PKT_EOL_DEBUG_2
 0x00E2

	)

108 
	#PKT_EOL_DEBUG_3
 0x00E3

	)

109 
	#PKT_EOL_DEBUG_4
 0x00E4

	)

110 
	#PKT_EOL_DEBUG_5
 0x00E5

	)

111 
	#PKT_EOL_DEBUG_6
 0x00E6

	)

112 
	#PKT_EOL_DEBUG_7
 0x00E7

	)

115 
I16
 
IsVÆidPkt_EOL
–
U8
 *
buf
, I16 
Àn
 );

116 
I16
 
P¨£rPkt_EOL
–
U8
 *
buf
, I16 
Àn
);

117 
I16
 
Crc16_EOL
–
U8
 *
buf
, I16 
Àn
 );

118 
I16
 
MakePkt_EOL
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_front.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	~"∑r£r_‰⁄t.h
"

8 
	~"utû.h
"

9 
	~"hÆ_Àd.h
"

10 
	~"hÆ_key.h
"

11 
	~"hÆ_adc.h
"

12 
	~"hÆ_uv.h
"

13 
	~"powî_ßvög.h
"

14 
	~"timî.h
"

15 
	~"voi˚.h
"

16 
	~"‰⁄t.h
"

17 
	~"fûãr.h
"

18 
	~"¥o˚ss_di•œy.h
"

24 
	#STX
 0xAA

	)

25 
	#ETX
 0x55

	)

28 
	#MIN_PKT_SZ
 4

	)

30 
U16
 
	$Rx_CRC_CCITT
(
U8
 *
puchMsg
, 
U16
 
usD©aLí
)

32 
U8
 
i
 = 0;

33 
U16
 
wCRCö
 = 0x0000;

34 
U16
 
wCPﬁy
 = 0x1021;

35 
U8
 
wCh¨
 = 0;

37 
usD©aLí
--)

39 
wCh¨
 = *(
puchMsg
++);

40 
wCRCö
 ^((
U16
)
wCh¨
 << 8);

41 
i
 = 0; i < 8; i++)

43 i‡(
wCRCö
 & 0x8000)

45 
wCRCö
 = (wCRCö << 1Ë^ 
wCPﬁy
;

49 
wCRCö
 = wCRCin << 1;

54  (
wCRCö
);

55 
	}
}

57 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

59 
U16
 
¸c16
 = 0;

63 
¸c16
 = 
	`GET_UINT_WORD
–
buf
[
Àn
-2], buf[len-3] );

65 if–
¸c16
 !
	`Rx_CRC_CCITT
–
buf
, (
U16
)–
Àn
 - 3 ) ) )

67  
FALSE
;

70  
TRUE
;

71 
	}
}

73 
I16
 
	$IsVÆidPkt_Fr⁄t
–
U8
 *
buf
, 
I16
 
Àn
 )

75 if–
buf
 =
NULL
 )

77  
FALSE
;

80 if–
Àn
 < 
MIN_PKT_SZ
 )

82  
FALSE
;

85 if–
	`check_¸c
–
buf
, 
Àn
 ) =
FALSE
 )

87  
FALSE
;

90  
TRUE
;

91 
	}
}

94 
I16
 
P¨£rAckLed
(
U8
 *
buf
);

95 
I16
 
P¨£rAckVoi˚
(
U8
 *
buf
);

97 
	$I16
 (*
	ta˘i⁄_t
)–
	tU8
 *
	tbuf
 );

98 
	s_∑r£r_li°_t


100 
U8
 
Ty≥
;

101 
a˘i⁄_t
 
P¨£r
;

102 } 
	t∑r£r_li°_t
;

103 c⁄° 
∑r£r_li°_t
 
∑r£r_li°
[] =

107 { 
PKT_FRONT_ACK_LED_3
, 
P¨£rAckLed
 },

108 { 
PKT_FRONT_ACK_VOICE
, 
P¨£rAckVoi˚
 }

109 
	}
};

111 
	#SZ_PS_TABLE
 ( –
∑r£r_li°
 ) / –
∑r£r_li°_t
 ))

	)

113 
I16
 
	$P¨£rPkt_Fr⁄t
–
U8
 *
buf
, 
I16
 
Àn
)

115 
U8
 
mu8Ty≥
;

116 
a˘i⁄_t
 
pP¨£r
;

117 
U8
 
i
;

120  
i
 = 0; i < 
SZ_PS_TABLE
; i++ )

122 
mu8Ty≥
 = 
∑r£r_li°
[ 
i
 ].
Ty≥
;

123 
pP¨£r
 = 
∑r£r_li°
[ 
i
 ].
P¨£r
;

125 if–
mu8Ty≥
 =
buf
[1] )

127 if–
pP¨£r
 !
NULL
 )

129 
Àn
 = 
	`pP¨£r
–&
buf
[2] );

130 
	`SèπTimî
–
TIMER_ID_COMM_FRONT_RX_ERR
, 
	`TIMER_SEC
(3));

136  
Àn
;

137 
	}
}

139 
I16
 
	$Crc16_Fr⁄t
–
U8
 *
buf
, 
I16
 
Àn
 )

141 
U16
 
mu16Chksum
 = 0;

144 if–
Àn
 < 
MIN_PKT_SZ
 )

149 
mu16Chksum
 = 
	`Rx_CRC_CCITT
–
buf
, (
U16
)(
Àn
 - 3));

150 
buf
[ 
Àn
 - 3 ] = 
	`GET_HIGH_BYTE
(
mu16Chksum
);

151 
buf
[ 
Àn
 - 2 ] = 
	`GET_LOW_BYTE
(
mu16Chksum
);

153  
Àn
;

154 
	}
}

158 
U32
 
	$M≠pögChp2Cp
(
U32
 
mu32Key
)

160 
U32
 
mu32NewKey
 = 0UL;

162 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_1
 ) != 0 )

164 
mu32NewKey
 |
HAL_KEY_1
;

167 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_2
 ) != 0 )

169 
mu32NewKey
 |
HAL_KEY_14
;

172 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_3
 ) != 0 )

174 
mu32NewKey
 |
HAL_KEY_13
;

177 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_4
 ) != 0 )

179 
mu32NewKey
 |
HAL_KEY_4
;

182 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_5
 ) != 0 )

184 
mu32NewKey
 |
HAL_KEY_5
;

187 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_6
 ) != 0 )

189 
mu32NewKey
 |
HAL_KEY_6
;

198 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_8
 ) != 0 )

200 
mu32NewKey
 |
HAL_KEY_8
;

203 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_9
 ) != 0 )

205 
mu32NewKey
 |
HAL_KEY_15
;

208 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_10
 ) != 0 )

210 
mu32NewKey
 |
HAL_KEY_10
;

213 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_11
 ) != 0 )

215 
mu32NewKey
 |
HAL_KEY_11
;

218 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_12
 ) != 0 )

220 
mu32NewKey
 |
HAL_KEY_12
;

224 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_19
 ) != 0 )

226 
mu32NewKey
 |
HAL_KEY_19
;

229 if–
	`IS_SET_BIT_32
–
mu32Key
, 
HAL_KEY_20
 ) != 0 )

231 
mu32NewKey
 |
HAL_KEY_20
;

235  
mu32NewKey
;

236 
	}
}

240 
U32
 
	$GëKeyVÆMask
(
U32
 
mu32Key
)

242 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

244 
mu32Key
 = 
	`M≠pögChp2Cp
( mu32Key );

247  
mu32Key
;

248 
	}
}

252 
	#HAL_KEY_WATER_OUT
 
HAL_KEY_19


	)

253 
	#HAL_KEY_ICE_OUT
 
HAL_KEY_20


	)

256 
	#MK_MODEL
 0x01

	)

257 
	#MK_FILTER_COVER
 0x02

	)

258 
U32
 
	gdbg_the_key_1
 = 0UL;

259 
U32
 
	gdbg_the_key_2
 = 0UL;

260 
I16
 
	$P¨£rAckLed
(
U8
 *
buf
)

262 
U32
 
mu32Key
;

263 
U32
 
mu32VÆ
;

264 
U16
 
mu16VÆ
;

272 if–(
buf
[4] & 
MK_MODEL
 ) != 0 )

274 
	`SëFr⁄tSy°em
–
SYSTEM_CHP
 );

278 
	`SëFr⁄tSy°em
–
SYSTEM_CP
 );

281 if–(
buf
[4] & 
MK_FILTER_COVER
 ) == 0 )

283 
	`SëFûãrSètus
–
ID_FILTER_COVER
, 
FILTER_CLOSE
 );

287 
	`SëFûãrSètus
–
ID_FILTER_COVER
, 
FILTER_OPEN
 );

292 
mu32VÆ
 = 
	`GET_UINT_WORD_32
–
buf
[0], buf[1], buf[2], buf[3] );

293 
dbg_the_key_1
 = 
mu32VÆ
;

295 
mu32Key
 = 
	`GëKeyVÆMask
–
mu32VÆ
 );

296 
dbg_the_key_2
 = 
mu32Key
;

298 
mu32Key
 = (mu32Key & (~(
HAL_KEY_WATER_OUT
 | 
HAL_KEY_ICE_OUT
)));

299 
	`HAL_SëKeyVÆ
–
mu32Key
 );

302 if–(
mu32VÆ
 & 
HAL_KEY_ICE_OUT
) != 0 )

304 
	`HAL_SëLevîI˚
( 1 );

308 
	`HAL_SëLevîI˚
( 0 );

312 if–(
mu32VÆ
 & 
HAL_KEY_WATER_OUT
) != 0 )

314 
	`HAL_SëLevîW©î
( 1 );

318 
	`HAL_SëLevîW©î
( 0 );

323 
mu16VÆ
 = 
	`GET_UINT_WORD
–
buf
[6], buf[5] );

324 
	`HAL_SëAdcVÆue
–
ANI_UV_WATER_OUT
, 
mu16VÆ
 );

327 
mu16VÆ
 = 
	`GET_UINT_WORD
–
buf
[8], buf[7] );

328 
	`HAL_SëAdcVÆue
–
ANI_UV_ICE_DOOR
, 
mu16VÆ
 );

331 
mu16VÆ
 = 
	`GET_UINT_WORD
–
buf
[10], buf[9] );

334 
mu16VÆ
 = 
	`GET_UINT_WORD
–
buf
[12], buf[11] );

336  
TRUE
;

337 
	}
}

339 
I16
 
	$P¨£rAckVoi˚
(
U8
 *
buf
)

342  
TRUE
;

343 
	}
}

346 
	s_make_li°_t


348 
U8
 
	mTy≥
;

349 
a˘i⁄_t
 
	mMakePkt
;

350 } 
	tmake_li°_t
;

352 
I16
 
MakePktReqLed3
–
U8
 *
buf
 );

354 c⁄° 
make_li°_t
 
	gmake_li°
[] =

356 { 
PKT_FRONT_REQ_LED_3
, 
MakePktReqLed3
 },

359 
	#SZ_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

361 
I16
 
	$MakePkt_Fr⁄t
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 )

363 
U8
 
mu8Ty≥
;

364 
a˘i⁄_t
 
p_make_pkt
;

365 
U8
 
i
;

366 
I16
 
Àn
 = -1;

369  
i
 = 0; i < 
SZ_TABLE
; i++ )

371 
mu8Ty≥
 = 
make_li°
[ 
i
 ].
Ty≥
;

372 
p_make_pkt
 = 
make_li°
[ 
i
 ].
MakePkt
;

374 if–
mu8Ty≥
 =(
U8
)
p_comm
 )

376 if–
p_make_pkt
 !
NULL
 )

378 
Àn
 = 
	`p_make_pkt
–
buf
 );

384  
Àn
;

385 
	}
}

388 
U8
 
	gthe_mode
 = 0;

389 
I16
 
	$MakePktReqLed3
–
U8
 *
buf
 )

391 
I16
 
mi16Lí
 = 0;

392 
U8
 
mu8Buf
[
MAX_LED_BUF
];

393 
U8
 
i
;

394 
U8
 
mVoi˚Vﬁ
;

395 
Voi˚Id_T
 
mVoi˚Id
;

399 
buf
[ 
mi16Lí
++ ] = 
STX
;

402 
buf
[ 
mi16Lí
++ ] = 
PKT_FRONT_REQ_LED_3
;

405 
	`HAL_GëLedOnOffSètus
–&
mu8Buf
[0] );

406  
i
 = 0; i < 
MAX_LED_BUF
 ; i++ )

408 
buf
[ 
mi16Lí
++ ] = 
mu8Buf
[
i
];

412 
	`HAL_GëLedDimmögSètus
–&
mu8Buf
[0]);

413  
i
 = 0; i < 
MAX_LED_BUF
 ; i++ )

415 
buf
[ 
mi16Lí
++ ] = 
mu8Buf
[
i
];

419 
buf
[ 
mi16Lí
++ ] = 
	`HAL_GëLedDimmögDuty
();

422 
buf
[ 
mi16Lí
++ ] = 
	`HAL_GëLedDuty
();

425 
buf
[ 
mi16Lí
++ ] = 
	`HAL_GëUvOnOffSètus
–
HAL_UV_WATER_OUT
 );

428 
buf
[ 
mi16Lí
++ ] = 
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_DOOR
 );

431 
mVoi˚Id
 = 
	`GëVoi˚PœyId
();

432 if–
mVoi˚Id
 !
ID_NONE
 )

434 
	`PœyVoi˚
–
ID_NONE
 );

436 
buf
[ 
mi16Lí
++ ] = (
U8
)
mVoi˚Id
;

438 if–
	`IsVoi˚MaxVﬁ
–
mVoi˚Id
 ) =
TRUE
 )

440 
mVoi˚Vﬁ
 = 
MAX_VOICE_VOLUME
;

444 
mVoi˚Vﬁ
 = 
	`GëVoi˚Vﬁume
();

447 
buf
[ 
mi16Lí
++ ] = 
mVoi˚Vﬁ
;

450 
buf
[ 
mi16Lí
++ ] = 
	`GëFŸaDi•
();

454 
buf
[ 
mi16Lí
++ ] = 0;

455 
buf
[ 
mi16Lí
++ ] = 0;

457 
buf
[ 
mi16Lí
++ ] = 
ETX
;

458  
mi16Lí
;

459 
	}
}

463 
I16
 
	$MakePktReqVoi˚
–
U8
 *
buf
 )

465 
I16
 
mi16Lí
 = 0;

469 
buf
[ 
mi16Lí
++ ] = 
STX
;

472 
buf
[ 
mi16Lí
++ ] = 
PKT_FRONT_REQ_VOICE
;

476 
buf
[ 
mi16Lí
++ ] = 
	`GëVoi˚PœyId
();

480 
buf
[ 
mi16Lí
++ ] = 0;

481 
buf
[ 
mi16Lí
++ ] = 0;

483 
buf
[ 
mi16Lí
++ ] = 
ETX
;

484  
mi16Lí
;

485 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_front.h

1 #i‚de‡
__PARSER_FRONT_H__


2 
	#__PARSER_FRONT_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

8 
	#PKT_FRONT_REQ_LED
 0x01

	)

9 
	#PKT_FRONT_REQ_VOICE
 0x02

	)

10 
	#PKT_FRONT_REQ_LED_2
 0x03

	)

11 
	#PKT_FRONT_REQ_LED_3
 0x04

	)

13 
	#PKT_FRONT_ACK_LED
 0x81

	)

14 
	#PKT_FRONT_ACK_VOICE
 0x82

	)

15 
	#PKT_FRONT_ACK_LED_2
 0x83

	)

16 
	#PKT_FRONT_ACK_LED_3
 0x84

	)

18 
I16
 
IsVÆidPkt_Fr⁄t
–
U8
 *
buf
, I16 
Àn
 );

19 
I16
 
P¨£rPkt_Fr⁄t
–
U8
 *
buf
, I16 
Àn
);

20 
I16
 
Crc16_Fr⁄t
–
U8
 *
buf
, I16 
Àn
 );

21 
I16
 
MakePkt_Fr⁄t
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

9 
	#CONFIG_FOTA_LIB
 0

10 
	#CONFIG_TEST
 0

11 

	)

12 
	#CONFIG_TEST_8585
 0

13 
	#CONFIG_TEST_8585_ICE
 0

14 
	#CONFIG_TEST_8585_FILTER
 0

15 

	)

16 
	#CONFIG_TEST_HOT_WATER
 0

17 
	#CONFIG_TEST_GAS_SWITCH
 0

18 
	#CONFIG_TEST_LED
 0

19 
	#CONFIG_TEST_TEMP_READ
 1

20 
	#CONFIG_TEST_FLOW_METER
 0

21 
	#CONFIG_TEST_HEATER
 0

22 
	#CONFIG_GAS_FILLING
 0

23 
	#CONFIG_UV_MANUAL
 0

24 
	#CONFIG_TEST_HOT_DRAIN
 0

25 
	#CONFIG_TEST_FILTER
 0

26 
	#CONFIG_TANK_REED
 0

27 
	#CONFIG_TEST_OUT_CONTY
 0

28 
	#CONFIG_TEST_HOT_OUT
 0

29 
	#CONFIG_TEST_PREHEAT
 0

30 
	#CONFIG_EOL
 1

31 

	)

33 
	#CONFIG_COMP_ERROR_CODE
 0

34 
	#CONFIG_COMP_ERROR_ONESHOT
 0

35 

	)

37 
	#CONFIG_TEST_COLD_TEMP_UP
 0

38 
	#CONFIG_TEST_COLD_TEMP_DOWN
 0

39 

	)

40 
	#CONFIG_TEST_AMBI_TEMP_UP
 0

41 
	#CONFIG_TEST_AMBI_TEMP_DOWN
 0

42 

	)

44 
	#CONFIG_SYSTEM_CHP
 0

	)

45 
	#CONFIG_SYSTEM_CP
 1

	)

46 
	#CONFIG_SYSTEM_AUTO
 2

	)

47 
	#CONFIG_SYSTEM_TYPE
 
CONFIG_SYSTEM_AUTO


48 

	)

50 
	#CONFIG_JIG_FRONT_UNUSED_UV
 0

51 
	#CONFIG_JIG_RBK_FRONT
 0

52 
	#CONFIG_JIG_GAS_SWITCH
 0

53 

	)

55 
	#CONFIG_STER
 0

	)

58 
	#CONFIG_RTC_TEST
 0

	)

61 
	#CONFIG_BACK_FEEDER
 1

62 

	)

64 
	#CONFIG_ENABLE_DEICING_COOLING
 0

	)

67 
	#CONFIG_ERR_ALL
 1

	)

70 
	#DEBUG_COMM
 0

	)

74 
	#TANK_RO
 0

	)

75 
	#TANK_NT
 1

	)

76 
	#CONFIG_TANK_TYPE
 
TANK_NT


	)

79 
	#VERSION_MAJOR
 12

	)

80 
	#VERSION_MINOR
 0

81 

	)

83 
	#COUNTRY_CODE_KOR
 0

	)

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis.c

1 
	~"hw.h
"

2 
	~"dügnosis.h
"

4 
	~"dügnosis_12v.h
"

5 
	~"dügnosis_24v.h
"

6 
	~"dügnosis_ac.h
"

7 
	~"dügnosis_„edback.h
"

8 
	~"dügnosis_£ns‹.h
"

10 
	~"‰⁄t.h
"

11 
	~"i˚.h
"

12 
	~"comp.h
"

13 
	~"ãmp.h
"

16 
	s_dügnosis_


18 
U8
 
	mSèπ
;

19 
U8
 
	mD⁄e
;

21 
U16
 
	mTŸÆTime
;

22 
U16
 
	mCuºítTime
;

23 
U8
 
	mProgªss
;

24 } 
	tDügnosis_T
;

26 
Dügnosis_T
 
	gDügnosis
;

29 
	#DIAG_TIME_CHP
 550

30 
	#DIAG_TIME_CP
 400

31 
	#DIAG_TIME_AC
 600

32 
U16
 
	`GëDügnosisRunTime
()

	)

34 
U16
 
	gtime
;

36 if–
GëSy°em
(Ë=
SYSTEM_CHP
 )

38 if–
GëCompOnOff
(Ë=
TRUE
 )

40 
time
 = 
DIAG_TIME_CHP
 + 
DIAG_TIME_AC
;

41  
	gtime
;

45 
	gtime
 = 
GëDügnoisCompOnWaôTime
();

46 
	gtime
 +
GëDügnoisCompOffWaôTime
();

47 
	gtime
 +
DIAG_TIME_AC
;

48 if–
	gtime
 > 
	gDIAG_TIME_CHP
 )

50 
	gtime
 -
DIAG_TIME_CHP
;

53  
	gtime
;

58 if–
GëCompOnOff
(Ë=
TRUE
 )

60 
time
 = 
DIAG_TIME_CP
 + 
DIAG_TIME_AC
;

61  
	gtime
;

65 
	gtime
 = 
GëDügnoisCompOnWaôTime
();

66 
	gtime
 +
GëDügnoisCompOffWaôTime
();

67 
	gtime
 +
DIAG_TIME_AC
;

68 if–
	gtime
 > 
	gDIAG_TIME_CP
 )

70 
	gtime
 -
DIAG_TIME_CP
;

73  
	gtime
;

77 
	$SèπDügnosis
()

79 
Dügnosis
.
Sèπ
 = 
TRUE
;

80 
Dügnosis
.
CuºítTime
 = 0;

81 
Dügnosis
.
TŸÆTime
 = 
	`GëDügnosisRunTime
();

84 
	`SèπDügnosis12V
();

85 
	`SèπDügnosis24V
();

86 
	`SèπDügnosisAc
();

87 
	`SèπDügnosisFìdback
();

88 
	`SèπDügnosisSís‹
();

90 
	}
}

92 
	$St›Dügnosis
()

94 
Dügnosis
.
Sèπ
 = 
FALSE
;

96 
	`St›Dügnosis12V
();

97 
	`St›Dügnosis24V
();

98 
	`St›DügnosisAc
();

99 
	`St›DügnosisFìdback
();

100 
	`St›DügnosisSís‹
();

101 
	}
}

103 
U8
 
	$IsSèπDügnosis
()

105  
Dügnosis
.
Sèπ
;

106 
	}
}

109 
	$SëCom∂ëeDügnosis
()

111 
Dügnosis
.
D⁄e
 = 
TRUE
;

112 
	}
}

114 
	$CÀ¨Com∂ëeDügnosis
()

116 
Dügnosis
.
D⁄e
 = 
FALSE
;

117 
	}
}

119 
U8
 
	$GëCom∂ëeDügnosis
()

121  
Dügnosis
.
D⁄e
;

122 
	}
}

125 
	$SëDügnosisProgªss
(
U16
 
mu16TŸÆTime
, U16 
mu16CuºítTime
 )

127 
U16
 
Progªss
 = 0;

129 
Progªss
 = (
U16
)(((
U32
)(
mu16CuºítTime
 * (100UL))Ë/ (U32)
mu16TŸÆTime
);

131 if–
Progªss
 >= 100 )

133 
Dügnosis
.
Progªss
 = 100;

135 if–
Progªss
 >= 90)

137 
Dügnosis
.
Progªss
 = 90;

139 if–
Progªss
 >= 80)

141 
Dügnosis
.
Progªss
 = 80;

143 if–
Progªss
 >= 70)

145 
Dügnosis
.
Progªss
 = 70;

147 if–
Progªss
 >= 60)

149 
Dügnosis
.
Progªss
 = 60;

151 if–
Progªss
 >= 50)

153 
Dügnosis
.
Progªss
 = 50;

155 if–
Progªss
 >= 40)

157 
Dügnosis
.
Progªss
 = 40;

159 if–
Progªss
 >= 30)

161 
Dügnosis
.
Progªss
 = 30;

163 if–
Progªss
 >= 20)

165 
Dügnosis
.
Progªss
 = 20;

167 if–
Progªss
 >= 10)

169 
Dügnosis
.
Progªss
 = 10;

173 
Dügnosis
.
Progªss
 = 0;

175 
	}
}

177 
U8
 
	$GëDügnosisProgªss
()

179  
Dügnosis
.
Progªss
;

180 
	}
}

183 
	$C⁄åﬁDügnosis
()

186 if–
	`IsSèπDügnosis
(Ë=
FALSE
 )

191 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 
DEFAULT_TEMP_READ_TIME
 );

192 
	`Tu∫OnTempSís‹
–
TEMP_ID_ROOM_WATER
, 
DEFAULT_TEMP_READ_TIME
 );

195 if–
	`GëDügnosisP¨t12V
(Ë=
DIAGNOSIS_PART_12V_NONE


196 && 
	`GëDügnosisP¨t24V
(Ë=
DIAGNOSIS_PART_24V_NONE


197 && 
	`GëDügnosisP¨tAc
(Ë=
DIAGNOSIS_PART_AC_NONE


198 && 
	`GëDügnosisP¨tFìdback
(Ë=
DIAGNOSIS_PART_FEEDBACK_NONE


199 && 
	`GëDügnosisP¨tSís‹
(Ë=
DIAGNOSIS_PART_SENSOR_NONE
 )

201 
	`St›Dügnosis
();

202 
	`SëCom∂ëeDügnosis
();

203 
	`SëDügnosisProgªss
(
Dügnosis
.
TŸÆTime
, Diagnosis.TotalTime);

208 
Dügnosis
.
CuºítTime
++;

209 if–
Dügnosis
.
CuºítTime
 >Dügnosis.
TŸÆTime
 )

211 
Dügnosis
.
CuºítTime
 = Dügnosis.
TŸÆTime
 - 1;

213 
	`SëDügnosisProgªss
(
Dügnosis
.
TŸÆTime
, Dügnosis.
CuºítTime
);

215 
	`DügnosisP¨t12VEvítH™dÀr
();

216 
	`DügnosisP¨t24VEvítH™dÀr
();

217 
	`DügnosisP¨tAcEvítH™dÀr
();

218 
	`DügnosisP¨tFìdbackEvítH™dÀr
();

219 if–
	`GëDügnosisP¨t12V
(Ë=
DIAGNOSIS_PART_12V_NONE


220 && 
	`GëDügnosisP¨t24V
(Ë=
DIAGNOSIS_PART_24V_NONE
 )

222 
	`DügnosisP¨tSís‹EvítH™dÀr
();

224 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis.h

1 #i‚de‡
__DIAGNOSIS_H__


2 
	#__DIAGNOSIS_H__


	)

4 
	~"¥j_ty≥.h
"

7 
SèπDügnosis
();

8 
St›Dügnosis
();

9 
U8
 
IsSèπDügnosis
();

11 
SëCom∂ëeDügnosis
();

12 
CÀ¨Com∂ëeDügnosis
();

13 
U8
 
GëCom∂ëeDügnosis
();

16 
SëDügnosisProgªss
(
U16
 
mu16TŸÆTime
, U16 
mu16CuºítTime
 );

17 
U8
 
GëDügnosisProgªss
();

19 
C⁄åﬁDügnosis
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_12v.c

1 
	~"hw.h
"

2 
	~"dügnosis_12v.h
"

4 
	~"hÆ_°ï_mŸ‹.h
"

5 
	~"dügnosis_comm⁄.h
"

6 
	~"dügnosis.h
"

7 
	~"m⁄ô‹ög.h
"

8 
	~"sm¨t_check.h
"

9 
	~"gas_swôch_vÆve.h
"

12 
DoDügnosis12v_T
 
	gDügnosis12v
;

14 
	$SëDügnosisP¨t12V
(
U16
 
mu16P¨t
)

16 
Dügnosis12v
.
Mode
 |
mu16P¨t
;

17 
	}
}

19 
U16
 
	$GëDügnosisP¨t12V
()

21  
Dügnosis12v
.
Mode
;

22 
	}
}

24 
	$CÀ¨DügnosisP¨t12V
(
U16
 
mu16P¨t
)

26 
Dügnosis12v
.
Mode
 &~
mu16P¨t
;

27 
	}
}

29 
U16
 
	$IsSëDügnosisP¨t12V
(
U16
 
mu16P¨t
)

31 i‡–(
Dügnosis12v
.
Mode
 & 
mu16P¨t
 ) == mu16Part )

33  
TRUE
;

36  
FALSE
;

37 
	}
}

39 
	$SèπDügnosis12V
()

41 
Dügnosis12v
.
Mode
 = 
DIAGNOSIS_PART_12V
;

42 
	}
}

44 
	$St›Dügnosis12V
()

46 
Dügnosis12v
.
Mode
 = 
DIAGNOSIS_PART_12V_NONE
;

49 
	`TURN_OFF_SMPS_12V
();

50 
	`TURN_OFF_STEP_MOTOR_GAS_SW_1
();

51 
	`TURN_OFF_STEP_MOTOR_GAS_SW_2
();

52 
	`TURN_OFF_STEP_MOTOR_GAS_SW_3
();

53 
	`TURN_OFF_STEP_MOTOR_GAS_SW_4
();

55 
	`HAL_SëInA˘ive
(
SM_ID_2
, 0 );

56 
	`GasSwôchInô
();

57 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_12V
);

58 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_12V
);

59 
	}
}

63 
	$InôDügnosis12vInô
()

65 
Dügnosis12v
.
SãpInô
 = 
STEP_12V_INIT_START
;

66 
Dügnosis12v
.
SãpGasSwôch
 = 
STEP_12V_GAS_SWITCH_1
;

68 
Dügnosis12v
.
TimeOut
 = 0;

70 
Dügnosis12v
.
Cuºít
 = 0;

71 
	}
}

73 
DSètus_T
 
	$DoDügnosis12vInô
()

75 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

77 
Dügnosis12v
.
SãpInô
)

79 
STEP_12V_INIT_START
 :

80 
Dügnosis12v
.
SãpInô
++;

81 
Dügnosis12v
.
TimeOut
 = 
STER_WAIT_LOAD_CLEAR
;

84 
	`TURN_ON_SMPS_12V
();

85 
	`TURN_OFF_STEP_MOTOR_GAS_SW_1
();

86 
	`TURN_OFF_STEP_MOTOR_GAS_SW_2
();

87 
	`TURN_OFF_STEP_MOTOR_GAS_SW_3
();

88 
	`TURN_OFF_STEP_MOTOR_GAS_SW_4
();

90 
	`HAL_SëInA˘ive
(
SM_ID_2
, 1 );

94 
STEP_12V_INIT_WAIT_STOP_LOAD
 :

95 if–
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_12V
) == 0 )

97 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_12V
);

98 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_12V
);

99 
Dügnosis12v
.
SãpInô
++;

103 i‡–
Dügnosis12v
.
TimeOut
 != 0 )

105 
Dügnosis12v
.
TimeOut
--;

109 
mSètus
 = 
STATUS_ERR
;

110 
Dügnosis12v
.
SãpInô
 = 
STEP_12V_INIT_DONE
;

115 
STEP_12V_INIT_DONE
 :

116 
mSètus
 = 
STATUS_DONE
;

120 
Dügnosis12v
.
SãpInô
 = 
STEP_12V_INIT_START
;

124  
mSètus
;

125 
	}
}

127 
DSètus_T
 
	$DoDügnosisGasSwôch
()

129 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

132 
Dügnosis12v
.
SãpGasSwôch
)

134 
STEP_12V_GAS_SWITCH_1
 :

135 
	`TURN_ON_STEP_MOTOR_GAS_SW_1
();

136 
Dügnosis12v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

137 
Dügnosis12v
.
SãpGasSwôch
++;

140 
STEP_12V_GAS_SWITCH_1_WAIT
 :

141 if–
Dügnosis12v
.
TimeOut
 != 0 )

143 
Dügnosis12v
.
TimeOut
--;

147 
Dügnosis12v
.
Cuºít
 = 
	`GëLﬂdCuºít
(
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
);

148 
	`TURN_OFF_STEP_MOTOR_GAS_SW_1
();

149 
Dügnosis12v
.
SãpGasSwôch
++;

153 
STEP_12V_GAS_SWITCH_2
 :

154 
	`TURN_ON_STEP_MOTOR_GAS_SW_2
();

155 
Dügnosis12v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

156 
Dügnosis12v
.
SãpGasSwôch
++;

159 
STEP_12V_GAS_SWITCH_2_WAIT
 :

160 if–
Dügnosis12v
.
TimeOut
 != 0 )

162 
Dügnosis12v
.
TimeOut
--;

166 
Dügnosis12v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
);

167 
	`TURN_OFF_STEP_MOTOR_GAS_SW_2
();

168 
Dügnosis12v
.
SãpGasSwôch
++;

172 
STEP_12V_GAS_SWITCH_3
 :

173 
	`TURN_ON_STEP_MOTOR_GAS_SW_3
();

174 
Dügnosis12v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

175 
Dügnosis12v
.
SãpGasSwôch
++;

178 
STEP_12V_GAS_SWITCH_3_WAIT
 :

179 if–
Dügnosis12v
.
TimeOut
 != 0 )

181 
Dügnosis12v
.
TimeOut
--;

185 
Dügnosis12v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
);

186 
	`TURN_OFF_STEP_MOTOR_GAS_SW_3
();

187 
Dügnosis12v
.
SãpGasSwôch
++;

191 
STEP_12V_GAS_SWITCH_4
 :

192 
	`TURN_ON_STEP_MOTOR_GAS_SW_4
();

193 
Dügnosis12v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

194 
Dügnosis12v
.
SãpGasSwôch
++;

197 
STEP_12V_GAS_SWITCH_4_WAIT
 :

198 if–
Dügnosis12v
.
TimeOut
 != 0 )

200 
Dügnosis12v
.
TimeOut
--;

204 
Dügnosis12v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
);

205 
	`TURN_OFF_STEP_MOTOR_GAS_SW_4
();

206 
Dügnosis12v
.
SãpGasSwôch
++;

210 
STEP_12V_GAS_SWITCH_DONE
 :

211 
Dügnosis12v
.
Cuºít
 /= 4;

212 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
, 
Dügnosis12v
.
Cuºít
);

213 
mSètus
 = 
STATUS_DONE
;

217 
Dügnosis12v
.
SãpGasSwôch
 = 
STEP_12V_GAS_SWITCH_1
;

221  
mSètus
;

222 
	}
}

226 
DügnosisEvítLi°_T
 
	gDügnosisP¨t12VEvítLi°
[] =

229 { 
DIAGNOSIS_PART_12V_INIT
, 
DoDügnosis12vInô
, 
InôDügnosis12vInô
 },

230 { 
DIAGNOSIS_PART_12V_GAS_SWITCH
, 
DoDügnosisGasSwôch
, 
InôDügnosis12vInô
 },

232 
	#SZ_DIAGNOSIS_PART_12V_EVENT_LIST
 ( (
DügnosisP¨t12VEvítLi°
Ë/ (
DügnosisEvítLi°_T
Ë)

	)

234 
	$DügnosisP¨t12VEvítH™dÀr
()

236 
DSètus_T
 
mSètus
;

237 
U8
 
i
;

238 
DügnosisEvítLi°_T
 *
pLi°
 = 
NULL
;

240  
i
 = 0; i < 
SZ_DIAGNOSIS_PART_12V_EVENT_LIST
 ; i++ )

242 
pLi°
 = &
DügnosisP¨t12VEvítLi°
[ 
i
 ];

245 i‡(
	`IsSëDügnosisP¨t12V
(
pLi°
->
P¨t
Ë=
TRUE
 )

248 
mSètus
 = 
pLi°
->
	`DoA˘i⁄
();

249 i‡–
mSètus
 =
STATUS_DONE
 )

251 
pLi°
->
	`InôA˘i⁄
();

252 
	`CÀ¨DügnosisP¨t12V
–
pLi°
->
P¨t
 );

254 if–
mSètus
 =
STATUS_ERR
 )

257 
	`St›Dügnosis
();

262 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_12v.h

1 #i‚de‡
__DIAGNOSIS_12V_H__


2 
	#__DIAGNOSIS_12V_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mSTEP_12V_INIT_START
,

10 
	mSTEP_12V_INIT_WAIT_STOP_LOAD
,

11 
	mSTEP_12V_INIT_DONE


12 } 
	tDügnosis12vInôSãp_T
;

17 
	mSTEP_12V_GAS_SWITCH_1
,

18 
	mSTEP_12V_GAS_SWITCH_1_WAIT
,

19 
	mSTEP_12V_GAS_SWITCH_2
,

20 
	mSTEP_12V_GAS_SWITCH_2_WAIT
,

21 
	mSTEP_12V_GAS_SWITCH_3
,

22 
	mSTEP_12V_GAS_SWITCH_3_WAIT
,

23 
	mSTEP_12V_GAS_SWITCH_4
,

24 
	mSTEP_12V_GAS_SWITCH_4_WAIT
,

25 
	mSTEP_12V_GAS_SWITCH_DONE


26 } 
	tDügnosis12vGasSwôchSãp_T
;

28 
	s_do_dügnosis_12v_


30 
U16
 
	mMode
;

33 
Dügnosis12vInôSãp_T
 
	mSãpInô
;

34 
Dügnosis12vGasSwôchSãp_T
 
	mSãpGasSwôch
;

37 
U16
 
	mTimeOut
;

39 
U16
 
	mCuºít
;

40 } 
	tDoDügnosis12v_T
;

45 
	#DIAGNOSIS_PART_12V_NONE
 0x0000

	)

46 
	#DIAGNOSIS_PART_12V_INIT
 0x0001

	)

47 
	#DIAGNOSIS_PART_12V_GAS_SWITCH
 0x0002

	)

48 
	#DIAGNOSIS_PART_12V
 \

50 
DIAGNOSIS_PART_12V_INIT
|\

51 
DIAGNOSIS_PART_12V_GAS_SWITCH
\

52 )

	)

55 
SëDügnosisP¨t12V
(
U16
 
mu16P¨t
);

56 
U16
 
GëDügnosisP¨t12V
();

57 
CÀ¨DügnosisP¨t12V
(
U16
 
mu16P¨t
);

58 
U16
 
IsSëDügnosisP¨t12V
(U16 
mu16P¨t
);

60 
SèπDügnosis12V
();

61 
St›Dügnosis12V
();

63 
DügnosisP¨t12VEvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_24v.c

1 
	~"hw.h
"

2 
	~"dügnosis_24v.h
"

4 
	~"dügnosis_comm⁄.h
"

5 
	~"dügnosis.h
"

6 
	~"m⁄ô‹ög.h
"

7 
	~"sm¨t_check.h
"

9 
	~"‰⁄t.h
"

10 
	~"vÆve.h
"

11 
	~"swög_b¨.h
"

12 
	~"hÆ_°ï_mŸ‹.h
"

15 
DoDügnosis24v_T
 
	gDügnosis24v
;

17 
	$SëDügnosisP¨t24V
(
U16
 
mu16P¨t
)

19 
Dügnosis24v
.
Mode
 |
mu16P¨t
;

20 
	}
}

22 
U16
 
	$GëDügnosisP¨t24V
()

24  
Dügnosis24v
.
Mode
;

25 
	}
}

27 
	$CÀ¨DügnosisP¨t24V
(
U16
 
mu16P¨t
)

29 
Dügnosis24v
.
Mode
 &~
mu16P¨t
;

30 
	}
}

32 
U16
 
	$IsSëDügnosisP¨t24V
(
U16
 
mu16P¨t
)

34 i‡–(
Dügnosis24v
.
Mode
 & 
mu16P¨t
 ) == mu16Part )

36  
TRUE
;

39  
FALSE
;

40 
	}
}

42 
	$SèπDügnosis24V
()

44 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

46 
Dügnosis24v
.
Mode
 = 
DIAGNOSIS_PART_24V
;

50 
Dügnosis24v
.
Mode
 = 
DIAGNOSIS_PART_24V_CP
;

52 
	}
}

54 
	$InôLﬂds
()

57 
	`Clo£VÆve
–
VALVE_ALL
 );

58 
	`O≥nVÆve
–
NORMAL_OPEN_VALVES
 );

60 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_1
();

61 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_2
();

62 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_3
();

63 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_4
();

65 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_1
();

66 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_2
();

67 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_3
();

68 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_4
();

70 
	`TURN_OFF_SWING_BAR
();

72 
	}
}

74 
	$St›Dügnosis24V
()

76 
Dügnosis24v
.
Mode
 = 
DIAGNOSIS_PART_24V_NONE
;

78 
	`InôLﬂds
();

80 
	`HAL_SëInA˘ive
(
SM_ID_0
, 0 );

81 
	`HAL_SëInA˘ive
(
SM_ID_1
, 0 );

82 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_24V
);

83 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_24V
);

84 
	}
}

87 
	$InôDügnosis24vInô
()

89 
Dügnosis24v
.
SãpInô
 = 
STEP_24V_INIT_START
;

90 
Dügnosis24v
.
SãpVÆve
 = 
STEP_24V_VALVE_NOS_VALVE
;

91 
Dügnosis24v
.
SãpI˚Do‹
 = 
STEP_24V_ICE_DOOR_1
;

92 
Dügnosis24v
.
SãpFlowVÆve
 = 
STEP_24V_FLOW_VALVE_1
;

93 
Dügnosis24v
.
SãpSwögB¨
 = 
STEP_24V_SWING_BAR
;

95 
Dügnosis24v
.
TimeOut
 = 0;

97 
Dügnosis24v
.
Cuºít
 = 0;

98 
	}
}

100 
DSètus_T
 
	$DoDügnosis24vInô
()

102 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

104 
Dügnosis24v
.
SãpInô
)

106 
STEP_24V_INIT_START
 :

107 
	`InôLﬂds
();

108 
	`HAL_SëInA˘ive
(
SM_ID_0
, 1 );

109 
	`HAL_SëInA˘ive
(
SM_ID_1
, 1 );

111 
Dügnosis24v
.
SãpInô
++;

112 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_CLEAR
;

115 
STEP_24V_INIT_WAIT_STOP_LOAD
 :

116 if–
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_24V
) == 0 )

118 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_24V
);

119 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_24V
);

120 
Dügnosis24v
.
SãpInô
++;

124 i‡–
Dügnosis24v
.
TimeOut
 != 0 )

126 
Dügnosis24v
.
TimeOut
--;

130 
mSètus
 = 
STATUS_ERR
;

131 
Dügnosis24v
.
SãpInô
 = 
STEP_24V_INIT_DONE
;

136 
STEP_24V_INIT_DONE
 :

137 
mSètus
 = 
STATUS_DONE
;

141 
Dügnosis24v
.
SãpInô
 = 
STEP_24V_INIT_START
;

145  
mSètus
;

146 
	}
}

176 
DSètus_T
 
	$DoDügnosisVÆve
()

178 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

180 
Dügnosis24v
.
SãpVÆve
)

182 
STEP_24V_VALVE_NOS_VALVE
 :

183 
	`Clo£VÆve
–
VALVE_NOS
 );

184 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

185 
Dügnosis24v
.
SãpVÆve
++;

188 
STEP_24V_VALVE_NOS_VALVE_WAIT
 :

189 if–
Dügnosis24v
.
TimeOut
 != 0 )

191 
Dügnosis24v
.
TimeOut
--;

195 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0001_VALVE_NOS
, 
	`GëLﬂdCuºít
(WIFI_PART_0001_VALVE_NOS));

196 
	`O≥nVÆve
–
VALVE_NOS
 );

197 
Dügnosis24v
.
SãpVÆve
++;

201 
STEP_24V_VALVE_ROOM_OUT_VALVE
 :

202 
	`O≥nVÆve
–
VALVE_ROOM_OUT
 );

203 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

204 
Dügnosis24v
.
SãpVÆve
++;

207 
STEP_24V_VALVE_ROOM_OUT_VALVE_WAIT
 :

208 if–
Dügnosis24v
.
TimeOut
 != 0 )

210 
Dügnosis24v
.
TimeOut
--;

214 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0003_VALVE_PURE_OUT
, 
	`GëLﬂdCuºít
(WIFI_PART_0003_VALVE_PURE_OUT));

215 
	`Clo£VÆve
–
VALVE_ROOM_OUT
 );

216 
Dügnosis24v
.
SãpVÆve
++;

220 
STEP_24V_VALVE_COLD_OUT_VALVE
 :

221 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

222 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

223 
Dügnosis24v
.
SãpVÆve
++;

226 
STEP_24V_VALVE_COLD_OUT_VALVE_WAIT
 :

227 if–
Dügnosis24v
.
TimeOut
 != 0 )

229 
Dügnosis24v
.
TimeOut
--;

233 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0004_VALVE_COLD_OUT
, 
	`GëLﬂdCuºít
(WIFI_PART_0004_VALVE_COLD_OUT));

234 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

235 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

237 
Dügnosis24v
.
SãpVÆve
++;

241 
Dügnosis24v
.
SãpVÆve
 = 
STEP_24V_VALVE_COLD_AIR_VALVE
;

247 
STEP_24V_VALVE_HOT_OUT_VALVE
 :

248 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

249 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

250 
Dügnosis24v
.
SãpVÆve
++;

253 
STEP_24V_VALVE_HOT_OUT_VALVE_WAIT
 :

254 if–
Dügnosis24v
.
TimeOut
 != 0 )

256 
Dügnosis24v
.
TimeOut
--;

260 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0002_VALVE_HOT_OUT
, 
	`GëLﬂdCuºít
(WIFI_PART_0002_VALVE_HOT_OUT));

261 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

262 
Dügnosis24v
.
SãpVÆve
++;

266 
STEP_24V_VALVE_HOT_IN_VALVE
 :

267 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

268 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

269 
Dügnosis24v
.
SãpVÆve
++;

272 
STEP_24V_VALVE_HOT_IN_VALVE_WAIT
 :

273 if–
Dügnosis24v
.
TimeOut
 != 0 )

275 
Dügnosis24v
.
TimeOut
--;

279 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0009_VALVE_HOT_IN
, 
	`GëLﬂdCuºít
(WIFI_PART_0009_VALVE_HOT_IN));

280 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

281 
Dügnosis24v
.
SãpVÆve
++;

286 
STEP_24V_VALVE_HOT_DRAIN_VALVE
 :

287 
	`Clo£VÆve
–
VALVE_HOT_DRAIN
 );

288 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

289 
Dügnosis24v
.
SãpVÆve
++;

292 
STEP_24V_VALVE_HOT_DRAIN_VALVE_WAIT
 :

293 if–
Dügnosis24v
.
TimeOut
 != 0 )

295 
Dügnosis24v
.
TimeOut
--;

299 
	`SëSm¨tCheckD©aId
(
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
	`GëLﬂdCuºít
(WIFI_PART_000A_VALVE_HOT_DRAIN));

300 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

301 
Dügnosis24v
.
SãpVÆve
++;

305 
STEP_24V_VALVE_COLD_AIR_VALVE
 :

306 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

307 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

308 
Dügnosis24v
.
SãpVÆve
++;

311 
STEP_24V_VALVE_COLD_AIR_VALVE_WAIT
 :

312 if–
Dügnosis24v
.
TimeOut
 != 0 )

314 
Dügnosis24v
.
TimeOut
--;

318 
	`SëSm¨tCheckD©aId
(
WIFI_PART_000B_VALVE_COLD_AIR
, 
	`GëLﬂdCuºít
(WIFI_PART_000B_VALVE_COLD_AIR));

319 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

320 
Dügnosis24v
.
SãpVÆve
++;

325 
STEP_24V_VALVE_COLD_IN_VALVE
 :

326 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

327 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

328 
Dügnosis24v
.
SãpVÆve
++;

331 
STEP_24V_VALVE_COLD_IN_VALVE_WAIT
 :

332 if–
Dügnosis24v
.
TimeOut
 != 0 )

334 
Dügnosis24v
.
TimeOut
--;

338 
	`SëSm¨tCheckD©aId
(
WIFI_PART_000C_VALVE_COLD_IN
, 
	`GëLﬂdCuºít
(WIFI_PART_000C_VALVE_COLD_IN));

339 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

340 
Dügnosis24v
.
SãpVÆve
++;

344 
STEP_24V_VALVE_COLD_DRAIN_VALVE
 :

345 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

346 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

347 
Dügnosis24v
.
SãpVÆve
++;

350 
STEP_24V_VALVE_COLD_DRAIN_VALVE_WAIT
 :

351 if–
Dügnosis24v
.
TimeOut
 != 0 )

353 
Dügnosis24v
.
TimeOut
--;

357 
	`SëSm¨tCheckD©aId
(
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
	`GëLﬂdCuºít
(WIFI_PART_000D_VALVE_COLD_DRAIN));

358 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

360 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

362 
Dügnosis24v
.
SãpVÆve
 = 
STEP_24V_VALVE_ICE_TRAY_VALVE
;

366 
Dügnosis24v
.
SãpVÆve
++;

371 
STEP_24V_VALVE_FLUSHING_VALVE
 :

372 
	`O≥nVÆve
–
VALVE_COLD_FLUSH
 );

373 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

374 
Dügnosis24v
.
SãpVÆve
++;

377 
STEP_24V_VALVE_FLUSHING_VALVE_WAIT
 :

378 if–
Dügnosis24v
.
TimeOut
 != 0 )

380 
Dügnosis24v
.
TimeOut
--;

384 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0018_VALVE_FLUSHING
, 
	`GëLﬂdCuºít
(WIFI_PART_0018_VALVE_FLUSHING));

385 
	`Clo£VÆve
–
VALVE_COLD_FLUSH
 );

386 
Dügnosis24v
.
SãpVÆve
++;

390 
STEP_24V_VALVE_ICE_TRAY_VALVE
 :

391 
	`O≥nVÆve
–
VALVE_ICE_TRAY_IN
 );

392 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_1S
;

393 
Dügnosis24v
.
SãpVÆve
++;

396 
STEP_24V_VALVE_ICE_TRAY_VALVE_WAIT
 :

397 if–
Dügnosis24v
.
TimeOut
 != 0 )

399 
Dügnosis24v
.
TimeOut
--;

403 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
	`GëLﬂdCuºít
(WIFI_PART_0015_VALVE_ICE_TRAY_IN));

404 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

405 
Dügnosis24v
.
SãpVÆve
++;

409 
STEP_24V_VALVE_DONE
 :

410 
mSètus
 = 
STATUS_DONE
;

414 
Dügnosis24v
.
SãpVÆve
 = 
STEP_24V_VALVE_NOS_VALVE
;

418  
mSètus
;

419 
	}
}

422 
DSètus_T
 
	$DoDügnosisFlowVÆve
()

424 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

426 
Dügnosis24v
.
SãpFlowVÆve
)

428 
STEP_24V_FLOW_VALVE_1
 :

429 
	`TURN_ON_STEP_MOTOR_FLOW_VALVE_1
();

430 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

431 
Dügnosis24v
.
SãpFlowVÆve
++;

434 
STEP_24V_FLOW_VALVE_1_WAIT
 :

435 if–
Dügnosis24v
.
TimeOut
 != 0 )

437 
Dügnosis24v
.
TimeOut
--;

441 
Dügnosis24v
.
Cuºít
 = 
	`GëLﬂdCuºít
(
WIFI_PART_0304_HOT_FLOW_MOTOR
);

442 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_1
();

443 
Dügnosis24v
.
SãpFlowVÆve
++;

447 
STEP_24V_FLOW_VALVE_2
 :

448 
	`TURN_ON_STEP_MOTOR_FLOW_VALVE_2
();

449 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

450 
Dügnosis24v
.
SãpFlowVÆve
++;

453 
STEP_24V_FLOW_VALVE_2_WAIT
 :

454 if–
Dügnosis24v
.
TimeOut
 != 0 )

456 
Dügnosis24v
.
TimeOut
--;

460 
Dügnosis24v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0304_HOT_FLOW_MOTOR
);

461 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_2
();

462 
Dügnosis24v
.
SãpFlowVÆve
++;

466 
STEP_24V_FLOW_VALVE_3
 :

467 
	`TURN_ON_STEP_MOTOR_FLOW_VALVE_3
();

468 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

469 
Dügnosis24v
.
SãpFlowVÆve
++;

472 
STEP_24V_FLOW_VALVE_3_WAIT
 :

473 if–
Dügnosis24v
.
TimeOut
 != 0 )

475 
Dügnosis24v
.
TimeOut
--;

479 
Dügnosis24v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0304_HOT_FLOW_MOTOR
);

480 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_3
();

481 
Dügnosis24v
.
SãpFlowVÆve
++;

485 
STEP_24V_FLOW_VALVE_4
 :

486 
	`TURN_ON_STEP_MOTOR_FLOW_VALVE_4
();

487 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

488 
Dügnosis24v
.
SãpFlowVÆve
++;

491 
STEP_24V_FLOW_VALVE_4_WAIT
 :

492 if–
Dügnosis24v
.
TimeOut
 != 0 )

494 
Dügnosis24v
.
TimeOut
--;

498 
Dügnosis24v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0304_HOT_FLOW_MOTOR
);

499 
	`TURN_OFF_STEP_MOTOR_FLOW_VALVE_4
();

500 
Dügnosis24v
.
SãpFlowVÆve
++;

504 
STEP_24V_FLOW_VALVE_DONE
 :

505 
Dügnosis24v
.
Cuºít
 /= 4;

506 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
Dügnosis24v
.
Cuºít
);

507 
mSètus
 = 
STATUS_DONE
;

511 
Dügnosis24v
.
SãpFlowVÆve
 = 
STEP_24V_FLOW_VALVE_1
;

515  
mSètus
;

516 
	}
}

518 
DSètus_T
 
	$DoDügnosisI˚Do‹
()

520 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

523 
Dügnosis24v
.
SãpI˚Do‹
)

525 
STEP_24V_ICE_DOOR_1
 :

526 
	`TURN_ON_STEP_MOTOR_ICE_DOOR_1
();

527 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

528 
Dügnosis24v
.
SãpI˚Do‹
++;

531 
STEP_24V_ICE_DOOR_1_WAIT
 :

532 if–
Dügnosis24v
.
TimeOut
 != 0 )

534 
Dügnosis24v
.
TimeOut
--;

538 
Dügnosis24v
.
Cuºít
 = 
	`GëLﬂdCuºít
(
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
);

539 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_1
();

540 
Dügnosis24v
.
SãpI˚Do‹
++;

544 
STEP_24V_ICE_DOOR_2
 :

545 
	`TURN_ON_STEP_MOTOR_ICE_DOOR_2
();

546 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

547 
Dügnosis24v
.
SãpI˚Do‹
++;

550 
STEP_24V_ICE_DOOR_2_WAIT
 :

551 if–
Dügnosis24v
.
TimeOut
 != 0 )

553 
Dügnosis24v
.
TimeOut
--;

557 
Dügnosis24v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
);

558 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_2
();

559 
Dügnosis24v
.
SãpI˚Do‹
++;

563 
STEP_24V_ICE_DOOR_3
 :

564 
	`TURN_ON_STEP_MOTOR_ICE_DOOR_3
();

565 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

566 
Dügnosis24v
.
SãpI˚Do‹
++;

569 
STEP_24V_ICE_DOOR_3_WAIT
 :

570 if–
Dügnosis24v
.
TimeOut
 != 0 )

572 
Dügnosis24v
.
TimeOut
--;

576 
Dügnosis24v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
);

577 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_3
();

578 
Dügnosis24v
.
SãpI˚Do‹
++;

582 
STEP_24V_ICE_DOOR_4
 :

583 
	`TURN_ON_STEP_MOTOR_ICE_DOOR_4
();

584 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

585 
Dügnosis24v
.
SãpI˚Do‹
++;

588 
STEP_24V_ICE_DOOR_4_WAIT
 :

589 if–
Dügnosis24v
.
TimeOut
 != 0 )

591 
Dügnosis24v
.
TimeOut
--;

595 
Dügnosis24v
.
Cuºít
 +
	`GëLﬂdCuºít
(
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
);

596 
	`TURN_OFF_STEP_MOTOR_ICE_DOOR_4
();

597 
Dügnosis24v
.
SãpI˚Do‹
++;

601 
STEP_24V_ICE_DOOR_DONE
 :

602 
Dügnosis24v
.
Cuºít
 /= 4;

603 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
, 
Dügnosis24v
.
Cuºít
);

604 
mSètus
 = 
STATUS_DONE
;

608 
Dügnosis24v
.
SãpI˚Do‹
 = 
STEP_24V_ICE_DOOR_1
;

612  
mSètus
;

613 
	}
}

616 
DSètus_T
 
	$DoDügnosisSwögB¨
()

618 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

620 
Dügnosis24v
.
SãpSwögB¨
)

622 
STEP_24V_SWING_BAR
 :

623 
	`TURN_ON_SWING_BAR
();

624 
Dügnosis24v
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

625 
Dügnosis24v
.
SãpSwögB¨
++;

628 
STEP_24V_SWING_BAR_WAIT
 :

629 if–
Dügnosis24v
.
TimeOut
 != 0 )

631 
Dügnosis24v
.
TimeOut
--;

635 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0802_ICE_SWING_BAR
, 
	`GëLﬂdCuºít
(WIFI_PART_0802_ICE_SWING_BAR));

636 
	`TURN_OFF_SWING_BAR
();

637 
Dügnosis24v
.
SãpSwögB¨
++;

641 
STEP_24V_SWING_BAR_DONE
 :

642 
mSètus
 = 
STATUS_DONE
;

646 
Dügnosis24v
.
SãpSwögB¨
 = 
STEP_24V_SWING_BAR
;

651  
mSètus
;

652 
	}
}

655 
DügnosisEvítLi°_T
 
	gDügnosisP¨t24VEvítLi°
[] =

658 { 
DIAGNOSIS_PART_24V_INIT
, 
DoDügnosis24vInô
, 
InôDügnosis24vInô
 },

659 { 
DIAGNOSIS_PART_24V_VALVE
, 
DoDügnosisVÆve
, 
InôDügnosis24vInô
 },

660 { 
DIAGNOSIS_PART_24V_FLOW_VALVE
, 
DoDügnosisFlowVÆve
, 
InôDügnosis24vInô
 },

661 { 
DIAGNOSIS_PART_24V_ICE_DOOR
, 
DoDügnosisI˚Do‹
, 
InôDügnosis24vInô
 },

662 { 
DIAGNOSIS_PART_24V_SWING_BAR
, 
DoDügnosisSwögB¨
, 
InôDügnosis24vInô
 },

664 
	#SZ_DIAGNOSIS_PART_24V_EVENT_LIST
 ( (
DügnosisP¨t24VEvítLi°
Ë/ (
DügnosisEvítLi°_T
Ë)

	)

666 
	$DügnosisP¨t24VEvítH™dÀr
()

668 
DSètus_T
 
mSètus
;

669 
U8
 
i
;

670 
DügnosisEvítLi°_T
 *
pLi°
 = 
NULL
;

672  
i
 = 0; i < 
SZ_DIAGNOSIS_PART_24V_EVENT_LIST
 ; i++ )

674 
pLi°
 = &
DügnosisP¨t24VEvítLi°
[ 
i
 ];

677 i‡(
	`IsSëDügnosisP¨t24V
(
pLi°
->
P¨t
Ë=
TRUE
 )

680 
mSètus
 = 
pLi°
->
	`DoA˘i⁄
();

681 i‡–
mSètus
 =
STATUS_DONE
 )

683 
pLi°
->
	`InôA˘i⁄
();

684 
	`CÀ¨DügnosisP¨t24V
–
pLi°
->
P¨t
 );

686 if–
mSètus
 =
STATUS_ERR
 )

689 
	`St›Dügnosis
();

694 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_24v.h

1 #i‚de‡
__DIAGNOSIS_24V_H__


2 
	#__DIAGNOSIS_24V_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mSTEP_24V_INIT_START
,

10 
	mSTEP_24V_INIT_WAIT_STOP_LOAD
,

11 
	mSTEP_24V_INIT_DONE


12 } 
	tDügnosis24vInôSãp_T
;

18 
	mSTEP_24V_VALVE_NOS_VALVE
,

19 
	mSTEP_24V_VALVE_NOS_VALVE_WAIT
,

20 
	mSTEP_24V_VALVE_ROOM_OUT_VALVE
,

21 
	mSTEP_24V_VALVE_ROOM_OUT_VALVE_WAIT
,

22 
	mSTEP_24V_VALVE_COLD_OUT_VALVE
,

23 
	mSTEP_24V_VALVE_COLD_OUT_VALVE_WAIT
,

24 
	mSTEP_24V_VALVE_HOT_OUT_VALVE
,

25 
	mSTEP_24V_VALVE_HOT_OUT_VALVE_WAIT
,

26 
	mSTEP_24V_VALVE_HOT_IN_VALVE
,

27 
	mSTEP_24V_VALVE_HOT_IN_VALVE_WAIT
,

28 
	mSTEP_24V_VALVE_HOT_DRAIN_VALVE
,

29 
	mSTEP_24V_VALVE_HOT_DRAIN_VALVE_WAIT
,

30 
	mSTEP_24V_VALVE_COLD_AIR_VALVE
,

31 
	mSTEP_24V_VALVE_COLD_AIR_VALVE_WAIT
,

32 
	mSTEP_24V_VALVE_COLD_IN_VALVE
,

33 
	mSTEP_24V_VALVE_COLD_IN_VALVE_WAIT
,

34 
	mSTEP_24V_VALVE_COLD_DRAIN_VALVE
,

35 
	mSTEP_24V_VALVE_COLD_DRAIN_VALVE_WAIT
,

36 
	mSTEP_24V_VALVE_FLUSHING_VALVE
,

37 
	mSTEP_24V_VALVE_FLUSHING_VALVE_WAIT
,

38 
	mSTEP_24V_VALVE_ICE_TRAY_VALVE
,

39 
	mSTEP_24V_VALVE_ICE_TRAY_VALVE_WAIT
,

40 
	mSTEP_24V_VALVE_DONE


41 } 
	tDügnosis24vVÆveSãp_T
;

48 
	mSTEP_24V_ICE_DOOR_1
,

49 
	mSTEP_24V_ICE_DOOR_1_WAIT
,

50 
	mSTEP_24V_ICE_DOOR_2
,

51 
	mSTEP_24V_ICE_DOOR_2_WAIT
,

52 
	mSTEP_24V_ICE_DOOR_3
,

53 
	mSTEP_24V_ICE_DOOR_3_WAIT
,

54 
	mSTEP_24V_ICE_DOOR_4
,

55 
	mSTEP_24V_ICE_DOOR_4_WAIT
,

56 
	mSTEP_24V_ICE_DOOR_DONE


57 } 
	tDügnosis24vI˚Do‹Sãp_T
;

64 
	mSTEP_24V_FLOW_VALVE_1
,

65 
	mSTEP_24V_FLOW_VALVE_1_WAIT
,

66 
	mSTEP_24V_FLOW_VALVE_2
,

67 
	mSTEP_24V_FLOW_VALVE_2_WAIT
,

68 
	mSTEP_24V_FLOW_VALVE_3
,

69 
	mSTEP_24V_FLOW_VALVE_3_WAIT
,

70 
	mSTEP_24V_FLOW_VALVE_4
,

71 
	mSTEP_24V_FLOW_VALVE_4_WAIT
,

72 
	mSTEP_24V_FLOW_VALVE_DONE


73 } 
	tDügnosis24vFlowVÆveSãp_T
;

80 
	mSTEP_24V_SWING_BAR
,

81 
	mSTEP_24V_SWING_BAR_WAIT
,

82 
	mSTEP_24V_SWING_BAR_DONE


83 } 
	tDügnosis24vSwögB¨Sãp_T
;

87 
	s_do_dügnosis_24v_


89 
U16
 
	mMode
;

92 
Dügnosis24vInôSãp_T
 
	mSãpInô
;

93 
Dügnosis24vVÆveSãp_T
 
	mSãpVÆve
;

94 
Dügnosis24vFlowVÆveSãp_T
 
	mSãpFlowVÆve
;

95 
Dügnosis24vI˚Do‹Sãp_T
 
	mSãpI˚Do‹
;

96 
Dügnosis24vSwögB¨Sãp_T
 
	mSãpSwögB¨
;

99 
U16
 
	mTimeOut
;

101 
U16
 
	mCuºít
;

102 } 
	tDoDügnosis24v_T
;

107 
	#DIAGNOSIS_PART_24V_NONE
 (0x0000)

	)

108 
	#DIAGNOSIS_PART_24V_INIT
 (0x0001)

	)

109 
	#DIAGNOSIS_PART_24V_VALVE
 (0x0002)

	)

110 
	#DIAGNOSIS_PART_24V_FLOW_VALVE
 (0x0004)

	)

111 
	#DIAGNOSIS_PART_24V_ICE_DOOR
 (0x0008)

	)

112 
	#DIAGNOSIS_PART_24V_SWING_BAR
 (0x0010)

	)

113 
	#DIAGNOSIS_PART_24V
 \

114 (
DIAGNOSIS_PART_24V_INIT
|\

115 
DIAGNOSIS_PART_24V_VALVE
|\

116 
DIAGNOSIS_PART_24V_FLOW_VALVE
| \

117 
DIAGNOSIS_PART_24V_ICE_DOOR
| \

118 
DIAGNOSIS_PART_24V_SWING_BAR
 )

	)

120 
	#DIAGNOSIS_PART_24V_CP
 \

121 (
DIAGNOSIS_PART_24V_INIT
|\

122 
DIAGNOSIS_PART_24V_VALVE
|\

123 
DIAGNOSIS_PART_24V_ICE_DOOR
| \

124 
DIAGNOSIS_PART_24V_SWING_BAR
 )

	)

128 
SëDügnosisP¨t24V
(
U16
 
mu16P¨t
);

129 
U16
 
GëDügnosisP¨t24V
();

130 
CÀ¨DügnosisP¨t24V
(
U16
 
mu16P¨t
);

131 
U16
 
IsSëDügnosisP¨t24V
(U16 
mu16P¨t
);

132 
SèπDügnosis24V
();

133 
St›Dügnosis24V
();

135 
DügnosisP¨t24VEvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_ac.c

1 
	~"hw.h
"

2 
	~"dügnosis_ac.h
"

5 
	~"dügnosis_comm⁄.h
"

6 
	~"dügnosis.h
"

7 
	~"m⁄ô‹ög.h
"

8 
	~"sm¨t_check.h
"

10 
	~"i˚.h
"

11 
	~"i˚_makî.h
"

12 
	~"i˚_åay.h
"

13 
	~"i˚_åay_ã°.h
"

14 
	~"ªœy.h
"

15 
	~"comp.h
"

16 
	~"comp_bldc.h
"

17 
	~"gas_swôch_vÆve.h
"

19 
DoDügnosisAc_T
 
	gDügnosisAc
;

22 
	$SëDügnosisP¨tAc
(
U16
 
mu16P¨t
)

24 
DügnosisAc
.
Mode
 |
mu16P¨t
;

25 
	}
}

27 
U16
 
	$GëDügnosisP¨tAc
()

29  
DügnosisAc
.
Mode
;

30 
	}
}

32 
	$CÀ¨DügnosisP¨tAc
(
U16
 
mu16P¨t
)

34 
DügnosisAc
.
Mode
 &~
mu16P¨t
;

35 
	}
}

37 
U16
 
	$IsSëDügnosisP¨tAc
(
U16
 
mu16P¨t
)

39 i‡–(
DügnosisAc
.
Mode
 & 
mu16P¨t
 ) == mu16Part )

41  
TRUE
;

44  
FALSE
;

45 
	}
}

48 
	$SèπDügnosisAc
()

50 
DügnosisAc
.
Mode
 = 
DIAGNOSIS_PART_AC
;

52 
DügnosisAc
.
IsNìdDummy
 = 
FALSE
;

53 
	}
}

55 
	$St›DügnosisAc
()

57 
DügnosisAc
.
Mode
 = 
DIAGNOSIS_PART_AC_NONE
;

62 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

63 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

65 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

66 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

68 
	`SëCompBldcEº‹Comm
–
FALSE
 );

69 
	`SëCompBldcEº‹Code
–
ERR_BLDC_NONE
 );

70 
	`SëCompBldcLa°edEº‹Code
–
ERR_BLDC_NONE
 );

71 
	`SëCompBldcT¨gëRps
( 0 );

73 
	`CÀ¨I˚MakeMode
(
ICE_MODE_ALL
);

74 if–
DügnosisAc
.
IsNìdDummy
 =
TRUE
 )

76 
DügnosisAc
.
IsNìdDummy
 = 
FALSE
;

77 
	`SëI˚MakeMode
(
ICE_MODE_DUMMY_DEICING
);

81 
	`SëI˚MakeMode
(
ICE_MODE_INIT
|
ICE_MODE_OFF_LOAD
);

83 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_AC
);

84 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_AC
);

85 
	}
}

88 
	$InôDügnosisAcInô
()

90 
DügnosisAc
.
SãpInô
 = 
STEP_AC_INIT_START
;

91 
DügnosisAc
.
SãpI˚Tøy
 = 
STEP_AC_ICE_TRAY_START
;

92 
DügnosisAc
.
SãpBldcComp
 = 
STEP_AC_BLDC_COMP_CHECK
;

94 
DügnosisAc
.
TimeOut
 = 0;

96 
DügnosisAc
.
Icög
 = 0;

97 
DügnosisAc
.
Deicög
 = 0;

98 
DügnosisAc
.
I˚TøySètus
 = 0;

99 
	}
}

101 
DSètus_T
 
	$DoDügnosisAcInô
()

103 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

105 
DügnosisAc
.
SãpInô
)

107 
STEP_AC_INIT_START
 :

109 
	`TURN_OFF_ICE_TRAY_CW
();

110 
	`TURN_OFF_ICE_TRAY_CCW
();

112 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_AC
);

113 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_AC
);

115 
DügnosisAc
.
SãpInô
++;

116 
DügnosisAc
.
TimeOut
 = 
STER_WAIT_LOAD_CLEAR
;

119 
STEP_AC_INIT_DONE
 :

120 
mSètus
 = 
STATUS_DONE
;

124 
DügnosisAc
.
SãpInô
 = 
STEP_AC_INIT_START
;

129  
mSètus
;

130 
	}
}

132 
	#COMP_MIN_ON_TIME
 60

133 
U16
 
	`GëDügnoisCompOnWaôTime
()

	)

135 
U16
 
	gmu16Time
;

136 
U32
 
	gmu32OnTime
;

139 
	gmu32OnTime
 = 
GëCompOnTime
();

141 if–
	gmu32OnTime
 >
COMP_MIN_ON_TIME
 )

146 
	gmu16Time
 = (
U16
)(
COMP_MIN_ON_TIME
 - 
mu32OnTime
);

147 
	gmu16Time
 *= 10;

149  
	gmu16Time
;

153 
	#COMP_MIN_OFF_TIME
 300

154 
U16
 
	`GëDügnoisCompOffWaôTime
()

	)

156 
U16
 
	gmu16Time
;

157 
U32
 
	gmu32OffTime
;

160 
	gmu32OffTime
 = 
GëCompOffTime
();

162 if–
	gmu32OffTime
 >
COMP_MIN_OFF_TIME
 )

167 
	gmu16Time
 = (
U16
)(
COMP_MIN_OFF_TIME
 - 
mu32OffTime
);

168 
	gmu16Time
 *= 10;

170  
	gmu16Time
;

176 
	mDIAG_ERR_BLDC_NONE
,

178 
	mDIAG_ERR_BLDC_COMM
,

179 
	mDIAG_ERR_BLDC_STARTING_FAIL
,

180 
	mDIAG_ERR_BLDC_OVER_CURRENT
,

181 
	mDIAG_ERR_BLDC_ABNORMAL_VOLTAGE
,

182 
	mDIAG_ERR_BLDC_OVERHEAT_CONTROLLER
,

183 
	mDIAG_ERR_BLDC_DISCONNECTION_COMM
,

187 
U32
 
	gdbg_düg_comp_time
 = 0;

188 
DSètus_T
 
	$DoDügnosisBldcComp
()

190 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

192 
DügnosisAc
.
SãpBldcComp
)

194 
STEP_AC_BLDC_COMP_CHECK
 :

195 if–
	`IsTu∫OnCompBldc
(Ë=
TRUE
 )

197 if–
	`GëGasSwôchSètus
(Ë!
GAS_SWITCH_COLD
)

199 
DügnosisAc
.
IsNìdDummy
 = 
TRUE
;

202 
	`SëCompBldcT¨gëRps
–
MIN_RPS
 );

203 
DügnosisAc
.
SãpBldcComp
 = 
STEP_AC_BLDC_COMP_ON
;

207 
	`SëCompBldcEº‹Comm
–
FALSE
 );

208 
	`SëCompBldcEº‹Code
–
ERR_BLDC_NONE
 );

209 
	`SëCompBldcLa°edEº‹Code
–
ERR_BLDC_NONE
 );

210 
DügnosisAc
.
SãpBldcComp
 = 
STEP_AC_BLDC_COMP_OFF
;

215 
STEP_AC_BLDC_COMP_OFF
 :

216 
DügnosisAc
.
TimeOut
 = 
	`GëDügnoisCompOffWaôTime
();

217 
DügnosisAc
.
SãpBldcComp
++;

220 
STEP_AC_BLDC_COMP_OFF_WAIT
 :

221 if–
DügnosisAc
.
TimeOut
 != 0 )

223 
DügnosisAc
.
TimeOut
--;

227 
	`SëCompBldcT¨gëRps
–
MIN_RPS
 );

228 
DügnosisAc
.
SãpBldcComp
++;

232 
STEP_AC_BLDC_COMP_ON
 :

233 
DügnosisAc
.
TimeOut
 = 
	`GëDügnoisCompOnWaôTime
();

234 
DügnosisAc
.
SãpBldcComp
 = 
STEP_AC_BLDC_COMP_WAIT
;

238 
STEP_AC_BLDC_COMP_WAIT
 :

239 if–
DügnosisAc
.
TimeOut
 != 0 )

241 
DügnosisAc
.
TimeOut
--;

245 
U16
 
mu16Eº‹
 = 
DIAG_ERR_BLDC_NONE
;

248 if–
	`GëCompBldcEº‹Comm
(Ë=
TRUE
 )

250 
mu16Eº‹
 = 
DIAG_ERR_BLDC_COMM
;

252 if–
	`GëCompBldcEº‹Code
(Ë!
ERR_BLDC_NONE
 )

254 
mu16Eº‹
 = 
	`GëCompBldcLa°edEº‹Code
(Ë+ 
DIAG_ERR_BLDC_COMM
 ;

257 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0201_COLD_BLDC
, 
mu16Eº‹
 );

258 
	`SëCompBldcT¨gëRps
( 0 );

259 
DügnosisAc
.
SãpBldcComp
++;

263 
STEP_AC_BLDC_COMP_DONE
 :

264 
mSètus
 = 
STATUS_DONE
;

268 
DügnosisAc
.
SãpBldcComp
 = 
STEP_AC_BLDC_COMP_CHECK
;

272 
dbg_düg_comp_time
++;

274  
mSètus
;

275 
	}
}

280 
	mICE_TRAY_STATUS_OK
,

281 
	mICE_TRAY_STATUS_ICING_ERR
,

282 
	mICE_TRAY_STATUS_DEICING_ERR
,

283 
	mICE_TRAY_STATUS_DETECT_ERR
,

286 
U16
 
	gdbg_düg_i˚_åay_time
 = 0;

287 
DSètus_T
 
	$DoDügnosisI˚Tøy
()

289 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

292 
DügnosisAc
.
SãpI˚Tøy
)

294 
STEP_AC_ICE_TRAY_START
 :

296 
	`SèπI˚TøyTe°
();

298 
DügnosisAc
.
TimeOut
 = 
STER_WAIT_LOAD_TRAY_OP
;

299 
DügnosisAc
.
SãpI˚Tøy
++;

302 
STEP_AC_ICE_TRAY_CHECKING
 :

303 if–
	`GëI˚TøyTe°Sètus
(Ë=
FALSE
 )

305 
DügnosisAc
.
SãpI˚Tøy
++;

309 if–
DügnosisAc
.
TimeOut
 != 0 )

311 
DügnosisAc
.
TimeOut
--;

315 
DügnosisAc
.
SãpI˚Tøy
++;

320 
STEP_AC_ICE_TRAY_DONE
 :

321 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

322 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

325 
DügnosisAc
.
Icög
 = 
	`GëI˚TøyTe°CheckIcög
();

326 
DügnosisAc
.
Deicög
 = 
	`GëI˚TøyTe°CheckDeIcög
();

327 if–
DügnosisAc
.
Icög
 == 1

328 && 
DügnosisAc
.
Deicög
 == 1)

330 
DügnosisAc
.
I˚TøySètus
 = 
ICE_TRAY_STATUS_OK
;

332 if–
DügnosisAc
.
Icög
 == 1

333 && 
DügnosisAc
.
Deicög
 == 0)

335 
DügnosisAc
.
I˚TøySètus
 = 
ICE_TRAY_STATUS_DEICING_ERR
;

337 if–
DügnosisAc
.
Icög
 == 0

338 && 
DügnosisAc
.
Deicög
 == 1)

340 
DügnosisAc
.
I˚TøySètus
 = 
ICE_TRAY_STATUS_ICING_ERR
;

344 
DügnosisAc
.
I˚TøySètus
 = 
ICE_TRAY_STATUS_DETECT_ERR
;

347 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0805_ICE_TRAY_SENSING_SW
, 
DügnosisAc
.
I˚TøySètus
);

348 
mSètus
 = 
STATUS_DONE
;

352 
DügnosisAc
.
SãpI˚Tøy
 = 
STEP_AC_ICE_TRAY_START
;

356 
dbg_düg_i˚_åay_time
++;

357  
mSètus
;

358 
	}
}

363 
DügnosisEvítLi°_T
 
	gDügnosisP¨tAcEvítLi°
[] =

366 { 
DIAGNOSIS_PART_AC_INIT
, 
DoDügnosisAcInô
, 
InôDügnosisAcInô
 },

367 { 
DIAGNOSIS_PART_AC_BLDC_COMP
, 
DoDügnosisBldcComp
, 
InôDügnosisAcInô
 },

368 { 
DIAGNOSIS_PART_AC_ICE_TRAY
, 
DoDügnosisI˚Tøy
, 
InôDügnosisAcInô
 },

370 
	#SZ_DIAGNOSIS_PART_AC_EVENT_LIST
 ( (
DügnosisP¨tAcEvítLi°
Ë/ (
DügnosisEvítLi°_T
Ë)

	)

372 
U32
 
	gdbg_the_ac_time
 = 0;

373 
	$DügnosisP¨tAcEvítH™dÀr
()

375 
DSètus_T
 
mSètus
;

376 
U8
 
i
;

377 
DügnosisEvítLi°_T
 *
pLi°
 = 
NULL
;

379  
i
 = 0; i < 
SZ_DIAGNOSIS_PART_AC_EVENT_LIST
 ; i++ )

381 
pLi°
 = &
DügnosisP¨tAcEvítLi°
[ 
i
 ];

384 i‡(
	`IsSëDügnosisP¨tAc
(
pLi°
->
P¨t
Ë=
TRUE
 )

387 
mSètus
 = 
pLi°
->
	`DoA˘i⁄
();

388 i‡–
mSètus
 =
STATUS_DONE
 )

390 
pLi°
->
	`InôA˘i⁄
();

391 
	`CÀ¨DügnosisP¨tAc
–
pLi°
->
P¨t
 );

393 if–
mSètus
 =
STATUS_ERR
 )

396 
	`St›Dügnosis
();

399 
dbg_the_ac_time
++;

403 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_ac.h

1 #i‚de‡
__DIAGNOSIS_AC_H__


2 
	#__DIAGNOSIS_AC_H__


	)

4 
	~"¥j_ty≥.h
"

10 
	mSTEP_AC_INIT_START
,

11 
	mSTEP_AC_INIT_DONE


12 } 
	tDügnosisAcInôSãp_T
;

18 
	mSTEP_AC_ICE_TRAY_START
,

19 
	mSTEP_AC_ICE_TRAY_CHECKING
,

20 
	mSTEP_AC_ICE_TRAY_DONE


21 } 
	tDügnosisAcI˚TøySãp_T
;

27 
	mSTEP_AC_BLDC_COMP_CHECK
,

28 
	mSTEP_AC_BLDC_COMP_OFF
,

29 
	mSTEP_AC_BLDC_COMP_OFF_WAIT
,

30 
	mSTEP_AC_BLDC_COMP_ON
,

31 
	mSTEP_AC_BLDC_COMP_WAIT
,

32 
	mSTEP_AC_BLDC_COMP_DONE


33 } 
	tDügnosisAcBldcCompSãp_T
;

36 
	s_do_dügnosis_ac_


38 
U16
 
	mMode
;

41 
DügnosisAcInôSãp_T
 
	mSãpInô
;

42 
DügnosisAcBldcCompSãp_T
 
	mSãpBldcComp
;

43 
DügnosisAcI˚TøySãp_T
 
	mSãpI˚Tøy
;

46 
U16
 
	mTimeOut
;

48 
U8
 
	mIsNìdDummy
;

49 
U8
 
	mIcög
;

50 
U8
 
	mDeicög
;

51 
U8
 
	mI˚TøySètus
;

52 } 
	tDoDügnosisAc_T
;

55 
	#DIAGNOSIS_PART_AC_NONE
 (0x0000)

	)

56 
	#DIAGNOSIS_PART_AC_INIT
 (0x0001)

	)

57 
	#DIAGNOSIS_PART_AC_BLDC_COMP
 (0x0002)

	)

58 
	#DIAGNOSIS_PART_AC_ICE_TRAY
 (0x0004)

	)

59 
	#DIAGNOSIS_PART_AC
 \

60 (
DIAGNOSIS_PART_AC_INIT
|\

61 
DIAGNOSIS_PART_AC_BLDC_COMP
|\

62 
DIAGNOSIS_PART_AC_ICE_TRAY
)

	)

65 
SëDügnosisP¨tAc
(
U16
 
mu16P¨t
);

66 
U16
 
GëDügnosisP¨tAc
();

67 
CÀ¨DügnosisP¨tAc
(
U16
 
mu16P¨t
);

68 
SèπDügnosisAc
();

69 
St›DügnosisAc
();

71 
U16
 
GëDügnoisCompOffWaôTime
();

72 
U16
 
GëDügnoisCompOnWaôTime
();

74 
U16
 
IsSëDügnosisP¨tAc
(U16 
mu16P¨t
);

75 
DügnosisP¨tAcEvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_common.h

1 #i‚de‡
__DIAGNOSIS_COMMON_H__


2 
	#__DIAGNOSIS_COMMON_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	e_d°©us_


8 
	mSTATUS_GOING
,

9 
	mSTATUS_DONE
,

10 
	mSTATUS_ERR
,

11 } 
	tDSètus_T
;

14 
	$DSètus_T
(*
	tDügnosisDo_T
)();

15 (*
	tDügnosisInôül_T
)();

16 
	s_dügnosis_evít_


18 
U16
 
P¨t
;

19 
DügnosisDo_T
 
DoA˘i⁄
;

20 
DügnosisInôül_T
 
InôA˘i⁄
;

21 } 
	tDügnosisEvítLi°_T
;

23 
	#STER_WAIT_LOAD_CLEAR
 54000U

	)

24 
	#STER_WAIT_LOAD_OP_300MS
 3U

	)

25 
	#STER_WAIT_LOAD_OP_1S
 10U

	)

26 
	#STER_WAIT_LOAD_OP_2S
 20U

	)

27 
	#STER_WAIT_LOAD_OP_3S
 30U

	)

28 
	#STER_WAIT_LOAD_OP_5S
 50U

	)

29 
	#STER_WAIT_LOAD_OP_180S
 1800U

	)

30 
	#STER_WAIT_LOAD_TRAY_OP
 600U

	)

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_feedback.c

1 
	~"hw.h
"

2 
	~"dügnosis_„edback.h
"

4 
	~"dügnosis_comm⁄.h
"

5 
	~"dügnosis.h
"

6 
	~"m⁄ô‹ög.h
"

7 
	~"sm¨t_check.h
"

8 
	~"‰⁄t.h
"

10 
	~"hÆ_uv.h
"

11 
	~"hÆ_pump.h
"

12 
	~"hÆ_Án_mŸ‹.h
"

13 
	~"hóãr_out.h
"

16 
DoDügnosisFìdback_T
 
	gDügnosisFìdback
;

19 
	$SëDügnosisP¨tFìdback
(
U16
 
mu16P¨t
)

21 
DügnosisFìdback
.
Mode
 |
mu16P¨t
;

22 
	}
}

24 
U16
 
	$GëDügnosisP¨tFìdback
()

26  
DügnosisFìdback
.
Mode
;

27 
	}
}

29 
	$CÀ¨DügnosisP¨tFìdback
(
U16
 
mu16P¨t
)

31 
DügnosisFìdback
.
Mode
 &~
mu16P¨t
;

32 
	}
}

34 
U16
 
	$IsSëDügnosisP¨tFìdback
(
U16
 
mu16P¨t
)

36 i‡–(
DügnosisFìdback
.
Mode
 & 
mu16P¨t
 ) == mu16Part )

38  
TRUE
;

41  
FALSE
;

42 
	}
}

45 
	$SèπDügnosisFìdback
()

47 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

49 
DügnosisFìdback
.
Mode
 = 
DIAGNOSIS_PART_FEEDBACK
;

53 
DügnosisFìdback
.
Mode
 = 
DIAGNOSIS_PART_FEEDBACK_CP
;

55 
	}
}

57 
	$St›DügnosisFìdback
()

59 
DügnosisFìdback
.
Mode
 = 
DIAGNOSIS_PART_FEEDBACK_NONE
;

61 
	`InôHóãrOut
();

62 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_FEEDBACK
);

63 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_FEEDBACK
);

64 
	}
}

68 
	$InôDügnosisFìdbackInô
()

70 
DügnosisFìdback
.
SãpInô
 = 
STEP_FEEDBACK_INIT_START
;

71 
DügnosisFìdback
.
SãpUv
 = 
STEP_FEEDBACK_UV_WATER_OUT
;

72 
DügnosisFìdback
.
SãpDøöPump
 = 
STEP_FEEDBACK_DRAIN_PUMP
;

73 
DügnosisFìdback
.
SãpF™
 = 
STEP_FEEDBACK_FAN
;

74 
DügnosisFìdback
.
SãpHóãr
 = 
STEP_FEEDBACK_HEATER_1
;

76 
DügnosisFìdback
.
TimeOut
 = 0;

77 
	}
}

79 
DSètus_T
 
	$DoDügnosisFìdbackInô
()

81 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

83 
DügnosisFìdback
.
SãpInô
)

85 
STEP_FEEDBACK_INIT_START
 :

87 
	`HAL_Tu∫OffUv
–
HAL_UV_WATER_OUT
 );

88 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_DOOR
 );

89 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TANK
 );

90 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TRAY
 );

92 
	`HAL_Tu∫OffF™MŸ‹
();

93 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

95 
	`R_C⁄fig_TAU0_2_St›
();

96 
	`TURN_OFF_HEATER_TRIAC
();

97 
	`TURN_OFF_HEATER_RELAY
();

99 
DügnosisFìdback
.
SãpInô
++;

100 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_CLEAR
;

103 
STEP_FEEDBACK_INIT_WAIT_STOP_LOAD
 :

104 if–
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_FEEDBACK
) == 0 )

106 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_FEEDBACK
);

107 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_FEEDBACK
);

108 
DügnosisFìdback
.
SãpInô
++;

112 i‡–
DügnosisFìdback
.
TimeOut
 != 0 )

114 
DügnosisFìdback
.
TimeOut
--;

118 
mSètus
 = 
STATUS_ERR
;

119 
DügnosisFìdback
.
SãpInô
 = 
STEP_FEEDBACK_INIT_DONE
;

124 
STEP_FEEDBACK_INIT_DONE
 :

125 
mSètus
 = 
STATUS_DONE
;

129 
DügnosisFìdback
.
SãpInô
 = 
STEP_FEEDBACK_INIT_START
;

133  
mSètus
;

134 
	}
}

137 
DSètus_T
 
	$DoDügnosisDøöPump
()

139 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

141 
DügnosisFìdback
.
SãpDøöPump
)

143 
STEP_FEEDBACK_DRAIN_PUMP
 :

144 
	`HAL_Tu∫OnPump
–
HAL_PUMP_DRAIN
, 24.0f );

145 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

146 
DügnosisFìdback
.
SãpDøöPump
++;

149 
STEP_FEEDBACK_DRAIN_PUMP_WAIT
 :

150 if–
DügnosisFìdback
.
TimeOut
 != 0 )

152 
DügnosisFìdback
.
TimeOut
--;

156 
	`SëSm¨tCheckD©aId
(
WIFI_PART_080A_ICE_DRAIN_PUMP
, 
	`GëLﬂdCuºít
(WIFI_PART_080A_ICE_DRAIN_PUMP));

157 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

158 
DügnosisFìdback
.
SãpDøöPump
++;

162 
STEP_FEEDBACK_DRAIN_PUMP_DONE
 :

163 
mSètus
 = 
STATUS_DONE
;

167 
DügnosisFìdback
.
SãpDøöPump
 = 
STEP_FEEDBACK_DRAIN_PUMP
;

171  
mSètus
;

172 
	}
}

175 
DSètus_T
 
	$DoDügnosisF™
()

177 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

179 
DügnosisFìdback
.
SãpF™
)

181 
STEP_FEEDBACK_FAN
 :

182 
	`HAL_Tu∫OnF™MŸ‹
();

183 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

184 
DügnosisFìdback
.
SãpF™
++;

187 
STEP_FEEDBACK_FAN_WAIT
 :

188 if–
DügnosisFìdback
.
TimeOut
 != 0 )

190 
DügnosisFìdback
.
TimeOut
--;

194 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0204_COLD_FAN
, 
	`GëLﬂdCuºít
(WIFI_PART_0204_COLD_FAN));

195 
	`HAL_Tu∫OffF™MŸ‹
();

196 
DügnosisFìdback
.
SãpF™
++;

200 
STEP_FEEDBACK_FAN_DONE
 :

201 
mSètus
 = 
STATUS_DONE
;

205 
DügnosisFìdback
.
SãpF™
 = 
STEP_FEEDBACK_FAN
;

209  
mSètus
;

210 
	}
}

212 
DSètus_T
 
	$DoDügnosisHóãr
()

214 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

216 
DügnosisFìdback
.
SãpHóãr
)

218 
STEP_FEEDBACK_HEATER_1
 :

219 
	`TURN_ON_HEATER_RELAY
();

220 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_2S
;

221 
DügnosisFìdback
.
SãpHóãr
++;

224 
STEP_FEEDBACK_HEATER_1_WAIT
 :

225 if–
DügnosisFìdback
.
TimeOut
 != 0 )

227 
DügnosisFìdback
.
TimeOut
--;

231 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
	`GëLﬂdCuºít
(WIFI_PART_0302_HOT_INSTANT_HEATER_1));

232 
	`TURN_OFF_HEATER_RELAY
();

233 
DügnosisFìdback
.
SãpHóãr
++;

237 
STEP_FEEDBACK_HEATER_2
 :

238 
	`TURN_ON_HEATER_TRIAC
();

239 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_2S
;

240 
DügnosisFìdback
.
SãpHóãr
++;

243 
STEP_FEEDBACK_HEATER_2_WAIT
 :

244 if–
DügnosisFìdback
.
TimeOut
 != 0 )

246 
DügnosisFìdback
.
TimeOut
--;

250 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
	`GëLﬂdCuºít
(WIFI_PART_0303_HOT_INSTANT_HEATER_2));

251 
	`TURN_OFF_HEATER_TRIAC
();

252 
DügnosisFìdback
.
SãpHóãr
++;

256 
STEP_FEEDBACK_HEATER_DONE
 :

257 
mSètus
 = 
STATUS_DONE
;

261 
DügnosisFìdback
.
SãpHóãr
 = 
STEP_FEEDBACK_HEATER_1
;

265  
mSètus
;

266 
	}
}

269 
DSètus_T
 
	$DoDügnosisUv
()

271 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

273 
DügnosisFìdback
.
SãpUv
)

275 
STEP_FEEDBACK_UV_WATER_OUT
 :

276 
	`HAL_Tu∫OnUv
–
HAL_UV_WATER_OUT
 );

277 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

278 
DügnosisFìdback
.
SãpUv
++;

281 
STEP_FEEDBACK_UV_WATER_OUT_WAIT
 :

282 if–
DügnosisFìdback
.
TimeOut
 != 0 )

284 
DügnosisFìdback
.
TimeOut
--;

288 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0501_STER_UV_FAUCET
, 
	`GëLﬂdCuºít
(WIFI_PART_0501_STER_UV_FAUCET));

289 
	`HAL_Tu∫OffUv
–
HAL_UV_WATER_OUT
 );

290 
DügnosisFìdback
.
SãpUv
++;

294 
STEP_FEEDBACK_UV_ICE_DOOR
 :

295 
	`HAL_Tu∫OnUv
–
HAL_UV_ICE_DOOR
 );

296 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

297 
DügnosisFìdback
.
SãpUv
++;

300 
STEP_FEEDBACK_UV_ICE_DOOR_WAIT
 :

301 if–
DügnosisFìdback
.
TimeOut
 != 0 )

303 
DügnosisFìdback
.
TimeOut
--;

307 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
	`GëLﬂdCuºít
(WIFI_PART_0502_STER_UV_FAUCET_ICE));

308 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_DOOR
 );

309 
DügnosisFìdback
.
SãpUv
++;

313 
STEP_FEEDBACK_UV_ICE_TANK
 :

314 
	`HAL_Tu∫OnUv
–
HAL_UV_ICE_TANK
 );

315 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

316 
DügnosisFìdback
.
SãpUv
++;

319 
STEP_FEEDBACK_UV_ICE_TANK_WAIT
 :

320 if–
DügnosisFìdback
.
TimeOut
 != 0 )

322 
DügnosisFìdback
.
TimeOut
--;

326 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0503_STER_UV_ICE_TANK
, 
	`GëLﬂdCuºít
(WIFI_PART_0503_STER_UV_ICE_TANK));

327 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TANK
 );

328 
DügnosisFìdback
.
SãpUv
++;

332 
STEP_FEEDBACK_UV_ICE_TRAY
 :

333 
	`HAL_Tu∫OnUv
–
HAL_UV_ICE_TRAY
 );

334 
DügnosisFìdback
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

335 
DügnosisFìdback
.
SãpUv
++;

338 
STEP_FEEDBACK_UV_ICE_TRAY_WAIT
 :

339 if–
DügnosisFìdback
.
TimeOut
 != 0 )

341 
DügnosisFìdback
.
TimeOut
--;

345 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
	`GëLﬂdCuºít
(WIFI_PART_0504_STER_UV_ICE_TRAY));

346 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TRAY
 );

347 
DügnosisFìdback
.
SãpUv
++;

351 
STEP_FEEDBACK_UV_DONE
 :

352 
mSètus
 = 
STATUS_DONE
;

356 
DügnosisFìdback
.
SãpUv
 = 
STEP_FEEDBACK_UV_WATER_OUT
;

360  
mSètus
;

361 
	}
}

363 
DügnosisEvítLi°_T
 
	gDügnosisP¨tFìdbackEvítLi°
[] =

366 { 
DIAGNOSIS_PART_FEEDBACK_INIT
, 
DoDügnosisFìdbackInô
, 
InôDügnosisFìdbackInô
 },

367 { 
DIAGNOSIS_PART_FEEDBACK_UV
, 
DoDügnosisUv
, 
InôDügnosisFìdbackInô
 },

368 { 
DIAGNOSIS_PART_FEEDBACK_DRAIN_PUMP
, 
DoDügnosisDøöPump
, 
InôDügnosisFìdbackInô
 },

369 { 
DIAGNOSIS_PART_FEEDBACK_FAN
, 
DoDügnosisF™
, 
InôDügnosisFìdbackInô
 },

370 { 
DIAGNOSIS_PART_FEEDBACK_HEATER
, 
DoDügnosisHóãr
, 
InôDügnosisFìdbackInô
 },

372 
	#SZ_DIAGNOSIS_PART_FEEDBACK_EVENT_LIST
 ( (
DügnosisP¨tFìdbackEvítLi°
Ë/ (
DügnosisEvítLi°_T
Ë)

	)

374 
	$DügnosisP¨tFìdbackEvítH™dÀr
()

376 
DSètus_T
 
mSètus
;

377 
U8
 
i
;

378 
DügnosisEvítLi°_T
 *
pLi°
 = 
NULL
;

380  
i
 = 0; i < 
SZ_DIAGNOSIS_PART_FEEDBACK_EVENT_LIST
 ; i++ )

382 
pLi°
 = &
DügnosisP¨tFìdbackEvítLi°
[ 
i
 ];

385 i‡(
	`IsSëDügnosisP¨tFìdback
(
pLi°
->
P¨t
Ë=
TRUE
 )

388 
mSètus
 = 
pLi°
->
	`DoA˘i⁄
();

389 i‡–
mSètus
 =
STATUS_DONE
 )

391 
pLi°
->
	`InôA˘i⁄
();

392 
	`CÀ¨DügnosisP¨tFìdback
–
pLi°
->
P¨t
 );

394 if–
mSètus
 =
STATUS_ERR
 )

397 
	`St›Dügnosis
();

402 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_feedback.h

1 #i‚de‡
__DIAGNOSIS_FEED_BACK_H__


2 
	#__DIAGNOSIS_FEED_BACK_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mSTEP_FEEDBACK_INIT_START
,

10 
	mSTEP_FEEDBACK_INIT_WAIT_STOP_LOAD
,

11 
	mSTEP_FEEDBACK_INIT_DONE


12 } 
	tDügnosisFìdbackInôSãp_T
;

17 
	mSTEP_FEEDBACK_UV_WATER_OUT
,

18 
	mSTEP_FEEDBACK_UV_WATER_OUT_WAIT
,

19 
	mSTEP_FEEDBACK_UV_ICE_DOOR
,

20 
	mSTEP_FEEDBACK_UV_ICE_DOOR_WAIT
,

21 
	mSTEP_FEEDBACK_UV_ICE_TANK
,

22 
	mSTEP_FEEDBACK_UV_ICE_TANK_WAIT
,

23 
	mSTEP_FEEDBACK_UV_ICE_TRAY
,

24 
	mSTEP_FEEDBACK_UV_ICE_TRAY_WAIT
,

25 
	mSTEP_FEEDBACK_UV_DONE


26 } 
	tDügnosisFìdbackUvSãp_T
;

31 
	mSTEP_FEEDBACK_HEATER_1
,

32 
	mSTEP_FEEDBACK_HEATER_1_WAIT
,

33 
	mSTEP_FEEDBACK_HEATER_2
,

34 
	mSTEP_FEEDBACK_HEATER_2_WAIT
,

35 
	mSTEP_FEEDBACK_HEATER_DONE


36 } 
	tDügnosisFìdbackHóãrSãp_T
;

41 
	mSTEP_FEEDBACK_DRAIN_PUMP
,

42 
	mSTEP_FEEDBACK_DRAIN_PUMP_WAIT
,

43 
	mSTEP_FEEDBACK_DRAIN_PUMP_DONE


44 } 
	tDügnosisFìdbackDøöPumpSãp_T
;

49 
	mSTEP_FEEDBACK_FAN
,

50 
	mSTEP_FEEDBACK_FAN_WAIT
,

51 
	mSTEP_FEEDBACK_FAN_DONE


52 } 
	tDügnosisFìdbackF™Sãp_T
;

55 
	s_do_dügnosis_„edback_


57 
U16
 
	mMode
;

60 
DügnosisFìdbackInôSãp_T
 
	mSãpInô
;

61 
DügnosisFìdbackUvSãp_T
 
	mSãpUv
;

62 
DügnosisFìdbackDøöPumpSãp_T
 
	mSãpDøöPump
;

63 
DügnosisFìdbackF™Sãp_T
 
	mSãpF™
;

64 
DügnosisFìdbackHóãrSãp_T
 
	mSãpHóãr
;

67 
U16
 
	mTimeOut
;

68 } 
	tDoDügnosisFìdback_T
;

71 
	#DIAGNOSIS_PART_FEEDBACK_NONE
 (0x0000)

	)

72 
	#DIAGNOSIS_PART_FEEDBACK_INIT
 (0x0001)

	)

73 
	#DIAGNOSIS_PART_FEEDBACK_UV
 (0x0002)

	)

74 
	#DIAGNOSIS_PART_FEEDBACK_DRAIN_PUMP
 (0x0004)

	)

75 
	#DIAGNOSIS_PART_FEEDBACK_FAN
 (0x0008)

	)

76 
	#DIAGNOSIS_PART_FEEDBACK_HEATER
 (0x0010)

	)

77 
	#DIAGNOSIS_PART_FEEDBACK
 \

78 (
DIAGNOSIS_PART_FEEDBACK_INIT
|\

79 
DIAGNOSIS_PART_FEEDBACK_UV
| \

80 
DIAGNOSIS_PART_FEEDBACK_DRAIN_PUMP
|\

81 
DIAGNOSIS_PART_FEEDBACK_FAN
|\

82 
DIAGNOSIS_PART_FEEDBACK_HEATER
)

	)

84 
	#DIAGNOSIS_PART_FEEDBACK_CP
 \

85 (
DIAGNOSIS_PART_FEEDBACK_INIT
|\

86 
DIAGNOSIS_PART_FEEDBACK_UV
| \

87 
DIAGNOSIS_PART_FEEDBACK_DRAIN_PUMP
|\

88 
DIAGNOSIS_PART_FEEDBACK_FAN
)

	)

91 
SëDügnosisP¨tFìdback
(
U16
 
mu16P¨t
);

92 
U16
 
GëDügnosisP¨tFìdback
();

93 
CÀ¨DügnosisP¨tFìdback
(
U16
 
mu16P¨t
);

94 
U16
 
IsSëDügnosisP¨tFìdback
(U16 
mu16P¨t
);

95 
SèπDügnosisFìdback
();

96 
St›DügnosisFìdback
();

98 
DügnosisP¨tFìdbackEvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_sensor.c

1 
	~"hw.h
"

2 
	~"dügnosis_£ns‹.h
"

4 
	~"dügnosis_comm⁄.h
"

5 
	~"dügnosis.h
"

6 
	~"m⁄ô‹ög.h
"

7 
	~"sm¨t_check.h
"

8 
	~"vÆve.h
"

9 
	~"Êow_mëî.h
"

10 
	~"Àak.h
"

11 
	~"hÆ_adc.h
"

15 
DoDügnosisSís‹_T
 
	gDügnosisSís‹
;

18 
	$SëDügnosisP¨tSís‹
(
U16
 
mu16P¨t
)

20 
DügnosisSís‹
.
Mode
 |
mu16P¨t
;

21 
	}
}

23 
U16
 
	$GëDügnosisP¨tSís‹
()

25  
DügnosisSís‹
.
Mode
;

26 
	}
}

28 
	$CÀ¨DügnosisP¨tSís‹
(
U16
 
mu16P¨t
)

30 
DügnosisSís‹
.
Mode
 &~
mu16P¨t
;

31 
	}
}

33 
U16
 
	$IsSëDügnosisP¨tSís‹
(
U16
 
mu16P¨t
)

35 i‡–(
DügnosisSís‹
.
Mode
 & 
mu16P¨t
 ) == mu16Part )

37  
TRUE
;

40  
FALSE
;

41 
	}
}

43 
	$SèπDügnosisSís‹
()

45 
DügnosisSís‹
.
Mode
 = 
DIAGNOSIS_PART_SENSOR
;

47 
	}
}

49 
	$InôLﬂds
()

51 
	`TURN_OFF_LEAK_ONOFF
();

52 
	`TURN_OFF_ICE_INFRARED
();

54 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

55 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

56 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

58 
	}
}

60 
	$St›DügnosisSís‹
()

62 
DügnosisSís‹
.
Mode
 = 
DIAGNOSIS_PART_SENSOR_NONE
;

64 
	`InôLﬂds
();

65 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_SENSOR
);

66 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_SENSOR
);

67 
	}
}

71 
	$InôDügnosisSís‹Inô
()

73 
DügnosisSís‹
.
SãpInô
 = 
STEP_SENSOR_INIT_START
;

74 
DügnosisSís‹
.
SãpI˚FuŒ
 = 
STEP_SENSOR_ICE_FULL
;

75 
DügnosisSís‹
.
SãpLók
 = 
STEP_SENSOR_LEAK
;

76 
DügnosisSís‹
.
SãpFlowMëî
 = 
STEP_SENSOR_FLOW_METER
;

78 
DügnosisSís‹
.
TimeOut
 = 0;

79 
	}
}

81 
DSètus_T
 
	$DoDügnosisSís‹Inô
()

83 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

85 
DügnosisSís‹
.
SãpInô
)

87 
STEP_SENSOR_INIT_START
 :

88 
DügnosisSís‹
.
SãpInô
++;

89 
DügnosisSís‹
.
TimeOut
 = 
STER_WAIT_LOAD_CLEAR
;

91 
	`InôLﬂds
();

93 
DügnosisSís‹
.
Lók
 = 
FALSE
;

96 
STEP_SENSOR_INIT_WAIT_STOP_LOAD
 :

97 if–
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_SENSOR
) == 0 )

99 
	`CÀ¨LﬂdAdc
(
INPUT_SRC_SENSOR
);

100 
	`CÀ¨LﬂdCuºít
(
INPUT_SRC_SENSOR
);

101 
DügnosisSís‹
.
SãpInô
++;

105 i‡–
DügnosisSís‹
.
TimeOut
 != 0 )

107 
DügnosisSís‹
.
TimeOut
--;

111 
mSètus
 = 
STATUS_ERR
;

112 
DügnosisSís‹
.
SãpInô
 = 
STEP_SENSOR_INIT_DONE
;

117 
STEP_SENSOR_INIT_DONE
 :

118 
mSètus
 = 
STATUS_DONE
;

122 
DügnosisSís‹
.
SãpInô
 = 
STEP_SENSOR_INIT_START
;

127  
mSètus
;

128 
	}
}

130 
DSètus_T
 
	$DoDügnosisI˚FuŒ
()

132 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

134 
DügnosisSís‹
.
SãpI˚FuŒ
)

136 
STEP_SENSOR_INIT_START
 :

137 
	`TURN_ON_ICE_INFRARED
();

138 
DügnosisSís‹
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

139 
DügnosisSís‹
.
SãpI˚FuŒ
++;

142 
STEP_SENSOR_INIT_WAIT_STOP_LOAD
 :

143 if–
DügnosisSís‹
.
TimeOut
 != 0 )

145 
DügnosisSís‹
.
TimeOut
--;

149 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0801_ICE_FULL_SENSOR
, 
	`GëLﬂdCuºít
(WIFI_PART_0801_ICE_FULL_SENSOR));

150 
	`TURN_OFF_ICE_INFRARED
();

151 
DügnosisSís‹
.
SãpI˚FuŒ
++;

155 
STEP_SENSOR_INIT_DONE
 :

156 
mSètus
 = 
STATUS_DONE
;

160 
DügnosisSís‹
.
SãpI˚FuŒ
 = 
STEP_SENSOR_ICE_FULL
;

164  
mSètus
;

165 
	}
}

167 
DSètus_T
 
	$DoDügnosisLók
()

169 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

171 
DügnosisSís‹
.
SãpLók
)

173 
STEP_SENSOR_LEAK
 :

174 
	`TURN_ON_LEAK_ONOFF
();

175 
DügnosisSís‹
.
TimeOut
 = 
STER_WAIT_LOAD_OP_5S
;

176 
DügnosisSís‹
.
LókCou¡
 = 
STER_WAIT_LOAD_OP_2S
;

177 
DügnosisSís‹
.
Lók
 = 
FALSE
;

179 
DügnosisSís‹
.
SãpLók
++;

182 
STEP_SENSOR_LEAK_WAIT
 :

183 if–
DügnosisSís‹
.
TimeOut
 != 0 )

185 
DügnosisSís‹
.
TimeOut
--;

187 if–
	`HAL_GëAdcVÆue
–
ANI_SENSOR_LEAK
 ) >
LEAK_ADC_LEVEL
 )

190 if–
DügnosisSís‹
.
LókCou¡
 != 0 )

192 
DügnosisSís‹
.
LókCou¡
--;

197 
DügnosisSís‹
.
LókCou¡
 = 
STER_WAIT_LOAD_OP_2S
;

202 if–
DügnosisSís‹
.
LókCou¡
 == 0 )

204 
DügnosisSís‹
.
Lók
 = 
TRUE
;

207 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0402_SENSOR_LEAK
, 
DügnosisSís‹
.
Lók
 );

208 
	`TURN_OFF_LEAK_ONOFF
();

209 
DügnosisSís‹
.
SãpLók
++;

213 
STEP_SENSOR_LEAK_DONE
 :

214 
mSètus
 = 
STATUS_DONE
;

218 
DügnosisSís‹
.
SãpLók
 = 
STEP_SENSOR_LEAK
;

222  
mSètus
;

223 
	}
}

225 
DSètus_T
 
	$DoDügnosisFlowMëî
()

227 
DSètus_T
 
mSètus
 = 
STATUS_GOING
;

229 
DügnosisSís‹
.
SãpFlowMëî
)

231 
STEP_SENSOR_FLOW_METER
 :

232 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

233 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

234 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

236 
DügnosisSís‹
.
TimeOut
 = 
STER_WAIT_LOAD_OP_300MS
;

237 
DügnosisSís‹
.
SãpFlowMëî
++;

240 
STEP_SENSOR_FLOW_METER_OPEN_DRAIN
:

241 if–
DügnosisSís‹
.
TimeOut
 != 0 )

243 
DügnosisSís‹
.
TimeOut
--;

247 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

249 
DügnosisSís‹
.
TimeOut
 = 
STER_WAIT_LOAD_OP_3S
;

250 
DügnosisSís‹
.
SãpFlowMëî
++;

254 
STEP_SENSOR_FLOW_METER_WAIT
 :

255 if–
DügnosisSís‹
.
TimeOut
 != 0 )

257 
DügnosisSís‹
.
TimeOut
--;

261 
	`SëSm¨tCheckD©aId
(
WIFI_PART_0403_SENSOR_FLOW
, 
	`GëFlowMëîCc
() );

263 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

264 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

265 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

266 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

267 
DügnosisSís‹
.
SãpFlowMëî
++;

271 
STEP_SENSOR_FLOW_METER_DONE
:

272 
mSètus
 = 
STATUS_DONE
;

276 
DügnosisSís‹
.
SãpFlowMëî
 = 
STEP_SENSOR_FLOW_METER
;

280  
mSètus
;

281 
	}
}

283 
DügnosisEvítLi°_T
 
	gDügnosisP¨tSís‹EvítLi°
[] =

286 { 
DIAGNOSIS_PART_SENSOR_INIT
, 
DoDügnosisSís‹Inô
, 
InôDügnosisSís‹Inô
 },

287 { 
DIAGNOSIS_PART_SENSOR_ICE_FULL
, 
DoDügnosisI˚FuŒ
, 
InôDügnosisSís‹Inô
 },

288 { 
DIAGNOSIS_PART_SENSOR_LEAK
, 
DoDügnosisLók
, 
InôDügnosisSís‹Inô
 },

289 { 
DIAGNOSIS_PART_SENSOR_FLOW_METER
, 
DoDügnosisFlowMëî
, 
InôDügnosisSís‹Inô
 },

291 
	#SZ_DIAGNOSIS_PART_SENSOR_EVENT_LIST
 ( (
DügnosisP¨tSís‹EvítLi°
Ë/ (
DügnosisEvítLi°_T
Ë)

	)

293 
	$DügnosisP¨tSís‹EvítH™dÀr
()

295 
DSètus_T
 
mSètus
;

296 
U8
 
i
;

297 
DügnosisEvítLi°_T
 *
pLi°
 = 
NULL
;

299  
i
 = 0; i < 
SZ_DIAGNOSIS_PART_SENSOR_EVENT_LIST
 ; i++ )

301 
pLi°
 = &
DügnosisP¨tSís‹EvítLi°
[ 
i
 ];

304 i‡(
	`IsSëDügnosisP¨tSís‹
(
pLi°
->
P¨t
Ë=
TRUE
 )

307 
mSètus
 = 
pLi°
->
	`DoA˘i⁄
();

308 i‡–
mSètus
 =
STATUS_DONE
 )

310 
pLi°
->
	`InôA˘i⁄
();

311 
	`CÀ¨DügnosisP¨tSís‹
–
pLi°
->
P¨t
 );

313 if–
mSètus
 =
STATUS_ERR
 )

316 
	`St›Dügnosis
();

321 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_sensor.h

1 #i‚de‡
__DIAGNOSIS_SENSOR_H__


2 
	#__DIAGNOSIS_SENSOR_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mSTEP_SENSOR_INIT_START
,

10 
	mSTEP_SENSOR_INIT_WAIT_STOP_LOAD
,

11 
	mSTEP_SENSOR_INIT_DONE


12 } 
	tDügnosisSís‹InôSãp_T
;

17 
	mSTEP_SENSOR_ICE_FULL
,

18 
	mSTEP_SENSOR_ICE_FULL_WAIT
,

19 
	mSTEP_SENSOR_ICE_FULL_DONE


20 } 
	tDügnosisSís‹I˚FuŒSãp_T
;

25 
	mSTEP_SENSOR_LEAK
,

26 
	mSTEP_SENSOR_LEAK_WAIT
,

27 
	mSTEP_SENSOR_LEAK_DONE


28 } 
	tDügnosisSís‹LókSãp_T
;

33 
	mSTEP_SENSOR_FLOW_METER
,

34 
	mSTEP_SENSOR_FLOW_METER_OPEN_DRAIN
,

35 
	mSTEP_SENSOR_FLOW_METER_WAIT
,

36 
	mSTEP_SENSOR_FLOW_METER_DONE


37 } 
	tDügnosisSís‹FlowMëîSãp_T
;

39 
	s_do_dügnosis_£ns‹_


41 
U16
 
	mMode
;

44 
DügnosisSís‹InôSãp_T
 
	mSãpInô
;

45 
DügnosisSís‹I˚FuŒSãp_T
 
	mSãpI˚FuŒ
;

46 
DügnosisSís‹LókSãp_T
 
	mSãpLók
;

47 
DügnosisSís‹FlowMëîSãp_T
 
	mSãpFlowMëî
;

49 
U8
 
	mLók
;

50 
U16
 
	mLókCou¡
;

53 
U16
 
	mTimeOut
;

54 } 
	tDoDügnosisSís‹_T
;

57 
	#DIAGNOSIS_PART_SENSOR_NONE
 (0x0000)

	)

58 
	#DIAGNOSIS_PART_SENSOR_INIT
 (0x0001)

	)

59 
	#DIAGNOSIS_PART_SENSOR_ICE_FULL
 (0x0002)

	)

60 
	#DIAGNOSIS_PART_SENSOR_LEAK
 (0x0004)

	)

61 
	#DIAGNOSIS_PART_SENSOR_FLOW_METER
 (0x0008)

	)

62 
	#DIAGNOSIS_PART_SENSOR
 \

63 (
DIAGNOSIS_PART_SENSOR_INIT
|\

64 
DIAGNOSIS_PART_SENSOR_ICE_FULL
| \

65 
DIAGNOSIS_PART_SENSOR_LEAK
| \

66 
DIAGNOSIS_PART_SENSOR_FLOW_METER
)

	)

69 
SëDügnosisP¨tSís‹
(
U16
 
mu16P¨t
);

70 
U16
 
GëDügnosisP¨tSís‹
();

71 
CÀ¨DügnosisP¨tSís‹
(
U16
 
mu16P¨t
);

72 
U16
 
IsSëDügnosisP¨tSís‹
(U16 
mu16P¨t
);

73 
SèπDügnosisSís‹
();

74 
St›DügnosisSís‹
();

76 
DügnosisP¨tSís‹EvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\monitoring.c

1 
	~"hw.h
"

2 
	~"m⁄ô‹ög.h
"

3 
	~"hÆ_adc.h
"

4 
	~"hÆ_pump.h
"

5 
	~"hÆ_uv.h
"

6 
	~"hóãr_out.h
"

10 
U8
 
	$GasSwôchVavÀOnOff
()

12 
U8
 
OnOffSètus
 = 
OFF
;

14 if–
	`GET_STEP_MOTOR_GAS_SW_1
(Ë=
HIGH


15 || 
	`GET_STEP_MOTOR_GAS_SW_2
(Ë=
HIGH


16 || 
	`GET_STEP_MOTOR_GAS_SW_3
(Ë=
HIGH


17 || 
	`GET_STEP_MOTOR_GAS_SW_4
(Ë=
HIGH
 )

19 
OnOffSètus
 = 
ON
;

22 if–
	`GET_STATUS_SMPS_12V
(Ë=
HIGH
 )

24 
OnOffSètus
 = 
OFF
;

27  
OnOffSètus
;

28 
	}
}

31 
U8
 
	$NosVÆveOnOff
()

33 
U8
 
OnOffSètus
 = 
OFF
;

35 if–
	`GET_STATUS_VALVE_NOS
(Ë=
HIGH
 )

37 
OnOffSètus
 = 
ON
;

40  
OnOffSètus
;

41 
	}
}

44 
U8
 
	$HŸOuçutVÆveOnOff
()

46 
U8
 
OnOffSètus
 = 
OFF
;

48 if–
	`GET_STATUS_VALVE_HOT_OUT
(Ë=
HIGH
 )

50 
OnOffSètus
 = 
ON
;

53  
OnOffSètus
;

54 
	}
}

56 
U8
 
	$RoomOuçutVÆveOnOff
()

58 
U8
 
OnOffSètus
 = 
OFF
;

60 if–
	`GET_STATUS_VALVE_ROOM_OUT
(Ë=
HIGH
 )

62 
OnOffSètus
 = 
ON
;

65  
OnOffSètus
;

66 
	}
}

68 
U8
 
	$CﬁdOuçutVÆveOnOff
()

70 
U8
 
OnOffSètus
 = 
OFF
;

72 if–
	`GET_STATUS_VALVE_COLD_OUT
(Ë=
HIGH
 )

74 
OnOffSètus
 = 
ON
;

77  
OnOffSètus
;

78 
	}
}

80 
U8
 
	$HŸI≈utVÆveOnOff
()

82 
U8
 
OnOffSètus
 = 
OFF
;

84 if–
	`GET_STATUS_VALVE_HOT_IN
(Ë=
HIGH
 )

86 
OnOffSètus
 = 
ON
;

89  
OnOffSètus
;

90 
	}
}

92 
U8
 
	$HŸDøöVÆveOnOff
()

94 
U8
 
OnOffSètus
 = 
OFF
;

96 if–
	`GET_STATUS_VALVE_HOT_DRAIN
(Ë=
HIGH
 )

98 
OnOffSètus
 = 
ON
;

101  
OnOffSètus
;

102 
	}
}

106 
U8
 
	$CﬁdAúVÆveOnOff
()

108 
U8
 
OnOffSètus
 = 
OFF
;

110 if–
	`GET_STATUS_VALVE_COLD_AIR
(Ë=
HIGH
 )

112 
OnOffSètus
 = 
ON
;

115  
OnOffSètus
;

116 
	}
}

118 
U8
 
	$CﬁdI≈utVÆveOnOff
()

120 
U8
 
OnOffSètus
 = 
OFF
;

122 if–
	`GET_STATUS_VALVE_COLD_IN
(Ë=
HIGH
 )

124 
OnOffSètus
 = 
ON
;

127  
OnOffSètus
;

128 
	}
}

130 
U8
 
	$CﬁdDøöVÆveOnOff
()

132 
U8
 
OnOffSètus
 = 
OFF
;

134 if–
	`GET_STATUS_VALVE_COLD_DRAIN
(Ë=
HIGH
 )

136 
OnOffSètus
 = 
ON
;

139  
OnOffSètus
;

140 
	}
}

143 
U8
 
	$I˚TøyI≈utVÆveOnOff
()

145 
U8
 
OnOffSètus
 = 
OFF
;

147 if–
	`GET_STATUS_VALVE_ICE_TRAY_IN
(Ë=
HIGH
 )

149 
OnOffSètus
 = 
ON
;

152  
OnOffSètus
;

153 
	}
}

155 
U8
 
	$FlushVÆveOnOff
()

157 
U8
 
OnOffSètus
 = 
OFF
;

159 if–
	`GET_STATUS_VALVE_COLD_FLUSH
(Ë=
HIGH
 )

161 
OnOffSètus
 = 
ON
;

164  
OnOffSètus
;

165 
	}
}

167 
U8
 
	$FlowMŸ‹OnOff
()

169 
U8
 
OnOffSètus
 = 
OFF
;

171 if–
	`GET_STEP_MOTOR_FLOW_VALVE_1
(Ë=
HIGH


172 || 
	`GET_STEP_MOTOR_FLOW_VALVE_2
(Ë=
HIGH


173 || 
	`GET_STEP_MOTOR_FLOW_VALVE_3
(Ë=
HIGH


174 || 
	`GET_STEP_MOTOR_FLOW_VALVE_4
(Ë=
HIGH
 )

176 
OnOffSètus
 = 
ON
;

179  
OnOffSètus
;

180 
	}
}

182 
U8
 
	$I˚Do‹OnOff
()

184 
U8
 
OnOffSètus
 = 
OFF
;

186 if–
	`GET_STEP_MOTOR_ICE_DOOR_1
(Ë=
HIGH


187 || 
	`GET_STEP_MOTOR_ICE_DOOR_2
(Ë=
HIGH


188 || 
	`GET_STEP_MOTOR_ICE_DOOR_3
(Ë=
HIGH


189 || 
	`GET_STEP_MOTOR_ICE_DOOR_4
(Ë=
HIGH
 )

191 
OnOffSètus
 = 
ON
;

194  
OnOffSètus
;

195 
	}
}

197 
U8
 
	$DøöPumpOnOff
()

199 
U8
 
OnOffSètus
 = 
OFF
;

201 if–
	`HAL_IsTu∫OnDøöPump
(Ë=
TRUE
 )

203 
OnOffSètus
 = 
ON
;

206  
OnOffSètus
;

207 
	}
}

212 
U8
 
	$SwögB¨OnOff
()

214 
U8
 
OnOffSètus
 = 
OFF
;

216 if–
	`GET_STATUS_SWING_BAR
(Ë=
HIGH
 )

218 
OnOffSètus
 = 
ON
;

221  
OnOffSètus
;

222 
	}
}

224 
U8
 
	$F™OnOff
()

226 
U8
 
OnOffSètus
 = 
OFF
;

228 if–
	`GET_STATUS_FAN_MOTOR_1_ONOFF
(Ë=
HIGH
 )

230 
OnOffSètus
 = 
ON
;

233  
OnOffSètus
;

234 
	}
}

236 
U8
 
	$HŸHóãr_1_OnOff
()

238 
U8
 
OnOffSètus
 = 
OFF
;

240 if–
	`GET_STATUS_HEATER_RELAY
(Ë=
HIGH


241 && 
	`GET_STATUS_HEATER_TRIAC
(Ë=
LOW
 )

243 
OnOffSètus
 = 
ON
;

246  
OnOffSètus
;

247 
	}
}

249 
U8
 
	$HŸHóãr_2_OnOff
()

251 
U8
 
OnOffSètus
 = 
OFF
;

253 if–
	`GET_STATUS_HEATER_RELAY
(Ë=
LOW


254 && 
	`GET_STATUS_HEATER_TRIAC
(Ë=
HIGH
 )

256 
OnOffSètus
 = 
ON
;

259  
OnOffSètus
;

260 
	}
}

264 
U8
 
	$UvW©îOutOnOff
()

266 
U8
 
OnOffSètus
 = 
OFF
;

268 if–
	`HAL_GëUvOnOffSètus
–
HAL_UV_WATER_OUT
 ) =
HIGH
 )

270 
OnOffSètus
 = 
ON
;

273 if–
	`GET_STATUS_SMPS_12V
(Ë=
HIGH
 )

275 
OnOffSètus
 = 
OFF
;

278  
OnOffSètus
;

279 
	}
}

281 
U8
 
	$UvI˚Do‹OnOff
()

283 
U8
 
OnOffSètus
 = 
OFF
;

285 if–
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_DOOR
 ) =
HIGH
 )

287 
OnOffSètus
 = 
ON
;

290 if–
	`GET_STATUS_SMPS_12V
(Ë=
HIGH
 )

292 
OnOffSètus
 = 
OFF
;

295  
OnOffSètus
;

296 
	}
}

298 
U8
 
	$UvI˚T™kOnOff
()

300 
U8
 
OnOffSètus
 = 
OFF
;

302 if–
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TANK
 ) =
HIGH
 )

304 
OnOffSètus
 = 
ON
;

307 if–
	`GET_STATUS_SMPS_12V
(Ë=
HIGH
 )

309 
OnOffSètus
 = 
OFF
;

312  
OnOffSètus
;

313 
	}
}

315 
U8
 
	$UvI˚TøyOnOff
()

317 
U8
 
OnOffSètus
 = 
OFF
;

319 if–
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TRAY
 ) =
HIGH
 )

321 
OnOffSètus
 = 
ON
;

324 if–
	`GET_STATUS_SMPS_12V
(Ë=
HIGH
 )

326 
OnOffSètus
 = 
OFF
;

329  
OnOffSètus
;

330 
	}
}

332 
U8
 
	$I˚FuŒOnOff
()

334 
U8
 
OnOffSètus
 = 
OFF
;

336 if–
	`GET_STATUS_ICE_INFRARED
(Ë=
HIGH
 )

338 
OnOffSètus
 = 
ON
;

341  
OnOffSètus
;

342 
	}
}

345 
	$U8
 (*
	tOnOff_T
)();

346 
	s_m⁄ô‹ög_


348 
E_API_A1080_T
 
Id
;

349 
U8
 
AdcId
;

350 
I≈utSrc
 
Src
;

351 
U8
 
OnOffSètus
;

352 
U16
 
Adc
;

353 
U16
 
Cuºít
;

354 
OnOff_T
 
pFOnOff
;

355 } 
	tM⁄ô‹ög_T
;

357 
M⁄ô‹ög_T
 
M⁄ô‹ögLi°
[] =

360 {
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
, 
ANI_12V_FB
, 
INPUT_SRC_12V
, 0, 
INIT_DATA
, INIT_DATA, 
GasSwôchVavÀOnOff
},

363 {
WIFI_PART_0001_VALVE_NOS
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
NosVÆveOnOff
},

364 {
WIFI_PART_0002_VALVE_HOT_OUT
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
HŸOuçutVÆveOnOff
},

365 {
WIFI_PART_0003_VALVE_PURE_OUT
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
RoomOuçutVÆveOnOff
},

366 {
WIFI_PART_0004_VALVE_COLD_OUT
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
CﬁdOuçutVÆveOnOff
},

368 {
WIFI_PART_0009_VALVE_HOT_IN
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
HŸI≈utVÆveOnOff
},

369 {
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
HŸDøöVÆveOnOff
},

370 {
WIFI_PART_000B_VALVE_COLD_AIR
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
CﬁdAúVÆveOnOff
},

371 {
WIFI_PART_000C_VALVE_COLD_IN
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
CﬁdI≈utVÆveOnOff
},

373 {
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
CﬁdDøöVÆveOnOff
},

374 {
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
I˚TøyI≈utVÆveOnOff
},

375 {
WIFI_PART_0018_VALVE_FLUSHING
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
FlushVÆveOnOff
},

377 {
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
FlowMŸ‹OnOff
},

379 {
WIFI_PART_0802_ICE_SWING_BAR
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
SwögB¨OnOff
},

380 {
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
, 
ANI_24V_FB
, 
INPUT_SRC_24V
, 0, 
INIT_DATA
, INIT_DATA, 
I˚Do‹OnOff
},

383 {
WIFI_PART_0204_COLD_FAN
, 
ANI_DC_FAN
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
F™OnOff
},

384 {
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
ANI_HEATER_FB
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
HŸHóãr_1_OnOff
},

385 {
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
ANI_HEATER_FB
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
HŸHóãr_2_OnOff
},

387 {
WIFI_PART_0501_STER_UV_FAUCET
, 
ANI_UV_WATER_OUT
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
UvW©îOutOnOff
},

388 {
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
ANI_UV_ICE_DOOR
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
UvI˚Do‹OnOff
},

389 {
WIFI_PART_0503_STER_UV_ICE_TANK
, 
ANI_UV_ICE_TANK
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
UvI˚T™kOnOff
},

390 {
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
ANI_UV_ICE_TRAY
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
UvI˚TøyOnOff
},

392 {
WIFI_PART_080A_ICE_DRAIN_PUMP
, 
ANI_PUMP_DRAIN_FB
, 
INPUT_SRC_FEEDBACK
, 0, 
INIT_DATA
, INIT_DATA, 
DøöPumpOnOff
},

395 {
WIFI_PART_0801_ICE_FULL_SENSOR
, 
ANI_SENSOR_INFRARED
, 
INPUT_SRC_SENSOR
, 0, 
INIT_DATA
, INIT_DATA, 
I˚FuŒOnOff
}

396 
	}
};

398 
	#SZ_MONITORING_LIST
 ((
M⁄ô‹ögLi°
)/(
M⁄ô‹ög_T
))

	)

399 
U8
 
	$FödIndexM⁄ô‹ögLi°
–
E_API_A1080_T
 
id
, 
U8
 *
pIndex
 )

401 
U8
 
i
 = 0;

403  
i
 = 0; i < 
SZ_MONITORING_LIST
; i++ )

405 if–
M⁄ô‹ögLi°
[ 
i
 ].
Id
 =
id
 )

407 if–
pIndex
 !
NULL
 )

409 *
pIndex
 = 
i
;

412  
TRUE
;

416  
FALSE
;

417 
	}
}

419 
	$CÀ¨LﬂdAdc
(
U8
 
Src
)

421 
U8
 
i
=0;

423 
i
=0; i<
SZ_MONITORING_LIST
; i++)

425 if(
M⁄ô‹ögLi°
[
i
].
Src
 == Src)

427 
M⁄ô‹ögLi°
[
i
].
Adc
 = 
INIT_DATA
;

430 
	}
}

432 
	$CÀ¨LﬂdCuºít
(
U8
 
Src
)

434 
U8
 
i
=0;

436 
i
=0; i<
SZ_MONITORING_LIST
; i++)

438 if(
M⁄ô‹ögLi°
[
i
].
Src
 == Src)

440 
M⁄ô‹ögLi°
[
i
].
Cuºít
 = 
INIT_DATA
;

443 
	}
}

446 
U16
 
	$GëLﬂdAdc
(
E_API_A1080_T
 
Id
)

448 
U16
 
mu16Adc
 = 0;

449 
U8
 
Index
 = 0;

451 if–
	`FödIndexM⁄ô‹ögLi°
–
Id
, &
Index
 ) =
TRUE
 )

453 
mu16Adc
 = 
M⁄ô‹ögLi°
[
Index
].
Adc
;

456  
mu16Adc
;

457 
	}
}

459 
	$SëLﬂdAdc
(
E_API_A1080_T
 
Id
, 
U16
 
mu16Adc
)

461 
U8
 
Index
 = 0;

463 if–
	`FödIndexM⁄ô‹ögLi°
–
Id
, &
Index
 ) =
TRUE
 )

465 
M⁄ô‹ögLi°
[
Index
].
Adc
 = 
mu16Adc
;

467 
	}
}

470 
U16
 
	$GëLﬂdCuºít
(
E_API_A1080_T
 
Id
)

472 
U16
 
mu16Cuºít
 = 0;

473 
U8
 
Index
 = 0;

475 if–
	`FödIndexM⁄ô‹ögLi°
–
Id
, &
Index
 ) =
TRUE
 )

477 
mu16Cuºít
 = 
M⁄ô‹ögLi°
[
Index
].
Cuºít
;

480  
mu16Cuºít
;

481 
	}
}

483 
	$SëLﬂdCuºít
(
E_API_A1080_T
 
Id
, 
U16
 
mu16Cuºít
)

485 
U8
 
Index
 = 0;

487 if–
	`FödIndexM⁄ô‹ögLi°
–
Id
, &
Index
 ) =
TRUE
 )

489 
M⁄ô‹ögLi°
[
Index
].
Cuºít
 = 
mu16Cuºít
;

491 
	}
}

494 
U8
 
	$GëLﬂdPowîOnOffSètus
(
I≈utSrc
 
Src
)

496 
U8
 
i
 = 0;

497 
U8
 
OnOffC¡
 = 0;

498 
M⁄ô‹ög_T
 *
pLi°
 = 
NULL
;

500 
i
=0; i<
SZ_MONITORING_LIST
; i++)

502 
pLi°
 = &
M⁄ô‹ögLi°
[
i
];

504 if–
pLi°
->
Src
 == Src )

506 
OnOffC¡
 +
pLi°
->
OnOffSètus
;

510  
OnOffC¡
;

511 
	}
}

514 
U16
 
	$CÆcCuºít
(
I≈utSrc
 
Src
, 
E_API_A1080_T
 
Id
, 
U16
 
mu16Adc
 )

516 
F32
 
mf32C€fficõ¡
 = 0.0f;

517 
F32
 
mf32Cuºít
 = 0.0f;

519 if–
Src
 =
INPUT_SRC_12V
 )

521 
mf32C€fficõ¡
 = 2.37f;

523 if–
Src
 =
INPUT_SRC_24V
 )

525 
mf32C€fficõ¡
 = 2.37f;

527 if–
Src
 =
INPUT_SRC_AC
 )

529 
mf32C€fficõ¡
 = 2.37f;

531 if–
Src
 =
INPUT_SRC_FEEDBACK
 )

533 if–
Id
 =
WIFI_PART_0209_COLD_ROTATE_PUMP
)

535 
mf32C€fficõ¡
 = 0.444f;

537 if–
Id
 =
WIFI_PART_080A_ICE_DRAIN_PUMP
)

539 
mf32C€fficõ¡
 = 0.444f;

541 if–
Id
 =
WIFI_PART_0204_COLD_FAN
)

543 
mf32C€fficõ¡
 = 0.488f;

545 if–
Id
 =
WIFI_PART_0500_STER_CSI_MODULE
)

547 
mf32C€fficõ¡
 = 1.110f;

549 if–
Id
 =
WIFI_PART_0501_STER_UV_FAUCET
)

551 
mf32C€fficõ¡
 = 0.488f;

553 if–
Id
 =
WIFI_PART_0502_STER_UV_FAUCET_ICE
 )

555 
mf32C€fficõ¡
 = 0.488f;

557 if–
Id
 =
WIFI_PART_0503_STER_UV_ICE_TANK
)

559 
mf32C€fficõ¡
 = 0.488f;

561 if–
Id
 =
WIFI_PART_0504_STER_UV_ICE_TRAY
)

563 
mf32C€fficõ¡
 = 0.488f;

565 if–
Id
 =
WIFI_PART_0302_HOT_INSTANT_HEATER_1


566 || 
Id
 =
WIFI_PART_0303_HOT_INSTANT_HEATER_2
)

568  
mu16Adc
;

575  
mu16Adc
;

578 
mf32Cuºít
 = (
F32
)
mu16Adc
 * 
mf32C€fficõ¡
;

579 
mf32Cuºít
 += 0.5f;

580  (
U16
)(
mf32Cuºít
);

581 
	}
}

583 
U8
 
	gDebug12vC¡
 = 0;

584 
U8
 
	gDebug24vC¡
 = 0;

585 
U8
 
	gDebugAcC¡
 = 0;

586 
U8
 
	gDebugFìdbackC¡
 = 0;

587 
U8
 
	gDebugSís‹C¡
 = 0;

589 
U16
 
	gDebugAdc
 = 0;

590 
U16
 
	gDebugCuºít
 = 0;

591 
	$C⁄åﬁM⁄ô‹ög
()

593 
U8
 
i
 = 0;

594 
M⁄ô‹ög_T
 *
pLi°
 = 
NULL
;

597 
i
=0; i<
SZ_MONITORING_LIST
; i++)

599 
pLi°
 = &
M⁄ô‹ögLi°
[
i
];

601 
pLi°
->
OnOffSètus
 =ÖLi°->
	`pFOnOff
();

605 
i
=0; i<
SZ_MONITORING_LIST
; i++)

607 
pLi°
 = &
M⁄ô‹ögLi°
[
i
];

609 if–
pLi°
->
OnOffSètus
 =
HIGH
 )

611 if–
pLi°
->
Src
 <
INPUT_SRC_AC
)

613 if(
	`GëLﬂdPowîOnOffSètus
(
pLi°
->
Src
) != 1)

619 
pLi°
->
Adc
 = 
	`HAL_GëAdcVÆue
’Li°->
AdcId
);

620 
pLi°
->
Cuºít
 = 
	`CÆcCuºít
’Li°->
Src
,ÖLi°->
Id
,ÖLi°->
Adc
);

625 
Debug12vC¡
 = 
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_12V
);

626 
Debug24vC¡
 = 
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_24V
);

627 
DebugAcC¡
 = 
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_AC
);

628 
DebugFìdbackC¡
 = 
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_FEEDBACK
);

629 
DebugSís‹C¡
 = 
	`GëLﬂdPowîOnOffSètus
(
INPUT_SRC_SENSOR
);

631 
DebugAdc
 = 
	`GëLﬂdAdc
(
WIFI_PART_0809_ICE_HOT_GAS_VV
);

632 
DebugCuºít
 = 
	`GëLﬂdCuºít
(
WIFI_PART_0809_ICE_HOT_GAS_VV
);

633 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\monitoring.h

1 #i‚de‡
__MONITORING_H__


2 
	#__MONITORING_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"WIFI_SëP¨tD©a.h
"

10 
	#INIT_DATA
 9999U

	)

12 
	e_öput_§c_


15 
	mINPUT_SRC_12V
,

16 
	mINPUT_SRC_24V
,

17 
	mINPUT_SRC_AC
,

18 
	mINPUT_SRC_FEEDBACK
,

19 
	mINPUT_SRC_SENSOR
,

21 } 
	tI≈utSrc
;

24 
CÀ¨LﬂdAdc
(
U8
 
Src
);

25 
CÀ¨LﬂdCuºít
(
U8
 
Src
);

27 
U16
 
GëLﬂdAdc
(
E_API_A1080_T
 
Id
);

28 
SëLﬂdAdc
(
E_API_A1080_T
 
Id
, 
U16
 
mu16Adc
);

30 
U16
 
GëLﬂdCuºít
(
E_API_A1080_T
 
Id
);

31 
SëLﬂdCuºít
(
E_API_A1080_T
 
Id
, 
U16
 
mu16Cuºít
);

33 
U8
 
GëLﬂdPowîOnOffSètus
(
I≈utSrc
 
Src
);

35 
C⁄åﬁM⁄ô‹ög
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display.c

1 
	~"di•œy.h
"

2 
	~"hÆ_Àd.h
"

3 
	~"di•œy_lib.h
"

4 
	~"di•œy_˛ock.h
"

5 
	~"døö.h
"

6 
	~"w©î_out.h
"

7 
	~"powî_ßvög.h
"

8 
	~"i˚.h
"

9 
	~"i˚_fuŒ.h
"

10 
	~"i˚_makî.h
"

11 
	~"cﬁd_w©î.h
"

12 
	~"hŸ_w©î.h
"

13 
	~"comp.h
"

14 
	~"gas_swôch_vÆve.h
"

15 
	~"‰⁄t.h
"

16 
	~"voi˚.h
"

17 
	~"powî_ßvög.h
"

21 
U8
 
	ggu8Digô
[10] =

27 
	#CHAR_O
 0x3F

	)

28 
	#CHAR_n
 0x54

	)

29 
	#CHAR_F
 0x71

	)

30 
	#CHAR_S
 0x6D

	)

31 
	#CHAR_T
 0x78

	)

32 
	#CHAR_E
 0x79

	)

33 
	#CHAR_o
 0x5C

	)

34 
	#CHAR_C
 0x39

	)

35 
	#CHAR_H
 0x76

	)

36 
	#CHAR_A
 0x77

	)

37 
	#CHAR_P
 0x73

	)

38 
	#CHAR_SPACE
 0x00

	)

39 
	#BAR_LEFT
 0x30

	)

40 
	#BAR_RIGHT
 0x06

	)

41 
	#BAR_TOP
 0x01

	)

42 
	#BAR_CENTER
 0x40

	)

43 
	#BAR_BOTTOM
 0x08

	)

44 
	#BAR_BRAKET_LEFT
 0x39

45 
	#BAR_BRAKET_RIGHT
 0x0F

46 
	#BAR_TOP_BOTTOM
 0x09

47 
	#RING_TOP
 0x63

48 
	#RING_BOTTOM
 0x5C

	)

49 
	#STACK_BAR_CENTER
 (
BAR_CENTER
|
BAR_BOTTOM
)

	)

50 
	#STACK_BAR_TOP
 (
BAR_CENTER
|
BAR_BOTTOM
|
BAR_TOP
)

	)

52 
	#SEG_OFF
 0x00

53 
	#SEG_A
 0x01

54 
	#SEG_B
 0x02

55 
	#SEG_C
 0x04

56 
	#SEG_D
 0x08

57 
	#SEG_E
 0x10

58 
	#SEG_F
 0x20

59 
	#SEG_G
 0x40

60 

	)

61 
	#SEG_EF
 (
SEG_E
|
SEG_F
)

	)

62 
	#SEG_EFA
 (
SEG_E
|
SEG_F
|
SEG_A
)

	)

63 
	#SEG_EFAD
 (
SEG_E
|
SEG_F
|
SEG_A
|
SEG_D
)

	)

64 
	#SEG_FAD
 (
SEG_F
|
SEG_A
|
SEG_D
)

	)

65 
	#SEG_AD
 (
SEG_A
|
SEG_D
)

	)

66 
	#SEG_AB
 (
SEG_A
|
SEG_B
)

	)

67 
	#SEG_ABC
 (
SEG_A
|
SEG_B
|
SEG_C
)

	)

68 
	#SEG_ABCD
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
)

	)

69 
	#SEG_BCD
 (
SEG_B
|
SEG_C
|
SEG_D
)

	)

70 
	#SEG_CD
 (
SEG_C
|
SEG_D
)

	)

74 
	#SEGMENT_1
 
SEG_3_G


	)

75 
	#SEGMENT_10
 
SEG_2_G


	)

76 
	#SEGMENT_100
 
SEG_1_G


	)

77 
	#SEGMENT_1000
 
SEG_0_C


	)

78 
	$Di•Segmít
(
U8
 
mu8Seg
, U8 
mu8VÆ
)

80 
LedId_T
 
mLedId
;

82 if–
mu8Seg
 =
SEGMENT_1000
 )

84 
mLedId
 = (
LedId_T
)
mu8Seg
;

85 
	`HAL_Tu∫OnOffLED
–
mLedId
, ((
mu8VÆ
 & 0x04) >> 2) );

86 
	`HAL_Tu∫OnOffLED
–(
LedId_T
)(
mLedId
 + 1), ((
mu8VÆ
 & 0x02) >> 1) );

90 
mLedId
 = (
LedId_T
)
mu8Seg
;

91 
	`HAL_Tu∫OnOffLED
–
mLedId
, ((
mu8VÆ
 & 0x40) >> 6) );

92 
	`HAL_Tu∫OnOffLED
–(
LedId_T
)(
mLedId
 + 1), ((
mu8VÆ
 & 0x20) >> 5) );

93 
	`HAL_Tu∫OnOffLED
–(
LedId_T
)(
mLedId
 + 2), ((
mu8VÆ
 & 0x10) >> 4) );

94 
	`HAL_Tu∫OnOffLED
–(
LedId_T
)(
mLedId
 + 3), ((
mu8VÆ
 & 0x08) >> 3) );

95 
	`HAL_Tu∫OnOffLED
–(
LedId_T
)(
mLedId
 + 4), ((
mu8VÆ
 & 0x04) >> 2) );

96 
	`HAL_Tu∫OnOffLED
–(
LedId_T
)(
mLedId
 + 5), ((
mu8VÆ
 & 0x02) >> 1) );

97 
	`HAL_Tu∫OnOffLED
–(
LedId_T
)(
mLedId
 + 6), (
mu8VÆ
 & 0x01) );

99 
	}
}

102 
	$Di•SegemítEf„˘
(
U8
 
mu8Seg
, U8 
mu8VÆ
)

104 
LedId_T
 
mLedId
;

106 if–
mu8Seg
 =
SEGMENT_1000
 )

108 
mLedId
 = 
mu8Seg
;

110 
	`HAL_DimmögLed
–
mLedId
, ((
mu8VÆ
 & 0x04) >> 2) );

111 
	`HAL_DimmögLed
–
mLedId
 + 1, ((
mu8VÆ
 & 0x02) >> 1) );

115 
mLedId
 = 
mu8Seg
;

116 
	`HAL_DimmögLed
–
mLedId
, ((
mu8VÆ
 & 0x40) >> 6) );

117 
	`HAL_DimmögLed
–
mLedId
 + 1, ((
mu8VÆ
 & 0x20) >> 5) );

118 
	`HAL_DimmögLed
–
mLedId
 + 2, ((
mu8VÆ
 & 0x10) >> 4) );

119 
	`HAL_DimmögLed
–
mLedId
 + 3, ((
mu8VÆ
 & 0x08) >> 3) );

120 
	`HAL_DimmögLed
–
mLedId
 + 4, ((
mu8VÆ
 & 0x04) >> 2) );

121 
	`HAL_DimmögLed
–
mLedId
 + 5, ((
mu8VÆ
 & 0x02) >> 1) );

122 
	`HAL_DimmögLed
–
mLedId
 + 6, (
mu8VÆ
 & 0x01) );

124 
	}
}

128 
	$Di•SegmítDigôEf„˘
(
U16
 
mu16VÆ
)

130 
U16
 
mu16PªvVÆ
 = 0;

132 if–
mu16PªvVÆ
 !
mu16VÆ
 )

134 
mu16PªvVÆ
 = 
mu16VÆ
;

135 
	`Di•SegemítEf„˘
–
SEGMENT_100
, 
gu8Digô
[ 8 ] );

136 
	`Di•SegemítEf„˘
–
SEGMENT_10
, 
gu8Digô
[ 8 ] );

137 
	`Di•SegemítEf„˘
–
SEGMENT_1
, 
gu8Digô
[ 8 ] );

141 
	`Di•SegemítEf„˘
–
SEGMENT_100
, 
CHAR_SPACE
 );

142 
	`Di•SegemítEf„˘
–
SEGMENT_10
, 
CHAR_SPACE
 );

143 
	`Di•SegemítEf„˘
–
SEGMENT_1
, 
CHAR_SPACE
 );

146 
	`Di•SegmítDigô
–
mu16VÆ
 );

147 
	}
}

150 
	$Di•SegmítDigô
(
U16
 
mu16VÆ
)

152 
U8
 
mu8VÆ_1000
;

153 
U8
 
mu8VÆ_100
;

154 
U8
 
mu8VÆ_10
;

155 
U8
 
mu8VÆ_1
;

157 
mu8VÆ_1000
 = (
U8
)(
mu16VÆ
 / 1000);

158 
mu8VÆ_100
 = (
U8
)((
mu16VÆ
 % 1000) / 100);

159 
mu8VÆ_10
 = (
U8
)((
mu16VÆ
 % 100) / 10);

160 
mu8VÆ_1
 = (
U8
)((
mu16VÆ
 % 10));

162 if–
mu8VÆ_1000
 > 0 )

164 
	`Di•Segmít
–
SEGMENT_1000
, 
gu8Digô
[ 
mu8VÆ_1000
 ] );

168 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

171 if–
mu8VÆ_100
 > 0 || 
mu8VÆ_1000
 > 0)

173 
	`Di•Segmít
–
SEGMENT_100
, 
gu8Digô
[ 
mu8VÆ_100
 ] );

177 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_SPACE
 );

180 if–
mu8VÆ_10
 > 0 || 
mu8VÆ_100
 > 0 || 
mu8VÆ_1000
 > 0 )

182 
	`Di•Segmít
–
SEGMENT_10
, 
gu8Digô
[ 
mu8VÆ_10
 ] );

186 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_SPACE
 );

189 
	`Di•Segmít
–
SEGMENT_1
, 
gu8Digô
[ 
mu8VÆ_1
 ] );

190 
	}
}

197 
	$Di•CíãrVÆ
(
U8
 
mu8VÆ
)

199 if–
mu8VÆ
 > 9 )

201 
mu8VÆ
 = 9;

203 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

204 
	`Di•Segmít
–
SEGMENT_100
, 
BAR_CENTER
 );

205 
	`Di•Segmít
–
SEGMENT_10
, 
gu8Digô
[
mu8VÆ
] );

206 
	`Di•Segmít
–
SEGMENT_1
, 
BAR_CENTER
 );

207 
	}
}

210 
	$Di•SegmítCh¨
(
U8
 
mu8Ch¨Id
)

212 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_ON
 )

214 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

215 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_O
 );

216 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_n
 );

217 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
);

219 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_OFF
 )

221 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

222 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_O
 );

223 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_F
 );

224 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_F
 );

226 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CON
 )

228 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

229 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_C
 );

230 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_o
 );

231 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_n
 );

233 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_STACK_BAR_CENTER
 )

235 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

236 
	`Di•Segmít
–
SEGMENT_100
, 
STACK_BAR_CENTER
 );

237 
	`Di•Segmít
–
SEGMENT_10
, 
STACK_BAR_CENTER
 );

238 
	`Di•Segmít
–
SEGMENT_1
, 
STACK_BAR_CENTER
 );

240 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_STACK_BAR_TOP
 )

242 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

243 
	`Di•Segmít
–
SEGMENT_100
, 
STACK_BAR_TOP
 );

244 
	`Di•Segmít
–
SEGMENT_10
, 
STACK_BAR_TOP
 );

245 
	`Di•Segmít
–
SEGMENT_1
, 
STACK_BAR_TOP
 );

247 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_BAR_BOTTOM
 )

249 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

250 
	`Di•Segmít
–
SEGMENT_100
, 
BAR_BOTTOM
 );

251 
	`Di•Segmít
–
SEGMENT_10
, 
BAR_BOTTOM
 );

252 
	`Di•Segmít
–
SEGMENT_1
, 
BAR_BOTTOM
 );

254 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_BAR_CENTER
 )

256 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

257 
	`Di•Segmít
–
SEGMENT_100
, 
BAR_CENTER
 );

258 
	`Di•Segmít
–
SEGMENT_10
, 
BAR_CENTER
 );

259 
	`Di•Segmít
–
SEGMENT_1
, 
BAR_CENTER
 );

261 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_BAR_TOP
 )

263 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

264 
	`Di•Segmít
–
SEGMENT_100
, 
BAR_TOP
 );

265 
	`Di•Segmít
–
SEGMENT_10
, 
BAR_TOP
 );

266 
	`Di•Segmít
–
SEGMENT_1
, 
BAR_TOP
 );

268 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CHP
 )

270 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

271 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_C
 );

272 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_H
 );

273 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_P
 );

275 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CP
 )

277 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

278 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_C
 );

279 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_P
 );

280 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
 );

282 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CIRCLE
 )

284 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

285 
	`Di•Segmít
–
SEGMENT_100
, 
BAR_BRAKET_LEFT
 );

286 
	`Di•Segmít
–
SEGMENT_10
, 
BAR_TOP_BOTTOM
 );

287 
	`Di•Segmít
–
SEGMENT_1
, 
BAR_BRAKET_RIGHT
 );

289 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_ICE_1
 )

291 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

292 
	`Di•Segmít
–
SEGMENT_100
, 
RING_TOP
 );

293 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_SPACE
 );

294 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
 );

296 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_ICE_2
 )

298 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

299 
	`Di•Segmít
–
SEGMENT_100
, 
RING_BOTTOM
 );

300 
	`Di•Segmít
–
SEGMENT_10
, 
RING_TOP
 );

301 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
 );

303 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_ICE_3
 )

305 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

306 
	`Di•Segmít
–
SEGMENT_100
, 
RING_TOP
 );

307 
	`Di•Segmít
–
SEGMENT_10
, 
RING_BOTTOM
 );

308 
	`Di•Segmít
–
SEGMENT_1
, 
RING_TOP
 );

310 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_ICE_4
 )

312 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

313 
	`Di•Segmít
–
SEGMENT_100
, 
RING_BOTTOM
 );

314 
	`Di•Segmít
–
SEGMENT_10
, 
RING_TOP
 );

315 
	`Di•Segmít
–
SEGMENT_1
, 
RING_BOTTOM
 );

317 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CENTER_1
 )

319 
	`Di•CíãrVÆ
( 1 );

321 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CENTER_2
 )

323 
	`Di•CíãrVÆ
( 2 );

325 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CENTER_3
 )

327 
	`Di•CíãrVÆ
( 3 );

329 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_SE
 )

331 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

332 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_SPACE
 );

333 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_S
 );

334 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_E
 );

336 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_CO
 )

338 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

339 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_SPACE
 );

340 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_C
 );

341 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_O
 );

343 if–
mu8Ch¨Id
 =
SEGMENT_CHAR_ID_STE
 )

345 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

346 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_S
 );

347 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_T
 );

348 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_E
 );

353 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

354 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_SPACE
 );

355 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_SPACE
 );

356 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
 );

358 
	}
}

360 
	$Di•SegmítOff
()

363 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
OFF
 );

364 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
OFF
 );

365 
	`HAL_Tu∫OnOffLED
–
COLON
, 
OFF
 );

367 
	`HAL_Tu∫OnOffLED
–
ICON_PERCENT
, 
OFF
 );

368 
	`HAL_Tu∫OnOffLED
–
ICON_ML
, 
OFF
 );

369 
	`HAL_Tu∫OnOffLED
–
ICON_CELSIUS
, 
OFF
 );

371 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

372 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_SPACE
 );

373 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_SPACE
 );

374 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
 );

375 
	}
}

377 
	$Di•SegmítEº‹
(
U8
 
mu8EºCode
 )

379 
U8
 
mu8VÆ_10
;

380 
U8
 
mu8VÆ_1
;

383 if–
mu8EºCode
 == 0xFF )

385 
	`Di•SegmítOff
();

390 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
OFF
 );

391 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
OFF
 );

392 
	`HAL_Tu∫OnOffLED
–
COLON
, 
OFF
 );

394 
	`HAL_Tu∫OnOffLED
–
ICON_PERCENT
, 
OFF
 );

395 
	`HAL_Tu∫OnOffLED
–
ICON_ML
, 
OFF
 );

396 
	`HAL_Tu∫OnOffLED
–
ICON_CELSIUS
, 
OFF
 );

398 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

399 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_E
 );

401 
mu8VÆ_10
 = (
U8
)((
mu8EºCode
 % 100) / 10);

402 
mu8VÆ_1
 = (
U8
)((
mu8EºCode
 % 10));

403 if–
mu8VÆ_10
 > 0 )

405 
	`Di•Segmít
–
SEGMENT_10
, 
gu8Digô
[ 
mu8VÆ_10
 ] );

409 
	`Di•Segmít
–
SEGMENT_10
, 
gu8Digô
[ 0 ] );

412 
	`Di•Segmít
–
SEGMENT_1
, 
gu8Digô
[ 
mu8VÆ_1
 ] );

414 
	}
}

416 
	$Di•SegmítWifiEº‹
(
U8
 
mu8EºCode
 )

418 
U8
 
mu8VÆ_1
;

421 if–
mu8EºCode
 == 0xFF )

423 
	`Di•SegmítOff
();

428 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
OFF
 );

429 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
OFF
 );

430 
	`HAL_Tu∫OnOffLED
–
COLON
, 
OFF
 );

432 
	`HAL_Tu∫OnOffLED
–
ICON_PERCENT
, 
OFF
 );

433 
	`HAL_Tu∫OnOffLED
–
ICON_ML
, 
OFF
 );

434 
	`HAL_Tu∫OnOffLED
–
ICON_CELSIUS
, 
OFF
 );

436 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

437 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_A
 );

438 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_P
 );

440 
mu8VÆ_1
 = (
U8
)((
mu8EºCode
 % 10));

441 
	`Di•Segmít
–
SEGMENT_1
, 
gu8Digô
[ 
mu8VÆ_1
 ] );

443 
	}
}

447 
	#BIG_CIRCLE_1
 
SEG_A_5


	)

448 
	#BIG_CIRCLE_2
 
SEG_A_6


	)

449 
	#BIG_CIRCLE_3
 
SEG_A_1


	)

450 
	#BIG_CIRCLE_4
 
SEG_B_1


	)

451 
	#BIG_CIRCLE_5
 
SEG_C_1


	)

452 
	#BIG_CIRCLE_6
 
SEG_C_2


	)

453 
	#BIG_CIRCLE_7
 
SEG_C_3


	)

454 
	#BIG_CIRCLE_8
 
SEG_C_4


	)

455 
	#BIG_CIRCLE_9
 
SEG_B_4


	)

456 
	#BIG_CIRCLE_10
 
SEG_A_4


	)

457 
LedId_T
 
	ggBigCú˛e
[ 10 ] =

459 
BIG_CIRCLE_1
,

460 
BIG_CIRCLE_2
,

461 
BIG_CIRCLE_3
,

462 
BIG_CIRCLE_4
,

463 
BIG_CIRCLE_5
,

464 
BIG_CIRCLE_6
,

465 
BIG_CIRCLE_7
,

466 
BIG_CIRCLE_8
,

467 
BIG_CIRCLE_9
,

468 
BIG_CIRCLE_10


471 
	$Di•SegmítC⁄
(
U8
 
mu8Sãp
)

473 
LedId_T
 
mId
;

476 if–
mu8Sãp
 == 0 )

478 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_SPACE
 );

479 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_SPACE
 );

480 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
 );

482 if–
mu8Sãp
 >= 1 && mu8Step <= 10)

484 
mId
 = 
gBigCú˛e
[ 
mu8Sãp
 ];

485 
	`HAL_Tu∫OnOffLED
–
mId
, 
ON
 );

487 if–
mu8Sãp
 >= 11 && mu8Step <= 20 )

489 
mId
 = 
gBigCú˛e
[ 
mu8Sãp
 - 10 ];

490 
	`HAL_Tu∫OnOffLED
–
mId
, 
OFF
 );

492 
	}
}

495 
	$Tu∫OffAŒLED
()

497 
	`HAL_Tu∫OnOffLEDAŒ
–
OFF
 );

498 
	`HAL_DimmögLedAŒ
–
OFF
 );

499 
	}
}

503 
	$Tu∫OffChpiLed
()

505 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

507 
	`HAL_Tu∫OnOffLEDEx
–
ICON_HOT_LOCK
, 
OFF
 );

508 
	`HAL_Tu∫OnOffLEDEx
–
HOT_COFFE
, 
OFF
 );

509 
	`HAL_Tu∫OnOffLEDEx
–
HOT_TEA
, 
OFF
 );

510 
	`HAL_Tu∫OnOffLEDEx
–
HOT_MILK
, 
OFF
 );

511 
	`HAL_Tu∫OnOffLEDEx
–
ICE_MAKE
, 
OFF
 );

513 
	}
}

515 
	$Tu∫OnAŒLED
()

517 
	`HAL_Tu∫OnOffLEDAŒ
–
ON
 );

518 
	`HAL_DimmögLedAŒ
–
OFF
 );

520 
	`Tu∫OffChpiLed
();

521 
	}
}

523 #i‡
CONFIG_TEST_LED


524 
U8
 
	gdbg_duty_⁄
 = 90;

525 
U8
 
	gdbg_duty_dimmög
 = 40;

527 
U8
 
	gdbg_duty_d¨k
 = 50;

528 
U8
 
	gdbg_duty_dimmög_d¨k
 = 20;

531 
	$Di•LedDuty
()

533 #i‡
CONFIG_TEST_LED


534 if–
	`GëSavögC⁄fig
(Ë=
TRUE
 )

536 
	`HAL_SëLedDuty
–
dbg_duty_d¨k
 );

537 
	`HAL_SëLedDimmögDuty
–
dbg_duty_dimmög_d¨k
 );

541 
	`HAL_SëLedDuty
–
dbg_duty_⁄
 );

542 
	`HAL_SëLedDimmögDuty
–
dbg_duty_dimmög
 );

545 if–
	`GëSavögSètus
(Ë=
TRUE
 )

547 
	`HAL_SëLedDuty
–
DEFAULT_ONOFF_DUTY_DARK
 );

548 
	`HAL_SëLedDimmögDuty
–
DEFAULT_DIMMING_DUTY_DARK
 );

552 
	`HAL_SëLedDuty
–
DEFAULT_ONOFF_DUTY
 );

553 
	`HAL_SëLedDimmögDuty
–
DEFAULT_DIMMING_DUTY
 );

556 
	}
}

559 
	$OffDi•I˚Out
()

561 
	`HAL_DimmögLed
–
ICE_OUT_1
, 
OFF
 );

562 
	`HAL_DimmögLed
–
ICE_OUT_2
, 
OFF
 );

564 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_1
, 
OFF
 );

565 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_2
, 
OFF
 );

566 
	}
}

570 
	$Di•I˚Out
–
U8
 
mu8OnOff
 )

574 
	`HAL_DimmögLed
–
WELCOM_ICE
, 
OFF
 );

575 
	`HAL_DimmögLed
–
ICE_OUT_1
, 
ON
 );

576 
	`HAL_DimmögLed
–
ICE_OUT_2
, 
ON
 );

578 
	`HAL_DimmögLed
–
WELCOM_ICE
, 
OFF
 );

579 
	`HAL_DimmögLed
–
ICE_OUT_1
, 
OFF
 );

580 
	`HAL_DimmögLed
–
ICE_OUT_2
, 
OFF
 );

583 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_1
, 
ON
 );

584 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_2
, 
ON
 );

585 if–
mu8OnOff
 =
OFF
 )

588 
	`HAL_Tu∫OnOffLED
–
WELCOM_ICE
, 
OFF
 );

593 
	`HAL_Tu∫OnOffLED
–
WELCOM_ICE
, 
ON
 );

598 if–
	`GëC⁄figDeco
–
DECO_LED_BUTTON
 ) =
FALSE
 )

600 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_1
, 
OFF
 );

601 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_2
, 
OFF
 );

604 if–
	`GëC⁄figDeco
–
DECO_LED_WELCOME
 ) =
FALSE
 )

606 
	`HAL_Tu∫OnOffLED
–
WELCOM_ICE
, 
OFF
 );

608 
	}
}

611 
	$Di•W©îOutCú˛e
(
U8
 
mu8OnOff
)

613 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
mu8OnOff
 );

614 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
mu8OnOff
 );

615 
	}
}

618 
	$OffDi•W©îOut
()

620 
	`HAL_DimmögLed
–
WATER_OUT_1
, 
OFF
 );

621 
	`HAL_DimmögLed
–
WATER_OUT_2
, 
OFF
 );

623 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
OFF
 );

624 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
OFF
 );

625 
	}
}

629 
	$Di•W©îOut
–
U8
 
mu8OnOff
 )

632 
	`HAL_DimmögLed
–
WATER_OUT_1
, 
OFF
 );

633 
	`HAL_DimmögLed
–
WATER_OUT_2
, 
OFF
 );

634 
	`HAL_DimmögLed
–
WELCOM_WATER
, 
OFF
 );

637 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
ON
 );

638 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
ON
 );

639 if–
mu8OnOff
 =
OFF
 )

642 
	`HAL_Tu∫OnOffLED
–
WELCOM_WATER
, 
OFF
 );

647 
	`HAL_Tu∫OnOffLED
–
WELCOM_WATER
, 
ON
 );

652 if–
	`GëC⁄figDeco
–
DECO_LED_BUTTON
 ) =
FALSE
 )

654 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
OFF
 );

655 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
OFF
 );

658 if–
	`GëC⁄figDeco
–
DECO_LED_WELCOME
 ) =
FALSE
 )

660 
	`HAL_Tu∫OnOffLED
–
WELCOM_WATER
, 
OFF
 );

662 
	}
}

667 
	$Di•CﬁdTemp
(
U8
 
mu8OnOff
, U8 
mu8CﬁdGood
)

670 if–
mu8OnOff
 =
OFF
 )

672 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_WHITE
, 
OFF
 );

673 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_BLUE
, 
OFF
 );

677 if–
mu8CﬁdGood
 =
TRUE
 )

679 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_WHITE
, 
OFF
 );

680 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_BLUE
, 
ON
 );

684 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_WHITE
, 
ON
 );

685 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_BLUE
, 
OFF
 );

689 
	}
}

693 
	$Di•SëtögUpDownKey
()

695 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_UP
 ) =
FALSE
 )

697 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
ON
 );

701 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

705 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

708 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_DOWN
 ) =
FALSE
 )

710 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
ON
 );

714 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
OFF
 );

719 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_DOWN
 ) =
FALSE
 )

721 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
ON
 );

722 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
ON
 );

726 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
OFF
 );

727 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
OFF
 );

732 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_NEXT
 ) =
FALSE
 )

734 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
ON
 );

738 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
OFF
 );

740 
	}
}

743 
	$Di•SëtögClockKey
()

745 
	`HAL_DimmögLed
–
SETTING
, 
ON
 );

747 
	`HAL_DimmögLed
–
COLD_WATER
, 
ON
 );

750 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

752 
	`HAL_DimmögLed
–
HOT_WATER
, 
ON
 );

756 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
ON
 );

757 
	`HAL_DimmögLed
–
CP_ICE_TURBO_2
, 
ON
 );

760 
	`Di•SëtögUpDownKey
();

761 
	}
}

763 
	$Di•SëtögSoundKey
()

767 
	`HAL_DimmögLed
–
COLD_WATER
, 
ON
 );

768 
	`HAL_DimmögLed
–
ROOM_WATER
, 
ON
 );

769 
	`HAL_DimmögLed
–
AMOUNT
, 
ON
 );

770 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

772 
	`HAL_DimmögLed
–
HOT_WATER
, 
ON
 );

776 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
ON
 );

777 
	`HAL_DimmögLed
–
CP_ICE_TURBO_2
, 
ON
 );

780 
	`Di•SëtögUpDownKey
();

781 
	}
}

784 
	$Di•SëtögKey
()

786 
	`HAL_DimmögLed
–
SETTING
, 
ON
 );

787 
	`HAL_DimmögLed
–
ICE_MODE
, 
ON
 );

788 
	`HAL_DimmögLed
–
COLD_WATER
, 
ON
 );

789 
	`HAL_DimmögLed
–
ROOM_WATER
, 
ON
 );

790 
	`HAL_DimmögLed
–
AMOUNT
, 
ON
 );

791 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

793 
	`HAL_DimmögLed
–
HOT_WATER
, 
ON
 );

797 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
ON
 );

798 
	`HAL_DimmögLed
–
CP_ICE_TURBO_2
, 
ON
 );

801 
	`Di•SëtögUpDownKey
();

802 
	}
}

804 
	$Di•I˚SizeSñ
(
U8
 
mu8Size
, U8 
mu8Lock
, U8 
mu8Dimmög
)

806 
	`HAL_DimmögLed
–
ICE_TURBO
, 
OFF
 );

807 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
OFF
 );

808 
	`HAL_DimmögLed
–
ICE_SIZE_SMALL
, 
mu8Dimmög
 );

809 
	`HAL_DimmögLed
–
ICE_SIZE_BAR
, 
mu8Dimmög
 );

810 
	`HAL_DimmögLed
–
ICE_SIZE_LARGE
, 
mu8Dimmög
 );

811 
	`HAL_DimmögLed
–
ICE_MODE
, 
mu8Dimmög
 );

813 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_BAR
, 
OFF
 );

816 
	`HAL_DimmögLed
–
ICON_ICE_LOCK
, 
OFF
 );

817 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_LOCK
, 
mu8Lock
 );

822 if–
mu8Size
 =
ICE_LARGE
 )

824 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
ON
 );

825 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
OFF
 );

829 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
OFF
 );

830 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
ON
 );

834 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
ON
 );

835 
	}
}

838 
	$Di•I˚Sñ
(
U8
 
mu8Turbo
, U8 
mu8Size
, U8 
mu8Lock
, U8 
mu8Dimmög
)

840 
	`HAL_DimmögLed
–
ICE_TURBO
, 
mu8Dimmög
 );

841 
	`HAL_DimmögLed
–
ICE_SIZE_SMALL
, 
mu8Dimmög
 );

842 
	`HAL_DimmögLed
–
ICE_SIZE_BAR
, 
mu8Dimmög
 );

843 
	`HAL_DimmögLed
–
ICE_SIZE_LARGE
, 
mu8Dimmög
 );

844 
	`HAL_DimmögLed
–
ICE_MODE
, 
mu8Dimmög
 );

846 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_BAR
, 
OFF
 );

849 
	`HAL_DimmögLed
–
ICON_ICE_LOCK
, 
OFF
 );

850 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_LOCK
, 
mu8Lock
 );

853 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
mu8Turbo
 );

856 if–
mu8Size
 =
ICE_LARGE
 )

858 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
ON
 );

859 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
OFF
 );

863 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
OFF
 );

864 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
ON
 );

868 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
ON
 );

869 
	}
}

872 
	$Di•I˚SñOff
(
U8
 
mu8OnOff
, U8 
mu8Turbo
, U8 
mu8Lock
, U8 
mu8SizeOnOff
, U8 
mu8Size
)

874 
	`HAL_DimmögLed
–
ICE_TURBO
, 
OFF
 );

875 
	`HAL_DimmögLed
–
ICE_SIZE_SMALL
, 
OFF
 );

876 
	`HAL_DimmögLed
–
ICE_SIZE_BAR
, 
OFF
 );

877 
	`HAL_DimmögLed
–
ICE_SIZE_LARGE
, 
OFF
 );

878 
	`HAL_DimmögLed
–
ICE_MODE
, 
OFF
 );

881 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_LOCK
, 
mu8Lock
 );

883 if–
mu8OnOff
 =
OFF
 )

885 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
OFF
 );

886 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
OFF
 );

887 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
OFF
 );

888 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
OFF
 );

893 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
mu8Turbo
 );

896 if–
mu8SizeOnOff
 =
OFF
 )

898 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
OFF
 );

899 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
OFF
 );

903 if–
mu8Size
 =
ICE_LARGE
 )

905 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
ON
 );

906 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
OFF
 );

910 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
OFF
 );

911 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
ON
 );

916 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
	`GëI˚C⁄figMake
() );

918 
	}
}

921 
	$Di•I˚Turbo
(
U8
 
mu8OnOff
)

923 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
ON
 );

924 
	`HAL_DimmögLed
–
CP_ICE_TURBO_2
, 
ON
 );

926 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
mu8OnOff
 );

927 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
mu8OnOff
 );

928 
	}
}

930 
	$Di•I˚TurboOff
()

932 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
OFF
 );

933 
	`HAL_DimmögLed
–
CP_ICE_TURBO_2
, 
OFF
 );

935 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
OFF
 );

936 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
OFF
 );

937 
	}
}

940 
	$Di•W©î
(
U8
 
mu8Sñ
)

942 if–
mu8Sñ
 =
SEL_WATER_COLD
 )

944 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
ON
 );

945 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
OFF
 );

946 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
OFF
 );

948 if–
mu8Sñ
 =
SEL_WATER_HOT
 )

950 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

951 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
OFF
 );

952 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
ON
 );

957 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

958 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
ON
 );

959 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
OFF
 );

961 
	}
}

964 
	$Di•W©îSñ
(
U8
 
mu8Sñ
, U8 
mu8C⁄fCﬁd
)

966 
	`HAL_DimmögLed
–
COLD_WATER
, 
mu8C⁄fCﬁd
 );

967 
	`HAL_DimmögLed
–
ROOM_WATER
, 
ON
 );

968 
	`HAL_DimmögLed
–
HOT_WATER
, 
ON
 );

970 
	`Di•W©î
–
mu8Sñ
 );

971 
	}
}

973 
	$Di•W©îSñEm±yCﬁdFau˚t
()

975 
	`HAL_DimmögLed
–
COLD_WATER
, 
ON
 );

976 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

978 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
ON
 );

982 
	`HAL_DimmögLed
–
HOT_WATER
, 
ON
 );

984 
	}
}

986 
	$Di•W©îSñEm±yCﬁdDøö
()

988 
	`HAL_DimmögLed
–
COLD_WATER
, 
ON
 );

989 
	`HAL_DimmögLed
–
ROOM_WATER
, 
ON
 );

990 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

992 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
ON
 );

996 
	`HAL_DimmögLed
–
HOT_WATER
, 
ON
 );

998 
	}
}

1006 
	$Di•WñcomW©î
–
U8
 
mu8OnOff
 )

1008 
	`HAL_Tu∫OnOffLED
–
WELCOM_WATER
, 
mu8OnOff
 );

1009 
	}
}

1011 
	$Di•WñcomI˚
–
U8
 
mu8OnOff
 )

1013 
	`HAL_Tu∫OnOffLED
–
WELCOM_ICE
, 
mu8OnOff
 );

1014 
	}
}

1018 
	$Di•Amou¡Sñ
(
U8
 
mu8Amou¡
, U8 
mu8Dimmög
 )

1020 
	`HAL_DimmögLed
–
AMOUNT_INFINITY
, 
mu8Dimmög
 );

1021 
	`HAL_DimmögLed
–
AMOUNT_500
, 
mu8Dimmög
 );

1022 
	`HAL_DimmögLed
–
AMOUNT_250
, 
mu8Dimmög
 );

1023 
	`HAL_DimmögLed
–
AMOUNT_120
, 
mu8Dimmög
 );

1026 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
ON
 );

1029 if–
mu8Amou¡
 =
FIXED_AMOUNT_INFINITY
 )

1031 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
ON
 );

1032 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

1033 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

1034 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

1036 if–
mu8Amou¡
 =
FIXED_AMOUNT_TWO
 )

1038 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
OFF
 );

1039 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
ON
 );

1040 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

1041 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

1043 if–
mu8Amou¡
 =
FIXED_AMOUNT_ONE
 )

1045 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
OFF
 );

1046 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

1047 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
ON
 );

1048 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

1050 if–
mu8Amou¡
 =
FIXED_AMOUNT_HALF
 )

1053 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
OFF
 );

1054 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

1055 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

1056 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
ON
 );

1060 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
OFF
 );

1061 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

1062 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

1063 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

1069 if–
	`GëW©îOutC⁄figU£r
(Ë=
FALSE
 )

1071 
	`HAL_DimmögLed
–
AMOUNT_USER
, 
OFF
 );

1072 
	`HAL_Tu∫OnOffLED
–
AMOUNT_USER
, 
OFF
 );

1076 
	}
}

1081 
	$Di•Amou¡SñOff
(
U8
 
mu8Amou¡
)

1084 
	`HAL_DimmögLed
–
AMOUNT_INFINITY
, 
OFF
 );

1085 
	`HAL_DimmögLed
–
AMOUNT_500
, 
OFF
 );

1086 
	`HAL_DimmögLed
–
AMOUNT_250
, 
OFF
 );

1087 
	`HAL_DimmögLed
–
AMOUNT_120
, 
OFF
 );

1088 
	`HAL_DimmögLed
–
AMOUNT
, 
ON
 );

1091 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
OFF
 );

1092 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

1093 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

1094 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

1095 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
ON
 );

1098 if–
mu8Amou¡
 =
FIXED_AMOUNT_INFINITY
 )

1100 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
ON
 );

1102 if–
mu8Amou¡
 =
FIXED_AMOUNT_TWO
 )

1104 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
ON
 );

1106 if–
mu8Amou¡
 =
FIXED_AMOUNT_ONE
 )

1108 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
ON
 );

1110 if–
mu8Amou¡
 =
FIXED_AMOUNT_HALF
 )

1112 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
ON
 );

1114 
	}
}

1116 
	$Di•Amou¡
(
U8
 
mu8OnOff
)

1119 
	`HAL_DimmögLed
–
AMOUNT_INFINITY
, 
OFF
 );

1120 
	`HAL_DimmögLed
–
AMOUNT_500
, 
OFF
 );

1121 
	`HAL_DimmögLed
–
AMOUNT_250
, 
OFF
 );

1122 
	`HAL_DimmögLed
–
AMOUNT_120
, 
OFF
 );

1123 
	`HAL_DimmögLed
–
AMOUNT
, 
ON
 );

1126 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
OFF
 );

1127 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

1128 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

1129 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

1131 if–
mu8OnOff
 =
ON
 )

1133 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
ON
 );

1137 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
OFF
 );

1139 
	}
}

1143 
	$Di•HŸLock
(
U8
 
mu8OnOff
 )

1145 
	`HAL_Tu∫OnOffLED
–
HOT_LOCK
, 
mu8OnOff
 );

1146 
	}
}

1152 
	$Di•HŸSñ
(
U8
 
mu8Sñ
, U8 
mu8Lock
, U8 
mu8Dimmög
)

1181 
	`HAL_Tu∫OnOffLED
–
HOT_COFFE
, 
OFF
 );

1182 
	`HAL_Tu∫OnOffLED
–
HOT_TEA
, 
OFF
 );

1183 
	`HAL_Tu∫OnOffLED
–
HOT_MILK
, 
OFF
 );

1187 
	`HAL_Tu∫OnOffLED
–
ICON_HOT_LOCK
, 
mu8Lock
 );

1188 
	}
}

1194 
	$Di•HŸSñOff
(
U8
 
mu8Lock
)

1197 
	`HAL_DimmögLed
–
HOT_COFFE
, 
OFF
 );

1198 
	`HAL_DimmögLed
–
HOT_TEA
, 
OFF
 );

1199 
	`HAL_DimmögLed
–
HOT_MILK
, 
OFF
 );

1201 
	`HAL_Tu∫OnOffLED
–
HOT_COFFE
, 
OFF
 );

1202 
	`HAL_Tu∫OnOffLED
–
HOT_TEA
, 
OFF
 );

1203 
	`HAL_Tu∫OnOffLED
–
HOT_MILK
, 
OFF
 );

1205 
	`HAL_Tu∫OnOffLED
–
ICON_HOT_LOCK
, 
mu8Lock
 );

1206 
	}
}

1209 
	$Di•UvC¨e
(
U8
 
mu8OnOff
, U8 
mu8W©îOut
, U8 
mu8I˚Out
, U8 
mu8I˚Tøy
, U8 
mu8I˚T™k
)

1211 if–
mu8OnOff
 =
ON
 )

1214 
	`HAL_Tu∫OnOffLED
–
ICON_UV_SMART_CARE_TM
, 
ON
 );

1215 
	`HAL_Tu∫OnOffLED
–
ICON_UV_SMART_CARE
, 
ON
 );

1218 
	`HAL_DimmögLed
–
ICON_UV_WATER
, 
ON
 );

1219 
	`HAL_DimmögLed
–
ICON_UV_ICE
, 
ON
 );

1220 
	`HAL_DimmögLed
–
ICON_UV_ICE_TRAY
, 
ON
 );

1221 
	`HAL_DimmögLed
–
ICON_UV_ICE_TANK
, 
ON
 );

1224 
	`HAL_Tu∫OnOffLED
–
ICON_UV_WATER
, 
mu8W©îOut
 );

1225 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE
, 
mu8I˚Out
 );

1226 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TRAY
, 
mu8I˚Tøy
 );

1227 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TANK
, 
mu8I˚T™k
 );

1231 
	`HAL_DimmögLed
–
ICON_UV_WATER
, 
OFF
 );

1232 
	`HAL_DimmögLed
–
ICON_UV_ICE
, 
OFF
 );

1233 
	`HAL_DimmögLed
–
ICON_UV_ICE_TRAY
, 
OFF
 );

1234 
	`HAL_DimmögLed
–
ICON_UV_ICE_TANK
, 
OFF
 );

1236 
	`HAL_Tu∫OnOffLED
–
ICON_UV_WATER
, 
OFF
 );

1237 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE
, 
OFF
 );

1238 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TRAY
, 
OFF
 );

1239 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TANK
, 
OFF
 );

1241 
	}
}

1244 
	$Tu∫OffAŒIc⁄
()

1246 
	`HAL_Tu∫OnOffLED
–
ICON_ML
, 
OFF
 );

1247 
	`HAL_Tu∫OnOffLED
–
ICON_PERCENT
, 
OFF
 );

1248 
	`HAL_Tu∫OnOffLED
–
ICON_CELSIUS
, 
OFF
 );

1249 
	`HAL_Tu∫OnOffLED
–
COLON
, 
OFF
 );

1251 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
OFF
 );

1252 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
OFF
 );

1253 
	}
}

1256 
	$Di•Vîsi⁄
–
U8
 
mu8Vîsi⁄
)

1258 
	`Di•SegmítDigô
–
mu8Vîsi⁄
 );

1260 
	`Tu∫OffAŒIc⁄
();

1261 
	}
}

1282 
	$Di•W©îOutAmou¡
(
U16
 
mu16VÆ
)

1284 if–
mu16VÆ
 >= 9999 )

1287 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CIRCLE
 );

1288 
	`Tu∫OffAŒIc⁄
();

1293 
	`Di•SegmítDigô
–
mu16VÆ
 );

1294 
	`Tu∫OffAŒIc⁄
();

1295 
	`HAL_Tu∫OnOffLED
–
ICON_ML
, 
ON
 );

1297 
	}
}

1300 
	$Di•Pî˚¡
(
U16
 
mu16VÆ
)

1302 
	`Di•SegmítDigô
–
mu16VÆ
 );

1304 
	`HAL_Tu∫OnOffLED
–
ICON_PERCENT
, 
ON
 );

1305 
	}
}

1340 
	$Di•SëtögSoundMode
(
U8
 
mu8Mode
)

1342 if–
mu8Mode
 =
VOICE_LEVEL_OFF
 )

1345 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CENTER_1
 );

1347 if–
mu8Mode
 =
VOICE_LEVEL_BEEP
 )

1350 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CENTER_2
 );

1355 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CENTER_3
 );

1357 
	}
}

1359 
	$Di•SëtögCu°omîMode
(
U8
 
mu8Mode
)

1361 if–
mu8Mode
 =
CUSTOMER_SELF
 )

1364 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_SE
 );

1369 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CO
 );

1371 
	}
}

1373 
	$Di•ClockIãmAm
(
U8
 
mu8OnOff
)

1375 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
mu8OnOff
 );

1376 
	}
}

1378 
	$Di•ClockIãmPm
(
U8
 
mu8OnOff
)

1380 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
mu8OnOff
 );

1381 
	}
}

1384 
TimeD©a_T
 
	gmSëtögTime
;

1385 
	$Di•ClockIãmHour
(
U8
 
mu8OnOff
)

1387 
U8
 
mu8VÆ_10
;

1388 
U8
 
mu8VÆ_1
;

1390 if–
mu8OnOff
 =
ON
 )

1392 
mu8VÆ_10
 = (
U8
)(
mSëtögTime
.
Hour
 / 10);

1393 
mu8VÆ_1
 = (
U8
)(
mSëtögTime
.
Hour
 % 10);

1395 if–
mu8VÆ_10
 > 0 )

1397 
	`Di•Segmít
–
SEGMENT_1000
, 
gu8Digô
[ 
mu8VÆ_10
 ] );

1401 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

1404 
	`Di•Segmít
–
SEGMENT_100
, 
gu8Digô
[ 
mu8VÆ_1
 ] );

1408 
	`Di•Segmít
–
SEGMENT_1000
, 
CHAR_SPACE
 );

1409 
	`Di•Segmít
–
SEGMENT_100
, 
CHAR_SPACE
 );

1411 
	}
}

1413 
	$Di•ClockIãmMö
(
U8
 
mu8OnOff
)

1415 
U8
 
mu8VÆ_10
;

1416 
U8
 
mu8VÆ_1
;

1418 if–
mu8OnOff
 =
ON
 )

1420 
mu8VÆ_10
 = (
U8
)(
mSëtögTime
.
Mö
 / 10);

1421 
mu8VÆ_1
 = (
U8
)(
mSëtögTime
.
Mö
 % 10);

1423 if–
mu8VÆ_10
 > 0 )

1425 
	`Di•Segmít
–
SEGMENT_10
, 
gu8Digô
[ 
mu8VÆ_10
 ] );

1429 
	`Di•Segmít
–
SEGMENT_10
, 
gu8Digô
[ 0 ] );

1432 
	`Di•Segmít
–
SEGMENT_1
, 
gu8Digô
[ 
mu8VÆ_1
 ] );

1436 
	`Di•Segmít
–
SEGMENT_10
, 
CHAR_SPACE
 );

1437 
	`Di•Segmít
–
SEGMENT_1
, 
CHAR_SPACE
 );

1439 
	}
}

1442 
	$Di•SëtögClockD⁄e
(
U8
 
mu8OnOff
)

1444 
MíuTime_T
 
mTime
;

1447 
	`GëClockTime
–&
mTime
 );

1448 
	`Tu∫OffAŒIc⁄
();

1450 
	`HAL_Tu∫OnOffLED
–
COLON
, 
mu8OnOff
 );

1452 if–
mTime
.
u8AmPm
 =
TIME_AM
 )

1454 
	`Di•ClockIãmAm
–
mu8OnOff
 );

1455 
	`Di•ClockIãmPm
–
OFF
 );

1459 
	`Di•ClockIãmAm
–
OFF
 );

1460 
	`Di•ClockIãmPm
–
mu8OnOff
 );

1462 
	`Di•ClockIãmHour
–
mu8OnOff
 );

1463 
	`Di•ClockIãmMö
–
mu8OnOff
 );

1464 
	}
}

1467 
	$Di•SëtögClock
(
U8
 
mIãm
, U8 
mAmPm
, U8 
mHour
, U8 
mMö
)

1469 
U8
 
mu8OnOff
 = 
ON
;

1472 
mSëtögTime
.
Hour
 = 
mHour
;

1473 
mSëtögTime
.
Mö
 = 
mMö
;

1475 
	`Tu∫OffAŒIc⁄
();

1476 
	`HAL_Tu∫OnOffLED
–
COLON
, 
ON
 );

1477 
	`Di•ClockIãmHour
–
ON
 );

1478 
	`Di•ClockIãmMö
–
ON
 );

1479 if–
mAmPm
 =
TIME_AM
 )

1481 
	`Di•ClockIãmAm
–
ON
 );

1482 
	`Di•ClockIãmPm
–
OFF
 );

1486 
	`Di•ClockIãmAm
–
OFF
 );

1487 
	`Di•ClockIãmPm
–
ON
 );

1491 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_UP
 ) =
TRUE


1492 && 
	`IsExpúedDi•Timî
–
DISP_TIMER_DOWN
 ) =
TRUE
 )

1495 if–
mIãm
 == 0 )

1497 if–
mAmPm
 =
TIME_AM
 )

1499 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•ClockIãmAm
, 
DISP_TIMER_ID_500MS
 );

1500 
	`Di•ClockIãmPm
–
OFF
 );

1504 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•ClockIãmPm
, 
DISP_TIMER_ID_500MS
 );

1505 
	`Di•ClockIãmAm
–
OFF
 );

1508 if–
mIãm
 == 1 )

1510 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•ClockIãmHour
, 
DISP_TIMER_ID_500MS
 );

1512 if–
mIãm
 == 2 )

1514 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•ClockIãmMö
, 
DISP_TIMER_ID_500MS
 );

1517 
	}
}

1519 
	s_£g_


1521 
U8
 
	mSeg_100
;

1522 
U8
 
	mSeg_10
;

1523 
U8
 
	mSeg_1
;

1524 } 
	tInföôyLi°_T
;

1526 c⁄° 
InföôyLi°_T
 
	gEf„˘Iniföôy
[] =

1528 { 
SEG_OFF
, SEG_OFF, SEG_OFF },

1529 { 
SEG_E
, 
SEG_OFF
, SEG_OFF },

1530 { 
SEG_EF
, 
SEG_OFF
, SEG_OFF },

1531 { 
SEG_EFA
, 
SEG_OFF
, SEG_OFF },

1532 { 
SEG_EFA
, 
SEG_A
, 
SEG_OFF
 },

1533 { 
SEG_EFA
, 
SEG_A
, SEG_A },

1535 { 
SEG_EFA
, 
SEG_A
, 
SEG_AB
 },

1536 { 
SEG_EFA
, 
SEG_A
, 
SEG_ABC
 },

1537 { 
SEG_EFA
, 
SEG_A
, 
SEG_ABCD
 },

1538 { 
SEG_EFA
, 
SEG_AD
, 
SEG_ABCD
 },

1539 { 
SEG_EFAD
, 
SEG_AD
, 
SEG_ABCD
 },

1541 { 
SEG_FAD
, 
SEG_AD
, 
SEG_ABCD
 },

1542 { 
SEG_AD
, SEG_AD, 
SEG_ABCD
 },

1543 { 
SEG_D
, 
SEG_AD
, 
SEG_ABCD
 },

1544 { 
SEG_D
, SEG_D, 
SEG_ABCD
 },

1545 { 
SEG_D
, SEG_D, 
SEG_BCD
 },

1546 { 
SEG_D
, SEG_D, 
SEG_CD
 },

1547 { 
SEG_D
, SEG_D, SEG_D },

1549 { 
SEG_D
, SEG_D, 
SEG_OFF
 },

1550 { 
SEG_D
, 
SEG_OFF
, SEG_OFF }

1552 
	#SZ_INFINITY_LIST
 ((
Ef„˘Iniföôy
)/(
InföôyLi°_T
))

	)

1554 
	#DELAY_INFINITY
 2

1555 
U8
 
gu8InföôyCou¡
 = 0U;

	)

1556 
U8
 
	ggu8InföôyDñay
 = 
DELAY_INFINITY
;

1557 
	$Re£tInföôyCou¡
()

1559 
gu8InföôyCou¡
 = 0;

1560 
gu8InföôyDñay
 = 
DELAY_INFINITY
;

1561 
	}
}

1566 
	$Di•W©îOutAmou¡Inföôy
()

1568 c⁄° 
InföôyLi°_T
 *
pVÆ
;

1570 
pVÆ
 = &
Ef„˘Iniföôy
[ 
gu8InföôyCou¡
 ];

1571 
	`Di•Segmít
–
SEGMENT_1000
, 
SEG_OFF
 );

1572 
	`Di•Segmít
–
SEGMENT_100
, 
pVÆ
->
Seg_100
 );

1573 
	`Di•Segmít
–
SEGMENT_10
, 
pVÆ
->
Seg_10
 );

1574 
	`Di•Segmít
–
SEGMENT_1
, 
pVÆ
->
Seg_1
 );

1577 
	`Tu∫OffAŒIc⁄
();

1578 
	`HAL_Tu∫OnOffLED
–
ICON_ML
, 
OFF
 );

1580 if–
gu8InföôyDñay
 != 0 )

1582 
gu8InföôyDñay
--;

1586 
gu8InföôyDñay
 = 
DELAY_INFINITY
;

1587 
gu8InföôyCou¡
++;

1589 if–
gu8InföôyCou¡
 >
SZ_INFINITY_LIST
 )

1591 
gu8InföôyCou¡
 = 0;

1593 
	}
}

1596 
	$Di•HŸW©îPªHótög
(
U8
 
mu8Sãp
, U8 
mu8Temp
)

1598 
	`Di•SegmítDigô
–
mu8Temp
 );

1599 if–
mu8Sãp
 == 0 )

1601 
	`Di•Segmít
–
SEGMENT_100
, 
BAR_BOTTOM
 );

1602 
	`Di•Segmít
–
SEGMENT_10
, 
BAR_BOTTOM
 );

1603 
	`Di•Segmít
–
SEGMENT_1
, 
BAR_BOTTOM
 );

1605 if–
mu8Sãp
 == 1 )

1607 
	`Di•Segmít
–
SEGMENT_100
, 
STACK_BAR_CENTER
 );

1608 
	`Di•Segmít
–
SEGMENT_10
, 
STACK_BAR_CENTER
 );

1609 
	`Di•Segmít
–
SEGMENT_1
, 
STACK_BAR_CENTER
 );

1613 
	`Di•Segmít
–
SEGMENT_100
, 
STACK_BAR_TOP
 );

1614 
	`Di•Segmít
–
SEGMENT_10
, 
STACK_BAR_TOP
 );

1615 
	`Di•Segmít
–
SEGMENT_1
, 
STACK_BAR_TOP
 );

1618 
	`HAL_Tu∫OnOffLED
–
ICON_CELSIUS
, 
OFF
 );

1619 
	}
}

1622 
	$Di•Temp
(
U16
 
mu16VÆ
)

1624 
	`Di•SegmítDigô
–
mu16VÆ
 );

1626 
	`Tu∫OffAŒIc⁄
();

1627 
	`HAL_Tu∫OnOffLED
–
ICON_CELSIUS
, 
ON
 );

1628 
	}
}

1630 
	~"comp_bldc.h
"

1631 
	~"ãmp.h
"

1632 
U8
 
dbg_di•_comp_Ωs
;

1633 
	$Di•CompRps
()

1635 
	`Tu∫OffAŒIc⁄
();

1637 if–
dbg_di•_comp_Ωs
 == 1 )

1639 
	`Di•W©îOutAmou¡
–
	`GëCompBldcT¨gëRps
() );

1641 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
ON
 );

1642 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
OFF
 );

1644 if–
dbg_di•_comp_Ωs
 == 2 )

1646 
	`Di•W©îOutAmou¡
–
	`GëCompBldcCuºítRps
() );

1648 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
OFF
 );

1649 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
ON
 );

1651 if–
dbg_di•_comp_Ωs
 == 3 )

1653 
U16
 
ãmp
;

1655 
ãmp
 = (
U16
)–
	`GëTemp
–
TEMP_ID_COLD_WATER
) * 10.0f );

1656 
	`Di•W©îOutAmou¡
–
ãmp
 );

1658 
	}
}

1662 
	$Di•Clock
(
TimeD©a_T
 *
pTime
)

1664 
U8
 
mu8Am
 = 
TRUE
;

1665 
U16
 
mu16Hour
;

1666 
U16
 
mu16Time
;

1669 
mu16Hour
 = 
pTime
->
Hour
;

1670 if–
mu16Hour
 >= 12 )

1672 
mu8Am
 = 
FALSE
;

1673 
mu16Hour
 = mu16Hour - 12;

1676 if–
mu16Hour
 == 0 )

1678 
mu16Hour
 = 12;

1681 
mu16Time
 = ( 
mu16Hour
 * 100 ) + 
pTime
->
Mö
;

1684 
	`Di•SegmítDigô
–
mu16Time
 );

1687 
	`Tu∫OffAŒIc⁄
();

1689 
	`HAL_Tu∫OnOffLED
–
COLON
, 
ON
 );

1690 if–
mu8Am
 =
TRUE
 )

1693 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
ON
 );

1694 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
OFF
 );

1699 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
OFF
 );

1700 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
ON
 );

1702 
	}
}

1704 
	$Di•Wóthî
(
U8
 
mu8Sètus
 )

1706 if–
mu8Sètus
 =
WEATHER_SUN
 )

1708 
	`HAL_Tu∫OnOffLED
–
ICON_SUN
, 
ON
 );

1709 
	`HAL_Tu∫OnOffLED
–
ICON_CLOUD
, 
OFF
 );

1710 
	`HAL_Tu∫OnOffLED
–
ICON_RAIN
, 
OFF
 );

1712 if–
mu8Sètus
 =
WEATHER_CLOUD
 )

1714 
	`HAL_Tu∫OnOffLED
–
ICON_SUN
, 
OFF
 );

1715 
	`HAL_Tu∫OnOffLED
–
ICON_CLOUD
, 
ON
 );

1716 
	`HAL_Tu∫OnOffLED
–
ICON_RAIN
, 
OFF
 );

1718 if–
mu8Sètus
 =
WEATHER_RAIN
 )

1720 
	`HAL_Tu∫OnOffLED
–
ICON_SUN
, 
OFF
 );

1721 
	`HAL_Tu∫OnOffLED
–
ICON_CLOUD
, 
OFF
 );

1722 
	`HAL_Tu∫OnOffLED
–
ICON_RAIN
, 
ON
 );

1727 
	`HAL_Tu∫OnOffLED
–
ICON_SUN
, 
OFF
 );

1728 
	`HAL_Tu∫OnOffLED
–
ICON_CLOUD
, 
OFF
 );

1729 
	`HAL_Tu∫OnOffLED
–
ICON_RAIN
, 
OFF
 );

1732 
	}
}

1734 
	$Di•DøöW©î
(
U8
 
mu8OnOff
, U8 
mu8Pî˚¡
)

1736 
	`HAL_Tu∫OnOffLED
–
ICON_DRAIN
, 
mu8OnOff
 );

1737 
	`HAL_Tu∫OnOffLED
–
ICON_PERCENT
, 
mu8OnOff
 );

1738 if–
mu8OnOff
 =
ON
 )

1740 
	`Di•SegmítDigô
–
mu8Pî˚¡
 );

1742 
	}
}

1745 
	$Di•Room
(
U8
 
mu8OnOff
)

1747 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
mu8OnOff
 );

1748 
	}
}

1750 
	$Di•CﬁdDimmög
(
U8
 
mu8OnOff
)

1752 
	`HAL_DimmögLed
–
COLD_WATER
, 
mu8OnOff
 );

1753 
	}
}

1755 
	$Di•Cﬁd
(
U8
 
mu8OnOff
)

1757 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
mu8OnOff
 );

1758 
	}
}

1761 
	$Di•Wifi
(
U8
 
mu8OnOff
)

1763 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI
, 
mu8OnOff
 );

1764 
	}
}

1766 
	$Di•WifiBÀ
(
U8
 
mu8OnOff
)

1768 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI_BLE
, 
mu8OnOff
 );

1769 
	}
}

1771 
	$Di•Flushög
(
U8
 
mu8OnOff
)

1773 
	`HAL_Tu∫OnOffLED
–
ICON_FLUSHING
, 
mu8OnOff
 );

1774 
	}
}

1776 
	$Di•FûãrSètus
(
U8
 
mu8OnOff
)

1778 
	`HAL_Tu∫OnOffLED
–
ICON_FILTER
, 
mu8OnOff
 );

1779 
	}
}

1781 
	$Di•I˚FuŒ
(
U8
 
mu8OnOff
)

1783 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_FULL
, 
mu8OnOff
 );

1784 
	}
}

1786 
	$Di•Savög
(
U8
 
mu8OnOff
)

1788 
	`HAL_Tu∫OnOffLED
–
ICON_SAVING
, 
mu8OnOff
 );

1789 
	}
}

1792 
	$Di•I˚Lock
(
U8
 
mu8OnOff
)

1794 
	`HAL_Tu∫OnOffLED
–
ICE_LOCK
, 
mu8OnOff
 );

1795 
	}
}

1798 
	$Di•AŒLock
(
U8
 
mu8OnOff
)

1800 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
mu8OnOff
 );

1801 
	}
}

1803 
	$Di•AŒLockSñ
(
U8
 
mu8OnOff
)

1805 
	`HAL_DimmögLed
–
LOCK_ALL
, 
ON
 );

1807 if–
mu8OnOff
 =
ON
 )

1809 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
ON
 );

1813 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
OFF
 );

1815 
	}
}

1818 
	$Di•I˚Make
(
U8
 
mu8OnOff
)

1820 
	`HAL_Tu∫OnOffLED
–
ICE_MAKE
, 
mu8OnOff
 );

1821 
	`HAL_Tu∫OnOffLED
–
CP_ICE_MAKE
, 
mu8OnOff
 );

1822 
	}
}

1827 
	$Di•CﬁdMake
(
U8
 
mu8OnOff
)

1829 
	`HAL_Tu∫OnOffLED
–
COLD_MAKE
, 
mu8OnOff
 );

1830 
	}
}

1836 
U8
 
	$GëCﬁdSètus
()

1838 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

1840  
STATUS_OFF
;

1843 if–
	`GëCﬁdW©îMakeMode
(Ë=
COLD_MODE_COOLING


1844 && 
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_COLD


1845 && 
	`GëCompOnOff
(Ë=
ON
 )

1847  
STATUS_MAKE
;

1850  
STATUS_STOP
;

1851 
	}
}

1854 
U8
 
	$GëI˚Sètus
()

1856 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

1858  
STATUS_OFF
;

1862 if–
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
FALSE
 )

1865 if–
	`IsSëI˚MakeMode
–
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

1867 if–
	`GëI˚MakîRódySãp
(Ë>
STEP_READY_TRAY_FEED_START
 )

1870  
STATUS_MAKE
;

1873 if–
	`IsSëI˚MakeMode
–
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

1876  
STATUS_MAKE
;

1878 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DEICING
 ) =
TRUE
 )

1881  
STATUS_DEICING
;

1885  
STATUS_STOP
;

1886 
	}
}

1890 
U8
 
	$GëDi•I˚FuŒSètus
()

1892 if–
	`GëI˚FuŒSètus
(Ë=
TRUE
 )

1894 if–
	`GëI˚Sètus
(Ë=
STATUS_MAKE


1895 || 
	`GëI˚Sètus
(Ë=
STATUS_DEICING
 )

1897  
FALSE
;

1900  
TRUE
;

1903  
FALSE
;

1904 
	}
}

1909 
	$Di•MemítoKey
–
U8
 
mu8Sñ
 )

1911 
	`HAL_DimmögLed
–
SETTING
, 
ON
 );

1912 
	`HAL_DimmögLed
–
ROOM_WATER
, 
ON
 );

1914 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
ON
 );

1915 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
ON
 );

1924 
	}
}

1927 
	$Di•SëtögBuâ⁄
(
U8
 
mu8OnOff
)

1929 
	`HAL_DimmögLed
–
SETTING
, 
OFF
 );

1930 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
mu8OnOff
 );

1931 
	}
}

1933 
	$Di•AœrmLockAŒ
(
U8
 
mu8OnOff
)

1935 
	`HAL_DimmögLed
–
LOCK_ALL
 , 
OFF
 );

1936 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
mu8OnOff
 );

1937 
	}
}

1939 
	$Di•AœrmLockHŸ
(
U8
 
mu8OnOff
)

1941 
	`Di•SëtögBuâ⁄
–
mu8OnOff
 );

1943 
	`HAL_DimmögLed
–
HOT_LOCK
, 
OFF
 );

1944 
	`HAL_Tu∫OnOffLED
–
HOT_LOCK
, 
mu8OnOff
 );

1945 
	}
}

1947 
	$Di•AœrmLockI˚
(
U8
 
mu8OnOff
)

1949 
	`Di•SëtögBuâ⁄
–
mu8OnOff
 );

1951 
	`HAL_DimmögLed
–
ICE_LOCK
, 
OFF
 );

1952 
	`HAL_Tu∫OnOffLED
–
ICE_LOCK
, 
mu8OnOff
 );

1953 
	}
}

1955 
	$Di•AœrmMakeI˚
(
U8
 
mu8OnOff
)

1957 
	`Di•SëtögBuâ⁄
–
mu8OnOff
 );

1959 
	`HAL_DimmögLed
–
ICE_MAKE
, 
OFF
 );

1960 
	`HAL_Tu∫OnOffLED
–
ICE_MAKE
, 
mu8OnOff
 );

1961 
	}
}

1963 
	$Di•AœrmMakeI˚Cp
(
U8
 
mu8OnOff
)

1965 
	`Di•SëtögBuâ⁄
–
mu8OnOff
 );

1967 
	`HAL_DimmögLed
–
CP_ICE_MAKE
, 
OFF
 );

1968 
	`HAL_Tu∫OnOffLED
–
CP_ICE_MAKE
, 
mu8OnOff
 );

1969 
	}
}

1971 
	$Di•AœrmMakeCﬁd
(
U8
 
mu8OnOff
)

1973 
	`Di•SëtögBuâ⁄
–
mu8OnOff
 );

1975 
	`HAL_DimmögLed
–
COLD_MAKE
, 
OFF
 );

1976 
	`HAL_Tu∫OnOffLED
–
COLD_MAKE
, 
mu8OnOff
 );

1977 
	}
}

1979 
	$Di•Sëtög
(
U8
 
mu8OnOff
 )

1981 if–
mu8OnOff
 =
OFF
 )

1984 
	`HAL_DimmögLed
–
SETTING
, 
ON
 );

1985 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
OFF
 );

1987 
	`HAL_DimmögLed
–
ICE_MAKE
, 
OFF
 );

1988 
	`HAL_DimmögLed
–
CP_ICE_MAKE
, 
OFF
 );

1989 
	`HAL_DimmögLed
–
ICE_LOCK
, 
OFF
 );

1990 
	`HAL_DimmögLed
–
HOT_LOCK
, 
OFF
 );

1991 
	`HAL_DimmögLed
–
LOCK_ALL
, 
OFF
 );

1992 
	`HAL_DimmögLed
–
COLD_MAKE
, 
OFF
 );

1993 
	`HAL_DimmögLed
–
SAVING
, 
OFF
 );

1994 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
OFF
 );

1995 
	`HAL_DimmögLed
–
CP_ICE_TURBO_2
, 
OFF
 );

1997 
	`HAL_Tu∫OnOffLED
–
ICE_MAKE
, 
OFF
 );

1998 
	`HAL_Tu∫OnOffLED
–
CP_ICE_MAKE
, 
OFF
 );

1999 
	`HAL_Tu∫OnOffLED
–
ICE_LOCK
, 
OFF
 );

2000 
	`HAL_Tu∫OnOffLED
–
HOT_LOCK
, 
OFF
 );

2001 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
OFF
 );

2002 
	`HAL_Tu∫OnOffLED
–
COLD_MAKE
, 
OFF
 );

2003 
	`HAL_Tu∫OnOffLED
–
SAVING
, 
OFF
 );

2004 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
OFF
 );

2005 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
OFF
 );

2010 
	`HAL_DimmögLed
–
SETTING
, 
ON
 );

2011 
	`HAL_DimmögLed
–
ICE_MODE
, 
	`GëI˚C⁄figMake
() );

2012 
	`HAL_DimmögLed
–
HOT_WATER
, 
ON
 );

2013 
	`HAL_DimmögLed
–
ROOM_WATER
, 
ON
 );

2014 
	`HAL_DimmögLed
–
COLD_WATER
, 
	`GëCﬁdW©îC⁄figMake
() );

2015 
	`HAL_DimmögLed
–
AMOUNT
, 
ON
 );

2016 
	`HAL_DimmögLed
–
ICON_SAVING
, 
OFF
 );

2017 
	`HAL_DimmögLed
–
CP_ICE_TURBO
, 
	`GëI˚C⁄figMake
() );

2018 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

2020 
	`HAL_DimmögLed
–
CP_ICE_TURBO_2
, 
	`GëI˚C⁄figMake
() );

2024 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
ON
 );

2025 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
OFF
);

2026 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_LOCK
, 
	`GëLockI˚
() );

2027 
	`HAL_Tu∫OnOffLED
–
ICON_HOT_LOCK
, 
	`GëLockHŸ
() );

2028 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

2029 
	`HAL_Tu∫OnOffLED
–
ICON_SAVING
, 
	`GëSavögC⁄fig
() );

2030 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
OFF
 );

2031 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
OFF
 );

2034 
	`HAL_Tu∫OnOffLED
–
ICE_MAKE
, 
ON
 );

2035 
	`HAL_Tu∫OnOffLED
–
CP_ICE_MAKE
, 
ON
 );

2036 
	`HAL_Tu∫OnOffLED
–
ICE_LOCK
, 
ON
 );

2037 
	`HAL_Tu∫OnOffLED
–
HOT_LOCK
, 
ON
 );

2038 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
ON
 );

2039 
	`HAL_Tu∫OnOffLED
–
COLD_MAKE
, 
ON
 );

2040 
	`HAL_Tu∫OnOffLED
–
SAVING
, 
ON
 );

2042 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display.h

1 #i‚de‡
__DISPLAY_H__


2 
	#__DISPLAY_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"πc.h
"

9 
Di•SegmítDigô
(
U16
 
mu16VÆ
);

14 
	mSEGMENT_CHAR_ID_ON
,

15 
	mSEGMENT_CHAR_ID_OFF
,

16 
	mSEGMENT_CHAR_ID_CON
,

17 
	mSEGMENT_CHAR_ID_STACK_BAR_CENTER
,

18 
	mSEGMENT_CHAR_ID_STACK_BAR_TOP
,

19 
	mSEGMENT_CHAR_ID_BAR_BOTTOM
,

20 
	mSEGMENT_CHAR_ID_BAR_CENTER
,

21 
	mSEGMENT_CHAR_ID_BAR_TOP
,

22 
	mSEGMENT_CHAR_ID_CHP
,

23 
	mSEGMENT_CHAR_ID_CP
,

24 
	mSEGMENT_CHAR_ID_CIRCLE
,

25 
	mSEGMENT_CHAR_ID_SPACE
,

26 
	mSEGMENT_CHAR_ID_ICE_1
,

27 
	mSEGMENT_CHAR_ID_ICE_2
,

28 
	mSEGMENT_CHAR_ID_ICE_3
,

29 
	mSEGMENT_CHAR_ID_ICE_4
,

30 
	mSEGMENT_CHAR_ID_CENTER_1
,

31 
	mSEGMENT_CHAR_ID_CENTER_2
,

32 
	mSEGMENT_CHAR_ID_CENTER_3
,

33 
	mSEGMENT_CHAR_ID_SE
,

34 
	mSEGMENT_CHAR_ID_CO
,

35 
	mSEGMENT_CHAR_ID_STE
,

36 
	mMAX_SEGMENT_CHAR_ID
,

39 
Di•SegmítCh¨
(
U8
 
mu8Ch¨Id
);

41 
Di•SegmítOff
();

44 
Di•SegmítEº‹
(
U8
 
mu8EºCode
 );

47 
Di•SegmítWifiEº‹
(
U8
 
mu8EºCode
 );

50 
Di•SegmítC⁄
(
U8
 
mu8Sãp
);

53 
Tu∫OffAŒLED
();

54 
Tu∫OnAŒLED
();

56 
Di•LedDuty
();

60 
OffDi•I˚Out
();

62 
Di•I˚Out
–
U8
 
mu8OnOff
 );

65 
Di•W©îOutCú˛e
(
U8
 
mu8OnOff
);

67 
Di•W©îOut
–
U8
 
mu8OnOff
 );

74 
Di•CﬁdTemp
(
U8
 
mu8OnOff
, U8 
mu8CﬁdGood
);

78 
Di•I˚SizeSñ
(
U8
 
mu8Size
, U8 
mu8Lock
, U8 
mu8Dimmög
);

79 
Di•I˚Sñ
(
U8
 
mu8Turbo
, U8 
mu8Size
, U8 
mu8Lock
, U8 
mu8Dimmög
);

82 
Di•I˚SñOff
(
U8
 
mu8OnOff
, U8 
mu8Turbo
, U8 
mu8Lock
, U8 
mu8SizeOnOff
, U8 
mu8Size
);

86 
Di•I˚Turbo
(
U8
 
mu8OnOff
);

87 
Di•I˚TurboOff
();

90 
Di•W©î
(
U8
 
mu8Sñ
);

91 
Di•W©îSñ
(
U8
 
mu8Sñ
, U8 
mu8C⁄fCﬁd
);

94 
Di•W©îSñEm±yCﬁdFau˚t
();

95 
Di•W©îSñEm±yCﬁdDøö
();

99 
Di•SëtögBuâ⁄
(
U8
 
mu8OnOff
);

100 
Di•AœrmLockAŒ
(
U8
 
mu8OnOff
);

101 
Di•AœrmLockHŸ
(
U8
 
mu8OnOff
);

102 
Di•AœrmLockI˚
(
U8
 
mu8OnOff
);

103 
Di•AœrmMakeI˚Cp
(
U8
 
mu8OnOff
);

104 
Di•AœrmMakeI˚
(
U8
 
mu8OnOff
);

105 
Di•AœrmMakeCﬁd
(
U8
 
mu8OnOff
);

108 
Di•Sëtög
(
U8
 
mu8OnOff
 );

111 
Di•WñcomW©î
–
U8
 
mu8OnOff
 );

114 
Di•WñcomI˚
–
U8
 
mu8OnOff
 );

117 
Di•Amou¡Sñ
(
U8
 
mu8Amou¡
, U8 
mu8Dimmög
 );

118 
Di•Amou¡SñOff
(
U8
 
mu8Amou¡
 );

119 
Di•Amou¡
(
U8
 
mu8OnOff
);

121 
Re£tInföôyCou¡
();

122 
Di•W©îOutAmou¡Inföôy
();

125 
Di•HŸW©îPªHótög
(
U8
 
mu8Sãp
, U8 
mu8Temp
);

134 
Di•HŸSñOff
(
U8
 
mu8Lock
);

137 
Di•UvC¨e
(
U8
 
mu8OnOff
, U8 
mu8W©îOut
, U8 
mu8I˚Out
, U8 
mu8I˚Tøy
, U8 
mu8I˚T™k
);

140 
Di•Vîsi⁄
–
U8
 
mu8Vîsi⁄
);

148 
Di•Wifi
(
U8
 
mu8OnOff
);

150 
Di•WifiBÀ
(
U8
 
mu8OnOff
);

153 
Di•Flushög
(
U8
 
mu8OnOff
);

156 
Di•FûãrSètus
(
U8
 
mu8OnOff
);

159 
Di•I˚FuŒ
(
U8
 
mu8OnOff
);

162 
Di•Savög
(
U8
 
mu8OnOff
);

171 
Di•AŒLock
(
U8
 
mu8OnOff
);

172 
Di•AŒLockSñ
(
U8
 
mu8OnOff
);

179 
Di•W©îOutAmou¡
(
U16
 
mu16VÆ
);

182 
Di•Pî˚¡
(
U16
 
mu16VÆ
);

189 
Di•SëtögSoundMode
(
U8
 
mu8Mode
);

192 
Di•SëtögCu°omîMode
(
U8
 
mu8Mode
);

195 
Di•SëtögClockKey
();

198 
Di•SëtögSoundKey
();

201 
Di•SëtögKey
();

204 
Di•Temp
(
U16
 
mu16VÆ
);

207 
Di•Clock
(
TimeD©a_T
 *
pTime
);

210 
Di•SëtögClockD⁄e
(
U8
 
mu8OnOff
);

213 
Di•SëtögClock
(
U8
 
mIãm
, U8 
mAmPm
, U8 
mHour
, U8 
mMö
);

216 
	#WEATHER_OFF
 0

	)

217 
	#WEATHER_SUN
 1

	)

218 
	#WEATHER_CLOUD
 2

	)

219 
	#WEATHER_RAIN
 3

	)

220 
Di•Wóthî
(
U8
 
mu8Sètus
 );

223 
Di•DøöW©î
(
U8
 
mu8OnOff
, U8 
mu8Pî˚¡
);

227 
Di•Room
(
U8
 
mu8OnOff
);

229 
Di•CﬁdDimmög
(
U8
 
mu8OnOff
);

231 
Di•Cﬁd
(
U8
 
mu8OnOff
);

235 
	#STATUS_STOP
 0

236 
	#STATUS_OFF
 1

237 
	#STATUS_MAKE
 2

238 
	#STATUS_DEICING
 3

239 
U8
 
	`GëI˚Sètus
();

	)

240 
U8
 
GëCﬁdSètus
();

241 
U8
 
GëDi•I˚FuŒSètus
();

246 
Di•MemítoKey
–
U8
 
mu8Sñ
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_clock.c

1 
	~"di•œy_˛ock.h
"

2 
	~"πc.h
"

5 
TimeIãm_T
 
	gmMíuIãm
 = 
MENU_ITEM_TIME_AMPM
;

7 
MíuTime_T
 
	gmMíuTime
;

10 
ToggÀAmPm
();

11 
Cou¡DownMö
();

12 
Cou¡UpMö
();

13 
Cou¡UpHour
();

14 
Cou¡DownHour
();

16 
	$InôClock
(
U8
 
mu8Inô
)

18 
TimeD©a_T
 
mTime
;

22 
mMíuIãm
 = 
MENU_ITEM_MIN
;

25 
	`GëRtcTime
–&
mTime
 );

28 
mMíuTime
.
u8Yór
 = 
mTime
.
Yór
;

29 
mMíuTime
.
u8M⁄th
 = 
mTime
.
M⁄th
;

30 
mMíuTime
.
u8D©e
 = 
mTime
.
D©e
;

31 
	`GëTimeHour12
–
mTime
.
Hour
, &
mMíuTime
.
u8AmPm
, &mMíuTime.
u8Hour
 );

32 
mMíuTime
.
u8Mö
 = 
mTime
.
Mö
;

34 if–
mu8Inô
 =
TRUE
 )

36 
mMíuTime
.
u8Yór
 = 20;

37 
mMíuTime
.
u8M⁄th
 = 1;

38 
mMíuTime
.
u8D©e
 = 1;

39 
mMíuTime
.
u8AmPm
 = 
TIME_AM
;

40 
mMíuTime
.
u8Hour
 = 1;

41 
mMíuTime
.
u8Mö
 = 0;

44 
	}
}

46 
TimeIãm_T
 
	$GëClockIãm
()

48  
mMíuIãm
;

49 
	}
}

51 
	$GëClockTime
(
MíuTime_T
 *
pTime
)

53 
pTime
->
u8Yór
 = 
mMíuTime
.u8Year;

54 
pTime
->
u8M⁄th
 = 
mMíuTime
.u8Month;

55 
pTime
->
u8D©e
 = 
mMíuTime
.u8Date;

56 
pTime
->
u8AmPm
 = 
mMíuTime
.u8AmPm;

57 
pTime
->
u8Hour
 = 
mMíuTime
.u8Hour;

58 
pTime
->
u8Mö
 = 
mMíuTime
.u8Min;

59 
	}
}

61 
	$NextClock
()

63 
mMíuIãm
++;

64 if–
mMíuIãm
 > 
MENU_ITEM_MAX
 )

66 
mMíuIãm
 = 
MENU_ITEM_MIN
;

68 
	}
}

70 
	$UpClock
()

72  
mMíuIãm
 )

74 
MENU_ITEM_TIME_AMPM
:

75 
	`ToggÀAmPm
();

78 
MENU_ITEM_TIME_HOUR
:

79 
	`Cou¡UpHour
();

82 
MENU_ITEM_TIME_MIN
:

83 
	`Cou¡UpMö
();

86 
	}
}

88 
	$DownClock
()

90  
mMíuIãm
 )

92 
MENU_ITEM_TIME_AMPM
:

93 
	`ToggÀAmPm
();

96 
MENU_ITEM_TIME_HOUR
:

97 
	`Cou¡DownHour
();

100 
MENU_ITEM_TIME_MIN
:

101 
	`Cou¡DownMö
();

104 
	}
}

107 
	$SaveClock
()

109 
TimeD©a_T
 
mTime
;

112 
	`GëRtcTime
–&
mTime
 );

113 
mTime
.
Y2K
 = 1;

114 
mTime
.
Yór
 = 
mMíuTime
.
u8Yór
;

115 
mTime
.
M⁄th
 = 
mMíuTime
.
u8M⁄th
;

116 
mTime
.
D©e
 = 
mMíuTime
.
u8D©e
;

118 if–
mMíuTime
.
u8AmPm
 =
TIME_AM
 )

120 if–
mMíuTime
.
u8Hour
 == 12 )

122 
mTime
.
Hour
 = 0;

126 
mTime
.
Hour
 = 
mMíuTime
.
u8Hour
;

132 if–
mMíuTime
.
u8Hour
 == 12 )

134 
mTime
.
Hour
 = 
mMíuTime
.
u8Hour
;

138 
mTime
.
Hour
 = 
mMíuTime
.
u8Hour
 + 12;

142 
mTime
.
Mö
 = 
mMíuTime
.
u8Mö
;

143 
mTime
.
Sec
 = 0;

145 
	`SëRtcTime
–&
mTime
 );

147 
	`SëRtcC⁄figInô
–
TRUE
 );

148 
	}
}

151 
	$GëTimeHour12
(
U8
 
hour24
, U8 *
pAm
, U8 *
pHour12
)

153 if–
pAm
 =
NULL
 || 
pHour12
 == NULL )

158 if–
hour24
 == 0 )

160 *
pAm
 = 
TIME_AM
;

161 *
pHour12
 = 12;

163 if–
hour24
 < 12 )

165 *
pAm
 = 
TIME_AM
;

166 *
pHour12
 = 
hour24
;

168 if–
hour24
 == 12 )

170 *
pAm
 = 
TIME_PM
;

171 *
pHour12
 = 12;

175 *
pAm
 = 
TIME_PM
;

176 *
pHour12
 = 
hour24
 - 12;

178 
	}
}

180 
	$ToggÀAmPm
()

182 if–
mMíuTime
.
u8AmPm
 =
TIME_AM
 )

184 
mMíuTime
.
u8AmPm
 = 
TIME_PM
;

188 
mMíuTime
.
u8AmPm
 = 
TIME_AM
;

190 
	}
}

192 
	$Cou¡DownMö
()

194 if–
mMíuTime
.
u8Mö
 != 0 )

196 
mMíuTime
.
u8Mö
--;

200 
mMíuTime
.
u8Mö
 = 59;

202 
	}
}

204 
	$Cou¡UpMö
()

206 if–
mMíuTime
.
u8Mö
 < 59 )

208 
mMíuTime
.
u8Mö
++;

212 
mMíuTime
.
u8Mö
 = 0;

214 
	}
}

216 
	$Cou¡UpHour
()

218 if–
mMíuTime
.
u8Hour
 < 12 )

220 
mMíuTime
.
u8Hour
++;

224 
mMíuTime
.
u8Hour
 = 1;

227 
	}
}

229 
	$Cou¡DownHour
()

231 if–
mMíuTime
.
u8Hour
 != 1 )

233 
mMíuTime
.
u8Hour
--;

237 
mMíuTime
.
u8Hour
 = 12;

239 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_clock.h

1 #i‚de‡
__DISPLAY_CLOCK_H__


2 
	#__DISPLAY_CLOCK_H__


	)

4 
	~"¥j_ty≥.h
"

10 
	mMENU_ITEM_TIME_AMPM
,

11 
	mMENU_ITEM_TIME_HOUR
,

12 
	mMENU_ITEM_TIME_MIN


13 } 
	tTimeIãm_T
;

14 
	#MENU_ITEM_MIN
 
MENU_ITEM_TIME_AMPM


	)

15 
	#MENU_ITEM_MAX
 
MENU_ITEM_TIME_MIN


	)

17 
	#TIME_AM
 0

	)

18 
	#TIME_PM
 1

	)

19 
	s_míu_time_


21 
U8
 
	mu8Yór
;

22 
U8
 
	mu8M⁄th
;

23 
U8
 
	mu8D©e
;

24 
U8
 
	mu8AmPm
;

25 
U8
 
	mu8Hour
;

26 
U8
 
	mu8Mö
;

27 } 
	tMíuTime_T
;

29 
InôClock
(
U8
 
mu8Inô
);

30 
TimeIãm_T
 
GëClockIãm
();

32 
GëClockTime
(
MíuTime_T
 *
pTime
);

33 
NextClock
();

34 
UpClock
();

35 
DownClock
();

36 
SaveClock
();

38 
GëTimeHour12
(
U8
 
hour24
, U8 *
pAm
, U8 *
pHour12
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_eol.c

1 
	~"hw.h
"

2 
	~"hÆ_Àd.h
"

3 
	~"hÆ_öput.h
"

5 
	~"di•œy_eﬁ.h
"

6 
	~"di•œy_lib.h
"

7 
	~"di•œy.h
"

8 
	~"eﬁ.h
"

9 
	~"w©î_out.h
"

10 
	~"£rvi˚.h
"

11 
	~"fûãr.h
"

12 
	~"WIFI_C⁄åﬁ.h
"

13 
	~"comp_bldc.h
"

14 
	~"gas_swôch_vÆve.h
"

15 
	~"hÆ_°ï_mŸ‹.h
"

18 
	$Di•WifiEﬁ
(
U8
 
mu8OnOff
)

20 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI_BLE
, 
mu8OnOff
 );

21 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI
, 
mu8OnOff
 );

22 
	}
}

24 
	$Di•KeyHŸ
(
U8
 
mu8OnOff
)

27 
	`HAL_Tu∫OnOffLED
–
HOT_COFFE
, 
mu8OnOff
 );

28 
	`HAL_Tu∫OnOffLED
–
HOT_TEA
, 
mu8OnOff
 );

29 
	`HAL_Tu∫OnOffLED
–
HOT_MILK
, 
mu8OnOff
 );

30 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
mu8OnOff
 );

31 
	`HAL_Tu∫OnOffLED
–
ICON_HOT_LOCK
, 
mu8OnOff
 );

33 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
mu8OnOff
 );

34 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
mu8OnOff
 );

35 
	}
}

39 
	#FRONT_UV_ADC
 30

	)

40 
	$EﬁFr⁄tCheckI≈ut
()

42 
U32
 
mu32VÆ
 = 0UL;

45 
mu32VÆ
 = 
	`GëEﬁTe°I≈utVÆ
();

47 if–
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_DOOR
 ) < 
FRONT_UV_ADC
 )

49 
	`Di•SegmítEº‹
( 1 );

51 #i‡!
CONFIG_JIG_FRONT_UNUSED_UV


52 if–
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_WATER_OUT
 ) < 
FRONT_UV_ADC
 )

54 
	`Di•SegmítEº‹
( 2 );

60 
	`Tu∫OnAŒLED
();

64 #i‡
CONFIG_JIG_RBK_FRONT


65 if–(
mu32VÆ
 & 
MK_EOL_FILTER_COVER
) != 0 )

67 if––
mu32VÆ
 & 
MK_EOL_TANK_COVER
) != 0 )

70 
	`HAL_Tu∫OnOffLED
–
ICON_UV_SMART_CARE_TM
, 
OFF
 );

71 
	`HAL_Tu∫OnOffLED
–
ICON_UV_SMART_CARE
, 
OFF
 );

72 
	`HAL_Tu∫OnOffLED
–
ICON_UV_WATER
, 
OFF
 );

73 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE
, 
OFF
 );

74 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TANK
, 
OFF
 );

75 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TRAY
, 
OFF
 );

78 if–(
mu32VÆ
 & 
MK_EOL_FILTER_COVER
) != 0 )

81 
	`HAL_Tu∫OnOffLED
–
ICON_FILTER
, 
OFF
 );

82 
	`HAL_Tu∫OnOffLED
–
ICON_FLUSHING
, 
OFF
 );

83 
	`HAL_Tu∫OnOffLED
–
ICON_DRAIN
, 
OFF
 );

87 if–(
mu32VÆ
 & 
MK_EOL_KEY_SETTING
) != 0 )

90 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
OFF
 );

93 if–(
mu32VÆ
 & 
MK_EOL_KEY_HOT
 ) != 0 )

95 
	`Di•KeyHŸ
–
OFF
 );

108 
U8
 
mu8OnOff
 = 
OFF
;

109 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•KeyHŸ
, 
DISP_TIMER_ID_500MS
 );

112 if–(
mu32VÆ
 & 
MK_EOL_KEY_ROOM
 ) != 0 )

115 
	`HAL_Tu∫OnOffLED
–
ICON_AM
, 
OFF
 );

116 
	`HAL_Tu∫OnOffLED
–
ICON_PM
, 
OFF
 );

119 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_SPACE
 );

120 
	`HAL_Tu∫OnOffLED
–
COLON
, 
OFF
 );

123 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
OFF
 );

126 if–(
mu32VÆ
 & 
MK_EOL_KEY_COLD
 ) != 0 )

129 
	`HAL_Tu∫OnOffLED
–
ICON_SAVING
, 
OFF
 );

130 
	`Di•Wóthî
–
OFF
 );

132 
	`HAL_Tu∫OnOffLED
–
ICON_ML
, 
OFF
 );

133 
	`HAL_Tu∫OnOffLED
–
ICON_PERCENT
, 
OFF
 );

134 
	`HAL_Tu∫OnOffLED
–
ICON_CELSIUS
, 
OFF
 );

136 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_WHITE
, 
OFF
 );

137 
	`HAL_Tu∫OnOffLED
–
COLD_TEMP_BLUE
, 
OFF
 );

138 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

140 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI_BLE
, 
OFF
 );

141 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI
, 
OFF
 );

146 #i‡!
CONFIG_JIG_RBK_FRONT


147 if–(
mu32VÆ
 & 
MK_EOL_WIFI
 ) != 0 )

149 
U8
 
mu8OnOff
 = 
OFF
;

150 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•WifiEﬁ
, 
DISP_TIMER_ID_500MS
 );

154 
	`Di•WifiEﬁ
–
ON
 );

159 if–(
mu32VÆ
 & 
MK_EOL_KEY_AMOUNT
 ) != 0 )

161 
	`HAL_Tu∫OnOffLED
–
AMOUNT_INFINITY
, 
OFF
 );

162 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

163 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

164 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

165 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
OFF
 );

168 if–(
mu32VÆ
 & 
MK_EOL_KEY_SAVE
 ) != 0 )

170 
	`HAL_Tu∫OnOffLED
–
SAVING
, 
OFF
 );

173 if–(
mu32VÆ
 & 
MK_EOL_KEY_HOT_LOCK
 ) != 0 )

175 
	`HAL_Tu∫OnOffLED
–
HOT_LOCK
, 
OFF
 );

178 if–(
mu32VÆ
 & 
MK_EOL_KEY_LOCK_ALL
 ) != 0 )

180 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
OFF
 );

183 if–(
mu32VÆ
 & 
MK_EOL_KEY_COLD_MAKE
 ) != 0 )

185 
	`HAL_Tu∫OnOffLED
–
COLD_MAKE
, 
OFF
 );

188 if–(
mu32VÆ
 & 
MK_EOL_KEY_ICE_LOCK
 ) != 0 )

190 
	`HAL_Tu∫OnOffLED
–
ICE_LOCK
, 
OFF
 );

193 if–(
mu32VÆ
 & 
MK_EOL_KEY_ICE_MAKE
 ) != 0 )

195 
	`HAL_Tu∫OnOffLED
–
ICE_MAKE
, 
OFF
 );

196 
	`HAL_Tu∫OnOffLED
–
CP_ICE_MAKE
, 
OFF
 );

199 if–(
mu32VÆ
 & 
MK_EOL_KEY_ICE
 ) != 0 )

201 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_LOCK
, 
OFF
 );

202 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
OFF
 );

203 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_LARGE
, 
OFF
 );

204 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_BAR
, 
OFF
 );

205 
	`HAL_Tu∫OnOffLED
–
ICE_SIZE_SMALL
, 
OFF
 );

207 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
OFF
 );

210 if–(
mu32VÆ
 & 
MK_EOL_LEVER_WATER
 ) != 0 )

212 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
OFF
 );

213 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
OFF
 );

214 
	`HAL_Tu∫OnOffLED
–
WELCOM_WATER
, 
OFF
 );

217 if–(
mu32VÆ
 & 
MK_EOL_LEVER_ICE
 ) != 0 )

219 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_FULL
, 
OFF
 );

221 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_1
, 
OFF
 );

222 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_2
, 
OFF
 );

223 
	`HAL_Tu∫OnOffLED
–
WELCOM_ICE
, 
OFF
 );

226 
	}
}

229 
	$Di•FûãrOnOff
(
U8
 
mu8OnOff
)

231 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
mu8OnOff
 );

232 
	}
}

235 
	$EﬁCheckI≈ut
()

237 
U32
 
mu32VÆ
 = 0UL;

240 
mu32VÆ
 = 
	`GëEﬁTe°I≈utVÆ
();

242 
	`Tu∫OffAŒLED
();

252 if–(
mu32VÆ
 & 
MK_EOL_KEY_HOT
 ) != 0 )

254 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
ON
 );

257 if–(
mu32VÆ
 & 
MK_EOL_KEY_ROOM
 ) != 0 )

260 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
ON
 );

263 if–(
mu32VÆ
 & 
MK_EOL_KEY_COLD
 ) != 0 )

265 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
ON
 );

268 if–(
mu32VÆ
 & 
MK_EOL_KEY_AMOUNT
 ) != 0 )

270 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
ON
 );

274 
	`HAL_Tu∫OnOffLED
–
WELCOM_WATER
, 
OFF
 );

275 if–(
mu32VÆ
 & 
MK_EOL_LEVER_WATER
 ) != 0 )

277 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
ON
 );

278 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
ON
 );

279 
	`HAL_Tu∫OnOffLED
–
WELCOM_WATER
, 
ON
 );

282 
	`HAL_Tu∫OnOffLED
–
WELCOM_ICE
, 
OFF
 );

283 if–(
mu32VÆ
 & 
MK_EOL_LEVER_ICE
 ) != 0 )

285 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_1
, 
ON
 );

286 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_2
, 
ON
 );

287 
	`HAL_Tu∫OnOffLED
–
WELCOM_ICE
, 
ON
 );

291 if–(
mu32VÆ
 & 
MK_EOL_FILTER_ONOFF
 ) != 0 )

293 
U8
 
mu8OnOff
 = 
OFF
;

294 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•FûãrOnOff
, 
DISP_TIMER_ID_500MS
 );

296 
	}
}

303 
	$Fr⁄tTe°
()

306 if–
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN
 ) =
LOW
 )

308 
	`SëEﬁTe°I≈utBô
–
MK_EOL_TANK_COVER
 );

311 if–
	`GëFûãrSètus
–
ID_FILTER_COVER
 ) =
FILTER_CLOSE
 )

313 
	`SëEﬁTe°I≈utBô
–
MK_EOL_FILTER_COVER
 );

322 
	`EﬁFr⁄tCheckI≈ut
();

323 
	}
}

325 
U8
 
	$CheckFûãrOnOff
()

327 
U8
 
mu8Pªv
 = 
FILTER_CLOSE
;

328 
U8
 
mu8Cuºít
;

330 
mu8Cuºít
 = 
	`GëFûãrSètus
–
ID_FILTER
 );

331 if–
mu8Pªv
 !
mu8Cuºít
 )

333 
mu8Pªv
 = 
mu8Cuºít
;

335 if–
mu8Cuºít
 =
FILTER_CLOSE
 )

337  
TRUE
;

341  
FALSE
;

342 
	}
}

345 
	$Di•EﬁSóldComp
(
U8
 
mu8OnOff
)

347 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
mu8OnOff
 );

348 
	}
}

350 
	$Di•EﬁSóldGasSwôch
(
U8
 
mu8OnOff
)

352 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
mu8OnOff
 );

353 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
mu8OnOff
 );

354 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
mu8OnOff
 );

356 
	`HAL_Tu∫OnOffLED
–
CP_ICE_SIZE
, 
mu8OnOff
 );

357 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
mu8OnOff
 );

358 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
mu8OnOff
 );

359 
	}
}

362 
	$LﬂdTe°
()

364 
U8
 
mu8Mode
;

365 
U8
 
mu8SñW©î
 = 
SEL_WATER_ROOM
;

369 
mu8Mode
 = 
	`GëEﬁMode
();

370 if–
mu8Mode
 =
EOL_MODE_SEALED
 )

373 if–
	`GëCompBldcT¨gëRps
() != 0 )

375 
U8
 
mu8OnOff
 = 
OFF
;

376 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•EﬁSóldComp
, 
DISP_TIMER_ID_500MS
 );

380 
	`Di•EﬁSóldComp
–
OFF
 );

384 if–
	`HAL_GëT¨gëSãp
–
SM_ID_0
 ) !
	`HAL_GëCuºítSãp
( SM_ID_0 ) )

387 
U8
 
mu8OnOff
 = 
OFF
;

388 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•EﬁSóldGasSwôch
, 
DISP_TIMER_ID_500MS
 );

393 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_COLD
 )

395 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
ON
 );

396 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
OFF
 );

397 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
OFF
 );

399 
	`HAL_Tu∫OnOffLED
–
CP_ICE_SIZE
, 
OFF
 );

400 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
OFF
 );

401 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
OFF
 );

403 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_ICE
 )

405 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

406 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
ON
 );

407 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
OFF
 );

409 
	`HAL_Tu∫OnOffLED
–
CP_ICE_SIZE
, 
ON
 );

410 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
OFF
 );

411 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
OFF
 );

413 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_HOTGAS
 )

415 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

416 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
OFF
 );

417 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
ON
 );

419 
	`HAL_Tu∫OnOffLED
–
CP_ICE_SIZE
, 
OFF
 );

420 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
ON
 );

421 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
ON
 );

425 if–
mu8Mode
 !
EOL_MODE_READY


426 && 
mu8Mode
 !
EOL_MODE_DONE
 )

428 
	`Tu∫OffAŒLED
();

430 
	`Di•WñcomI˚
–
OFF
 );

431 
	`Di•WñcomW©î
–
OFF
 );

436 
mu8SñW©î
 = 
	`GëW©îOutSñe˘
();

437 if–
mu8SñW©î
 =
SEL_WATER_ROOM
 )

439 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_ROOM
 );

440 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_COLD
 );

441 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_HOT
 );

443 if–
mu8SñW©î
 =
SEL_WATER_COLD
 )

445 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_ROOM
 );

446 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_HOT
 );

447 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_COLD
 );

451 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_ROOM
 );

452 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_COLD
 );

453 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_HOT
 );

458 if–
	`GëEﬁDøöW©î
(Ë=
TRUE
 )

460 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_AMOUNT
 );

464 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_AMOUNT
 );

467 
	`SëEﬁTe°I≈utBô
–
MK_EOL_LEVER_WATER
 );

468 
	`SëEﬁTe°I≈utBô
–
MK_EOL_LEVER_ICE
 );

470 if–
	`CheckFûãrOnOff
(Ë=
TRUE
 )

472 
	`SëEﬁTe°I≈utBô
–
MK_EOL_FILTER_ONOFF
 );

473 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_FILTER_ONOFF
, 1 );

476 
	`EﬁCheckI≈ut
();

480 if–
	`GëWifiSètusVÆue
(
WIFI_STATUS_TEST
) == 0 )

483 
	`Di•WifiEﬁ
–
OFF
 );

488 
	`Di•WifiEﬁ
–
ON
 );

490 
	}
}

492 
	$Pro˚ssDi•œyEﬁ
()

494 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_FRONT
 )

497 
	`Fr⁄tTe°
();

502 
	`LﬂdTe°
();

504 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_eol.h

1 #i‚de‡
__DISPLAY_EOL_H__


2 
	#__DISPLAY_EOL_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"eﬁ.h
"

7 
Pro˚ssDi•œyEﬁ
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_error.c

1 
	~"hw.h
"

2 
	~"di•œy_îr‹.h
"

4 
	~"di•œy.h
"

5 
	~"îr‹.h
"

6 
	~"comp_bldc.h
"

11 
	s_îr‹_di•œy_li°_


13 
Eº‹Id_T
 
	mId
;

14 } 
	tEºDi•œy_T
;

16 
EºDi•œy_T
 
	gEºDi•œyLi°
[] =

19 { 
ERR_MICRO_SW_MOVE
 },

20 { 
ERR_MICRO_SW_DETECT
 },

21 { 
ERR_DRAIN_PUMP
 },

22 { 
ERR_TEMP_HEATER
 },

23 { 
ERR_HEATER_OVERHEAT
 },

24 { 
ERR_TEMP_HOT_WATER_IN
 },

25 { 
ERR_TEMP_HOT_WATER
 },

26 { 
ERR_TEMP_COLD_WATER
 },

27 { 
ERR_TEMP_AMBIENT
 },

28 { 
ERR_TEMP_ROOM_WATER
 },

29 { 
ERR_COMP
 },

30 { 
ERR_COMP_COMM
 },

31 { 
ERR_OUTAGE_WATER
 },

32 { 
ERR_OUTAGE_HOT_WATER
 },

33 { 
ERR_LEAK
 },

34 { 
ERR_LEAK_FLOW
 },

36 
	#SZ_LIST
 ( (
EºDi•œyLi°
Ë/ (
EºDi•œy_T
 ))

	)

40 
Comm⁄EºCode
(
Eº‹Id_T
 
id
, 
U8
 
mu8Cmd
);

41 
	$Di•œyEº‹
(
Eº‹Id_T
 
mu8EºCode
, 
U8
 
mu8Cmd
 )

43 
U8
 
i
;

46  
i
 = 0; i < 
SZ_LIST
 ; i++ )

48 if–
EºDi•œyLi°
[ 
i
 ].
Id
 =
mu8EºCode
 )

50 
	`Comm⁄EºCode
–
mu8EºCode
, 
mu8Cmd
 );

54 
	}
}

56 
	$Comm⁄EºCode
(
Eº‹Id_T
 
id
, 
U8
 
mu8Cmd
)

58 
U8
 
mu8EºCode
;

60 
mu8EºCode
 = 
	`GëEº‹Di•œyId
–
id
 );

62 if–
mu8Cmd
 =
ON
 )

64 
	`Di•SegmítEº‹
–
mu8EºCode
 );

68 
	`Di•SegmítEº‹
( 0xFF );

70 
	}
}

75 #i‡
CONFIG_COMP_ERROR_CODE


76 
	~"comp_bldc.h
"

78 
U8
 
	$GëEº‹Di•œyId
(
Eº‹Id_T
 
mEºId
)

80 
U8
 
mu8Eº‹Code
 = 0;

82  
mEºId
 )

84 
ERR_LEAK
: 
mu8Eº‹Code
 = 1; ;

85 
ERR_LEAK_FLOW
: 
mu8Eº‹Code
 = 2; ;

87 
ERR_OUTAGE_HOT_WATER
: 
mu8Eº‹Code
 = 8; ;

88 
ERR_OUTAGE_WATER
: 
mu8Eº‹Code
 = 9; ;

90 #i‡
CONFIG_COMP_ERROR_CODE


91 
ERR_COMP
: 
mu8Eº‹Code
 = 50 + (
U8
)
	`GëCompBldcEº‹Code
(); ;

92 
ERR_PROTECT_COMP
: 
mu8Eº‹Code
 = 50 + (
U8
)
	`GëCompBldcEº‹Code
(); ;

94 
ERR_COMP
: 
mu8Eº‹Code
 = 27; ;

95 
ERR_PROTECT_COMP
: 
mu8Eº‹Code
 = 27; ;

98 
ERR_COMP_COMM
: 
mu8Eº‹Code
 = 27; ;

99 
ERR_PROTECT_COMP_COMM
: 
mu8Eº‹Code
 = 27; ;

101 
ERR_HEATER_OVERHEAT
: 
mu8Eº‹Code
 = 40; ;

102 
ERR_TEMP_ROOM_WATER
: 
mu8Eº‹Code
 = 42; ;

103 
ERR_TEMP_AMBIENT
: 
mu8Eº‹Code
 = 43; ;

104 
ERR_TEMP_COLD_WATER
: 
mu8Eº‹Code
 = 44; ;

105 
ERR_TEMP_HOT_WATER_IN
: 
mu8Eº‹Code
 = 46; ;

106 
ERR_TEMP_HOT_WATER
: 
mu8Eº‹Code
 = 47; ;

107 
ERR_TEMP_HEATER
: 
mu8Eº‹Code
 = 48; ;

109 
ERR_DRAIN_PUMP
: 
mu8Eº‹Code
 = 60; ;

110 
ERR_MICRO_SW_DETECT
: 
mu8Eº‹Code
 = 61; ;

111 
ERR_MICRO_SW_MOVE
: 
mu8Eº‹Code
 = 62; ;

112 
ERR_TEMP_EVA_1
: 
mu8Eº‹Code
 = 63; ;

126 : 
mu8Eº‹Code
 = 0; ;

130  
mu8Eº‹Code
;

131 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_error.h

1 #i‚de‡
__DISPLAY_ERROR_H__


2 
	#__DISPLAY_ERROR_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"îr‹.h
"

7 
Di•œyEº‹
(
Eº‹Id_T
 
mu8EºCode
, 
U8
 
mu8Cmd
 );

8 
U8
 
GëEº‹Di•œyId
(
Eº‹Id_T
 
mEºId
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_lib.c

1 
	~"di•œy_lib.h
"

3 
	s_di•_timî_


5 
U16
 
	mTimîBlök
[ 
MAX_DISP_TIMER_BLINK_ID
 ];

6 
U16
 
	mTimîCou¡
[ 
MAX_DISP_TIMER_BLINK_ID
 ];

8 
U16
 
	mTimî
[ 
MAX_DISP_KEY_TIMER_ID
 ];

9 } 
	tDi•Timî_T
;

11 
Di•Timî_T
 
	gDi•Timî
;

14 
	$InôDi•Timî
()

16 
Di•Timî
.
TimîCou¡
[ 
DISP_TIMER_ID_500MS
 ] = 
TIMER_500MS
;

17 
Di•Timî
.
TimîCou¡
[ 
DISP_TIMER_ID_1SEC
 ] = 
TIMER_1SEC
;

18 
	}
}

20 
U8
 
	$IsExpúedDi•Timî
(
U8
 
id
)

22 if–
Di•Timî
.
Timî
[ 
id
 ] == 0 )

24  
TRUE
;

27  
FALSE
;

28 
	}
}

30 
	$SëDi•Timî
(
U8
 
id
, 
U16
 
time
)

32 
Di•Timî
.
Timî
[ 
id
 ] = 
time
;

33 
	}
}

36 
U8
 
	$IsExpúedDi•BlökTimî
(
U8
 
id
)

39 if–
Di•Timî
.
TimîBlök
[ 
id
 ] == 0 )

41  
TRUE
;

44  
FALSE
;

45 
	}
}

47 
	$Re£tDi•BlökTimî
–
U8
 
mu8TimîId
 )

49 
Di•Timî
.
TimîBlök
[ 
mu8TimîId
 ] = Di•Timî.
TimîCou¡
[ mu8TimerId ];

50 
	}
}

58 
U8
 
BlökLED
–U8 
mu8OnOff
, (*
pFun
)(U8 mu8OnOff), U8 
mu8TimîId
 )

60 if–
pFun
 =
NULL
 )

62  
OFF
;

65 if–
	`IsExpúedDi•BlökTimî
–
mu8TimîId
 ) =
TRUE
 )

67 if–
mu8OnOff
 =
OFF
 )

69 
mu8OnOff
 = 
ON
;

73 
mu8OnOff
 = 
OFF
;

77 
	`pFun
–
mu8OnOff
 );

78  
mu8OnOff
;

79 
	}
}

82 
	$Upd©eDi•œyTimî
()

84 
U8
 
i
;

88  
i
 = 0; i < 
MAX_DISP_TIMER_BLINK_ID
; i++ )

90 if–
Di•Timî
.
TimîBlök
[ 
i
 ] == 0 )

92 
	`Re£tDi•BlökTimî
–
i
 );

96 
Di•Timî
.
TimîBlök
[ 
i
 ]--;

101  
i
 = 0; i < 
MAX_DISP_KEY_TIMER_ID
; i++ )

103 if–
Di•Timî
.
Timî
[ 
i
 ] != 0 )

105 
Di•Timî
.
Timî
[ 
i
 ]--;

108 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_lib.h

1 #i‚de‡
__DISPLAY_LIB_H__


2 
	#__DISPLAY_LIB_H__


	)

4 
	~"¥j_ty≥.h
"

8 
InôDi•Timî
();

11 
	#TIMER_100MS
 1U

	)

12 
	#TIMER_500MS
 5U

	)

13 
	#TIMER_1SEC
 10U

	)

14 
	#TIMER_2SEC
 20U

	)

15 
	#TIMER_3SEC
 30U

	)

16 
	#TIMER_4SEC
 40U

	)

17 
	#TIMER_5SEC
 50U

	)

18 
	#TIMER_6SEC
 60U

	)

19 
	#TIMER_7SEC
 70U

	)

20 
	#TIMER_20SEC
 200U

	)

21 
	#TIMER_30SEC
 300U

	)

22 
	#TIMER_20MIN
 12000U

	)

23 
	#TIMER_60MIN
 36000U

	)

28 
	mDISP_TIMER_KEY_ICE
,

29 
	mDISP_TIMER_KEY_AMOUNT
,

30 
	mDISP_TIMER_KEY_HOT
,

31 
	mDISP_TIMER_KEY_HOT_TEMP
,

32 
	mDISP_TIMER_CONFIG_TIME
,

34 
	mDISP_TIMER_ALARM_LOCK_ALL
,

35 
	mDISP_TIMER_ALARM_LOCK_HOT
,

36 
	mDISP_TIMER_ALARM_LOCK_ICE
,

37 
	mDISP_TIMER_ALARM_MAKE_OFF_ICE
,

38 
	mDISP_TIMER_ALARM_MAKE_OFF_COLD
,

40 
	mDISP_TIMER_ALARM_SETTING
,

41 
	mDISP_TIMER_CONFIG_AMOUNT
,

42 
	mDISP_TIMER_VERSION
,

43 
	mDISP_TIMER_MEMENTO
,

44 
	mDISP_TIMER_SLEEP
,

46 
	mDISP_TIMER_CLOCK
,

47 
	mDISP_TIMER_ERROR
,

48 
	mDISP_TIMER_SETTING_MENU
,

49 
	mDISP_TIMER_CUSTOMER_MENU
,

50 
	mDISP_TIMER_SOUND_MENU
,

51 
	mDISP_TIMER_CLOCK_MENU
,

52 
	mDISP_TIMER_UP
,

53 
	mDISP_TIMER_DOWN
,

54 
	mDISP_TIMER_NEXT
,

56 
	mDISP_TIMER_WIFI_AP_ERROR
,

57 
	mDISP_TIMER_ON
,

58 
	mDISP_TIMER_OFF
,

59 
	mDISP_TIMER_SETTING_CLOCK
,

61 
	mMAX_DISP_KEY_TIMER_ID


64 
U8
 
IsExpúedDi•Timî
(U8 
id
);

65 
SëDi•Timî
(
U8
 
id
, 
U16
 
time
);

69 
	#DISP_TIMER_ID_500MS
 0

	)

70 
	#DISP_TIMER_ID_1SEC
 1

	)

71 
	#MAX_DISP_TIMER_BLINK_ID
 2

	)

72 
U8
 
IsExpúedDi•BlökTimî
(U8 
id
);

73 
U8
 
BlökLED
–U8 
mu8OnOff
, (*
pFun
)(U8 mu8OnOff), U8 
mu8TimîId
 );

75 
	`Upd©eDi•œyTimî
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\front.c

1 
	~"‰⁄t.h
"

2 
	~"ì¥om.h
"

3 
	~"timî.h
"

4 
	~"i˚.h
"

5 
	~"hÆ_öput.h
"

6 
	~"utû.h
"

9 
	#LIMIT_TIMER
 30

10 

	)

11 
	s_purifõr_


13 
U8
 
	mC⁄figDeco
[ 
MAX_DECO_NUM
 ];

16 
U8
 
	mLockAŒ
;

17 
U8
 
	mLockHŸ
;

18 
U8
 
	mLockI˚
;

20 
U8
 
	mSy°em
;

21 
U8
 
	mFr⁄tSy°em
;

22 
U8
 
	mCu°omî
;

23 
U8
 
	mFa˘‹ySëup
;

25 
U32
 
	mUnu£dTime
;

26 
U16
 
	mLimôTimî
;

28 
U8
 
	mFŸa
;

29 } 
	tFr⁄t_T
;

31 
Fr⁄t_T
 
	gFr⁄t
;

34 
	$InôFr⁄t
()

36 
Fr⁄t
.
C⁄figDeco
[ 
DECO_LED_WELCOME
 ] = 
TRUE
;

37 
Fr⁄t
.
C⁄figDeco
[ 
DECO_LED_BUTTON
 ] = 
TRUE
;

39 
Fr⁄t
.
LockAŒ
 = 
UNLOCK
;

40 
Fr⁄t
.
LockHŸ
 = 
UNLOCK
;

41 
Fr⁄t
.
LockI˚
 = 
UNLOCK
;

42 
Fr⁄t
.
Fr⁄tSy°em
 = 
SYSTEM_CHP
;

43 
Fr⁄t
.
Sy°em
 = 
SYSTEM_CHP
;

44 
Fr⁄t
.
Cu°omî
 = 
CUSTOMER_VISIT
;

46 
Fr⁄t
.
Fa˘‹ySëup
 = 
FALSE
;

48 
Fr⁄t
.
Unu£dTime
 = 0UL;

49 
Fr⁄t
.
LimôTimî
 = 
LIMIT_TIMER
;

51 
Fr⁄t
.
FŸa
 = 
FALSE
;

52 
	}
}

55 
	$SëFa˘roySëup
(
U8
 
mu8Sëup
)

57 
Fr⁄t
.
Fa˘‹ySëup
 = 
mu8Sëup
;

58 
	}
}

60 
U8
 
	$GëFa˘‹ySëup
()

62  
Fr⁄t
.
Fa˘‹ySëup
;

63 
	}
}

71 
	$CheckFa˘roySëup
()

73 if–
Fr⁄t
.
Fa˘‹ySëup
 =
FALSE
 )

77 
Fr⁄t
.
Fa˘‹ySëup
 = 
TRUE
;

78 
	`SaveEïromId
–
EEP_ID_FACTORY_SETUP
 );

80 
	}
}

83 
	$SëC⁄figDeco
(
U8
 
mu8Id
, U8 
mu8OnOff
 )

85 if–
mu8OnOff
 !
TRUE
 && mu8OnOf‡!
FALSE
 )

89 
Fr⁄t
.
C⁄figDeco
[
mu8Id
] = 
mu8OnOff
;

90 
	`SaveEïromId
–
EEP_ID_CONF_DECO_LED
 );

91 
	}
}

93 
U8
 
	$GëC⁄figDeco
(
U8
 
mu8Id
)

95  
Fr⁄t
.
C⁄figDeco
[
mu8Id
];

96 
	}
}

98 
	$SëSy°em
(
U8
 
mu8Ty≥
 )

100 
Fr⁄t
.
Sy°em
 = 
mu8Ty≥
;

101 
	}
}

103 
U8
 
	$GëSy°em
()

105 #i‡(
CONFIG_SYSTEM_TYPE
 =
CONFIG_SYSTEM_CHP
 )

106  
SYSTEM_CHP
;

107 #ñi‡(
CONFIG_SYSTEM_TYPE
 =
CONFIG_SYSTEM_CP
 )

108  
SYSTEM_CP
;

109 #ñi‡(
CONFIG_JIG_RBK_FRONT
 != 0)

110  
Fr⁄t
.
Fr⁄tSy°em
;

112  
Fr⁄t
.
Sy°em
;

114 
	}
}

117 
	#DEFAULT_CHECK_COUNT
 100

118 
	`CheckSy°em
–)

	)

120 
U16
 
	gCou¡Chp
 = 
DEFAULT_CHECK_COUNT
;

121 
U16
 
	gCou¡Cp
 = 
DEFAULT_CHECK_COUNT
;

122 
U8
 
	gIsD⁄eCheck
 = 
FALSE
;

126 
Dñay_MS
(30);

128 if–
HAL_GëHóãrPBA
() != 0 )

130 
Cou¡Cp
 = 
DEFAULT_CHECK_COUNT
;

131 
	gCou¡Chp
--;

132 if–
	gCou¡Chp
 == 0 )

134 
SëSy°em
–
SYSTEM_CHP
);

135 
	gIsD⁄eCheck
 = 
TRUE
;

140 
	gCou¡Chp
 = 
DEFAULT_CHECK_COUNT
;

141 
	gCou¡Cp
--;

142 if–
	gCou¡Cp
 == 0 )

144 
SëSy°em
–
SYSTEM_CP
);

145 
	gIsD⁄eCheck
 = 
TRUE
;

149 
	gIsD⁄eCheck
 =
FALSE
);

153 
	$SëFr⁄tSy°em
(
U8
 
mu8Ty≥
 )

155 
Fr⁄t
.
Fr⁄tSy°em
 = 
mu8Ty≥
;

156 
	}
}

158 
U8
 
	$GëFr⁄tSy°em
()

160 #i‡(
CONFIG_SYSTEM_TYPE
 =
CONFIG_SYSTEM_CHP
 )

161  
SYSTEM_CHP
;

162 #ñi‡(
CONFIG_SYSTEM_TYPE
 =
CONFIG_SYSTEM_CP
 )

163  
SYSTEM_CP
;

165  
Fr⁄t
.
Fr⁄tSy°em
;

167 
	}
}

169 
	$SëCu°omîTy≥
(
U8
 
mu8Ty≥
)

171 
Fr⁄t
.
Cu°omî
 = 
mu8Ty≥
;

172 
	`SaveEïromId
–
EEP_ID_CUSTOMER
 );

173 
	}
}

175 
U8
 
	$GëCu°omîTy≥
()

177  
Fr⁄t
.
Cu°omî
;

178 
	}
}

180 
	$SëLockAŒ
(
U8
 
mu8Lock
 )

182 if–
mu8Lock
 !
LOCK
 && mu8Lock !
UNLOCK
 )

187 
Fr⁄t
.
LockAŒ
 = 
mu8Lock
;

188 
	`SaveEïromId
–
EEP_ID_LOCK_ALL
 );

189 
	}
}

191 
U8
 
	$GëLockAŒ
()

193  
Fr⁄t
.
LockAŒ
;

194 
	}
}

197 
	$SëLockHŸ
(
U8
 
mu8Lock
 )

199 if–
mu8Lock
 !
LOCK
 && mu8Lock !
UNLOCK
 )

204 
Fr⁄t
.
LockHŸ
 = 
mu8Lock
;

205 
	`SaveEïromId
–
EEP_ID_LOCK_HOT
 );

206 
	}
}

208 
U8
 
	$GëLockHŸ
()

210  
Fr⁄t
.
LockHŸ
;

211 
	}
}

214 
	$SëLockI˚
(
U8
 
mu8Lock
 )

216 if–
mu8Lock
 !
LOCK
 && mu8Lock !
UNLOCK
 )

221 
Fr⁄t
.
LockI˚
 = 
mu8Lock
;

222 
	`SaveEïromId
–
EEP_ID_LOCK_ICE
 );

223 
	}
}

225 
U8
 
	$GëLockI˚
()

227  
Fr⁄t
.
LockI˚
;

228 
	}
}

231 
U32
 
	$GëSy°emUnu£dTime
()

233  
Fr⁄t
.
Unu£dTime
;

234 
	}
}

236 
	$Re£tUnu£dTime
()

238 
Fr⁄t
.
Unu£dTime
 = 0UL;

239 
	}
}

241 
	$Cou¡ögUnu£dTime
()

243 if–
Fr⁄t
.
Unu£dTime
 <= 0xFFFFFFFFUL )

245 
Fr⁄t
.
Unu£dTime
++;

247 
	}
}

249 
U8
 
	$GëFŸaReboŸ
()

251  
Fr⁄t
.
FŸa
;

252 
	}
}

254 
	$SëFŸaReboŸ
(
U8
 
mu8FŸa
)

256 
Fr⁄t
.
FŸa
 = 
mu8FŸa
;

257 
	}
}

260 
U8
 
	$IsExpúedTe°KeyLimôTimî
()

262 if–
Fr⁄t
.
LimôTimî
 != 0 )

264  
FALSE
;

266  
TRUE
;

267 
	}
}

270 
	$Upd©eTe°KeyLimôTimî
()

272 if–
Fr⁄t
.
LimôTimî
 != 0 )

274 
Fr⁄t
.
LimôTimî
--;

276 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\front.h

1 #i‚de‡
__FRONT_H__


2 
	#__FRONT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôFr⁄t
();

8 
SëFa˘roySëup
(
U8
 
mu8Sëup
);

9 
U8
 
GëFa˘‹ySëup
();

10 
CheckFa˘roySëup
();

13 
	#DECO_LED_BUTTON
 0

	)

14 
	#DECO_LED_WELCOME
 1

	)

15 
	#MAX_DECO_NUM
 2

	)

16 
SëC⁄figDeco
(
U8
 
mu8Id
, U8 
mu8OnOff
 );

17 
U8
 
GëC⁄figDeco
(U8 
mu8Id
);

19 
	#SYSTEM_CHP
 0

	)

20 
	#SYSTEM_CP
 1

	)

21 
SëSy°em
(
U8
 
mu8Ty≥
 );

22 
U8
 
GëSy°em
();

24 
SëFr⁄tSy°em
(
U8
 
mu8Ty≥
 );

25 
U8
 
GëFr⁄tSy°em
();

27 
CheckSy°em
( );

30 
	#CUSTOMER_SELF
 0

	)

31 
	#CUSTOMER_VISIT
 1

	)

32 
SëCu°omîTy≥
(
U8
 
mu8Ty≥
);

33 
U8
 
GëCu°omîTy≥
();

35 
	#LOCK
 1

	)

36 
	#UNLOCK
 0

	)

37 
SëLockAŒ
(
U8
 
mu8Lock
 );

38 
U8
 
GëLockAŒ
();

40 
SëLockHŸ
(
U8
 
mu8Lock
 );

41 
U8
 
GëLockHŸ
();

43 
SëLockI˚
(
U8
 
mu8Lock
 );

44 
U8
 
GëLockI˚
();

48 
	#SILVER_CARE_TIME_MIN
 (2880ULË

	)

49 
U32
 
GëSy°emUnu£dTime
();

50 
Re£tUnu£dTime
();

51 
Cou¡ögUnu£dTime
();

54 
U8
 
GëFŸaReboŸ
();

55 
SëFŸaReboŸ
(
U8
 
mu8FŸa
);

59 
U8
 
IsExpúedTe°KeyLimôTimî
();

60 
Upd©eTe°KeyLimôTimî
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\process_display.c

1 
	~"hw.h
"

2 
	~"di•œy.h
"

3 
	~"¥o˚ss_di•œy.h
"

5 
	~"‰⁄t.h
"

6 
	~"cﬁd_w©î.h
"

7 
	~"hŸ_w©î.h
"

8 
	~"w©î_out.h
"

9 
	~"w©î_out_comm⁄.h
"

10 
	~"ènk_˛ón.h
"

11 
	~"i˚.h
"

12 
	~"i˚_fuŒ.h
"

13 
	~"powî_ßvög.h
"

15 
	~"hÆ_key.h
"

16 
	~"hÆ_uv.h
"

17 
	~"ãmp.h
"

19 
	~"îr‹.h
"

20 
	~"sound.h
"

21 
	~"ì¥om.h
"

22 
	~"vÆve.h
"

23 
	~"key.h
"

24 
	~"key_n‹mÆ_h™dÀr.h
"

25 
	~"£rvi˚.h
"

26 
	~"i˚_do‹.h
"

27 
	~"uv.h
"

28 
	~"døö_w©î.h
"

29 
	~"Êush_w©î_out.h
"

30 
	~"hŸ_w©î_out.h
"

31 
	~"hŸ_w©î_out_¥ehót.h
"

32 
	~"fûãr.h
"

33 
	~"cody_kô.h
"

34 
	~"voi˚.h
"

35 
	~"em±y_cﬁd_ènk.h
"

37 
	~"sm¨t_check.h
"

38 
	~"dügnosis.h
"

40 
	~"di•œy_lib.h
"

41 
	~"di•œy_eﬁ.h
"

42 
	~"di•œy_îr‹.h
"

43 
	~"di•œy_˛ock.h
"

44 
	~"f˘.h
"

45 
	~"WIFI_C⁄åﬁ.h
"

51 
Di•œyW©îOut
();

52 
Di•œyI˚Out
();

54 
Di•œySñW©î
();

55 
Di•œySñHŸ
();

56 
Di•œySñAmou¡
();

57 
Di•œy7Segmít
();

58 
Di•œyWifiSètus
();

61 
Pro˚ssDi•œyBoŸ
();

62 
Pro˚ssDi•œySëtögMode
();

63 
Pro˚ssDi•œyFûãrMode
();

64 
Pro˚ssDi•œySoundMode
();

65 
Pro˚ssDi•œyCu°omîMode
();

66 
Pro˚ssDi•œySavögMode
();

67 
Pro˚ssDi•œyN‹mÆMode
();

70 
	s_di•œy_


72 
U8
 
	mInô
;

73 
U8
 
	mVîsi⁄
;

74 
U8
 
	mVîsi⁄Sãp
;

80 
U8
 
	mSëtög
;

83 
U8
 
	mFûãr
;

84 
U8
 
	mSound
;

85 
U8
 
	mCu°omî
;

86 
U8
 
	mClock
;

87 
U8
 
	mFŸa
;

89 
U8
 
	mHŸPªHót
;

90 
U8
 
	mI˚Out
;

93 
U8
 
	mMemíto
;

94 
U8
 
	mMemítoSãp
;

95 
U8
 
	mMemítoTimî
;

97 } 
	tDi•œy_T
;

99 
Di•œy_T
 
	gDi•
;

102 
	$InôDi•œy
()

105 
	`InôDi•Timî
();

106 
	`SëDi•Timî
–
DISP_TIMER_CONFIG_TIME
, 
TIMER_30SEC
 );

107 
	`SèπDi•TimîId
–
DISP_TIMER_SLEEP
 );

110 
Di•
.
Inô
 = 
FALSE
;

115 
Di•
.
HŸPªHót
 = 0;

117 
Di•
.
Sëtög
 = 
FALSE
;

119 
Di•
.
Fûãr
 = 
FALSE
;

120 
Di•
.
Sound
 = 
FALSE
;

121 
Di•
.
Cu°omî
 = 
FALSE
;

122 
Di•
.
Clock
 = 
FALSE
;

123 
Di•
.
FŸa
 = 
FALSE
;

126 
	`Tu∫OffAŒLED
();

127 
	}
}

139 
U8
 
	$GëDi•œyInô
()

141  
Di•
.
Inô
;

142 
	}
}

144 
	$SèπDi•œyInô
()

146 
Di•
.
Inô
 = 
FALSE
;

148 
	`InôDi•Timî
();

149 
	}
}

151 
	s_di•_id_time_


153 
U8
 
	mid
;

154 
U16
 
	mmTime
;

155 } 
	tDi•TimîVÆ_T
;

158 
Di•TimîVÆ_T
 
	gDi•TimîVÆTabÀ
[] =

160 { 
DISP_TIMER_CLOCK
, 
TIMER_20SEC
 },

161 { 
DISP_TIMER_ERROR
, 
TIMER_3SEC
 },

163 { 
DISP_TIMER_CONFIG_AMOUNT
, 
TIMER_2SEC
 },

164 { 
DISP_TIMER_ALARM_SETTING
, 
TIMER_2SEC
 },

165 { 
DISP_TIMER_ALARM_LOCK_ALL
, 
TIMER_2SEC
 },

166 { 
DISP_TIMER_ALARM_LOCK_HOT
, 
TIMER_2SEC
 },

167 { 
DISP_TIMER_ALARM_LOCK_ICE
, 
TIMER_2SEC
 },

168 { 
DISP_TIMER_ALARM_MAKE_OFF_ICE
, 
TIMER_2SEC
 },

169 { 
DISP_TIMER_ALARM_MAKE_OFF_COLD
, 
TIMER_2SEC
 },

171 { 
DISP_TIMER_WIFI_AP_ERROR
, 
TIMER_5SEC
 },

173 { 
DISP_TIMER_UP
, 
TIMER_1SEC
 },

174 { 
DISP_TIMER_DOWN
, 
TIMER_1SEC
 },

175 { 
DISP_TIMER_NEXT
, 
TIMER_1SEC
 },

177 { 
DISP_TIMER_CUSTOMER_MENU
, 
TIMER_6SEC
 },

178 { 
DISP_TIMER_SOUND_MENU
, 
TIMER_6SEC
 },

180 { 
DISP_TIMER_KEY_ICE
, 
TIMER_7SEC
 },

181 { 
DISP_TIMER_KEY_AMOUNT
, 
TIMER_7SEC
 },

182 { 
DISP_TIMER_KEY_HOT
, 
TIMER_7SEC
 },

183 { 
DISP_TIMER_KEY_HOT_TEMP
, 
TIMER_7SEC
 },

185 { 
DISP_TIMER_SETTING_MENU
, 
TIMER_20SEC
 },

186 { 
DISP_TIMER_CLOCK_MENU
, 
TIMER_20SEC
 },

187 { 
DISP_TIMER_SLEEP
, 
TIMER_60MIN
 },

189 { 
DISP_TIMER_ON
, 
TIMER_2SEC
 },

190 { 
DISP_TIMER_OFF
, 
TIMER_2SEC
 },

191 { 
DISP_TIMER_SETTING_CLOCK
, 
TIMER_2SEC
 }

193 
	#SZ_DISP_TIMER_TABLE
 ((
Di•TimîVÆTabÀ
)/(
Di•TimîVÆ_T
))

	)

195 
U16
 
	$FödTimeVÆ
(
U8
 
id
)

197 
U8
 
i
;

199  
i
 = 0; i < 
SZ_DISP_TIMER_TABLE
; i++ )

201 if–
id
 =
Di•TimîVÆTabÀ
[ 
i
 ].id )

203  
Di•TimîVÆTabÀ
[ 
i
 ].
mTime
;

208 
	}
}

211 
	$SèπDi•TimîId
(
U8
 
id
)

213 
U16
 
mTime
;

215 
mTime
 = 
	`FödTimeVÆ
–
id
 );

216 
	`SëDi•Timî
–
id
, 
mTime
 );

217 
	}
}

219 
	$St›Di•TimîId
(
U8
 
id
)

221 
	`SëDi•Timî
–
id
, 0);

222 
	}
}

226 
	$SëVîsi⁄Di•
(
U8
 
mu8Di•Sec
)

228 
Di•
.
Vîsi⁄
 = 
TRUE
;

230 
	`SëDi•Timî
–
DISP_TIMER_VERSION
, 
mu8Di•Sec
);

231 
	}
}

234 
	$SëSëtögDi•
(
U8
 
mu8C⁄f
)

236 
Di•
.
Sëtög
 = 
mu8C⁄f
;

237 
	}
}

239 
U8
 
	$GëSëtögDi•
()

241  
Di•
.
Sëtög
;

242 
	}
}

246 
	$SëClockDi•
(
U8
 
mu8C⁄f
)

248 
Di•
.
Clock
 = 
mu8C⁄f
;

249 
	}
}

251 
U8
 
	$GëClockDi•
()

253  
Di•
.
Clock
;

254 
	}
}

257 
	$SëFûãrDi•
(
U8
 
mu8C⁄f
)

259 
Di•
.
Fûãr
 = 
mu8C⁄f
;

260 
	}
}

262 
U8
 
	$GëFûãrDi•
()

264  
Di•
.
Fûãr
;

265 
	}
}

268 
	$SëSoundDi•
(
U8
 
mu8C⁄f
)

270 
Di•
.
Sound
 = 
mu8C⁄f
;

271 
	}
}

273 
U8
 
	$GëSoundDi•
()

275  
Di•
.
Sound
;

276 
	}
}

280 
	$SëCu°omîDi•
(
U8
 
mu8C⁄f
)

282 
Di•
.
Cu°omî
 = 
mu8C⁄f
;

283 
	}
}

285 
U8
 
	$GëCu°omîDi•
()

287  
Di•
.
Cu°omî
;

288 
	}
}

291 
U8
 
	$GëMemítoDi•
()

293  
Di•
.
Memíto
;

294 
	}
}

298 
U8
 
	$GëFŸaDi•
()

300  
Di•
.
FŸa
;

301 
	}
}

303 
	$SëFŸaDi•
(
U8
 
mu8C⁄f
 )

305 
Di•
.
FŸa
 = 
mu8C⁄f
;

306 
	}
}

308 
	$SëMemítoDi•
(
U8
 
mu8C⁄f
 )

310 
Di•
.
Memíto
 = 
mu8C⁄f
;

311 
Di•
.
MemítoSãp
 = 0;

313 
	`SëDi•Timî
–
DISP_TIMER_MEMENTO
, 0);

314 
	}
}

317 
U8
 
	$IsExpúedC⁄figTime
()

319 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_CONFIG_TIME
 ) =
FALSE
 )

321  
FALSE
;

324  
TRUE
;

325 
	}
}

328 
U8
 
	$IsWaôHŸOut
()

330 if–
	`IsSëHŸOutMode
–
HOT_OUT_COOLING
 ) =
TRUE


331 || 
	`IsSëHŸOutMode
–
HOT_OUT_PRE_HEATING
 ) =
TRUE


332 || 
	`IsSëHŸOutMode
–
HOT_OUT_INIT_DRAIN
 ) =
TRUE
 )

334  
TRUE
;

337  
FALSE
;

338 
	}
}

341 
	$Di•I˚OutEf„˘
()

343 if–
Di•
.
I˚Out
 == 0 )

345 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_ICE_1
 );

347 if–
Di•
.
I˚Out
 == 1 )

349 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_ICE_2
 );

351 if–
Di•
.
I˚Out
 == 2 )

353 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_ICE_3
 );

357 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_ICE_4
 );

360 if–
	`IsExpúedDi•BlökTimî
–
DISP_TIMER_ID_500MS
 ) =
TRUE
 )

362 
Di•
.
I˚Out
++;

363 if–
Di•
.
I˚Out
 > 3 )

365 
Di•
.
I˚Out
 = 0;

369 
	}
}

371 
	$Di•7Seg_W©îOut_Debug
()

373 
U16
 
mTemp
;

375 if–
	`IsWaôHŸOut
(Ë=
TRUE
 )

377 #i‡!
CONFIG_TEST_PREHEAT


378 
mTemp
 =(
U16
)(
	`GëTemp
–
TEMP_ID_HEATER
 ) * 10.0f);

379 
	`Di•W©îOutAmou¡
–
mTemp
 );

382 
U8
 
mu8Temp
;

383 
U8
 
mu8HŸTy≥
;

385 
mu8HŸTy≥
 = 
	`GëHŸSñe˘
();

386 
mu8Temp
 = (
U8
)
	`GëHŸSñe˘Temp
–
mu8HŸTy≥
 );

387 
	`Di•HŸW©îPªHótög
–
	`GëHŸOutPªHótLevñ
(), 
mu8Temp
 );

392 
mTemp
 =(
U16
)(
	`GëTemp
–
TEMP_ID_HOT_OUT
 ) * 10.0f);

393 
	`Di•W©îOutAmou¡
–
mTemp
 );

395 
	}
}

397 
	$Di•7Seg_W©îOut
()

399 
U16
 
mu16VÆ
;

400 
U8
 
mu8HŸTy≥
;

401 
U8
 
mu8Amou¡
;

402 
U8
 
mu8Temp
;

405 
mu16VÆ
 = 
	`GëW©îOutAmou¡
();

406 
mu8Amou¡
 = 
	`GëW©îOutAmoutTy≥
();

407 
mu8HŸTy≥
 = 
	`GëHŸSñe˘
();

408 
mu8Temp
 = (
U8
)
	`GëHŸSñe˘Temp
–
mu8HŸTy≥
 );

414 if–
	`IsWaôHŸOut
(Ë=
TRUE
 )

416 
	`Di•HŸW©îPªHótög
–
	`GëHŸOutPªHótLevñ
(), 
mu8Temp
 );

418 if–
mu8Amou¡
 =
FIXED_AMOUNT_INFINITY
 )

420 
	`Di•W©îOutAmou¡Inföôy
();

424 
	`Di•W©îOutAmou¡
–
mu16VÆ
 );

427 
	`Di•Amou¡SñOff
–
mu8Amou¡
 );

428 
	`Di•HŸSñOff
–
	`GëLockHŸ
() );

431 if–
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_HOT
 )

433 
	`Di•HŸSñOff
–
UNLOCK
 );

438 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_HOT
 );

441 
	}
}

444 
	$Di•7Seg_I˚Out
()

446 
	`Di•I˚OutEf„˘
();

449 
	`Re£tInföôyCou¡
();

450 
	}
}

452 
	$Di•7Seg_Eº‹Wifi
()

454 
U8
 
mu8Eº‹
 = 0;

456 
mu8Eº‹
 = 
	`GëWifiSètusVÆue
(
WIFI_STATUS_ERROR
);

457 
	`Di•SegmítWifiEº‹
–
mu8Eº‹
 );

458 
	}
}

460 
	$Di•7SegAmou¡Lôî
(
U8
 
mu8OnOff
)

462 
U8
 
mu8Amou¡
;

464 
mu8Amou¡
 = 
	`GëW©îOutAmoutTy≥
();

465 if–
mu8OnOff
 =
OFF
 )

467 
	`Di•SegmítOff
();

471 if–
mu8Amou¡
 =
FIXED_AMOUNT_HALF
 )

473 
	`Di•W©îOutAmou¡
( 120 );

475 if–
mu8Amou¡
 =
FIXED_AMOUNT_ONE
 )

477 
	`Di•W©îOutAmou¡
( 250 );

479 if–
mu8Amou¡
 =
FIXED_AMOUNT_TWO
 )

481 
	`Di•W©îOutAmou¡
( 500 );

483 if–
mu8Amou¡
 =
FIXED_AMOUNT_USER
 )

485 
U16
 
mu16Lôî
;

487 
mu16Lôî
 = 
	`GëW©îOutU£rAmou¡Lôî
();

488 
	`Di•W©îOutAmou¡
–
mu16Lôî
 );

490 if–
mu8Amou¡
 =
FIXED_AMOUNT_INFINITY
 )

492 
	`Di•W©îOutAmou¡
( 9999 );

495 
	}
}

497 
	$Di•7Seg_N‹mÆ
()

500 
Di•
.
I˚Out
 = 0;

503 
Di•
.
HŸPªHót
 = 0;

506 if–
	`GëW©îOut
(Ë=
FALSE
 )

508 
	`Re£tInföôyCou¡
();

512 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_HOT_TEMP
 ) =
FALSE
 )

515 
U8
 
mu8Temp
;

516 
U8
 
mu8HŸTy≥
;

518 
mu8HŸTy≥
 = 
	`GëHŸSñe˘
();

519 
mu8Temp
 = (
U8
)
	`GëHŸSñe˘Temp
–
mu8HŸTy≥
 );

520 
	`Di•Temp
–
mu8Temp
 );

525 
U8
 
mu8OnOff
 = 
ON
;

527 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_CONFIG_AMOUNT
 ) =
TRUE
 )

529 
mu8OnOff
 = 
ON
;

530 
	`Di•7SegAmou¡Lôî
–
ON
 );

534 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•7SegAmou¡Lôî
, 
DISP_TIMER_ID_500MS
 );

539 
	}
}

542 
	$Di•œy7Segmít
()

549 #i‡
CONFIG_TEST_HOT_OUT


550 if–
	`GET_STATUS_VALVE_HOT_IN
() == 1 &&

551 
	`GET_STATUS_VALVE_HOT_OUT
() == 0 )

553 
U16
 
mTemp
;

554 
mTemp
 =(
U16
)(
	`GëTemp
–
TEMP_ID_HEATER
 ) * 10.0f);

555 
	`Di•W©îOutAmou¡
–
mTemp
 );

562 if–
	`GëW©îOut
(Ë=
TRUE
 )

564 if–
	`GëHŸC⁄figTe°
(Ë=
TRUE
 )

566 
	`Di•7Seg_W©îOut_Debug
();

570 
	`Di•7Seg_W©îOut
();

573 if–
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

575 
	`Di•7Seg_I˚Out
();

577 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_WIFI_AP_ERROR
 ) =
FALSE
 )

579 
	`Di•7Seg_Eº‹Wifi
();

583 
	`Di•7Seg_N‹mÆ
();

585 
	}
}

588 
	#NUM_WIFI_BLINK_STEP
 4

	)

589 c⁄° 
U8
 
	gmWifiBlökTime
[ 
NUM_WIFI_BLINK_STEP
 ] = { 1, 1, 1, 7 };

590 
U8
 
WifiApModeBlökLED
–U8 
mu8Index
, (*
pFun
)(U8 
mu8OnOff
 ) )

592 
U8
 
mu8Cou¡
 = 0;

594 if–
mu8Cou¡
 != 0 )

596 
mu8Cou¡
--;

598  
mu8Index
 )

601 
	`pFun
–
ON
 );

604 
	`pFun
–
OFF
 );

607 
	`pFun
–
ON
 );

610 
	`pFun
–
OFF
 );

614 
mu8Index
 = 0;

615 
	`pFun
–
OFF
 );

621 if–
mu8Cou¡
 == 0 )

623 
mu8Index
++;

624 if–
mu8Index
 >
NUM_WIFI_BLINK_STEP
 )

626 
mu8Index
 = 0;

628 
mu8Cou¡
 = 
mWifiBlökTime
[ 
mu8Index
 ];

632  
mu8Index
;

633 
	}
}

635 
U8
 
	gdbg_wifi_°©us
 = 0;

636 
	$Di•œyWifiSètus
()

638 
U8
 
mu8OnOff
 = 
OFF
;

639 
U8
 
mu8LedIndex
 = 0;

640 
E_WIFI_DISPLAY_T
 
mWifiSètus
 = 
WIFI_DISP_OFF
;

642 
mWifiSètus
 = (
E_WIFI_DISPLAY_T
)
	`GëWifiSètusVÆue
(
WIFI_STATUS_DISP
);

643 
dbg_wifi_°©us
 = 
mWifiSètus
;

644  
mWifiSètus
 )

646 
WIFI_DISP_OFF
:

647 
	`Di•Wifi
–
OFF
 );

648 
	`Di•WifiBÀ
–
OFF
 );

649 
mu8OnOff
 = 
ON
;

650 
mu8LedIndex
 = 0;

653 
WIFI_DISP_AP1
:

654 
WIFI_DISP_AP2
:

655 
WIFI_DISP_AP3
:

656 
WIFI_DISP_AP4
:

657 
WIFI_DISP_AP5
:

658 
WIFI_DISP_TRY
:

659 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•Wifi
, 
DISP_TIMER_ID_500MS
 );

660 
	`Di•WifiBÀ
–
OFF
 );

663 
WIFI_DISP_APMODE
:

664 
WIFI_DISP_AP_START
:

665 
WIFI_DISP_AP_STEP0
:

666 
WIFI_DISP_AP_STEP1
:

667 
WIFI_DISP_AP_STEP2
:

668 
WIFI_DISP_AP_STEP3
:

669 
mu8LedIndex
 = 
	`WifiApModeBlökLED
–mu8LedIndex, 
Di•Wifi
 );

670 
	`Di•WifiBÀ
–
OFF
 );

673 
WIFI_DISP_CONNECT
:

674 
	`Di•Wifi
–
ON
 );

675 
	`Di•WifiBÀ
–
OFF
 );

678 
WIFI_DISP_BLE_START
:

679 
WIFI_DISP_BLE_STEP0
:

680 
WIFI_DISP_BLE_STEP1
:

681 
WIFI_DISP_BLE_STEP2
:

682 
WIFI_DISP_BLE_STEP3
:

683 
mu8LedIndex
 = 
	`WifiApModeBlökLED
–mu8LedIndex, 
Di•Wifi
 );

684 
	`Di•WifiBÀ
–
OFF
 );

688 
	}
}

693 
	$Di•œyWóthî
()

695 
U8
 
mu8Ic⁄
 = 
WEATHER_OFF
;

696 
U16
 
mu16Wóthî
;

697 
E_WIFI_DISPLAY_T
 
mWifiSètus
 = 
WIFI_DISP_OFF
;

700 
mWifiSètus
 = (
E_WIFI_DISPLAY_T
)
	`GëWifiSètusVÆue
(
WIFI_STATUS_DISP
);

701 if–
mWifiSètus
 !
WIFI_DISP_CONNECT
 )

703 
mu8Ic⁄
 = 
WEATHER_OFF
;

707 
mu16Wóthî
 = 
	`GëWifiReque°VÆue
(
WIFI_RQST_WEATHER
);

708  
mu16Wóthî
 )

712 
mu8Ic⁄
 = 
WEATHER_SUN
;

719 
mu8Ic⁄
 = 
WEATHER_CLOUD
;

728 
mu8Ic⁄
 = 
WEATHER_RAIN
;

737 
	`Di•Wóthî
–
mu8Ic⁄
 );

738 
	}
}

741 
	$Di•œyLockAŒ
()

745 if–
	`GëLockAŒ
(Ë=
LOCK
 )

747 
	`Di•AŒLockSñ
–
ON
 );

751 
	`Di•AŒLockSñ
–
OFF
 );

753 
	}
}

760 
U8
 
	$IsTu∫OnW©îOut
()

762 if–
	`GëW©îOut
(Ë=
FALSE
 )

764  
FALSE
;

767 if–
	`IsFlushOut
(Ë=
TRUE
 )

769  
FALSE
;

772 if–
	`IsHŸOut
(Ë=
TRUE


773 && 
	`IsSëHŸOutMode
–
HOT_OUT_INIT_DRAIN
 ) =
TRUE


776  
FALSE
;

779  
TRUE
;

780 
	}
}

782 
	$Di•œyW©îOut
()

784 if–
	`IsTu∫OnW©îOut
(Ë=
TRUE
 )

786 
	`Di•W©îOut
–
ON
 );

790 
	`Di•W©îOut
–
OFF
 );

792 
	}
}

794 
	$Di•œyI˚Out
()

796 if–
	`IsO≥nI˚Do‹
(Ë=
FALSE
 )

799 
	`Di•I˚Out
–
OFF
 );

803 
	`Di•I˚Out
–
ON
 );

805 
	}
}

809 
	#REGION_COLD_GOOD
 0

	)

810 
	#REGION_COLD_BAD
 1

	)

811 
	$Di•œyCﬁdTemp
()

813 
U8
 
mu8Regi⁄
 = 
REGION_COLD_GOOD
;

814 
TEMP_T
 
tCuºítTemp
 = 0.0f;

817 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

819 
mu8Regi⁄
 = 
REGION_COLD_GOOD
;

820 
	`Di•CﬁdTemp
–
OFF
, OFF );

825 
tCuºítTemp
 = 
	`GëTemp
–
TEMP_ID_COLD_WATER
 );

826 if–
mu8Regi⁄
 =
REGION_COLD_GOOD
 )

828 if–
tCuºítTemp
 >
	`GëCﬁdT¨gëOnTemp
() )

830 
mu8Regi⁄
 = 
REGION_COLD_BAD
;

835 if–
tCuºítTemp
 <
	`GëCﬁdT¨gëOffTemp
() )

837 
mu8Regi⁄
 = 
REGION_COLD_GOOD
;

842 if–
mu8Regi⁄
 =
REGION_COLD_BAD
 )

844 
	`Di•CﬁdTemp
–
ON
, 
FALSE
 );

848 
	`Di•CﬁdTemp
–
ON
, 
TRUE
 );

850 
	}
}

852 
	#REGION_COLD_GOOD
 0

	)

853 
	#REGION_COLD_BAD
 1

	)

854 
	$Di•œyCﬁdTemp
()

857 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

859 
	`Di•CﬁdTemp
–
OFF
, OFF );

863 if–
	`GëCﬁdW©îTempSètus
(Ë=
COLD_STATUS_GOOD
 )

865 
	`Di•CﬁdTemp
–
ON
, 
TRUE
 );

869 
	`Di•CﬁdTemp
–
ON
, 
FALSE
 );

871 
	}
}

874 
	$Di•œySñI˚
()

876 
U8
 
mu8Turbo
;

877 
U8
 
mu8Size
;

878 
U8
 
mu8Lock
;

881 
mu8Turbo
 = 
	`GëI˚Turbo
();

882 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

884 
mu8Turbo
 = 
FALSE
;

886 
mu8Lock
 = 
	`GëLockI˚
();

887 
mu8Size
 = 
	`GëI˚Size
();

888 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

890 
	`Di•I˚SñOff
(
OFF
, OFF, 
mu8Lock
, OFF, 
mu8Size
);

892 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_SLEEP
 ) =
TRUE
 )

894 
	`Di•I˚SñOff
(
ON
, 
OFF
, 
mu8Lock
, OFF, 
mu8Size
);

896 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_ICE
 ) =
FALSE
 )

898 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

900 
	`Di•I˚SizeSñ
–
mu8Size
, 
mu8Lock
, 
ON
 );

904 
	`Di•I˚Sñ
–
mu8Turbo
, 
mu8Size
, 
mu8Lock
, 
ON
 );

909 
	`Di•I˚SñOff
(
ON
, 
mu8Turbo
, 
mu8Lock
, ON, 
mu8Size
);

912 
	}
}

914 
	$Di•œySñI˚Turbo
()

916 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

918 if–
	`GëI˚C⁄figMake
(Ë=
TRUE
 )

920 
	`Di•I˚Turbo
–
	`GëI˚Turbo
() );

924 
	`Di•I˚TurboOff
();

927 
	}
}

929 
	$Di•œySñW©î
()

931 
U8
 
mu8Sñ
;

939 
mu8Sñ
 = 
	`GëW©îOutSñe˘
();

940 
	`Di•W©îSñ
–
mu8Sñ
, 
	`GëCﬁdW©îC⁄figMake
() );

942 
	}
}

944 
	$Di•œySñHŸ
()

947 
U8
 
mu8Sñ
;

948 
U8
 
mu8Lock
;

951 
mu8Sñ
 = 
	`GëHŸSñe˘
();

952 
mu8Lock
 = 
	`GëLockHŸ
();

953 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_HOT
 ) =
FALSE
 )

955 
	`Di•HŸSñ
–
mu8Sñ
, 
mu8Lock
, 
ON
 );

959 
	`Di•HŸSñOff
–
mu8Lock
 );

960 
√idf


962 
	`Di•HŸSñOff
–
	`GëLockHŸ
() );

968 
	`Di•œySñAmou¡
()

970 
U8
 
mu8Sñ
;

973 
mu8Sñ
 = 
	`GëW©îOutAmoutTy≥
();

974 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_SLEEP
 ) =
TRUE
 )

976 
	`Di•Amou¡
(
OFF
);

978 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_AMOUNT
 ) =
FALSE
 )

981 
	`Di•Amou¡Sñ
–
mu8Sñ
, 
ON
 );

986 
	`Di•Amou¡SñOff
–
mu8Sñ
 );

990 
	`Di•œySñAmou¡
()

992 
U8
 
mu8Sñ
;

995 
mu8Sñ
 = 
	`GëW©îOutAmoutTy≥
();

996 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_SLEEP
 ) =
TRUE
 )

998 
	`Di•Amou¡
(
ON
);

1000 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_AMOUNT
 ) =
FALSE
 )

1003 
	`Di•Amou¡Sñ
–
mu8Sñ
, 
ON
 );

1008 
	`Di•Amou¡SñOff
–
mu8Sñ
 );

1012 
	`Di•œyClock
()

1014 
TimeD©a_T
 
mTime
;

1016 
	`GëRtcTime
–&
mTime
 );

1017 
	`Di•Clock
–&
mTime
 );

1022 
	`Di•œyAœrmSëtög
()

1025 
U8
 
mu8OnOff
[ 7 ] = { 
ON
, };

1027 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ALARM_SETTING
 ) =
TRUE
 )

1029 
mu8OnOff
[0] = 
ON
;

1033 
mu8OnOff
[0] = 
	`BlökLED
–mu8OnOff[0], 
Di•SëtögBuâ⁄
, 
DISP_TIMER_ID_500MS
 );

1036 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ALARM_LOCK_HOT
 ) =
TRUE
 )

1038 
mu8OnOff
[1] = 
ON
;

1042 
mu8OnOff
[1] = 
	`BlökLED
–mu8OnOff[1], 
Di•AœrmLockHŸ
, 
DISP_TIMER_ID_500MS
 );

1045 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ALARM_LOCK_ICE
 ) =
TRUE
 )

1047 
mu8OnOff
[2] = 
ON
;

1051 
mu8OnOff
[2] = 
	`BlökLED
–mu8OnOff[2], 
Di•AœrmLockI˚
, 
DISP_TIMER_ID_500MS
 );

1054 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ALARM_MAKE_OFF_ICE
 ) =
TRUE
 )

1056 
mu8OnOff
[3] = 
ON
;

1060 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

1062 
mu8OnOff
[3] = 
	`BlökLED
–mu8OnOff[3], 
Di•AœrmMakeI˚
, 
DISP_TIMER_ID_500MS
 );

1066 
mu8OnOff
[3] = 
	`BlökLED
–mu8OnOff[3], 
Di•AœrmMakeI˚Cp
, 
DISP_TIMER_ID_500MS
 );

1070 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ALARM_MAKE_OFF_COLD
 ) =
TRUE
 )

1072 
mu8OnOff
[4] = 
ON
;

1076 
mu8OnOff
[4] = 
	`BlökLED
–mu8OnOff[4], 
Di•AœrmMakeCﬁd
, 
DISP_TIMER_ID_500MS
 );

1079 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ALARM_LOCK_ALL
 ) =
TRUE
 )

1081 
mu8OnOff
[5] = 
ON
;

1085 
mu8OnOff
[5] = 
	`BlökLED
–mu8OnOff[5], 
Di•AœrmLockAŒ
, 
DISP_TIMER_ID_500MS
 );

1088 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_SETTING_CLOCK
 ) =
TRUE
 )

1090 
mu8OnOff
[6] = 
ON
;

1094 
mu8OnOff
[6] = 
	`BlökLED
–mu8OnOff[6], 
Di•SëtögClockD⁄e
, 
DISP_TIMER_ID_500MS
 );

1099 #i‡
CONFIG_UV_MANUAL


1100 
U8
 
dbg_uv_i˚_do‹
;

1101 
U8
 
dbg_uv_w©î_out
;

1102 
U8
 
dbg_uv_i˚_åay
;

1103 
U8
 
dbg_uv_i˚_ènk
;

1104 
	~"hÆ_Àd.h
"

1105 
	`Te°_Di•œyUv
()

1107 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE
, 
dbg_uv_i˚_do‹
 );

1108 
	`HAL_Tu∫OnOffLED
–
ICON_UV_WATER
, 
dbg_uv_w©î_out
 );

1109 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TRAY
, 
dbg_uv_i˚_åay
 );

1110 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TANK
, 
dbg_uv_i˚_ènk
 );

1117 
	`Di•œyUv
()

1119 
U8
 
mu8W©î
 = 
OFF
;

1120 
U8
 
mu8I˚
 = 
OFF
;

1121 
U8
 
mu8I˚Tøy
 = 
OFF
;

1122 
U8
 
mu8I˚T™k
 = 
OFF
;

1126 if–
	`IsTu∫OnUvId
–
UV_WATER_OUT
 ) =
TRUE


1127 || 
	`IsTu∫OnUvId
–
UV_WATER_OUT_SHOT
 ) =
TRUE
 )

1129 
mu8W©î
 = 
ON
;

1133 if–
	`IsTu∫OnUvId
–
UV_ICE_DOOR
 ) =
TRUE


1134 || 
	`IsTu∫OnUvId
–
UV_ICE_DOOR_SHOT
 ) =
TRUE
 )

1136 
mu8I˚
 = 
ON
;

1140 if–
	`IsTu∫OnUvId
–
UV_ICE_TANK
 ) =
TRUE
 )

1142 
mu8I˚T™k
 = 
ON
;

1146 if–(
	`IsTu∫OnUvId
–
UV_ICE_TRAY
 ) =
TRUE


1147 && 
	`GëI˚FuŒSètus
(Ë=
TRUE
 )

1148 || 
	`IsTu∫OnUvId
–
UV_ICE_TRAY_SHOT
 ) =
TRUE
 )

1150 
mu8I˚Tøy
 = 
ON
;

1153 
mu8W©î
 = 
	`HAL_GëUvOnOffSètus
–
HAL_UV_WATER_OUT
 );

1154 
mu8I˚
 = 
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_DOOR
 );

1155 
mu8I˚Tøy
 = 
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TRAY
 );

1156 
mu8I˚T™k
 = 
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TANK
 );

1159 if–
mu8W©î
 =
ON
 || 
mu8I˚
 =ON || 
mu8I˚Tøy
 =ON || 
mu8I˚T™k
 == ON)

1161 
	`Di•UvC¨e
–
ON
, 
mu8W©î
, 
mu8I˚
, 
mu8I˚Tøy
, 
mu8I˚T™k
 );

1165 
	`Di•UvC¨e
–
OFF
, 
mu8W©î
, 
mu8I˚
, 
mu8I˚Tøy
, 
mu8I˚T™k
 );

1169 
	`Di•œyCodyKô
()

1171 
U8
 
mu8OnOff
 = 
ON
;

1173 if–
	`GëCodyKôSãp
(Ë=
CODY_STEP_ROOM
 )

1175 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•Room
, 
DISP_TIMER_ID_500MS
 );

1176 
	`Di•Cﬁd
–
OFF
 );

1180 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•Cﬁd
, 
DISP_TIMER_ID_500MS
 );

1181 
	`Di•Room
–
OFF
 );

1188 
DISP_VERSION_START
,

1189 
DISP_VERSION_MODEL
,

1190 
DISP_VERSION_VERSION
,

1191 
DISP_VERSION_END
,

1195 
	`Pro˚ssDi•œyVîsi⁄Mode
()

1198 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_VERSION
 ) =
FALSE
 )

1207  
Di•
.
Vîsi⁄Sãp
 )

1209 
DISP_VERSION_START
:

1211 
	`Tu∫OffAŒLED
();

1213 
	`SëDi•Timî
–
DISP_TIMER_VERSION
, 
TIMER_1SEC
 );

1214 
Di•
.
Vîsi⁄Sãp
++;

1217 
DISP_VERSION_MODEL
:

1218 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

1220 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CHP
 );

1224 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CP
 );

1226 
	`SëDi•Timî
–
DISP_TIMER_VERSION
, 
TIMER_1SEC
 );

1227 
Di•
.
Vîsi⁄Sãp
++;

1230 
DISP_VERSION_VERSION
:

1231 
	`Di•SegmítDigô
–
VERSION_MAJOR
 );

1233 
	`SëDi•Timî
–
DISP_TIMER_VERSION
, 
TIMER_1SEC
 );

1234 
Di•
.
Vîsi⁄Sãp
++;

1238 
DISP_VERSION_END
:

1239 
	`Tu∫OffAŒLED
();

1240 
Di•
.
Vîsi⁄
 = 
FALSE
;

1241 
Di•
.
Vîsi⁄Sãp
 = 0;

1245 
Di•
.
Vîsi⁄
 = 
FALSE
;

1246 
Di•
.
Vîsi⁄Sãp
 = 0;

1252 #i‡
CONFIG_JIG_RBK_FRONT


1255 
DISP_JIG_VERSION_START
,

1256 
DISP_JIG_VERSION_MODEL
,

1257 
DISP_JIG_VERSION_END
,

1260 
	`Pro˚ssDi•œyVîsi⁄ModeFr⁄tJIG
()

1263 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_VERSION
 ) =
FALSE
 )

1271  
Di•
.
Vîsi⁄Sãp
 )

1273 
DISP_JIG_VERSION_START
:

1274 
	`Tu∫OffAŒLED
();

1276 
	`SëDi•Timî
–
DISP_TIMER_VERSION
, 0 );

1277 
Di•
.
Vîsi⁄Sãp
 = 
DISP_VERSION_MODEL
;

1280 
DISP_JIG_VERSION_MODEL
:

1281 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

1283 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CHP
 );

1287 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CP
 );

1289 
	`SëDi•Timî
–
DISP_TIMER_VERSION
, 
TIMER_1SEC
 );

1290 
Di•
.
Vîsi⁄Sãp
++;

1293 
DISP_JIG_VERSION_END
:

1294 
	`Tu∫OffAŒLED
();

1295 
Di•
.
Vîsi⁄
 = 
FALSE
;

1296 
Di•
.
Vîsi⁄Sãp
 = 0;

1300 
Di•
.
Vîsi⁄
 = 
FALSE
;

1301 
Di•
.
Vîsi⁄Sãp
 = 0;

1311 
MMT_LED_ON_ALL
,

1312 
MMT_LED_OFF_ALL
,

1313 
MMT_ERR_1
,

1314 
MMT_ERR_1_OFF
,

1315 
MMT_ERR_2
,

1316 
MMT_ERR_2_OFF
,

1317 
MMT_ERR_3
,

1318 
MMT_ERR_3_OFF
,

1319 
MMT_ERR_4
,

1320 
MMT_ERR_4_OFF
,

1321 
MMT_ERR_5
,

1322 
MMT_ERR_5_OFF
,

1323 
MMT_ERR_DONE


1326 
	`Mmt_Tu∫OffLedAŒ
()

1328 
	`Tu∫OffAŒLED
();

1330 
	`SëDi•Timî
–
DISP_TIMER_MEMENTO
, 
TIMER_1SEC
 );

1331 
Di•
.
MemítoSãp
++;

1334 
	`Mmt_Tu∫OnLedAŒ
()

1336 
	`Tu∫OnAŒLED
();

1338 
	`SëDi•Timî
–
DISP_TIMER_MEMENTO
, 
TIMER_1SEC
 );

1339 
Di•
.
MemítoSãp
++;

1342 
	`Mmt_EºoCode
(
U8
 
id
, 
SoundId_T
 
mSoundId
 )

1344 
Memíto_T
 
mMemíto
;

1345 
Eº‹Id_T
 
mEº‹
;

1348 
	`GëMemítoEº‹
–
id
, &
mMemíto
 );

1349 
mEº‹
 = 
mMemíto
.
Eº‹
;

1350 if–
mEº‹
 =
ERR_NONE
 )

1352 
Di•
.
MemítoSãp
 = 0;

1357 
	`Di•œyEº‹
–
mEº‹
, 
ON
 );

1360 
	`SëDi•Timî
–
DISP_TIMER_MEMENTO
, 
TIMER_5SEC
 );

1361 
Di•
.
MemítoSãp
++;

1365 
	`Mmt_D⁄e
()

1367 
Di•
.
MemítoSãp
 = 0;

1371 
U8
 
gu8MemtSoundCou¡
 = 0;

1372 
U8
 
gu8MemítoDñay
 = 0;

1373 
	`SoundMemíto
()

1375 if–
gu8MemítoDñay
 != 0 )

1377 
gu8MemítoDñay
--;

1381 if–
gu8MemtSoundCou¡
 != 0 )

1383 
gu8MemítoDñay
 = 5;

1385 
gu8MemtSoundCou¡
--;

1386 
	`Sound
–
SOUND_SELECT
 );

1391 
	`Di•œyMemíto
()

1393 
	`SoundMemíto
();

1395 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_MEMENTO
 ) =
FALSE
 )

1404  
Di•
.
MemítoSãp
 )

1406 
MMT_LED_ON_ALL
 :

1407 
	`Mmt_Tu∫OnLedAŒ
();

1410 
MMT_LED_OFF_ALL
:

1411 
	`Mmt_Tu∫OffLedAŒ
();

1414 
MMT_ERR_1
:

1415 
	`Mmt_EºoCode
–4, 
SOUND_SELECT
 );

1416 
gu8MemtSoundCou¡
 = 1;

1419 
MMT_ERR_1_OFF
:

1420 
	`Mmt_Tu∫OffLedAŒ
();

1423 
MMT_ERR_2
:

1424 
	`Mmt_EºoCode
–3, 
SOUND_SELECT
 );

1425 
gu8MemtSoundCou¡
 = 2;

1428 
MMT_ERR_2_OFF
:

1429 
	`Mmt_Tu∫OffLedAŒ
();

1432 
MMT_ERR_3
:

1433 
	`Mmt_EºoCode
–2, 
SOUND_SELECT
 );

1434 
gu8MemtSoundCou¡
 = 3;

1437 
MMT_ERR_3_OFF
:

1438 
	`Mmt_Tu∫OffLedAŒ
();

1441 
MMT_ERR_4
:

1442 
	`Mmt_EºoCode
–1, 
SOUND_SELECT
 );

1443 
gu8MemtSoundCou¡
 = 4;

1446 
MMT_ERR_4_OFF
:

1447 
	`Mmt_Tu∫OffLedAŒ
();

1450 
MMT_ERR_5
:

1451 
	`Mmt_EºoCode
–0, 
SOUND_SELECT
 );

1452 
gu8MemtSoundCou¡
 = 5;

1455 
MMT_ERR_5_OFF
:

1456 
	`Mmt_Tu∫OffLedAŒ
();

1459 
MMT_ERR_DONE
:

1460 
	`Mmt_D⁄e
();

1469 
	`Pro˚ssDi•œyMemítoMode
()

1471 
	`Di•LedDuty
();

1473 
	`Di•œyMemíto
();

1475 
	`Di•MemítoKey
( 0 );

1479 
	`Pro˚ssDi•œyBoŸ
()

1481 
U8
 
mu8Cou¡
 = 5;

1482 
U8
 
mu8ToggÀ
 = 0;

1484 if–
	`IsExpúedDi•BlökTimî
–
DISP_TIMER_ID_500MS
 ) =
TRUE
 )

1486 
mu8ToggÀ
 = !mu8Toggle;

1488 
mu8Cou¡
--;

1489 if–
mu8Cou¡
 == 0 )

1491 
	`Tu∫OffAŒLED
();

1493 
Di•
.
Inô
 = 
TRUE
;

1494 
mu8Cou¡
 = 5;

1499 if–
mu8ToggÀ
 == 0 )

1501 
	`Tu∫OffAŒLED
();

1505 
	`Tu∫OnAŒLED
();

1510 
	`Pro˚ssDi•œyLockAŒ
()

1512 
	`Tu∫OffAŒLED
();

1514 
	`Di•AŒLock
–
ON
 );

1515 
	`Di•œyAœrmSëtög
();

1520 
	`Pro˚ssDi•œySëtögMode
()

1522 
	`Di•LedDuty
();

1524 
	`Tu∫OffAŒLED
();

1525 
	`Di•Sëtög
–
ON
 );

1529 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ON
 ) =
FALSE
 )

1531 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_ON
 );

1533 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_OFF
 ) =
FALSE
 )

1535 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_OFF
 );

1539 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_SETTING_MENU
 ) =
TRUE
 )

1541 
	`SëSëtögDi•
–
FALSE
 );

1545 
	`Pro˚ssDi•œySëtögClock
()

1547 
MíuTime_T
 
mTime
;

1549 
	`Di•LedDuty
();

1551 
	`Tu∫OffAŒLED
();

1553 
	`GëClockTime
–&
mTime
 );

1554 
	`Di•SëtögClock
(

1555 
	`GëClockIãm
(),

1556 
mTime
.
u8AmPm
,

1557 
mTime
.
u8Hour
,

1558 
mTime
.
u8Mö


1561 
	`Di•SëtögClockKey
();

1563 
	`C⁄tySëtögClockKey
();

1566 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_CLOCK_MENU
 ) =
TRUE
 )

1568 
	`SëClockDi•
–
FALSE
 );

1574 
	`Pro˚ssDi•œyFûãrMode
()

1576 
	`Di•LedDuty
();

1578 
	`Tu∫OffAŒLED
();

1581 if–
	`GëFûãrSètus
–
ID_FILTER
 ) =
FILTER_OPEN
 )

1583 
U8
 
mu8OnOff
;

1585 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•FûãrSètus
, 
DISP_TIMER_ID_500MS
 );

1589 
	`Di•FûãrSètus
–
ON
 );

1593 
	`Pro˚ssDi•œyEm±yCﬁd
()

1595 
	`Di•LedDuty
();

1597 
	`Tu∫OffAŒLED
();

1599 
	`Di•W©îOutAmou¡Inföôy
();

1601 if–
	`GëEm±yCﬁdT™kTy≥
(Ë=
TYPE_FAUCET
 )

1603 
	`Di•W©îSñEm±yCﬁdFau˚t
();

1607 
	`Di•W©îSñEm±yCﬁdDøö
();

1610 
	`Di•I˚Out
–
ON
 );

1611 
	`Di•W©îOut
–
ON
 );

1614 
	`Pro˚ssDi•œySoundMode
()

1617 
U8
 
mu8Mode
;

1619 
	`Di•LedDuty
();

1621 
	`Tu∫OffAŒLED
();

1624 
mu8Mode
 = 
	`GëVoi˚Levñ
();

1632 
	`Di•SëtögSoundMode
–
mu8Mode
 );

1634 
	`Di•SëtögSoundKey
();

1638 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_SOUND_MENU
 ) =
TRUE
 )

1640 
	`SëSoundDi•
–
FALSE
 );

1644 
	`Pro˚ssDi•œyCu°omîMode
()

1646 
U8
 
mu8Ty≥
;

1649 
	`Di•LedDuty
();

1650 
	`Tu∫OffAŒLED
();

1653 
mu8Ty≥
 = 
	`GëCu°omîTy≥
();

1654 
	`Di•SëtögCu°omîMode
–
mu8Ty≥
 );

1655 
	`Di•SëtögKey
();

1659 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_CUSTOMER_MENU
 ) =
TRUE
 )

1661 
	`SëCu°omîDi•
–
FALSE
 );

1665 
	`Pro˚ssDi•œyHó…h
()

1667 
	`Di•LedDuty
();

1669 
	`Tu∫OffAŒLED
();

1672 
	`Di•Sëtög
–
OFF
 );

1675 
	`Di•œyW©îOut
();

1676 
	`Di•œyI˚Out
();

1679 
	`Di•œySñI˚
();

1682 
	`Di•œySñI˚Turbo
();

1685 
	`Di•œySñW©î
();

1688 
	`Di•œySñHŸ
();

1691 
	`Di•œySñAmou¡
();

1695 if–
	`IsSèπDøöW©î
(Ë=
TRUE
 )

1697 
U8
 
mu8Pî˚¡
;

1700 
mu8Pî˚¡
 = 
	`GëDøöTimePî˚¡
() / 10;

1701 
mu8Pî˚¡
 *= 10;

1702 
	`Di•DøöW©î
–
ON
, 
mu8Pî˚¡
 );

1707 
	`Pro˚ssDi•œySm¨tCheck
()

1709 
	`Di•LedDuty
();

1711 
	`Tu∫OffAŒLED
();

1713 
	`Di•Pî˚¡
–
	`GëDügnosisProgªss
() );

1717 
	`Pro˚ssDi•œyCodyKô
()

1719 
	`Di•LedDuty
();

1721 
	`Tu∫OffAŒLED
();

1723 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_STE
 );

1725 
	`Di•œyW©îOut
();

1726 
	`Di•œyI˚Out
();

1728 
	`Di•œyCodyKô
();

1731 
	`Di•œyFlushPî˚¡
()

1733 if–
	`GëW©îOut
(Ë=
TRUE
 )

1735 
U8
 
mu8Pî˚¡
;

1736 
U8
 
mu8VÆ
;

1738 
mu8Pî˚¡
 = 
	`GëFlushOutPî˚¡
();

1739 
mu8VÆ
 = (
mu8Pî˚¡
 / 10U) * 10U;

1741 
	`Di•Pî˚¡
–
mu8VÆ
 );

1748 
	`Di•œyFlushSëupInô
()

1750 
U8
 
mu8OnOff
 = 
ON
;

1751 
U8
 
mu8SoundGuide
 = 
FALSE
;

1752 
U8
 
mu8Dñay
 = 30;

1755 
	`Di•œyWifiSètus
();

1758 if–
	`GëW©îOut
(Ë=
TRUE
 )

1760 
	`Di•Flushög
–
ON
 );

1761 
	`Di•œyW©îOut
();

1765 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•W©îOutCú˛e
, 
DISP_TIMER_ID_500MS
 );

1767 if–
mu8Dñay
 != 0 )

1769 
mu8Dñay
--;

1774 if–
mu8SoundGuide
 =
FALSE
 )

1776 
mu8SoundGuide
 = 
TRUE
;

1777 
	`Sound
–
SOUND_SETUP_FLUSHING_GUIDE
 );

1783 
	`Di•œyFlushPî˚¡
();

1789 
	`Di•œyFlushFûãr
()

1791 
U8
 
mu8OnOff
 = 
ON
;

1793 
	`Di•œyWifiSètus
();

1796 if–
	`GëW©îOut
(Ë=
TRUE
 )

1798 
	`Di•Flushög
–
ON
 );

1799 
	`Di•œyW©îOut
();

1803 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•W©îOutCú˛e
, 
DISP_TIMER_ID_500MS
 );

1805 
	`Di•CﬁdDimmög
–
ON
 );

1808 
	`Di•œyFlushPî˚¡
();

1814 
	`Di•œyFlushPowîOn
()

1817 
	`Di•Flushög
–
OFF
 );

1820 
	`Di•œyW©îOut
();

1822 
	`Di•œyFlushPî˚¡
();

1824 
U8
 
mu8OnOff
 = 
ON
;

1827 
	`Di•œyWifiSètus
();

1830 if–
	`GëW©îOut
(Ë=
TRUE
 )

1832 
	`Di•œyW©îOut
();

1836 
mu8OnOff
 = 
	`BlökLED
–mu8OnOff, 
Di•W©îOutCú˛e
, 
DISP_TIMER_ID_500MS
 );

1839 
	`Di•œyFlushPî˚¡
();

1844 
	`Pro˚ssDi•œyFlushögMode
()

1846 
	`Di•LedDuty
();

1848 
	`Tu∫OffAŒLED
();

1849 
	`SèπDi•TimîId
–
DISP_TIMER_SLEEP
 );

1851 if–
	`GëFlushSëupInô
(Ë=
FALSE
 )

1853 
	`Di•œyFlushSëupInô
();

1855 if–
	`GëFlushSètus
(Ë=
FALSE
 )

1857 
	`Di•œyFlushFûãr
();

1859 if–
	`GëFlushPowîOn
(Ë=
FALSE
 )

1861 
	`Di•œyFlushPowîOn
();

1866 
	`Pro˚ssDi•œySavögMode
()

1868 
	`Di•LedDuty
();

1870 
	`Tu∫OffAŒLED
();

1873 
	`Di•Savög
–
	`GëSavögC⁄fig
() );

1876 
	`Di•œyW©îOut
();

1877 
	`Di•œyI˚Out
();

1880 #i‡
CONFIG_TEST_HOT_OUT


1881 
	`Di•HŸOutTe°
()

1884 if–
	`GëHŸC⁄figTe°
(Ë=
TRUE


1885 && 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_HOT
 )

1887 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_HOT_TEMP
 );

1888 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_HOT
 );

1893 
U8
 
dbg_di•_comp_Ωs
;

1894 
	`Di•CompRps
();

1895 
	`Pro˚ssDi•œyN‹mÆMode
()

1897 
	`Di•LedDuty
();

1899 
	`Tu∫OffAŒLED
();

1901 #i‡
CONFIG_TEST_HOT_OUT


1902 
	`Di•HŸOutTe°
();

1905 #i‡
CONFIG_TEST_HOT_OUT


1906 
	`Di•SëtögBuâ⁄
–(
U8
)
	`GET_STATUS_VALVE_HOT_IN
() );

1909 
	`Di•Sëtög
–
OFF
 );

1913 
	`Di•œyW©îOut
();

1914 
	`Di•œyI˚Out
();

1917 
	`Di•œySñI˚
();

1920 
	`Di•œySñI˚Turbo
();

1923 
	`Di•œySñW©î
();

1926 if–
	`GëCu°omîTy≥
(Ë=
CUSTOMER_VISIT
 )

1928 
	`Di•FûãrSètus
–
OFF
 );

1932 
	`Di•FûãrSètus
–
	`GëFûãrUßgeSètus
() );

1936 
	`Di•œyCﬁdTemp
();

1939 
	`Di•œySñHŸ
();

1942 
	`Di•œySñAmou¡
();

1945 if–
	`GëW©îOut
(Ë=
TRUE
 || 
	`IsO≥nI˚Do‹
() == TRUE )

1948 
	`SèπDi•TimîId
–
DISP_TIMER_CLOCK
 );

1952 #i‡
CONFIG_UV_MANUAL


1953 
	`Te°_Di•œyUv
();

1955 
	`Di•œyUv
();

1959 
	`Di•I˚FuŒ
–
	`GëI˚FuŒSètus
() );

1962 
	`Di•Savög
–
	`GëSavögC⁄fig
() );

1964 
	`Di•œyWifiSètus
();

1967 
	`Di•œyWóthî
();

1970 if–
dbg_di•_comp_Ωs
 != 0 )

1972 
	`Di•CompRps
();

1974 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_CLOCK
 ) =
TRUE


1975 && 
	`GëRtcC⁄figInô
(Ë=
TRUE
 )

1977 
	`Di•œyClock
();

1981 
	`Di•œy7Segmít
();

1985 
	`Di•œyAœrmSëtög
();

1989 
	`Pro˚ssDi•œyEº‹Mode
()

1991 
Eº‹Id_T
 
mu8PªvEº
 = 
ERR_NONE
;

1992 
Eº‹Id_T
 
mu8CurEº
 = 
ERR_NONE
;

1994 
U8
 
mu8Cmd
 = 
ON
;

1995 
U8
 
mu8Cou¡î
 = 10;

1997 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_ERROR
 ) =
TRUE
 )

1999 
mu8Cmd
 = 
ON
;

2004 
mu8CurEº
 = 
	`GëEº‹Id
();

2007 if–
mu8CurEº
 =
ERR_NONE
 )

2009 
mu8Cmd
 = 
ON
;

2010 
mu8Cou¡î
 = 10;

2014 
mu8Cou¡î
--;

2015 if–
mu8Cou¡î
 == 0 )

2017 
mu8Cou¡î
 = 10;

2020 if–
mu8Cou¡î
 <= 5 )

2022 
mu8Cmd
 = 
OFF
;

2026 
mu8Cmd
 = 
ON
;

2029 
	`Di•œyEº‹
–
mu8CurEº
, 
mu8Cmd
 );

2033 if–
mu8PªvEº
 !
mu8CurEº
 )

2035 
mu8PªvEº
 = 
mu8CurEº
;

2039 
	`Pro˚ssDi•œy
()

2041 
	`Upd©eDi•œyTimî
();

2044 if–
Di•
.
Inô
 =
FALSE
 )

2046 
	`Pro˚ssDi•œyBoŸ
();

2051 if–
Di•
.
Vîsi⁄
 =
TRUE
 )

2053 #i‡
CONFIG_JIG_RBK_FRONT


2054 
	`Pro˚ssDi•œyVîsi⁄ModeFr⁄tJIG
();

2056 
	`Pro˚ssDi•œyVîsi⁄Mode
();

2062 #i‡
CONFIG_EOL


2063 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

2067 
Di•
.
Inô
 = 
TRUE
;

2068 
	`Pro˚ssDi•œyEﬁ
();

2074 if–
	`GëF˘Sètus
(Ë=
TRUE
 )

2076 
Di•
.
Inô
 = 
TRUE
;

2081 if–
	`IsSèπDügnosis
(Ë=
TRUE
 )

2085 
Di•
.
Inô
 = 
TRUE
;

2086 
	`Pro˚ssDi•œySm¨tCheck
();

2091 if–
	`GëCodyKôSètus
(Ë=
TRUE
 )

2093 
	`Pro˚ssDi•œyCodyKô
();

2098 if–
	`IsSèπEm±yCﬁdT™k
(Ë=
TRUE
 )

2100 
	`Pro˚ssDi•œyEm±yCﬁd
();

2105 if–
Di•
.
Fûãr
 =
TRUE
 )

2107 
	`SëSëtögDi•
–
FALSE
 );

2108 
	`Pro˚ssDi•œyFûãrMode
();

2113 if–
	`GëLockAŒ
(Ë=
LOCK
 )

2115 
	`SëSëtögDi•
–
FALSE
 );

2116 
	`Pro˚ssDi•œyLockAŒ
();

2121 if–
Di•
.
Memíto
 =
TRUE
 )

2123 
	`Pro˚ssDi•œyMemítoMode
();

2128 if–
Di•
.
Clock
 =
TRUE
 )

2130 
	`Pro˚ssDi•œySëtögClock
();

2135 if–
Di•
.
Sëtög
 =
TRUE
 )

2137 
	`Pro˚ssDi•œySëtögMode
();

2142 if–
Di•
.
Sound
 =
TRUE
 )

2144 
	`Pro˚ssDi•œySoundMode
();

2149 if–
Di•
.
Cu°omî
 =
TRUE
 )

2151 
	`Pro˚ssDi•œyCu°omîMode
();

2155 if–
	`IsSèπDøöW©î
(Ë=
TRUE
 )

2157 
	`Pro˚ssDi•œyHó…h
();

2161 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

2164 
	`Pro˚ssDi•œyFlushögMode
();

2166 if–
	`GëSavögSètus
(Ë=
TRUE


2167 && 
	`IsExpúedDi•Timî
–
DISP_TIMER_CLOCK
 ) =
TRUE
 )

2169 
	`Pro˚ssDi•œySavögMode
();

2174 
	`Pro˚ssDi•œyN‹mÆMode
();

2178 
	`Pro˚ssDi•œyEº‹Mode
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\process_display.h

1 #i‚de‡
__PROCESS_DISPLAY_H__


2 
	#__PROCESS_DISPLAY_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"di•œy_lib.h
"

7 
InôDi•œy
();

11 
U8
 
GëDi•œyInô
();

12 
SèπDi•œyInô
();

15 
SèπDi•TimîId
(
U8
 
id
);

16 
St›Di•TimîId
(
U8
 
id
);

19 
U8
 
IsExpúedC⁄figTime
();

22 
SëVîsi⁄Di•
(
U8
 
mu8Di•Sec
);

25 
U8
 
GëSëtögDi•
();

26 
SëSëtögDi•
(
U8
 
mu8C⁄f
);

29 
U8
 
GëClockDi•
();

30 
SëClockDi•
(
U8
 
mu8C⁄f
);

33 
SëFûãrDi•
(
U8
 
mu8C⁄f
);

34 
U8
 
GëFûãrDi•
();

37 
SëSoundDi•
(
U8
 
mu8C⁄f
);

38 
U8
 
GëSoundDi•
();

41 
SëCu°omîDi•
(
U8
 
mu8C⁄f
);

42 
U8
 
GëCu°omîDi•
();

45 
U8
 
GëMemítoDi•
();

46 
SëMemítoDi•
(
U8
 
mu8C⁄f
 );

49 
U8
 
GëFŸaDi•
();

50 
SëFŸaDi•
(
U8
 
mu8C⁄f
 );

53 
Pro˚ssDi•œy
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\drain.c

10 
	~"døö.h
"

11 
	~"døö_pump.h
"

12 
	~"Àvñ.h
"

13 
	~"ì¥om.h
"

14 
	~"i˚_fuŒ.h
"

16 
	s_døö_


18 
U8
 
	mInôDøö
;

19 
U8
 
	mInôDøöRódy
;

20 
U16
 
	mInôTime
;

21 
U8
 
	mLevñ
;

23 
U32
 
	mRŸãnTime
;

24 
U16
 
	mMöOnTimeEºLow
;

25 
U16
 
	mMöOnTime
;

26 } 
	tDøö_T
;

29 
Døö_T
 
	gDøö
;

31 
	#INITIAL_DRAIN_MAX
 200

	)

32 
	#ROTTEN_TIME
 ( 3UL * 60UL * 60UL * 10UL )

	)

33 
	#MIN_ON_TIME
 ( 30UL * 10UL )

	)

34 
	#MIN_HALF_ON_TIME
 ( 15UL * 10UL )

	)

37 
	$InôDøö
()

39 
Døö
.
InôDøö
 = 
FALSE
;

40 
Døö
.
InôDøöRódy
 = 
FALSE
;

41 
Døö
.
InôTime
 = 0;

42 
Døö
.
Levñ
 = 
LEVEL_LOW
;

44 
Døö
.
RŸãnTime
 = 
ROTTEN_TIME
;

45 
Døö
.
MöOnTimeEºLow
 = 0;

46 
Døö
.
MöOnTime
 = 0;

47 
	}
}

50 
	$SëDøöLevñ
(
U8
 
mu8VÆ
 )

52 
Døö
.
Levñ
 = 
mu8VÆ
;

53 
	}
}

55 
U8
 
	$GëDøöLevñ
()

57  
Døö
.
Levñ
;

58 
	}
}

61 
	$SëInôDøö
–
U8
 
mu8VÆ
 )

63 
Døö
.
InôDøö
 = 
mu8VÆ
;

64 
	}
}

66 
U8
 
	$GëInôDøö
()

68  
Døö
.
InôDøö
;

69 
	}
}

71 
	$SëInôDøöRódy
–
U8
 
mu8VÆ
 )

73 
Døö
.
InôDøöRódy
 = 
mu8VÆ
;

74 
	}
}

76 
U8
 
	$GëInôDøöRódy
()

78  
Døö
.
InôDøöRódy
;

79 
	}
}

81 
	$SèπDøöPumpOnLevñ
()

83 if–
Døö
.
Levñ
 !
LEVEL_LOW
 )

85 
	`Tu∫OnDøöPump
();

87 
	}
}

90 
U8
 
	$IsSëI˚FuŒ
(
U8
 
mu8Levñ
)

92 
U8
 
mu8Pªv
 = 
FALSE
;

93 
U8
 
mu8Cur
;

96 
mu8Cur
 = 
	`GëI˚FuŒSètus
();

97 if–
mu8Pªv
 !
mu8Cur
 )

99 
mu8Pªv
 = 
mu8Cur
;

100 if–
mu8Cur
 =
TRUE
 && 
mu8Levñ
 !
LEVEL_LOW
 )

102  
TRUE
;

106  
FALSE
;

107 
	}
}

111 
	$C⁄åﬁDøöLevñ
()

113 
U8
 
mu8InôTime
 = 30;

117 if–
mu8InôTime
 != 0 )

119 
mu8InôTime
--;

124 
Døö
.
Levñ
 = 
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 );

127 if–
Døö
.
InôDøö
 =
FALSE
 )

132 if–
	`GëDøöPumpSètus
(Ë=
ON
 )

134 
Døö
.
InôTime
++;

135 if–
	`GëDøöPumpLﬂdSètus
(Ë=
FALSE


136 || 
Døö
.
InôTime
 > 
INITIAL_DRAIN_MAX
 )

138 
	`Tu∫OffDøöPump
();

139 
Døö
.
InôTime
 = 0;

140 
Døö
.
InôDøö
 = 
TRUE
;

145 #i‡(
CONFIG_TANK_TYPE
 =
TANK_RO
)

146 if–
Døö
.
Levñ
 =
LEVEL_LOW


147 && 
	`GëT™kLevñ
–
LEVEL_ID_COLD
 ) =
LEVEL_LOW


148 && 
	`GëT™kLevñ
–
LEVEL_ID_ROOM
 ) =
LEVEL_LOW
 )

150 if–
Døö
.
Levñ
 =
LEVEL_LOW
 )

153 
	`Tu∫OnDøöPump
();

155 if–
Døö
.
Levñ
 !
LEVEL_LOW
 )

157 
	`Tu∫OnDøöPump
();

161 
Døö
.
InôDøö
 = 
TRUE
;

168 if–
	`GëDøöPumpSètus
(Ë=
OFF
 )

170 
Døö
.
MöOnTime
 = 
MIN_HALF_ON_TIME
;

173 if–
Døö
.
Levñ
 =
LEVEL_HIGH
 )

175 
	`Tu∫OnDøöPump
();

178 if–
Døö
.
Levñ
 =
LEVEL_ERR_LOW
 )

180 
	`Tu∫OnDøöPump
();

181 
Døö
.
MöOnTimeEºLow
 = 
MIN_ON_TIME
;

185 if–
	`IsSëI˚FuŒ
–
Døö
.
Levñ
 ) =
TRUE
 )

187 
	`Tu∫OnDøöPump
();

192 if–
Døö
.
Levñ
 !
LEVEL_MID
 )

194 
Døö
.
RŸãnTime
 = 
ROTTEN_TIME
;

198 if–
Døö
.
RŸãnTime
 != 0 )

200 
Døö
.
RŸãnTime
--;

204 
	`Tu∫OnDøöPump
();

210 
Døö
.
RŸãnTime
 = 
ROTTEN_TIME
;

215 if–
Døö
.
Levñ
 =
LEVEL_LOW


216 && 
Døö
.
MöOnTimeEºLow
 == 0 )

218 
	`Tu∫OffDøöPump
();

220 if–
Døö
.
Levñ
 =
LEVEL_MID


221 || 
Døö
.
Levñ
 =
LEVEL_LOW
 )

225 if–
	`GëDøöPumpLﬂdSètus
(Ë=
FALSE


226 && 
Døö
.
MöOnTime
 == 0 )

228 
	`Tu∫OffDøöPump
();

235 if–
Døö
.
MöOnTimeEºLow
 != 0 )

237 
Døö
.
MöOnTimeEºLow
--;

240 if–
Døö
.
MöOnTime
 != 0 )

242 
Døö
.
MöOnTime
--;

247 if–
Døö
.
MöOnTimeEºLow
 != 0 )

251 if–
	`GëDøöPumpLﬂdSètus
(Ë=
FALSE
 )

253 
Døö
.
MöOnTimeEºLow
 = 0;

257 
Døö
.
MöOnTimeEºLow
--;

262 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\drain.h

1 #i‚de‡
__DRAIN_H__


2 
	#__DRAIN_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"Àvñ.h
"

9 
InôDøö
();

12 
SëDøöLevñ
(
U8
 
mu8VÆ
 );

13 
U8
 
GëDøöLevñ
();

15 
SëInôDøö
–
U8
 
mu8VÆ
 );

16 
U8
 
GëInôDøö
();

18 
SëInôDøöRódy
–
U8
 
mu8VÆ
 );

19 
U8
 
GëInôDøöRódy
();

22 
SèπDøöPumpOnLevñ
();

25 
C⁄åﬁDøöLevñ
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\empty_cold_tank.c

5 
	~"em±y_cﬁd_ènk.h
"

6 
	~"vÆve.h
"

7 
	~"îr‹.h
"

11 
	mSTEP_EMPTY_READY
,

12 
	mSTEP_EMPTY
,

13 
	mSTEP_EMPTY_COLD
,

14 
	mSTEP_EMPTY_CLOSE
,

15 
	mSTEP_EMPTY_DONE
,

20 
	#FAUCET_TIMEOUT
 3400UL

21 

	)

23 
	#DRAIN_TIMEOUT
 7200UL

24 

	)

26 
Em±yCﬁdT™k_T
 
	gEm±yCﬁd
;

29 
	$InôEm±yCﬁdT™k
()

31 
Em±yCﬁd
.
Sèπ
 = 
FALSE
;

33 
	}
}

35 
	$GëEm±yCﬁdT™kD©a
(
Em±yCﬁdT™k_T
 *
pD©a
)

37 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Em±yCﬁd
, –
Em±yCﬁdT™k_T
 ));

38 
	}
}

42 
	$SèπEm±yCﬁdT™k
(
CﬁdEm±yTy≥_T
 
mu8Ty≥
)

44 
Em±yCﬁd
.
Sèπ
 = 
TRUE
;

46 
Em±yCﬁd
.
Ty≥
 = 
mu8Ty≥
;

47 
Em±yCﬁd
.
Sãp
 = 0;

48 
	}
}

56 
	$St›Em±yCﬁdT™k
()

58 if–
Em±yCﬁd
.
Sèπ
 =
TRUE
 )

60 if–
Em±yCﬁd
.
Sãp
 <
STEP_EMPTY_COLD
 )

62 
Em±yCﬁd
.
Sãp
 = 
STEP_EMPTY_CLOSE
;

65 
	}
}

67 
	$St›Sètus
()

69 
Em±yCﬁd
.
Sèπ
 = 
FALSE
;

70 
	}
}

72 
U8
 
	$IsSèπEm±yCﬁdT™k
()

74  
Em±yCﬁd
.
Sèπ
;

75 
	}
}

77 
CﬁdEm±yTy≥_T
 
	$GëEm±yCﬁdT™kTy≥
()

79  
Em±yCﬁd
.
Ty≥
;

80 
	}
}

83 
U8
 
	$DoEm±yCﬁdFau˚t
()

85 
U8
 
mu16WaôTime
 = 0;

86 
U8
 
mSètus
 = 
FALSE
;

89 
Em±yCﬁd
.
Sãp
)

91 
STEP_EMPTY_READY
:

92 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

93 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

94 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

96 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

98 
Em±yCﬁd
.
ExôTime
 = 
FAUCET_TIMEOUT
;

99 
mu16WaôTime
 = 2;

100 
Em±yCﬁd
.
Sãp
++;

103 
STEP_EMPTY
:

104 if–
mu16WaôTime
 != 0 )

106 
mu16WaôTime
--;

110 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

111 
Em±yCﬁd
.
Sãp
++;

115 
STEP_EMPTY_COLD
:

117 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

118 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

120 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

121 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

124 if–
Em±yCﬁd
.
ExôTime
 != 0 )

126 
Em±yCﬁd
.
ExôTime
--;

130 
Em±yCﬁd
.
Sãp
++;

134 
STEP_EMPTY_CLOSE
:

135 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

136 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

138 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

139 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

141 
Em±yCﬁd
.
Sãp
++;

144 
STEP_EMPTY_DONE
:

145 
mSètus
 = 
TRUE
;

149 
Em±yCﬁd
.
Sãp
 = 0;

154  
mSètus
;

155 
	}
}

158 
U8
 
	$DoEm±yCﬁdDøöVÆve
()

160 
U8
 
mu16WaôTime
 = 0;

161 
U8
 
mSètus
 = 
FALSE
;

164 
Em±yCﬁd
.
Sãp
)

166 
STEP_EMPTY_READY
:

167 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

168 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

169 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

171 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

173 
Em±yCﬁd
.
ExôTime
 = 
DRAIN_TIMEOUT
;

174 
mu16WaôTime
 = 2;

175 
Em±yCﬁd
.
Sãp
++;

178 
STEP_EMPTY
:

179 if–
mu16WaôTime
 != 0 )

181 
mu16WaôTime
--;

185 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

186 
Em±yCﬁd
.
Sãp
++;

190 
STEP_EMPTY_COLD
:

192 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

193 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

195 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

196 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

199 if–
Em±yCﬁd
.
ExôTime
 != 0 )

201 
Em±yCﬁd
.
ExôTime
--;

205 
Em±yCﬁd
.
Sãp
++;

209 
STEP_EMPTY_CLOSE
:

210 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

211 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

213 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

214 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

216 
Em±yCﬁd
.
Sãp
++;

219 
STEP_EMPTY_DONE
:

220 
mSètus
 = 
TRUE
;

224 
Em±yCﬁd
.
Sãp
 = 0;

229  
mSètus
;

230 
	}
}

232 
U8
 
	$DoEm±yCﬁd
()

234 if–
Em±yCﬁd
.
Ty≥
 =
TYPE_FAUCET
 )

236  
	`DoEm±yCﬁdFau˚t
();

240  
	`DoEm±yCﬁdDøöVÆve
();

241 
	}
}

243 
	$C⁄åﬁEm±yCﬁdT™k
()

245 if–
	`IsSèπEm±yCﬁdT™k
(Ë=
FALSE
 )

251 if–
	`IsEº‹Ty≥
–
ERR_TYPE_EMPTY_COLD
 ) =
TRUE
 )

253 
	`St›Em±yCﬁdT™k
();

257 if–
	`DoEm±yCﬁd
(Ë=
TRUE
 )

259 
	`St›Sètus
();

261 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\empty_cold_tank.h

1 #i‚de‡
__EMPTY_COLD_TANK_H__


2 
	#__EMPTY_COLD_TANK_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mTYPE_FAUCET
,

10 
	mTYPE_DRAIN


11 } 
	tCﬁdEm±yTy≥_T
;

13 
	s_em±y_cﬁd_ènk_


15 
U8
 
	mSèπ
;

18 
CﬁdEm±yTy≥_T
 
	mTy≥
;

19 
U8
 
	mSãp
;

20 
U16
 
	mExôTime
;

22 } 
	tEm±yCﬁdT™k_T
;

26 
InôEm±yCﬁdT™k
();

27 
GëEm±yCﬁdT™kD©a
(
Em±yCﬁdT™k_T
 *
pD©a
);

29 
SèπEm±yCﬁdT™k
(
CﬁdEm±yTy≥_T
 
mu8Ty≥
);

31 
St›Em±yCﬁdT™k
();

32 
U8
 
IsSèπEm±yCﬁdT™k
();

33 
CﬁdEm±yTy≥_T
 
GëEm±yCﬁdT™kTy≥
();

35 
C⁄åﬁEm±yCﬁdT™k
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\eeprom.c

1 
	~"ì¥om.h
"

2 
	~"utû.h
"

3 
	~"hÆ_ì¥om.h
"

4 
	~"πc.h
"

5 
	~"time_sh‹t.h
"

6 
	~"¥o˚ss_di•œy.h
"

7 
	~"¸c16.h
"

8 
	~"sound.h
"

10 
	~"cﬁd_w©î.h
"

11 
	~"w©î_out.h
"

12 
	~"Êush_w©î_out.h
"

13 
	~"i˚.h
"

14 
	~"powî_ßvög.h
"

15 
	~"îr‹.h
"

16 
	~"‰⁄t.h
"

17 
	~"£rvi˚.h
"

18 
	~"u£r.h
"

19 
	~"uv.h
"

20 
	~"íîgy.h
"

21 
	~"fûãr.h
"

22 
	~"voi˚.h
"

23 
	~"hŸ_w©î.h
"

25 
	~"WIFI_U£rI¡îÁ˚_Ic⁄AIS.h
"

26 
	~"WIFI_C⁄åﬁ.h
"

29 
	#EEP_ADDR_OFFSET
 0x0040

	)

35 
	mEEP_BLOCK_NONE
,

36 
	mEEP_BLOCK_0
,

37 
	mEEP_BLOCK_1
,

38 
	mEEP_BLOCK_2
,

39 
	mEEP_BLOCK_3
,

40 
	mEEP_BLOCK_4
,

41 
	mEEP_BLOCK_5
,

42 
	mEEP_BLOCK_6
,

43 
	mEEP_BLOCK_7
,

45 
	mEEP_BLOCK_8
,

46 
	mEEP_BLOCK_9
,

48 
	mEEP_BLOCK_10
,

49 
	mEEP_BLOCK_11
,

50 
	mEEP_BLOCK_12
,

52 
	mEEP_BLOCK_13
,

53 
	mEEP_BLOCK_14
,

54 
	mEEP_BLOCK_15
,

55 
	mEEP_BLOCK_16
,

56 
	mEEP_BLOCK_17
,

58 
	mEEP_BLOCK_18
,

59 
	mEEP_BLOCK_19
,

60 
	mEEP_BLOCK_20
,

61 
	mEEP_BLOCK_21
,

62 
	mEEP_BLOCK_22
,

65 
	mNUM_EEP_BLOCK


66 } 
	tEïromBlock_T
;

68 
	s_ì¥om_c⁄åﬁ_


71 
U8
 
	mInô
;

72 
U8
 
	mWrôe
;

73 
U8
 
	mEø£
;

74 
U8
 
	mFa˘‹yRe£t
;

75 
U8
 
	mVîsi⁄Maj‹
;

76 
U8
 
	mVîsi⁄Mö‹
;

78 
U16
 
	mDñayTime
;

79 
U8
 
	mRódD©a
[ 
EEP_PAGE_SIZE
 ];

80 
U8
 
	mWrôeD©a
[ 
EEP_PAGE_SIZE
 ];

81 } 
	tEEP_C⁄åﬁ_T
;

84 
EEP_C⁄åﬁ_T
 
	gEï
;

87 
U8
 
RódD©aBlocks
();

88 
U8
 
WrôeD©aBlocks
();

89 
InôBlockTabÀAŒSë
();

91 
	$InôEïrom
()

93 
U8
 
mu8Re£t
 = 
FALSE
;

95 
Eï
.
Inô
 = 
FALSE
;

96 
Eï
.
Eø£
 = 
FALSE
;

97 
Eï
.
Fa˘‹yRe£t
 = 
FALSE
;

98 
Eï
.
Vîsi⁄Maj‹
 = 
VERSION_MAJOR
;

99 
Eï
.
Vîsi⁄Mö‹
 = 
VERSION_MINOR
;

101 if–
	`RódD©aBlocks
(Ë=
TRUE
 )

104 
Eï
.
Inô
 = 
TRUE
;

106 if–
Eï
.
Vîsi⁄Mö‹
 !
VERSION_MINOR
 )

108 if–
	`HAL_RTC_EEPROM_AŒEø£
(Ë=
TRUE
 )

110 
	`Re£t
();

116 
mu8Re£t
 = 
TRUE
;

119 if–
mu8Re£t
 =
TRUE
 )

122 
Eï
.
Fa˘‹yRe£t
 = 
TRUE
;

124 
	`InôBlockTabÀAŒSë
();

125 
	`WrôeD©aBlocks
();

131 
Eï
.
Wrôe
 = 
FALSE
;

132 
Eï
.
DñayTime
 = 0;

133 
	}
}

135 
	s_ì¥om_block_m≠_


137 
EïromId_T
 
	mid
;

138 
EïromBlock_T
 
	mblockId
;

139 } 
	tEïromM≠_T
;

141 c⁄° 
EïromM≠_T
 
	gEïromM≠pögTabÀ
[] =

143 { 
EEP_ID_CONF_MAKE_COLD
, 
EEP_BLOCK_0
 },

144 { 
EEP_ID_CONF_MAKE_ICE
, 
EEP_BLOCK_0
 },

145 { 
EEP_ID_CONF_TURBO
, 
EEP_BLOCK_0
 },

146 { 
EEP_ID_CONF_POWER_SAVING
, 
EEP_BLOCK_0
 },

147 { 
EEP_ID_CONF_HEALTH
, 
EEP_BLOCK_0
 },

148 { 
EEP_ID_CONF_DECO_LED
, 
EEP_BLOCK_0
 },

149 { 
EEP_ID_CONF_FIXED_AMOUNT
, 
EEP_BLOCK_0
 },

150 { 
EEP_ID_CONF_MUTE
, 
EEP_BLOCK_0
 },

151 { 
EEP_ID_CONF_UNUSED_SAVE
, 
EEP_BLOCK_0
 },

152 { 
EEP_ID_SEL_WATER
, 
EEP_BLOCK_0
 },

153 { 
EEP_ID_LOCK_ALL
, 
EEP_BLOCK_0
 },

154 { 
EEP_ID_LOCK_ICE
, 
EEP_BLOCK_0
 },

155 { 
EEP_ID_SERVICE_CHECK_DAY
, 
EEP_BLOCK_0
 },

156 { 
EEP_ID_ICE_SIZE
, 
EEP_BLOCK_0
 },

158 { 
EEP_ID_LOCK_HOT
, 
EEP_BLOCK_1
 },

159 { 
EEP_ID_CONF_UV_MODE
, 
EEP_BLOCK_1
 },

160 { 
EEP_ID_FLUSH_SETUP_INIT
, 
EEP_BLOCK_1
 },

161 { 
EEP_ID_FLUSH_STATUS
, 
EEP_BLOCK_1
 },

163 { 
EEP_ID_CONF_USER_AMOUNT
, 
EEP_BLOCK_1
 },

164 { 
EEP_ID_CONF_USER
, 
EEP_BLOCK_1
 },

165 { 
EEP_ID_CONF_USER_HOT
, 
EEP_BLOCK_1
 },

166 { 
EEP_ID_TIME
, 
EEP_BLOCK_1
 },

168 { 
EEP_ID_MEMENTO_1
, 
EEP_BLOCK_2
 },

169 { 
EEP_ID_MEMENTO_2
, 
EEP_BLOCK_2
 },

170 { 
EEP_ID_MEMENTO_3
, 
EEP_BLOCK_3
 },

171 { 
EEP_ID_MEMENTO_4
, 
EEP_BLOCK_3
 },

172 { 
EEP_ID_MEMENTO_5
, 
EEP_BLOCK_4
 },

177 { 
EEP_ID_WIFI_POWER
, 
EEP_BLOCK_8
 },

178 { 
EEP_ID_WIFI_FIRST_PARING
, 
EEP_BLOCK_8
 },

179 { 
EEP_ID_WIFI_FOTA_MODULE
, 
EEP_BLOCK_8
 },

180 { 
EEP_ID_WIFI_FOTA_MCU
, 
EEP_BLOCK_8
 },

182 { 
EEP_ID_FACTORY_SETUP
, 
EEP_BLOCK_9
 },

183 { 
EEP_ID_FILTER_CHANGED
, 
EEP_BLOCK_9
 },

184 { 
EEP_ID_FILTER_USAGE_TIME
, 
EEP_BLOCK_9
 },

185 { 
EEP_ID_VOICE_LEVEL
, 
EEP_BLOCK_9
 },

186 { 
EEP_ID_VOICE_VOLUME
, 
EEP_BLOCK_9
 },

188 { 
EEP_ID_CUSTOMER
, 
EEP_BLOCK_9
 },

189 { 
EEP_ID_POWER_SAVING_TIME
, 
EEP_BLOCK_9
 },

197 { 
EEP_ID_SODA_USAGE_0
, 
EEP_BLOCK_8
 },

198 { 
EEP_ID_SODA_USAGE_1
, 
EEP_BLOCK_8
 },

200 { 
EEP_ID_SODA_USAGE_2
, 
EEP_BLOCK_9
 },

201 { 
EEP_ID_SODA_USAGE_3
, 
EEP_BLOCK_9
 },

203 { 
EEP_ID_SODA_USAGE_4
, 
EEP_BLOCK_10
 },

204 { 
EEP_ID_SODA_USAGE_5
, 
EEP_BLOCK_10
 },

206 { 
EEP_ID_SODA_USAGE_6
, 
EEP_BLOCK_11
 },

207 { 
EEP_ID_SODA_USAGE_7
, 
EEP_BLOCK_11
 },

209 { 
EEP_ID_SODA_USAGE_8
, 
EEP_BLOCK_12
 },

210 { 
EEP_ID_SODA_USAGE_9
, 
EEP_BLOCK_12
 },

212 { 
EEP_ID_SODA_USAGE_10
, 
EEP_BLOCK_13
 },

213 { 
EEP_ID_SODA_USAGE_11
, 
EEP_BLOCK_13
 },

215 { 
EEP_ID_SODA_USAGE_12
, 
EEP_BLOCK_14
 },

216 { 
EEP_ID_SODA_USAGE_13
, 
EEP_BLOCK_14
 },

218 { 
EEP_ID_SODA_USAGE_14
, 
EEP_BLOCK_15
 },

219 { 
EEP_ID_SODA_USAGE_15
, 
EEP_BLOCK_15
 },

221 { 
EEP_ID_SODA_USAGE_16
, 
EEP_BLOCK_16
 },

222 { 
EEP_ID_SODA_USAGE_17
, 
EEP_BLOCK_16
 },

224 { 
EEP_ID_SODA_USAGE_18
, 
EEP_BLOCK_17
 },

225 { 
EEP_ID_SODA_USAGE_19
, 
EEP_BLOCK_17
 },

227 { 
EEP_ID_SODA_USAGE_20
, 
EEP_BLOCK_18
 },

228 { 
EEP_ID_SODA_USAGE_21
, 
EEP_BLOCK_18
 },

230 { 
EEP_ID_SODA_USAGE_22
, 
EEP_BLOCK_19
 },

231 { 
EEP_ID_SODA_USAGE_23
, 
EEP_BLOCK_19
 },

233 { 
EEP_ID_SODA_USAGE_24
, 
EEP_BLOCK_20
 },

234 { 
EEP_ID_SODA_USAGE_25
, 
EEP_BLOCK_20
 },

236 { 
EEP_ID_SODA_USAGE_26
, 
EEP_BLOCK_21
 },

237 { 
EEP_ID_SODA_USAGE_27
, 
EEP_BLOCK_21
 },

239 { 
EEP_ID_SODA_USAGE_28
, 
EEP_BLOCK_22
 },

240 { 
EEP_ID_SODA_USAGE_29
, 
EEP_BLOCK_22
 },

263 
	#SZ_EEPROM_MAPPING_TABLE
 ((
EïromM≠pögTabÀ
)/(
EïromM≠_T
))

	)

266 
EïromBlock_T
 
	$GëBlockId
(
EïromId_T
 
mu8Id
 )

268 
U8
 
i
;

270  
i
 = 0; i < 
SZ_EEPROM_MAPPING_TABLE
; i++ )

272 if–
mu8Id
 =
EïromM≠pögTabÀ
[ 
i
 ].
id
 )

274  
EïromM≠pögTabÀ
[ 
i
 ].
blockId
;

278  
EEP_BLOCK_NONE
;

279 
	}
}

282 
	$U8
 (*
	tA˘i⁄_T
)(
	tEïromBlock_T
);

283 
	s_ì¥om_block_èbÀ_


285 
EïromBlock_T
 
blockId
;

286 
U8
 
wrôe
;

287 
A˘i⁄_T
 
pWrôeA˘i⁄
;

288 
A˘i⁄_T
 
pRódA˘i⁄
;

289 }
	tEïBlockTabÀ_T
;

291 
U8
 
	`WrôeBlock0
(
EïromBlock_T
 
mBlockId
);

292 
U8
 
	`RódBlock0
(
EïromBlock_T
 
mBlockId
);

293 
U8
 
	`WrôeBlock1
(
EïromBlock_T
 
mBlockId
);

294 
U8
 
	`RódBlock1
(
EïromBlock_T
 
mBlockId
);

295 
U8
 
	`WrôeBlock2
(
EïromBlock_T
 
mBlockId
);

296 
U8
 
	`RódBlock2
(
EïromBlock_T
 
mBlockId
);

297 
U8
 
	`WrôeBlock3
(
EïromBlock_T
 
mBlockId
);

298 
U8
 
	`RódBlock3
(
EïromBlock_T
 
mBlockId
);

299 
U8
 
	`WrôeBlock4
(
EïromBlock_T
 
mBlockId
);

300 
U8
 
	`RódBlock4
(
EïromBlock_T
 
mBlockId
);

302 
U8
 
	`WrôeBlock5
(
EïromBlock_T
 
mBlockId
);

303 
U8
 
	`RódBlock5
(
EïromBlock_T
 
mBlockId
);

304 
U8
 
	`WrôeBlock6
(
EïromBlock_T
 
mBlockId
);

305 
U8
 
	`RódBlock6
(
EïromBlock_T
 
mBlockId
);

308 
U8
 
	`WrôeBlock7
(
EïromBlock_T
 
mBlockId
);

309 
U8
 
	`RódBlock7
(
EïromBlock_T
 
mBlockId
);

312 
U8
 
	`WrôeBlock8
(
EïromBlock_T
 
mBlockId
);

313 
U8
 
	`RódBlock8
(
EïromBlock_T
 
mBlockId
);

315 
U8
 
	`WrôeBlock9
(
EïromBlock_T
 
mBlockId
);

316 
U8
 
	`RódBlock9
(
EïromBlock_T
 
mBlockId
);

322 
EïBlockTabÀ_T
 
EïromBlockTabÀLi°
[] =

324 { 
EEP_BLOCK_0
, 
FALSE
, 
WrôeBlock0
, 
RódBlock0
 },

325 { 
EEP_BLOCK_1
, 
FALSE
, 
WrôeBlock1
, 
RódBlock1
 },

326 { 
EEP_BLOCK_2
, 
FALSE
, 
WrôeBlock2
, 
RódBlock2
 },

327 { 
EEP_BLOCK_3
, 
FALSE
, 
WrôeBlock3
, 
RódBlock3
 },

328 { 
EEP_BLOCK_4
, 
FALSE
, 
WrôeBlock4
, 
RódBlock4
 },

332 { 
EEP_BLOCK_8
, 
FALSE
, 
WrôeBlock8
, 
RódBlock8
 },

333 { 
EEP_BLOCK_9
, 
FALSE
, 
WrôeBlock9
, 
RódBlock9
 },

334 
	}
};

335 
	#SZ_BLOCK_TABLE
 ((
EïromBlockTabÀLi°
)/(
EïBlockTabÀ_T
))

	)

337 
	$InôBlockTabÀAŒSë
()

339 
U8
 
i
;

341  
i
 = 0; i < 
SZ_BLOCK_TABLE
; i++ )

343 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
TRUE
;

345 
	}
}

347 
	$SëBlockWrôe
–
EïromBlock_T
 
muBlockId
 )

349 
U8
 
i
;

351  
i
 = 0; i < 
SZ_BLOCK_TABLE
; i++ )

353 if–
muBlockId
 =
EïromBlockTabÀLi°
[ 
i
 ].
blockId
 )

355 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
TRUE
;

358 
	}
}

361 
	$SaveEïromId
–
EïromId_T
 
mu8Id
 )

363 
EïromBlock_T
 
muBlockId
;

365 if–
mu8Id
 > 
EEP_ID_NUM
 )

370 
Eï
.
DñayTime
 = 1;

371 
Eï
.
Wrôe
 = 
TRUE
;

373 
muBlockId
 = 
	`GëBlockId
–
mu8Id
 );

374 if–
muBlockId
 !
EEP_BLOCK_NONE
 )

376 
	`SëBlockWrôe
–
muBlockId
 );

378 
	}
}

380 
	$Eø£Eïrom
()

382 
Eï
.
Wrôe
 = 
TRUE
;

383 
Eï
.
Eø£
 = 
TRUE
;

385 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_FACTORY
);

386 
	}
}

389 
U8
 
	$EïromPageWrôe
–
U16
 
mu16Addr
, 
U8
 *
pD©a
 )

391 if–
	`IsRtcB©BackUpMode
(Ë=
TRUE
 )

393  
FALSE
;

396 
mu16Addr
 +
EEP_ADDR_OFFSET
;

397  
	`HAL_RTC_PageWrôe
–
DEV_ADDR_EEP
, 
mu16Addr
, 
pD©a
, 
EEP_PAGE_SIZE
);

398 
	}
}

400 
U8
 
	$EïromSeqRód
–
U16
 
mu16Addr
, 
U8
 *
pD©a
, U8 
mu16Lígth
 )

402 if–
	`IsRtcB©BackUpMode
(Ë=
TRUE
 )

404  
FALSE
;

407 
mu16Addr
 +
EEP_ADDR_OFFSET
;

408  
	`HAL_RTC_SeqRód
–
DEV_ADDR_EEP
, 
mu16Addr
, 
pD©a
, 
mu16Lígth
 );

409 
	}
}

412 
U8
 
	$WrôeBlock0
(
EïromBlock_T
 
mBlockId
)

414 
U16
 
mu16CheckSum
 = 0U;

415 
U8
 
mu8SñW©î
 = 
SEL_WATER_ROOM
;

421 
mu8SñW©î
 = 
	`GëW©îOutSñe˘
();

422 if–
mu8SñW©î
 =
SEL_WATER_HOT


423 || 
mu8SñW©î
 =
SEL_WATER_FLUSH
 )

425 
mu8SñW©î
 = 
SEL_WATER_ROOM
;

427 if–
mu8SñW©î
 =
SEL_WATER_COLD
 && 
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

429 
mu8SñW©î
 = 
SEL_WATER_ROOM
;

432 
Eï
.
WrôeD©a
[ 0 ] = 
	`GëCﬁdW©îC⁄figMake
();

433 
Eï
.
WrôeD©a
[ 1 ] = 0;

434 
Eï
.
WrôeD©a
[ 2 ] = 
	`GëI˚C⁄figMake
();

435 
Eï
.
WrôeD©a
[ 3 ] = 
	`GëI˚Turbo
();

436 
Eï
.
WrôeD©a
[ 4 ] = 
	`GëSavögC⁄fig
();

437 
Eï
.
WrôeD©a
[ 5 ] = 
	`GëC⁄figDeco
–
DECO_LED_WELCOME
 );

438 
Eï
.
WrôeD©a
[ 6 ] = 
	`GëC⁄figDeco
–
DECO_LED_BUTTON
 );

439 
Eï
.
WrôeD©a
[ 7 ] = 
	`GëI˚Size
();

440 
Eï
.
WrôeD©a
[ 8 ] = 
	`GëW©îOutC⁄fFixedAmou¡Ty≥
();

441 
Eï
.
WrôeD©a
[ 9 ] = 
	`GëSoundMuã
();

442 
Eï
.
WrôeD©a
[ 10 ] = 
	`GëLockI˚
();

443 
Eï
.
WrôeD©a
[ 11 ] = 
	`GëSîvi˚CheckDay
();

444 
Eï
.
WrôeD©a
[ 12 ] = 
mu8SñW©î
;

445 
Eï
.
WrôeD©a
[ 13 ] = 
	`GëLockAŒ
();

446 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

448 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

449 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

453  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

454 
	}
}

456 
U8
 
	$RódBlockId
(
EïromBlock_T
 
mu8BlockId
, 
U8
 *
pBuf
)

458 
U8
 
mu8Rë
;

459 
U16
 
mu16SrcChksum
 = 0U;

460 
U16
 
mu16CÆcChksum
 = 0U;

464 
mu8Rë
 = 
	`EïromSeqRód
–((
U16
)
mu8BlockId
 * 
EEP_PAGE_SIZE
 ), 
pBuf
, EEP_PAGE_SIZE );

465 if–
mu8Rë
 =
FALSE
 )

467  
FALSE
;

471 
mu16SrcChksum
 = 
	`GET_UINT_WORD
–
pBuf
[
EEP_PAGE_SIZE
 - 1],ÖBuf[EEP_PAGE_SIZE - 2] );

472 
mu16CÆcChksum
 = 
	`¸c16_ˇl
–
pBuf
, (
EEP_PAGE_SIZE
 - 2) );

473 if–
mu16SrcChksum
 !
mu16CÆcChksum
 )

475  
FALSE
;

478  
TRUE
;

479 
	}
}

481 
U8
 
	$RódBlock0
(
EïromBlock_T
 
mBlockId
)

483 
U8
 
mu8Rë
;

485 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

486 if–
mu8Rë
 =
FALSE
 )

488  
FALSE
;

492 
	`SëCﬁdW©îC⁄figMake
–
Eï
.
RódD©a
[0] );

494 
	`SëI˚C⁄figMake
–
Eï
.
RódD©a
[2] );

495 
	`SëI˚Turbo
–
Eï
.
RódD©a
[3] );

496 
	`SëSavögC⁄fig
–
Eï
.
RódD©a
[4] );

498 
	`SëC⁄figDeco
–
DECO_LED_WELCOME
, 
Eï
.
RódD©a
[5] );

499 
	`SëC⁄figDeco
–
DECO_LED_BUTTON
, 
Eï
.
RódD©a
[6] );

500 
	`SëI˚Size
–
Eï
.
RódD©a
[7] );

501 
	`SëW©îOutC⁄fFixedAmou¡Ty≥
–
Eï
.
RódD©a
[8] );

502 
	`SëW©îOutFixedAmou¡Ty≥
–
Eï
.
RódD©a
[8] );

503 if–
Eï
.
RódD©a
[9] != 0 )

505 
	`SëSoundMuã
();

507 
	`SëLockI˚
–
Eï
.
RódD©a
[10] );

508 
	`SëSîvi˚CheckDay
–
Eï
.
RódD©a
[11] );

509 
	`SëW©îOutSñe˘
–
Eï
.
RódD©a
[ 12 ] );

510 
	`SëLockAŒ
–
Eï
.
RódD©a
[13] );

512  
TRUE
;

513 
	}
}

515 
U8
 
	$WrôeBlock1
(
EïromBlock_T
 
mBlockId
)

517 
U16
 
mu16CheckSum
 = 0U;

518 
U32
 
mu32VÆ
;

521 
Eï
.
WrôeD©a
[ 0 ] = (
U8
)
	`GëFlushSëupInô
();

522 
Eï
.
WrôeD©a
[ 1 ] = (
U8
)
	`GëFlushSètus
();

524 
Eï
.
WrôeD©a
[ 2 ] = 0;

525 
Eï
.
WrôeD©a
[ 3 ] = 0;

526 
Eï
.
WrôeD©a
[ 4 ] = Eï.
Vîsi⁄Maj‹
;

527 
Eï
.
WrôeD©a
[ 5 ] = Eï.
Vîsi⁄Mö‹
;

529 
Eï
.
WrôeD©a
[ 6 ] = 
	`GëW©îOutC⁄figU£r
();

531 
mu32VÆ
 = 
	`GëW©îOutU£rAmou¡
();

532 
Eï
.
WrôeD©a
[ 7 ] = 
	`GET_32_BYTE_32
–
mu32VÆ
 );

533 
Eï
.
WrôeD©a
[ 8 ] = 
	`GET_32_BYTE_24
–
mu32VÆ
 );

534 
Eï
.
WrôeD©a
[ 9 ] = 
	`GET_32_BYTE_16
–
mu32VÆ
 );

535 
Eï
.
WrôeD©a
[ 10 ] = 
	`GET_32_BYTE_8
–
mu32VÆ
 );

537 
Eï
.
WrôeD©a
[ 11 ] = 
	`GëLockHŸ
();

538 
Eï
.
WrôeD©a
[ 12 ] = 
	`GëHŸC⁄figU£r
();

539 
Eï
.
WrôeD©a
[ 13 ] = 
	`GëRtcC⁄figInô
();

540 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

542 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

543 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

547  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

548 
	}
}

550 
U8
 
	$RódBlock1
(
EïromBlock_T
 
mBlockId
)

552 
U8
 
mu8Rë
;

553 
U32
 
mu32VÆ
;

556 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

557 if–
mu8Rë
 =
FALSE
 )

559  
FALSE
;

565 
	`SëFlushSëupInô
((
FlushSètus_T
)
Eï
.
RódD©a
[0] );

568 
	`SëFlushSètus
–(
FlushSètus_T
)
Eï
.
RódD©a
[1] );

574 
Eï
.
Vîsi⁄Maj‹
 = Eï.
RódD©a
[4];

575 
Eï
.
Vîsi⁄Mö‹
 = Eï.
RódD©a
[5];

578 
	`SëW©îOutC⁄figU£r
–
Eï
.
RódD©a
[6] );

579 
mu32VÆ
 = 
	`GET_UINT_WORD_32
(

580 
Eï
.
RódD©a
[7],

581 
Eï
.
RódD©a
[8],

582 
Eï
.
RódD©a
[9],

583 
Eï
.
RódD©a
[10]);

584 
	`SëW©îOutU£rAmou¡
–
mu32VÆ
 );

587 
	`SëLockHŸ
–
Eï
.
RódD©a
[11] );

590 
	`SëHŸC⁄figU£r
–
Eï
.
RódD©a
[12] );

593 
	`SëRtcC⁄figInô
–
Eï
.
RódD©a
[13] );

595  
TRUE
;

596 
	}
}

598 
U8
 
	$WrôeBlock2
(
EïromBlock_T
 
mBlockId
)

600 
U16
 
mu16CheckSum
 = 0U;

602 
Memíto_T
 
mMemíto
;

606 
	`GëMemítoEº‹
–0, &
mMemíto
 );

607 
Eï
.
WrôeD©a
[ 0 ] = (
U8
)
mMemíto
.
Eº‹
;

608 
Eï
.
WrôeD©a
[ 1 ] = (
U8
)
	`GET_HIGH_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

609 
Eï
.
WrôeD©a
[ 2 ] = (
U8
)
	`GET_LOW_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

610 
Eï
.
WrôeD©a
[ 3 ] = 
mMemíto
.
D©e
.
u8M⁄th
;

611 
Eï
.
WrôeD©a
[ 4 ] = 
mMemíto
.
D©e
.
u8D©e
;

614 
	`GëMemítoEº‹
–1, &
mMemíto
 );

615 
Eï
.
WrôeD©a
[ 5 ] = (
U8
)
mMemíto
.
Eº‹
;

616 
Eï
.
WrôeD©a
[ 6 ] = (
U8
)
	`GET_HIGH_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

617 
Eï
.
WrôeD©a
[ 7 ] = (
U8
)
	`GET_LOW_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

618 
Eï
.
WrôeD©a
[ 8 ] = 
mMemíto
.
D©e
.
u8M⁄th
;

619 
Eï
.
WrôeD©a
[ 9 ] = 
mMemíto
.
D©e
.
u8D©e
;

621 
Eï
.
WrôeD©a
[ 10 ] = 0;

622 
Eï
.
WrôeD©a
[ 11 ] = 0;

623 
Eï
.
WrôeD©a
[ 12 ] = 0;

624 
Eï
.
WrôeD©a
[ 13 ] = 0;

625 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

627 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

628 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

632  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

633 
	}
}

635 
U8
 
	$RódBlock2
(
EïromBlock_T
 
mBlockId
)

637 
U8
 
mu8Rë
;

638 
Memíto_T
 
mMemíto
;

641 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

642 if–
mu8Rë
 =
FALSE
 )

644  
FALSE
;

650 
mMemíto
.
Eº‹
 = (
Eº‹Id_T
)
Eï
.
RódD©a
[0];

651 
mMemíto
.
D©e
.
u16Yór
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[2], Eep.ReadData[1] );

652 
mMemíto
.
D©e
.
u8M⁄th
 = 
Eï
.
RódD©a
[3];

653 
mMemíto
.
D©e
.
u8D©e
 = 
Eï
.
RódD©a
[4];

654 
	`SëMemítoEº‹
–0, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

657 
mMemíto
.
Eº‹
 = (
Eº‹Id_T
)
Eï
.
RódD©a
[5];

658 
mMemíto
.
D©e
.
u16Yór
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[7], Eep.ReadData[6] );

659 
mMemíto
.
D©e
.
u8M⁄th
 = 
Eï
.
RódD©a
[8];

660 
mMemíto
.
D©e
.
u8D©e
 = 
Eï
.
RódD©a
[9];

661 
	`SëMemítoEº‹
–1, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

668  
TRUE
;

669 
	}
}

671 
U8
 
	$WrôeBlock3
(
EïromBlock_T
 
mBlockId
)

673 
U16
 
mu16CheckSum
 = 0U;

675 
Memíto_T
 
mMemíto
;

679 
	`GëMemítoEº‹
–2, &
mMemíto
 );

680 
Eï
.
WrôeD©a
[ 0 ] = (
U8
)
mMemíto
.
Eº‹
;

681 
Eï
.
WrôeD©a
[ 1 ] = (
U8
)
	`GET_HIGH_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

682 
Eï
.
WrôeD©a
[ 2 ] = (
U8
)
	`GET_LOW_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

683 
Eï
.
WrôeD©a
[ 3 ] = 
mMemíto
.
D©e
.
u8M⁄th
;

684 
Eï
.
WrôeD©a
[ 4 ] = 
mMemíto
.
D©e
.
u8D©e
;

687 
	`GëMemítoEº‹
–3, &
mMemíto
 );

688 
Eï
.
WrôeD©a
[ 5 ] = (
U8
)
mMemíto
.
Eº‹
;

689 
Eï
.
WrôeD©a
[ 6 ] = (
U8
)
	`GET_HIGH_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

690 
Eï
.
WrôeD©a
[ 7 ] = (
U8
)
	`GET_LOW_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

691 
Eï
.
WrôeD©a
[ 8 ] = 
mMemíto
.
D©e
.
u8M⁄th
;

692 
Eï
.
WrôeD©a
[ 9 ] = 
mMemíto
.
D©e
.
u8D©e
;

694 
Eï
.
WrôeD©a
[ 10 ] = 0;

695 
Eï
.
WrôeD©a
[ 11 ] = 0;

696 
Eï
.
WrôeD©a
[ 12 ] = 0;

697 
Eï
.
WrôeD©a
[ 13 ] = 0;

698 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

700 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

701 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

705  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

706 
	}
}

708 
U8
 
	$RódBlock3
(
EïromBlock_T
 
mBlockId
)

710 
U8
 
mu8Rë
;

711 
Memíto_T
 
mMemíto
;

714 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

715 if–
mu8Rë
 =
FALSE
 )

717  
FALSE
;

723 
mMemíto
.
Eº‹
 = (
Eº‹Id_T
)
Eï
.
RódD©a
[0];

724 
mMemíto
.
D©e
.
u16Yór
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[2], Eep.ReadData[1] );

725 
mMemíto
.
D©e
.
u8M⁄th
 = 
Eï
.
RódD©a
[3];

726 
mMemíto
.
D©e
.
u8D©e
 = 
Eï
.
RódD©a
[4];

727 
	`SëMemítoEº‹
–2, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

730 
mMemíto
.
Eº‹
 = (
Eº‹Id_T
)
Eï
.
RódD©a
[5];

731 
mMemíto
.
D©e
.
u16Yór
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[7], Eep.ReadData[6] );

732 
mMemíto
.
D©e
.
u8M⁄th
 = 
Eï
.
RódD©a
[8];

733 
mMemíto
.
D©e
.
u8D©e
 = 
Eï
.
RódD©a
[9];

734 
	`SëMemítoEº‹
–3, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

741  
TRUE
;

742 
	}
}

745 
U8
 
	$WrôeBlock4
(
EïromBlock_T
 
mBlockId
)

747 
U16
 
mu16CheckSum
 = 0U;

749 
Memíto_T
 
mMemíto
;

753 
	`GëMemítoEº‹
–4, &
mMemíto
 );

754 
Eï
.
WrôeD©a
[ 0 ] = (
U8
)
mMemíto
.
Eº‹
;

755 
Eï
.
WrôeD©a
[ 1 ] = (
U8
)
	`GET_HIGH_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

756 
Eï
.
WrôeD©a
[ 2 ] = (
U8
)
	`GET_LOW_BYTE
(
mMemíto
.
D©e
.
u16Yór
);

757 
Eï
.
WrôeD©a
[ 3 ] = 
mMemíto
.
D©e
.
u8M⁄th
;

758 
Eï
.
WrôeD©a
[ 4 ] = 
mMemíto
.
D©e
.
u8D©e
;

760 
Eï
.
WrôeD©a
[ 5 ] = 0;

761 
Eï
.
WrôeD©a
[ 6 ] = 0;

762 
Eï
.
WrôeD©a
[ 7 ] = 0;

763 
Eï
.
WrôeD©a
[ 8 ] = 0;

764 
Eï
.
WrôeD©a
[ 9 ] = 0;

766 
Eï
.
WrôeD©a
[ 10 ] = 0;

767 
Eï
.
WrôeD©a
[ 11 ] = 0;

768 
Eï
.
WrôeD©a
[ 12 ] = 0;

769 
Eï
.
WrôeD©a
[ 13 ] = 0;

770 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

772 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

773 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

777  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

778 
	}
}

781 
U8
 
	$RódBlock4
(
EïromBlock_T
 
mBlockId
)

783 
U8
 
mu8Rë
;

784 
Memíto_T
 
mMemíto
;

787 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

788 if–
mu8Rë
 =
FALSE
 )

790  
FALSE
;

796 
mMemíto
.
Eº‹
 = (
Eº‹Id_T
)
Eï
.
RódD©a
[0];

797 
mMemíto
.
D©e
.
u16Yór
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[2], Eep.ReadData[1] );

798 
mMemíto
.
D©e
.
u8M⁄th
 = 
Eï
.
RódD©a
[3];

799 
mMemíto
.
D©e
.
u8D©e
 = 
Eï
.
RódD©a
[4];

800 
	`SëMemítoEº‹
–4, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

812  
TRUE
;

813 
	}
}

817 
U8
 
	$WrôeBlock5
(
EïromBlock_T
 
mBlockId
)

819 
U16
 
mu16CheckSum
 = 0U;

820 
U£rInfo_T
 
U£r
;

821 
Lôî_T
 
mLôî
;

823 
	`GëU£rD©a
–&
U£r
 );

827 
mLôî
 = 
U£r
.
Ußge
[ 
USER_A
 ].
Daûy
;

828 
Eï
.
WrôeD©a
[ 0 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

829 
Eï
.
WrôeD©a
[ 1 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

831 
mLôî
 = 
U£r
.
Ußge
[ 
USER_A
 ].
M⁄thly
[0];

832 
Eï
.
WrôeD©a
[ 2 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

833 
Eï
.
WrôeD©a
[ 3 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

840 
mLôî
 = 
U£r
.
Ußge
[ 
USER_B
 ].
Daûy
;

841 
Eï
.
WrôeD©a
[ 6 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

842 
Eï
.
WrôeD©a
[ 7 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

844 
mLôî
 = 
U£r
.
Ußge
[ 
USER_B
 ].
M⁄thly
[0];

845 
Eï
.
WrôeD©a
[ 8 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

846 
Eï
.
WrôeD©a
[ 9 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

852 
Eï
.
WrôeD©a
[ 12 ] = 0;

853 
Eï
.
WrôeD©a
[ 13 ] = 0;

854 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

856 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

857 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

861  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

862 
	}
}

866 
U8
 
	$RódBlock5
(
EïromBlock_T
 
mBlockId
)

868 
U8
 
mu8Rë
;

869 
Lôî_T
 
mLôîDaûy
;

870 
Lôî_T
 
mLôîM⁄thly_1
;

871 
Lôî_T
 
mLôîM⁄thly_2
;

874 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

875 if–
mu8Rë
 =
FALSE
 )

877  
FALSE
;

883 
mLôîDaûy
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[1], Eep.ReadData[0] );

884 
mLôîM⁄thly_1
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[3], Eep.ReadData[2] );

886 
	`SëU£rUßgeW©î
–
USER_A
, 
USAGE_DAILY
, 0, 
mLôîDaûy
 );

887 
	`SëU£rUßgeW©î
–
USER_A
, 
USAGE_MONTHLY
, 0, 
mLôîM⁄thly_1
 );

891 
mLôîDaûy
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[7], Eep.ReadData[6] );

892 
mLôîM⁄thly_1
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[9], Eep.ReadData[8] );

894 
	`SëU£rUßgeW©î
–
USER_B
, 
USAGE_DAILY
, 0, 
mLôîDaûy
 );

895 
	`SëU£rUßgeW©î
–
USER_B
, 
USAGE_MONTHLY
, 0, 
mLôîM⁄thly_1
 );

899  
TRUE
;

900 
	}
}

906 
U8
 
	$WrôeBlock6
(
EïromBlock_T
 
mBlockId
)

908 
U16
 
mu16CheckSum
 = 0U;

909 
U£rInfo_T
 
U£r
;

910 
Lôî_T
 
mLôî
;

912 
	`GëU£rD©a
–&
U£r
 );

916 
mLôî
 = 
U£r
.
Ußge
[ 
USER_C
 ].
Daûy
;

917 
Eï
.
WrôeD©a
[ 0 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

918 
Eï
.
WrôeD©a
[ 1 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

920 
mLôî
 = 
U£r
.
Ußge
[ 
USER_C
 ].
M⁄thly
[0];

921 
Eï
.
WrôeD©a
[ 2 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

922 
Eï
.
WrôeD©a
[ 3 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

929 
mLôî
 = 
U£r
.
Ußge
[ 
USER_NONE
 ].
Daûy
;

930 
Eï
.
WrôeD©a
[ 6 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

931 
Eï
.
WrôeD©a
[ 7 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

933 
mLôî
 = 
U£r
.
Ußge
[ 
USER_NONE
 ].
M⁄thly
[0];

934 
Eï
.
WrôeD©a
[ 8 ] = 
	`GET_HIGH_BYTE
–
mLôî
 );

935 
Eï
.
WrôeD©a
[ 9 ] = 
	`GET_LOW_BYTE
–
mLôî
 );

941 
Eï
.
WrôeD©a
[ 12 ] = 0;

942 
Eï
.
WrôeD©a
[ 13 ] = 0;

943 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

945 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

946 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

950  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

951 
	}
}

955 
U8
 
	$RódBlock6
(
EïromBlock_T
 
mBlockId
)

957 
U8
 
mu8Rë
;

958 
Lôî_T
 
mLôîDaûy
;

959 
Lôî_T
 
mLôîM⁄thly_1
;

960 
Lôî_T
 
mLôîM⁄thly_2
;

963 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

964 if–
mu8Rë
 =
FALSE
 )

966  
FALSE
;

972 
mLôîDaûy
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[1], Eep.ReadData[0] );

973 
mLôîM⁄thly_1
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[3], Eep.ReadData[2] );

975 
	`SëU£rUßgeW©î
–
USER_C
, 
USAGE_DAILY
, 0, 
mLôîDaûy
 );

976 
	`SëU£rUßgeW©î
–
USER_C
, 
USAGE_MONTHLY
, 0, 
mLôîM⁄thly_1
 );

980 
mLôîDaûy
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[7], Eep.ReadData[6] );

981 
mLôîM⁄thly_1
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[9], Eep.ReadData[8] );

983 
	`SëU£rUßgeW©î
–
USER_NONE
, 
USAGE_DAILY
, 0, 
mLôîDaûy
 );

984 
	`SëU£rUßgeW©î
–
USER_NONE
, 
USAGE_MONTHLY
, 0, 
mLôîM⁄thly_1
 );

988  
TRUE
;

989 
	}
}

994 
U8
 
	$WrôeBlock7
(
EïromBlock_T
 
mBlockId
)

996 
U16
 
mu16CheckSum
 = 0U;

997 
U8
 
mu8Cuºít
;

998 
U8
 
mu8Pªvious
;

999 
U32
 
mu32CuºítW©t
;

1000 
U32
 
mu32PªviousW©t
;

1003 
mu8Cuºít
 = 
	`GëE√rgyM⁄th
();

1004 
mu8Pªvious
 = 
mu8Cuºít
 - 1;

1005 if–
mu8Pªvious
 == 0 )

1007 
mu8Pªvious
 = 12;

1009 
mu32CuºítW©t
 = 
	`GëE√rgyW©tM⁄th
–
mu8Cuºít
 );

1010 
mu32PªviousW©t
 = 
	`GëE√rgyW©tM⁄th
–
mu8Pªvious
 );

1013 
Eï
.
WrôeD©a
[ 0 ] = 
mu8Cuºít
;

1015 
Eï
.
WrôeD©a
[ 1 ] = 
	`GET_32_BYTE_32
–
mu32CuºítW©t
 );

1016 
Eï
.
WrôeD©a
[ 2 ] = 
	`GET_32_BYTE_24
–
mu32CuºítW©t
 );

1017 
Eï
.
WrôeD©a
[ 3 ] = 
	`GET_32_BYTE_16
–
mu32CuºítW©t
 );

1018 
Eï
.
WrôeD©a
[ 4 ] = 
	`GET_32_BYTE_8
–
mu32CuºítW©t
 );

1020 
Eï
.
WrôeD©a
[ 5 ] = 
	`GET_32_BYTE_32
–
mu32PªviousW©t
 );

1021 
Eï
.
WrôeD©a
[ 6 ] = 
	`GET_32_BYTE_24
–
mu32PªviousW©t
 );

1022 
Eï
.
WrôeD©a
[ 7 ] = 
	`GET_32_BYTE_16
–
mu32PªviousW©t
 );

1023 
Eï
.
WrôeD©a
[ 8 ] = 
	`GET_32_BYTE_8
–
mu32PªviousW©t
 );

1025 
Eï
.
WrôeD©a
[ 9 ] = 0;

1026 
Eï
.
WrôeD©a
[ 10 ] = 0;

1027 
Eï
.
WrôeD©a
[ 11 ] = 0;

1028 
Eï
.
WrôeD©a
[ 12 ] = 0;

1030 
Eï
.
WrôeD©a
[ 13 ] = 0;

1031 
Eï
.
WrôeD©a
[ 14 ] = 0;

1033 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

1035 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

1036 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

1040  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

1041 
	}
}

1048 
U8
 
	$RódBlock7
(
EïromBlock_T
 
mBlockId
)

1050 
U8
 
mu8Rë
;

1051 
U8
 
mu8Cuºít
;

1052 
U8
 
mu8Pªvious
;

1053 
U32
 
mu32VÆ
;

1055 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

1056 if–
mu8Rë
 =
FALSE
 )

1058  
FALSE
;

1064 
mu8Cuºít
 = 
Eï
.
RódD©a
[0];

1065 
mu8Pªvious
 = 
mu8Cuºít
 - 1;

1066 if–
mu8Pªvious
 == 0 )

1068 
mu8Pªvious
 = 12;

1070 
	`SëE√rgyM⁄th
–
mu8Cuºít
 );

1073 
mu32VÆ
 = 
	`GET_UINT_WORD_32
(

1074 
Eï
.
RódD©a
[1],

1075 
Eï
.
RódD©a
[2],

1076 
Eï
.
RódD©a
[3],

1077 
Eï
.
RódD©a
[4] );

1078 
	`SëE√rgyW©tM⁄th
–
mu8Cuºít
, 
mu32VÆ
 );

1081 
mu32VÆ
 = 
	`GET_UINT_WORD_32
(

1082 
Eï
.
RódD©a
[5],

1083 
Eï
.
RódD©a
[6],

1084 
Eï
.
RódD©a
[7],

1085 
Eï
.
RódD©a
[8] );

1086 
	`SëE√rgyW©tM⁄th
–
mu8Pªvious
, 
mu32VÆ
 );

1093  
TRUE
;

1094 
	}
}

1098 
SWifiSètus_T
 
WiFi
;

1099 
U8
 
	$WrôeBlock8
(
EïromBlock_T
 
mBlockId
)

1101 
U16
 
mu16CheckSum
 = 0U;

1104 
Eï
.
WrôeD©a
[ 0 ] = 
WiFi
.
mU⁄Off
;

1105 
Eï
.
WrôeD©a
[ 1 ] = 
WiFi
.
mUfú°P¨ög
;

1106 
Eï
.
WrôeD©a
[ 2 ] = 
WiFi
.
mUfŸaModuÀ
;

1107 
Eï
.
WrôeD©a
[ 3 ] = 
WiFi
.
mUfŸaMaö
;

1108 
Eï
.
WrôeD©a
[ 4 ] = 0;

1109 
Eï
.
WrôeD©a
[ 5 ] = 0;

1110 
Eï
.
WrôeD©a
[ 6 ] = 0;

1111 
Eï
.
WrôeD©a
[ 7 ] = 0;

1112 
Eï
.
WrôeD©a
[ 8 ] = 0;

1113 
Eï
.
WrôeD©a
[ 9 ] = 0;

1114 
Eï
.
WrôeD©a
[ 10 ] = 0;

1115 
Eï
.
WrôeD©a
[ 11 ] = 0;

1116 
Eï
.
WrôeD©a
[ 12 ] = 0;

1117 
Eï
.
WrôeD©a
[ 13 ] = 0;

1118 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

1120 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

1121 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

1125  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

1126 
	}
}

1131 
U8
 
	$RódBlock8
(
EïromBlock_T
 
mBlockId
)

1133 
U8
 
mu8Rë
;

1136 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

1137 if–
mu8Rë
 =
FALSE
 )

1139  
FALSE
;

1143 
WiFi
.
mU⁄Off
 = 
Eï
.
RódD©a
[0];

1144 
WiFi
.
mUfú°P¨ög
 = 
Eï
.
RódD©a
[1];

1145 
WiFi
.
mUfŸaModuÀ
 = 
Eï
.
RódD©a
[2];

1146 
WiFi
.
mUfŸaMaö
 = 
Eï
.
RódD©a
[3];

1148  
TRUE
;

1149 
	}
}

1151 
U8
 
	$WrôeBlock9
(
EïromBlock_T
 
mBlockId
)

1153 
U16
 
mu16CheckSum
 = 0U;

1154 
U32
 
mu32Time
;

1157 
Eï
.
WrôeD©a
[ 0 ] = 
	`GëFûãrCh™gedSètus
();

1158 
Eï
.
WrôeD©a
[ 1 ] = 
	`GëFa˘‹ySëup
();

1161 
Eï
.
WrôeD©a
[ 2 ] = 
	`GëVoi˚Levñ
();

1162 
Eï
.
WrôeD©a
[ 3 ] = 
	`GëVoi˚Vﬁume
();

1165 
mu32Time
 = 
	`GëFûãrUßgeTime
();

1166 
Eï
.
WrôeD©a
[ 4 ] = 
	`GET_32_BYTE_32
–
mu32Time
 );

1167 
Eï
.
WrôeD©a
[ 5 ] = 
	`GET_32_BYTE_24
–
mu32Time
 );

1168 
Eï
.
WrôeD©a
[ 6 ] = 
	`GET_32_BYTE_16
–
mu32Time
 );

1169 
Eï
.
WrôeD©a
[ 7 ] = 
	`GET_32_BYTE_8
–
mu32Time
 );

1172 
Eï
.
WrôeD©a
[ 8 ] = 
	`GëCu°omîTy≥
();

1175 
Eï
.
WrôeD©a
[ 9 ] = 
	`GëSavögAœrmHour
–
ALARM_ON
 );

1176 
Eï
.
WrôeD©a
[ 10 ] = 
	`GëSavögAœrmMö
–
ALARM_ON
 );

1177 
Eï
.
WrôeD©a
[ 11 ] = 
	`GëSavögAœrmHour
–
ALARM_OFF
 );

1178 
Eï
.
WrôeD©a
[ 12 ] = 
	`GëSavögAœrmMö
–
ALARM_OFF
 );

1181 
Eï
.
WrôeD©a
[ 13 ] = 0;

1182 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

1184 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

1185 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

1189  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

1190 
	}
}

1193 
U8
 
	$RódBlock9
(
EïromBlock_T
 
mBlockId
)

1195 
U8
 
mu8Rë
;

1196 
U32
 
mu32VÆ
;

1199 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

1200 if–
mu8Rë
 =
FALSE
 )

1202  
FALSE
;

1206 
	`SëFûãrCh™gedSètus
–
Eï
.
RódD©a
[0] );

1207 
	`SëFa˘roySëup
–
Eï
.
RódD©a
[1] );

1210 
	`SëVoi˚Levñ
–
Eï
.
RódD©a
[2] );

1211 
	`SëVoi˚Vﬁume
–
Eï
.
RódD©a
[3] );

1214 
mu32VÆ
 = 
	`GET_UINT_WORD_32
(

1215 
Eï
.
RódD©a
[4],

1216 
Eï
.
RódD©a
[5],

1217 
Eï
.
RódD©a
[6],

1218 
Eï
.
RódD©a
[7] );

1219 
	`SëFûãrUßgeTime
–
mu32VÆ
 );

1222 
	`SëCu°omîTy≥
–
Eï
.
RódD©a
[ 8 ] );

1225 
	`SëSavögAœrmHour
–
ALARM_ON
, 
Eï
.
RódD©a
[ 9 ] );

1226 
	`SëSavögAœrmMö
–
ALARM_ON
, 
Eï
.
RódD©a
[ 10 ] );

1228 
	`SëSavögAœrmHour
–
ALARM_OFF
, 
Eï
.
RódD©a
[ 11 ] );

1229 
	`SëSavögAœrmMö
–
ALARM_OFF
, 
Eï
.
RódD©a
[ 12 ] );

1230  
TRUE
;

1231 
	}
}

1235 
U8
 
	$WrôeSodaUßge
–
EïromBlock_T
 
mBlockId
 )

1237 
U8
 
mu8Index
;

1238 
U16
 
mu16CheckSum
 = 0U;

1239 
SodaUßge_T
 
mDay
;

1242 
mu8Index
 = (
mBlockId
 - 
EEP_BLOCK_8
 ) * 2;

1243 
	`GëSodaUßgeDayD©a
–
mu8Index
, &
mDay
 );

1245 
Eï
.
WrôeD©a
[ 0 ] = 
mDay
.
Yór
;

1246 
Eï
.
WrôeD©a
[ 1 ] = 
mDay
.
M⁄th
;

1247 
Eï
.
WrôeD©a
[ 2 ] = 
mDay
.
D©e
;

1248 
Eï
.
WrôeD©a
[ 3 ] = 
	`GET_HIGH_BYTE
–
mDay
.
Ußge
 );

1249 
Eï
.
WrôeD©a
[ 4 ] = 
	`GET_LOW_BYTE
–
mDay
.
Ußge
 );

1251 
	`GëSodaUßgeDayD©a
–
mu8Index
 + 1, &
mDay
 );

1252 
Eï
.
WrôeD©a
[ 5 ] = 
mDay
.
Yór
;

1253 
Eï
.
WrôeD©a
[ 6 ] = 
mDay
.
M⁄th
;

1254 
Eï
.
WrôeD©a
[ 7 ] = 
mDay
.
D©e
;

1255 
Eï
.
WrôeD©a
[ 8 ] = 
	`GET_HIGH_BYTE
–
mDay
.
Ußge
 );

1256 
Eï
.
WrôeD©a
[ 9 ] = 
	`GET_LOW_BYTE
–
mDay
.
Ußge
 );

1258 
Eï
.
WrôeD©a
[ 10 ] = 0;

1259 
Eï
.
WrôeD©a
[ 11 ] = 0;

1260 
Eï
.
WrôeD©a
[ 12 ] = 0;

1261 
Eï
.
WrôeD©a
[ 13 ] = 0;

1262 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

1264 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

1265 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

1268  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

1269 
	}
}

1273 
U8
 
	$RódSodaUßge
–
EïromBlock_T
 
mBlockId
 )

1275 
U8
 
mu8Rë
;

1276 
U8
 
mu8Index
;

1277 
Lôî_T
 
mLôîDaûy
;

1280 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

1281 if–
mu8Rë
 =
FALSE
 )

1283  
FALSE
;

1286 
mu8Index
 = (
mBlockId
 - 
EEP_BLOCK_8
) * 2;

1289 
mLôîDaûy
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[4], Eep.ReadData[3] );

1290 
	`SëSodaUßgeW©î
–
mu8Index
, 
Eï
.
RódD©a
[0], Eï.RódD©a[1], Eï.RódD©a[2], 
mLôîDaûy
 );

1292 
mLôîDaûy
 = 
	`GET_UINT_WORD
–
Eï
.
RódD©a
[9], Eep.ReadData[8] );

1293 
	`SëSodaUßgeW©î
–
mu8Index
 + 1, 
Eï
.
RódD©a
[5], Eï.RódD©a[6], Eï.RódD©a[7], 
mLôîDaûy
 );

1300  
TRUE
;

1301 
	}
}

1305 
U8
 
	$WrôeD©aBlocks
()

1307 
U8
 
i
 = 0;

1308 vﬁ©ûê
U8
 
mu8Rë
 = 
TRUE
;

1309 
EïromBlock_T
 
mBlockId
;

1311  
i
 = 0; i < 
SZ_BLOCK_TABLE
 ; i++ )

1313 if–
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 =
TRUE
 )

1315 if–
EïromBlockTabÀLi°
[ 
i
 ].
pWrôeA˘i⁄
 !
NULL
 )

1317 
mBlockId
 = 
EïromBlockTabÀLi°
[ 
i
 ].
blockId
;

1318 
mu8Rë
 = 
EïromBlockTabÀLi°
[ 
i
 ].
	`pWrôeA˘i⁄
–
mBlockId
 );

1319 if–
mu8Rë
 =
TRUE
 )

1321 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
FALSE
;

1326 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
FALSE
;

1331  
TRUE
;

1332 
	}
}

1334 
U8
 
	$RódD©aBlocks
()

1336 
U8
 
i
 = 0;

1337 vﬁ©ûê
U8
 
mu8Rë
 = 
TRUE
;

1338 
EïromBlock_T
 
mBlockId
;

1341  
i
 = 0; i < 
SZ_BLOCK_TABLE
 ; i++ )

1343 if–
EïromBlockTabÀLi°
[ 
i
 ].
pRódA˘i⁄
 !
NULL
 )

1345 
mBlockId
 = 
EïromBlockTabÀLi°
[ 
i
 ].
blockId
;

1346 
mu8Rë
 = 
EïromBlockTabÀLi°
[ 
i
 ].
	`pRódA˘i⁄
–
mBlockId
 );

1347 if–
mu8Rë
 =
FALSE
 )

1349  
FALSE
;

1354  
TRUE
;

1355 
	}
}

1358 
	$Pro˚ssEïrom
()

1362 if–
	`GëTimeSh‹tSètus
(Ë=
TRUE


1363 && 
	`GëMemítoDi•
(Ë=
FALSE
 )

1365 
Eï
.
Wrôe
 = 
FALSE
;

1371 if–
	`GëW©îOut
(Ë=
TRUE
 )

1373 if–
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_FLUSH
 )

1380 if–
Eï
.
Wrôe
 =
FALSE
 )

1386 if–
Eï
.
DñayTime
 != 0 )

1388 
Eï
.
DñayTime
--;

1393 if–
	`IsRtcB©BackUpMode
(Ë=
FALSE
 )

1395 if–
Eï
.
Eø£
 =
TRUE
 )

1398 if–
	`HAL_RTC_EEPROM_AŒEø£
(Ë=
TRUE
 )

1400 
Eï
.
Wrôe
 = 
FALSE
;

1401 
Eï
.
Eø£
 = 
FALSE
;

1402 
	`Re£t
();

1407 
	`WrôeD©aBlocks
();

1408 
Eï
.
Wrôe
 = 
FALSE
;

1412 
	}
}

1414 
U8
 
	$Te°Eïrom
()

1416 
U8
 
mu8Ród
 = 0;

1417 
U16
 
mu16Addr
;

1421 if–
	`IsRtcB©BackUpMode
(Ë=
FALSE
 )

1423 
mu16Addr
 = (
EEP_BLOCK_0
 * 
EEP_PAGE_SIZE
Ë+ 
EEP_ADDR_OFFSET
;

1424 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_EEP
, 
mu16Addr
, 0x12 );

1425 
	`HAL_RTC_ByãRód
–
DEV_ADDR_EEP
, 
mu16Addr
, &
mu8Ród
 );

1428 if–
mu8Ród
 == 0x12 )

1430  
TRUE
;

1433  
FALSE
;

1434 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\eeprom.h

1 #i‚de‡
__EEPROM_H__


2 
	#__EEPROM_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mEEP_ID_VESRION_MAJOR
,

10 
	mEEP_ID_VESRION_MINOR
,

12 
	mEEP_ID_CONF_MAKE_COLD
,

13 
	mEEP_ID_CONF_MAKE_HOT
,

14 
	mEEP_ID_CONF_MAKE_ICE
,

15 
	mEEP_ID_CONF_TURBO
,

16 
	mEEP_ID_CONF_POWER_SAVING
,

18 
	mEEP_ID_CONF_HEALTH
,

19 
	mEEP_ID_CONF_DECO_LED
,

21 
	mEEP_ID_CONF_FIXED_AMOUNT
,

22 
	mEEP_ID_CONF_USER
,

23 
	mEEP_ID_CONF_USER_AMOUNT
,

24 
	mEEP_ID_CONF_USER_HOT
,

25 
	mEEP_ID_CONF_MUTE
,

26 
	mEEP_ID_CONF_UNUSED_SAVE
,

27 
	mEEP_ID_HOT_ALTITUDE
,

29 
	mEEP_ID_SEL_WATER
,

30 
	mEEP_ID_DO_ICING
,

31 
	mEEP_ID_LOCK_ALL
,

32 
	mEEP_ID_LOCK_HOT
,

33 
	mEEP_ID_LOCK_ICE
,

34 
	mEEP_ID_ICE_SIZE
,

36 
	mEEP_ID_MEMENTO_1
,

37 
	mEEP_ID_MEMENTO_2
,

38 
	mEEP_ID_MEMENTO_3
,

39 
	mEEP_ID_MEMENTO_4
,

40 
	mEEP_ID_MEMENTO_5
,

42 
	mEEP_ID_SERVICE_CHECK_DAY
,

44 
	mEEP_ID_FACTORY_SETUP
,

45 
	mEEP_ID_TIME
,

48 
	mEEP_ID_FILTER_CHANGED
,

49 
	mEEP_ID_FILTER_USAGE_TIME
,

53 
	mEEP_ID_VOICE_LEVEL
,

54 
	mEEP_ID_VOICE_VOLUME
,

57 
	mEEP_ID_FLUSH_SETUP_INIT
,

58 
	mEEP_ID_FLUSH_STATUS
,

60 
	mEEP_ID_CUSTOMER
,

62 
	mEEP_ID_POWER_SAVING_TIME
,

64 
	mEEP_ID_USER_A
,

65 
	mEEP_ID_USER_B
,

66 
	mEEP_ID_USER_C
,

67 
	mEEP_ID_USER_NONE
,

69 
	mEEP_ID_SODA_PUMP
,

70 
	mEEP_ID_CONF_UV_MODE
,

71 
	mEEP_ID_ENERGY
,

74 
	mEEP_ID_WIFI_POWER
,

75 
	mEEP_ID_WIFI_FIRST_PARING
,

76 
	mEEP_ID_WIFI_FOTA_MODULE
,

77 
	mEEP_ID_WIFI_FOTA_MCU
,

80 
	mEEP_ID_STER_DAY_PASS
,

81 
	mEEP_ID_STER_ADJUST_MODE
,

82 
	mEEP_ID_STER_PERIOD
,

83 
	mEEP_ID_STER_PERIOD_AUTO_CHANGE
,

84 
	mEEP_ID_STER_RESERVATION_HOUR
,

85 
	mEEP_ID_STER_RESERVATION_MIN
,

86 
	mEEP_ID_STER_ERR_WATER_OUT
,

87 
	mEEP_ID_STER_DOING
,

90 
	mEEP_ID_SODA_INFO
,

91 
	mEEP_ID_SODA_USAGE_0
,

92 
	mEEP_ID_SODA_USAGE_1
,

93 
	mEEP_ID_SODA_USAGE_2
,

94 
	mEEP_ID_SODA_USAGE_3
,

95 
	mEEP_ID_SODA_USAGE_4
,

96 
	mEEP_ID_SODA_USAGE_5
,

97 
	mEEP_ID_SODA_USAGE_6
,

98 
	mEEP_ID_SODA_USAGE_7
,

99 
	mEEP_ID_SODA_USAGE_8
,

100 
	mEEP_ID_SODA_USAGE_9
,

101 
	mEEP_ID_SODA_USAGE_10
,

102 
	mEEP_ID_SODA_USAGE_11
,

103 
	mEEP_ID_SODA_USAGE_12
,

104 
	mEEP_ID_SODA_USAGE_13
,

105 
	mEEP_ID_SODA_USAGE_14
,

106 
	mEEP_ID_SODA_USAGE_15
,

107 
	mEEP_ID_SODA_USAGE_16
,

108 
	mEEP_ID_SODA_USAGE_17
,

109 
	mEEP_ID_SODA_USAGE_18
,

110 
	mEEP_ID_SODA_USAGE_19
,

111 
	mEEP_ID_SODA_USAGE_20
,

112 
	mEEP_ID_SODA_USAGE_21
,

113 
	mEEP_ID_SODA_USAGE_22
,

114 
	mEEP_ID_SODA_USAGE_23
,

115 
	mEEP_ID_SODA_USAGE_24
,

116 
	mEEP_ID_SODA_USAGE_25
,

117 
	mEEP_ID_SODA_USAGE_26
,

118 
	mEEP_ID_SODA_USAGE_27
,

119 
	mEEP_ID_SODA_USAGE_28
,

120 
	mEEP_ID_SODA_USAGE_29
,

128 
	mEEP_ID_INIT_END
,

130 
	mEEP_ID_CHKSUM_HIGH
,

131 
	mEEP_ID_CHKSUM_LOW
,

133 
	mEEP_ID_NUM


134 } 
	tEïromId_T
;

136 
InôEïrom
();

138 
SaveEïromId
–
EïromId_T
 
mu8Id
 );

140 
Eø£Eïrom
();

142 
Pro˚ssEïrom
();

144 
U8
 
Te°Eïrom
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\rtc.c

1 
	~"πc.h
"

2 
	~"hÆ_ì¥om.h
"

3 
	~"ì¥om.h
"

4 
	~"utû.h
"

5 
	~"powî_ßvög.h
"

7 
	~<°rög.h
>

10 
RólTimeClock_T
 
	gRtc
;

12 
E«bÀRtcCCR
();

13 
DißbÀRtcCCR
();

14 
RódRtcTime
(
TimeD©a_T
 *
pTime
);

15 
WrôeRtcTime
(
TimeD©a_T
 *
pTime
);

16 
InôTimeD©a
–
TimeD©a_T
 *
pTime
 );

18 
	$InôRtc
()

20 
U16
 
mu16Dñay
 = 30;

25 
	`Dñay_MS
( 100 );

26 
mu16Dñay
--;

27 if–
mu16Dñay
 == 0 )

31 }  
	`IsRtcB©BackUpMode
(Ë=
TRUE
 );

35 
	`E«bÀRtcCCR
();

36 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_CTR_PWR
, 0x00 );

37 
	`DißbÀRtcCCR
();

38 
	`HAL_RTC_ByãRód
–
DEV_ADDR_RTC
, 
ADDR_CTR_PWR
, &
Rtc
.
Reg_Powî
 );

41 
	`E«bÀRtcCCR
();

42 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_CTR_DTR
, 0x03 );

43 
	`DißbÀRtcCCR
();

45 
	`E«bÀRtcCCR
();

46 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_CTR_ATR
, (0x20|0x10) );

47 
	`DißbÀRtcCCR
();

49 
	`E«bÀRtcCCR
();

51 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_CTR_INT
, 0x00 );

52 
	`DißbÀRtcCCR
();

54 
	`E«bÀRtcCCR
();

55 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_CTR_BL
, 0x00 );

56 
	`DißbÀRtcCCR
();

59 
Rtc
.
C⁄fig
 = 
FALSE
;

60 
Rtc
.
Wrôe
 = 
FALSE
;

61 
Rtc
.
Reg_Sètus
 = 0U;

63 
	`InôTimeD©a
–&
Rtc
.
RódTime
 );

66 
	`Pro˚ssRtc
();

67 
	}
}

69 
	$SëRtcC⁄figInô
(
U8
 
mu8C⁄fig
)

71 if–
Rtc
.
C⁄fig
 !
mu8C⁄fig
 )

73 
	`SaveEïromId
–
EEP_ID_TIME
 );

76 
Rtc
.
C⁄fig
 = 
mu8C⁄fig
;

77 
	}
}

79 
U8
 
	$GëRtcC⁄figInô
()

81  
Rtc
.
C⁄fig
;

82 
	}
}

84 
	$GëRtcD©a
–
RólTimeClock_T
 *
pD©a
 )

86 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Rtc
, –
RólTimeClock_T
 ));

87 
	}
}

89 
U8
 
	$GëRtcRegSètus
()

91  
Rtc
.
Reg_Sètus
;

92 
	}
}

94 
	$GëRtcTime
(
TimeD©a_T
 *
pTime
)

96 
	`MEMCPY
–(
__FAR
 *)
pTime
, (c⁄° __FAR *)&
Rtc
.
RódTime
, –
TimeD©a_T
 ));

97 
	}
}

99 
	$SëRtcTime
(
TimeD©a_T
 *
pTime
)

101 
	`MEMCPY
–(
__FAR
 *)&
Rtc
.
WrôeTime
, (c⁄° __FAR *)
pTime
, –
TimeD©a_T
 ));

102 
	`MEMCPY
–(
__FAR
 *)&
Rtc
.
RódTime
, (c⁄° __FAR *)
pTime
, –
TimeD©a_T
 ));

105 
	`WrôeRtcTime
–
pTime
 );

106 
	}
}

108 
	$E«bÀRtcCCR
()

110 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_RTC_STATUS
, 0x02 );

111 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_RTC_STATUS
, 0x06 );

112 
	`Dñay_MS
(200);

113 
	}
}

115 
	$DißbÀRtcCCR
()

117 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_RTC_STATUS
, 0x00 );

118 
	}
}

121 
U8
 
	$IsRtcB©BackUpMode
()

123 
U8
 
mu8Rë
 = 0;

124 
U8
 
mu8Reg
 = 0;

126 
mu8Rë
 = 
	`HAL_RTC_ByãRód
–
DEV_ADDR_RTC
, 
ADDR_RTC_STATUS
, &
mu8Reg
 );

127 if–
mu8Rë
 !
TRUE
 )

129  
TRUE
;

132 if–(
mu8Reg
 & 
MASK_BAT
) != 0 )

134  
TRUE
;

137  
FALSE
;

138 
	}
}

140 
U8
 
	$IsRtc_Eº‹Oscf
()

142 
	`HAL_RTC_ByãRód
–
DEV_ADDR_RTC
, 
ADDR_RTC_STATUS
, &
Rtc
.
Reg_Sètus
);

144 if–(
Rtc
.
Reg_Sètus
 & 
MASK_OSCF
 ) != 0 )

146  
TRUE
;

149  
FALSE
;

150 
	}
}

159 
U8
 
	$IsRTC_Eº‹
()

161 if–(
Rtc
.
Reg_Sètus
 & (
MASK_OSCF
|
MASK_RTCF
)) == 0 )

163  
FALSE
;

166  
TRUE
;

167 
	}
}

171 
U8
 
	$IsLófYór
(
U16
 
mu16Yór
)

173 if–(
mu16Yór
 % 4) == 0 )

175  
TRUE
;

178  
FALSE
;

179 
	}
}

183 c⁄° 
I8
 
	gmu8La°D©eLi°
[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

184 c⁄° 
I8
 
	gmu8La°D©eLófYórLi°
[12] = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

185 
I8
 
	$GëLa°D©eByM⁄th
(
U16
 
mYór
, 
U8
 
mM⁄th
)

187 if–
mM⁄th
 > 12 || mMonth == 0 )

192 if–
	`IsLófYór
–
mYór
 ) =
TRUE
 )

194  
mu8La°D©eLófYórLi°
[ 
mM⁄th
 - 1 ];

197  
mu8La°D©eLi°
[ 
mM⁄th
 - 1 ];

199 
	}
}

202 
	$RódRtcTime
(
TimeD©a_T
 *
pTime
)

204 
U8
 
mu8Rë_1
;

205 
U8
 
mu8Rë_2
;

208 
mu8Rë_1
 = 
	`HAL_RTC_SeqRód
–
DEV_ADDR_RTC
, 
ADDR_RTC_SECONDS
, &
Rtc
.
Ródbuf_1
[0], 8 );

209 if–
mu8Rë_1
 =
FALSE
 )

215 
mu8Rë_2
 = 
	`HAL_RTC_SeqRód
–
DEV_ADDR_RTC
, 
ADDR_RTC_SECONDS
, &
Rtc
.
Ródbuf_2
[0], 8 );

216 if–
mu8Rë_2
 =
FALSE
 )

223 if–
Rtc
.
Ródbuf_1
[1] =Rtc.
Ródbuf_2
[1]

224 && 
Rtc
.
Ródbuf_1
[2] =Rtc.
Ródbuf_2
[2]

225 && 
Rtc
.
Ródbuf_1
[3] =Rtc.
Ródbuf_2
[3]

226 && 
Rtc
.
Ródbuf_1
[4] =Rtc.
Ródbuf_2
[4]

227 && 
Rtc
.
Ródbuf_1
[5] =Rtc.
Ródbuf_2
[5]

228 && 
Rtc
.
Ródbuf_1
[6] =Rtc.
Ródbuf_2
[6]

229 && 
Rtc
.
Ródbuf_1
[7] =Rtc.
Ródbuf_2
[7]

233 
pTime
->
Sec
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[0] );

234 
pTime
->
Mö
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[1] );

235 
pTime
->
Hour
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[2] & 0x3F );

236 
pTime
->
D©e
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[3] );

237 
pTime
->
M⁄th
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[4] );

238 
pTime
->
Yór
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[5] );

239 
pTime
->
DayWìk
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[6] );

240 
pTime
->
Y2K
 = 
	`Hex2Dec
–
Rtc
.
Ródbuf_2
[7] );

242 
	}
}

244 
	$WrôeRtcTime
(
TimeD©a_T
 *
pTime
)

246 
Rtc
.
WrôeBuf
[0] = 
	`Dec2Hex
–
pTime
->
Sec
 );

247 
Rtc
.
WrôeBuf
[1] = 
	`Dec2Hex
–
pTime
->
Mö
 );

248 
Rtc
.
WrôeBuf
[2] = 
	`Dec2Hex
–
pTime
->
Hour
 ) | 
MASK_MIL
;

249 
Rtc
.
WrôeBuf
[3] = 
	`Dec2Hex
–
pTime
->
D©e
 );

250 
Rtc
.
WrôeBuf
[4] = 
	`Dec2Hex
–
pTime
->
M⁄th
 );

251 
Rtc
.
WrôeBuf
[5] = 
	`Dec2Hex
–
pTime
->
Yór
 );

252 
Rtc
.
WrôeBuf
[6] = 
	`Dec2Hex
–
pTime
->
DayWìk
 );

253 
Rtc
.
WrôeBuf
[7] = 
	`Dec2Hex
–
pTime
->
Y2K
 );

255 
	`E«bÀRtcCCR
();

256 
	`HAL_RTC_PageWrôe
–
DEV_ADDR_RTC
, 
ADDR_RTC_SECONDS
, &
Rtc
.
WrôeBuf
[0], 8 );

257 
	`DißbÀRtcCCR
();

258 
	}
}

275 
AœømSètus_T
 
	$IsAœømTime
(
U8
 
mu8DecHour
, U8 
mu8DecMö
, U8 
mu8DecSec
)

277 
TimeD©a_T
 
mTime
;

278 
U32
 
mu32SrcTime
;

279 
U32
 
mu32De°Time
;

283 if–
	`IsRtcB©BackUpMode
(Ë=
TRUE
 )

285  
STATUS_ERR_RTC_1
;

289 if–
	`IsRTC_Eº‹
(Ë=
TRUE
 )

291  
STATUS_ERR_RTC_2
;

295 
	`GëRtcTime
–&
mTime
 );

296 
mu32SrcTime
 = (
U32
)
mTime
.
Hour
 * 60UL * 60UL;

297 
mu32SrcTime
 +(
U32
)
mTime
.
Mö
 * 60UL;

298 
mu32SrcTime
 +(
U32
)
mTime
.
Sec
;

300 
mu32De°Time
 = (
U32
)
mu8DecHour
 * 60UL * 60UL;

301 
mu32De°Time
 +(
U32
)
mu8DecMö
 * 60UL;

302 
mu32De°Time
 +(
U32
)
mu8DecSec
;

304 if–
mu32De°Time
 <
mu32SrcTime
 )

306  
STATUS_ALARAM
;

309  
STATUS_NOT_YET
;

310 
	}
}

313 
	$Upd©eRtcTe°Time
()

315 
TimeD©a_T
 
mTime
;

317 
	`GëRtcTime
–&
mTime
 );

318 
mTime
.
Hour
 = 23;

319 
mTime
.
Mö
 = 59;

320 
mTime
.
Sec
 = 55;

322 
	`SëRtcTime
–&
mTime
 );

323 
	}
}

325 
	#DW_MON
 0

	)

326 
	#DW_TUE
 1

	)

327 
	#DW_WED
 2

	)

328 
	#DW_THU
 3

	)

329 
	#DW_FRI
 4

	)

330 
	#DW_SAT
 5

	)

331 
	#DW_SUN
 6

	)

333 
	$InôTimeD©a
–
TimeD©a_T
 *
pTime
 )

335 if–
pTime
 =
NULL
 )

341 
pTime
->
Y2K
 = 1;

342 
pTime
->
DayWìk
 = 
DW_WED
;

343 
pTime
->
Yór
 = 20;

344 
pTime
->
M⁄th
 = 1;

345 
pTime
->
D©e
 = 1;

346 
pTime
->
Hour
 = 0;

347 
pTime
->
Mö
 = 0;

348 
pTime
->
Sec
 = 0;

349 
	}
}

351 
	$InôRtcTime
()

353 
TimeD©a_T
 
mTime
;

355 
	`InôTimeD©a
–&
mTime
 );

357 
	`SëRtcTime
–&
mTime
 );

358 
	}
}

360 
	$Upd©eRtcTime
()

363 if–
Rtc
.
Wrôe
 =
TRUE
 )

365 
Rtc
.
Wrôe
 = 
FALSE
;

366 
	`WrôeRtcTime
–&
Rtc
.
WrôeTime
 );

369 
	}
}

371 
	$Pro˚ssRtc
()

374 if–
Rtc
.
Reg_Powî
 != 0x00 )

376 
	`E«bÀRtcCCR
();

377 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_RTC
, 
ADDR_CTR_PWR
, 0x00 );

378 
	`DißbÀRtcCCR
();

379 
	`HAL_RTC_ByãRód
–
DEV_ADDR_RTC
, 
ADDR_CTR_PWR
, &
Rtc
.
Reg_Powî
 );

384 
	`HAL_RTC_ByãRód
–
DEV_ADDR_RTC
, 
ADDR_RTC_STATUS
, &
Rtc
.
Reg_Sètus
);

387 if–
	`IsRtc_Eº‹Oscf
(Ë=
TRUE
 )

393 if–
	`IsRTC_Eº‹
(Ë=
TRUE
 )

395 
	`InôRtcTime
();

399 
	`SëRtcC⁄figInô
–
FALSE
 );

400 
	`SëSavögC⁄fig
–
FALSE
 );

406 if–
Rtc
.
Wrôe
 =
TRUE
 )

408 
Rtc
.
Wrôe
 = 
FALSE
;

409 
	`WrôeRtcTime
–&
Rtc
.
WrôeTime
 );

414 
	`RódRtcTime
–&
Rtc
.
RódTime
 );

415 
	}
}

417 
U8
 
	$Te°Rtc
()

419 if–
	`IsRtc_Eº‹Oscf
(Ë=
FALSE
 )

421  
TRUE
;

424  
FALSE
;

425 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\rtc.h

1 #i‚de‡
__RTC_H__


2 
	#__RTC_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#MASK_BAT
 0x80

	)

8 
	#MASK_AL1
 0x40

	)

9 
	#MASK_AL0
 0x20

	)

10 
	#MASK_OSCF
 0x10

	)

11 
	#MASK_RWEL
 0x04

	)

12 
	#MASK_WEL
 0x02

	)

13 
	#MASK_RTCF
 0x01

	)

15 
	#MASK_MIL
 0x80

	)

19 
	#ADDR_RTC_STATUS
 0x003F

	)

20 
	#ADDR_RTC_Y2K
 0x0037

	)

21 
	#ADDR_RTC_DAY
 0x0036

	)

22 
	#ADDR_RTC_YEAR
 0x0035

	)

23 
	#ADDR_RTC_MONTH
 0x0034

	)

24 
	#ADDR_RTC_DATE
 0x0033

	)

25 
	#ADDR_RTC_HOURS
 0x0032

	)

26 
	#ADDR_RTC_MINUTES
 0x0031

	)

27 
	#ADDR_RTC_SECONDS
 0x0030

	)

30 
	#ADDR_CTR_PWR
 0x0014

31 
	#ADDR_CTR_DTR
 0x0013

32 
	#ADDR_CTR_ATR
 0x0012

33 
	#ADDR_CTR_INT
 0x0011

34 
	#ADDR_CTR_BL
 0x0010

35 

	)

36 
	s_time_


38 
U8
 
	mY2K
;

39 
U8
 
	mDayWìk
;

40 
U8
 
	mYór
;

41 
U8
 
	mM⁄th
;

42 
U8
 
	mD©e
;

43 
U8
 
	mHour
;

44 
U8
 
	mMö
;

45 
U8
 
	mSec
;

46 } 
	tTimeD©a_T
;

48 
	s_ªÆ_time_˛ock_


50 
U8
 
	mC⁄fig
;

53 
U8
 
	mWrôe
;

56 
U8
 
	mRódbuf_1
[8];

57 
U8
 
	mRódbuf_2
[8];

58 
U8
 
	mWrôeBuf
[8];

61 
TimeD©a_T
 
	mRódTime
;

62 
TimeD©a_T
 
	mWrôeTime
;

65 
U8
 
	mReg_Sètus
;

66 
U8
 
	mReg_Powî
;

67 } 
	tRólTimeClock_T
;

69 
InôRtc
();

72 
SëRtcC⁄figInô
(
U8
 
mu8C⁄fig
);

73 
U8
 
GëRtcC⁄figInô
();

75 
GëRtcD©a
(
RólTimeClock_T
 *
pD©a
 );

77 
InôRtcTime
();

79 
U8
 
GëRtcRegSètus
();

81 
GëRtcTime
(
TimeD©a_T
 *
pTime
);

83 
SëRtcTime
(
TimeD©a_T
 *
pTime
);

85 
SëRtcUpd©e
();

87 
U8
 
IsRtcB©BackUpMode
();

92 
U8
 
IsRTC_Eº‹
();

96 
U8
 
IsRtc_Eº‹Oscf
();

98 
I8
 
GëLa°D©eByM⁄th
(
U16
 
mYór
, 
U8
 
mM⁄th
);

104 
	mSTATUS_ERR_RTC_1
,

105 
	mSTATUS_ERR_RTC_2
,

106 
	mSTATUS_ALARAM
,

107 
	mSTATUS_NOT_YET
,

108 } 
	tAœømSètus_T
;

109 
AœømSètus_T
 
IsAœømTime
(
U8
 
mu8DecHour
, U8 
mu8DecMö
, U8 
mu8DecSec
);

111 
Upd©eRtcTe°Time
();

113 
Upd©eRtcTime
();

115 
Pro˚ssRtc
();

117 
U8
 
Te°Rtc
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol.c

1 
	~"eﬁ.h
"

3 
	~"¥o˚ss_di•œy.h
"

4 
	~"WIFI_C⁄åﬁ.h
"

5 
	~"hŸ_w©î.h
"

8 
	#DEFAULT_LIMIT_TIME_VALUE
 1800U

	)

9 
	#DEFAULT_COMM_ERR_TIMER
 30U

	)

11 
	s_íd_of_löe_


13 
U8
 
	mSètus
;

14 
U8
 
	mTy≥
;

15 
U8
 
	mMode
;

17 
U8
 
	mTe°Mode
;

20 
U32
 
	mI≈utTe°
;

23 
U8
 
	mmu8LﬂdComm
;

26 
U8
 
	mDøöW©î
;

29 
U8
 
	mEºComm
;

31 
U16
 
	mTe°Timî
;

32 
U16
 
	mLimôTimî
;

33 
U16
 
	mCommEºTimî
;

36 
U16
 
	mCheckLi°
[ 
EOL_CHK_ID_NUM
 ];

37 } 
	tEﬁ_T
;

39 
Eﬁ_T
 
	geﬁ
;

42 
	$InôEﬁ
()

44 
eﬁ
.
Sètus
 = 
FALSE
;

45 
eﬁ
.
LimôTimî
 = 
DEFAULT_LIMIT_TIME_VALUE
;

46 
eﬁ
.
Te°Timî
 = 
DEFAULT_TEST_TIME_VALUE
;

47 
eﬁ
.
CommEºTimî
 = 
DEFAULT_COMM_ERR_TIMER
;

49 
eﬁ
.
Mode
 = 
EOL_MODE_READY
;

50 
eﬁ
.
DøöW©î
 = 
FALSE
;

52 
eﬁ
.
Te°Mode
 = 
EOL_TEST_MODE_0
;

55 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_FULL
, 1 );

57 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_DRAIN_PUMP
, 0 );

58 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TANK
, 0 );

59 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TRAY
, 0 );

60 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_FILTER_ONOFF
, 0 );

61 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_DEICING
, 0 );

62 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_ICING
, 0 );

63 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_SYSTEM_COLD
, 0 );

64 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_SYSTEM_ICE
, 0 );

65 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_LEAK
, 0 );

66 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_EEPROM
, 0xA5 );

67 
	}
}

70 
	$SèπEﬁ
(
U8
 
mu8Ty≥
)

72 if–
eﬁ
.
LimôTimî
 == 0 )

77 
eﬁ
.
Sètus
 = 
TRUE
;

78 
eﬁ
.
Ty≥
 = 
mu8Ty≥
;

79 
	}
}

81 
U8
 
	$IsExpúedEﬁLimôTimî
()

83 if–
eﬁ
.
LimôTimî
 != 0 )

85  
FALSE
;

87  
TRUE
;

88 
	}
}

90 
U8
 
	$GëEﬁSètus
()

92  
eﬁ
.
Sètus
;

93 
	}
}

95 
U8
 
	$GëEﬁTy≥
()

97  
eﬁ
.
Ty≥
;

98 
	}
}

101 
U8
 
	$SèπEﬁLﬂd
()

105 if–
	`IsExpúedEﬁLimôTimî
(Ë=
TRUE
 )

107  
FALSE
;

111 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

113  
FALSE
;

117 
	`SèπEﬁ
–
EOL_TYPE_LOAD
 );

118 
	`SèπDi•œyInô
();

119 
	`SëVîsi⁄Di•
( 0 );

120 
	`CÀ¨HŸHóãrOnTime
();

123 
	`WifiKey
(
WIFI_KEY_TEST
);

125  
TRUE
;

126 
	}
}

128 
	$SëEﬁMode
(
U8
 
mu8Mode
)

130 
eﬁ
.
Mode
 = 
mu8Mode
;

131 
	}
}

133 
U8
 
	$GëEﬁMode
()

135  
eﬁ
.
Mode
;

136 
	}
}

138 
	$SëEﬁTe°Mode
(
U8
 
mu8Mode
)

140 
eﬁ
.
Te°Mode
 = 
mu8Mode
;

141 
	}
}

143 
U8
 
	$GëEﬁTe°Mode
()

145  
eﬁ
.
Te°Mode
;

146 
	}
}

148 
	$SëEﬁTe°Timî
(
U16
 
mu16Time
)

150 
eﬁ
.
Te°Timî
 = 
mu16Time
;

151 
	}
}

153 
U16
 
	$GëEﬁTe°Timî
()

155  
eﬁ
.
Te°Timî
;

156 
	}
}

161 
	$SèπEﬁDøöW©î
()

163 
eﬁ
.
DøöW©î
 = 
TRUE
;

164 
	}
}

166 
	$St›EﬁDøöW©î
()

168 
eﬁ
.
DøöW©î
 = 
FALSE
;

169 
	}
}

171 
U8
 
	$GëEﬁDøöW©î
()

173  
eﬁ
.
DøöW©î
;

174 
	}
}

178 
	$SëEﬁTe°I≈utBô
(
U32
 
mu32MaskBô
)

180 
eﬁ
.
I≈utTe°
 |
mu32MaskBô
;

181 
	}
}

183 
	$CÀ¨EﬁTe°I≈utBô
(
U32
 
mu32MaskBô
)

185 
eﬁ
.
I≈utTe°
 &~
mu32MaskBô
;

186 
	}
}

188 
	$SëEﬁTe°I≈utVÆ
(
U32
 
mu32MaskBô
)

190 
eﬁ
.
I≈utTe°
 = 
mu32MaskBô
;

191 
	}
}

193 
U32
 
	$GëEﬁTe°I≈utVÆ
()

195  
eﬁ
.
I≈utTe°
;

196 
	}
}

200 
	$SëEﬁEº‹Comm
(
U8
 
mu8Eº‹
)

202 
eﬁ
.
EºComm
 = 
mu8Eº‹
;

203 
	}
}

205 
U8
 
	$GëEﬁEº‹Comm
()

207  
eﬁ
.
EºComm
;

208 
	}
}

212 
U16
 
	$GëEﬁCheckSètus
(
U8
 
mu8Id
 )

214 if–
mu8Id
 >
EOL_CHK_ID_NUM
 )

219  
eﬁ
.
CheckLi°
[ 
mu8Id
 ];

220 
	}
}

222 
	$SëEﬁCheckSètus
(
U8
 
mu8Id
, 
U16
 
mu16VÆ
)

224 if–
mu8Id
 >
EOL_CHK_ID_NUM
 )

229 
eﬁ
.
CheckLi°
[ 
mu8Id
 ] = 
mu16VÆ
;

230 
	}
}

232 
	$Upd©eEﬁTimî
()

234 if–
eﬁ
.
LimôTimî
 != 0 )

236 
eﬁ
.
LimôTimî
--;

239 if–
eﬁ
.
Te°Timî
 != 0 )

241 
eﬁ
.
Te°Timî
--;

243 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol.h

1 #i‚de‡
__EOL_H__


2 
	#__EOL_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#MODEL_CODE_CPSI_8510L
 0x23

8 
	#MODEL_CODE_CHPI_7400N
 0x29

9 
	#MODEL_CODE
 
MODEL_CODE_CHPI_7400N


	)

11 
	#CONFIG_EOL_TEST_WATER
 1

12 
	#CONFIG_EOL_TEST_NITROGEN
 1

13 

	)

14 
	#DEFAULT_TEST_TIME_VALUE
 54000U

	)

17 
InôEﬁ
();

19 
	#EOL_TYPE_LOAD
 0

	)

20 
	#EOL_TYPE_FRONT
 1

	)

21 
SèπEﬁ
(
U8
 
mu8Ty≥
);

22 
U8
 
IsExpúedEﬁLimôTimî
();

23 
U8
 
GëEﬁSètus
();

24 
U8
 
GëEﬁTy≥
();

28 
U8
 
SèπEﬁLﬂd
();

30 
	#EOL_MODE_READY
 0

	)

31 
	#EOL_MODE_INIT
 1

	)

32 
	#EOL_MODE_CHECK_SENSOR
 2

	)

33 
	#EOL_MODE_CHECK_LOAD
 3

	)

34 
	#EOL_MODE_DONE
 4

	)

35 
	#EOL_MODE_SEALED_INIT
 5

	)

36 
	#EOL_MODE_SEALED
 6

	)

37 
SëEﬁMode
(
U8
 
mu8Mode
);

38 
U8
 
GëEﬁMode
();

42 
	#EOL_TEST_MODE_0
 0

43 
	#EOL_TEST_MODE_1
 1

44 
	#EOL_TEST_MODE_2
 2

45 
	`SëEﬁTe°Mode
(
U8
 
mu8Mode
);

	)

46 
U8
 
GëEﬁTe°Mode
();

48 
SëEﬁTe°Timî
(
U16
 
mu16Time
);

49 
U16
 
GëEﬁTe°Timî
();

52 
SèπEﬁDøöW©î
();

53 
St›EﬁDøöW©î
();

54 
U8
 
GëEﬁDøöW©î
();

56 
SëEﬁExpúedSãpTimî
(
U8
 
mu8VÆ
);

57 
U16
 
GëEﬁExpúedSãpTimî
();

59 
RñﬂdEﬁCommEºTimî
();

60 
U16
 
GëEﬁCommEºTimî
();

63 
	#MK_EOL_LAST_STEP
 0x80000000UL

64 
	#MK_EOL_WIFI
 0x40000000UL

65 

	)

66 
	#MK_EOL_KEY_SETTING
 0x00000001UL

	)

67 
	#MK_EOL_KEY_ICE
 0x00000002UL

	)

68 
	#MK_EOL_KEY_HOT
 0x00000004UL

	)

69 
	#MK_EOL_KEY_ROOM
 0x00000008UL

	)

71 
	#MK_EOL_KEY_COLD
 0x00000010UL

	)

72 
	#MK_EOL_KEY_AMOUNT
 0x00000020UL

	)

73 
	#MK_EOL_KEY_SAVE
 0x00000040UL

	)

74 
	#MK_EOL_KEY_HOT_LOCK
 0x00000080UL

	)

76 
	#MK_EOL_KEY_LOCK_ALL
 0x00000100UL

	)

77 
	#MK_EOL_KEY_COLD_MAKE
 0x00000200UL

	)

78 
	#MK_EOL_KEY_ICE_LOCK
 0x00000400UL

	)

79 
	#MK_EOL_KEY_ICE_MAKE
 0x00000800UL

	)

81 
	#MK_EOL_TANK_COVER
 0x00001000UL

	)

82 
	#MK_EOL_FILTER_COVER
 0x00002000UL

	)

83 
	#MK_EOL_FILTER
 0x00004000UL

	)

84 
	#MK_EOL_FILTER_ONOFF
 0x00008000UL

85 

	)

86 
	#MK_EOL_LEVER_WATER
 0x00010000UL

	)

87 
	#MK_EOL_LEVER_ICE
 0x00020000UL

	)

89 
	#MK_JIG_FRONT_LAST_CHP
 0x00037FFFUL

	)

90 
	#MK_JIG_FRONT_LAST_CP
 0x00037F7FUL

	)

92 
SëEﬁTe°I≈utBô
(
U32
 
mu32MaskBô
);

93 
CÀ¨EﬁTe°I≈utBô
(
U32
 
mu32MaskBô
);

94 
SëEﬁTe°I≈utVÆ
(
U32
 
mu32MaksBô
);

95 
U32
 
GëEﬁTe°I≈utVÆ
();

98 
SëEﬁEº‹Comm
(
U8
 
mu8Eº‹
);

99 
U8
 
GëEﬁEº‹Comm
();

104 
	mEOL_CHK_ID_DRAIN_PUMP
,

105 
	mEOL_CHK_ID_EEPROM
,

106 
	mEOL_CHK_ID_LEAK
,

108 
	mEOL_CHK_ID_UV_ICE_DOOR
,

109 
	mEOL_CHK_ID_UV_WATER_OUT
,

110 
	mEOL_CHK_ID_UV_ICE_TANK
,

111 
	mEOL_CHK_ID_UV_ICE_TRAY
,

112 
	mEOL_CHK_ID_ICE_FULL
,

113 
	mEOL_CHK_ID_SAVING_PHOTO
,

114 
	mEOL_CHK_ID_FLOW_METER
,

115 
	mEOL_CHK_ID_FILTER_ONOFF
,

117 
	mEOL_CHK_ID_HEATER_TRIAC
,

118 
	mEOL_CHK_ID_HEATER_RELAY
,

120 
	mEOL_CHK_ID_ICE_TRAY_DEICING
,

121 
	mEOL_CHK_ID_ICE_TRAY_ICING
,

122 
	mEOL_CHK_ID_SYSTEM_COLD
,

123 
	mEOL_CHK_ID_SYSTEM_ICE
,

124 
	mEOL_CHK_ID_NUM


127 
U16
 
GëEﬁCheckSètus
(
U8
 
mu8Id
 );

128 
SëEﬁCheckSètus
(
U8
 
mu8Id
, 
U16
 
mu16VÆ
);

130 
Upd©eEﬁTimî
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol_lever_handler.c

1 
	~"eﬁ_Àvî_h™dÀr.h
"

2 
	~"Àvî_comm⁄_h™dÀr.h
"

4 
	~"eﬁ.h
"

5 
	~"i˚_do‹.h
"

6 
	~"w©î_out.h
"

7 
	~"sound.h
"

8 
	~"‰⁄t.h
"

11 
U8
 
LevîO≥nT≠W©î
();

12 
U8
 
LevîClo£T≠W©î
();

15 
U8
 
LevîO≥nI˚Do‹
();

16 
U8
 
LevîClo£I˚Do‹
();

18 c⁄° 
LevîEvítLi°_T
 
	gEOL_LevîEvítLi°
[] =

21 { 
LevîO≥nT≠W©î
, 
NULL
, NULL, 
LevîClo£T≠W©î
 },

22 { 
LevîO≥nI˚Do‹
, 
NULL
, NULL, 
LevîClo£I˚Do‹
 }

26 
U8
 
	$LevîO≥nT≠W©î
()

28 
U32
 
mu32Mask
 = 
MK_JIG_FRONT_LAST_CHP
;

30 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

32 
mu32Mask
 = 
MK_JIG_FRONT_LAST_CP
;

35 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_FRONT
 )

37 if–(
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_LEVER_WATER
 ) != 0UL )

39 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_LEVER_WATER
 );

43 
	`SëEﬁTe°I≈utBô
–
MK_EOL_LEVER_WATER
 );

46 if–(
	`GëEﬁTe°I≈utVÆ
(Ë& 
mu32Mask
 ) == mu32Mask )

48 
	`SëEﬁTe°I≈utBô
–
MK_EOL_LAST_STEP
 );

52  
SOUND_SELECT
;

55 if–
	`GëEﬁMode
(Ë!
EOL_MODE_READY


56 && 
	`GëEﬁMode
(Ë!
EOL_MODE_DONE
 )

58  
SOUND_NONE
;

61 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

62 
	`SèπW©îOut
();

63  
SOUND_SELECT
;

64 
	}
}

67 
U8
 
	$LevîClo£T≠W©î
()

69 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_LOAD
 )

71 
	`St›W©îOut
();

74  
SOUND_NONE
;

75 
	}
}

79 
U8
 
	$LevîO≥nI˚Do‹
()

81 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_FRONT
 )

83 if–(
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_LEVER_ICE
 ) != 0 )

85 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_LEVER_ICE
 );

89 
	`SëEﬁTe°I≈utBô
–
MK_EOL_LEVER_ICE
 );

91  
SOUND_SELECT
;

95 if–
	`GëEﬁMode
(Ë!
EOL_MODE_READY


96 && 
	`GëEﬁMode
(Ë!
EOL_MODE_DONE
 )

98  
SOUND_NONE
;

101 
	`O≥nI˚Do‹
();

102  
SOUND_SELECT
;

103 
	}
}

106 
U8
 
	$LevîClo£I˚Do‹
()

108 
	`Clo£I˚Do‹
();

109  
SOUND_NONE
;

110 
	}
}

112 * 
	$GëEﬁLevîEvítLi°
()

115  (*)
EOL_LevîEvítLi°
;

116 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol_lever_handler.h

1 #i‚de‡
__EOL_LEVER_HANDLER_H__


2 
	#__EOL_LEVER_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

6 * 
GëEﬁLevîEvítLi°
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\key_eol_handler.c

1 
	~"key_eﬁ_h™dÀr.h
"

2 
	~"key.h
"

3 
	~"key_comm⁄_h™dÀr.h
"

4 
	~"di•œy.h
"

5 
	~"sound.h
"

6 
	~"w©î_out.h
"

7 
	~"¥o˚ss_eﬁ.h
"

8 
	~"‰⁄t.h
"

9 
	~"¥o˚ss_di•œy.h
"

10 
	~"gas_swôch_vÆve.h
"

12 
SëKeyBô
(
U32
 
mu32MaskBô
 );

17 
U8
 
EOL_I˚
();

18 
U8
 
EOL_Room
();

19 
U8
 
EOL_Cﬁd
();

20 
U8
 
EOL_HŸ
();

21 
U8
 
EOL_Amou¡
();

22 
U8
 
EOL_Sëtög
();

23 
U8
 
EOL_I˚Make
();

24 
U8
 
EOL_I˚Lock
();

25 
U8
 
EOL_LockALl
();

26 
U8
 
EOL_HŸLock
();

27 
U8
 
EOL_Save
();

28 
U8
 
EOL_CﬁdMake
();

29 
U8
 
EOL_Te°Sól
();

31 c⁄° 
KeyEvítLi°_T
 
	gEOL_CHP_KeyEvítLi°
[] =

36 { 
K_ICE
, 
EOL_I˚
, 
NULL
, NULL, NULL, NULL, NULL },

37 { 
K_ROOM
, 
EOL_Room
, 
NULL
, NULL, NULL, NULL, NULL },

38 { 
K_COLD
, 
EOL_Cﬁd
, 
NULL
, NULL, NULL, NULL, NULL },

39 { 
K_HOT
, 
EOL_HŸ
, 
NULL
, NULL, NULL, NULL, NULL },

40 { 
K_AMOUNT
, 
EOL_Amou¡
, 
NULL
, NULL, NULL, NULL, NULL },

43 { 
K_SETTING
, 
EOL_Sëtög
, 
NULL
, NULL, NULL, NULL, NULL },

44 { 
K_ICE_MAKE
, 
EOL_I˚Make
, 
NULL
, NULL, NULL, NULL, NULL },

45 { 
K_ICE_LOCK
, 
EOL_I˚Lock
, 
NULL
, NULL, NULL, NULL, NULL },

46 { 
K_LOCK_ALL
, 
EOL_LockALl
, 
NULL
, NULL, NULL, NULL, NULL },

47 { 
K_HOT_LOCK
, 
EOL_HŸLock
, 
NULL
, NULL, NULL, NULL, NULL },

48 { 
K_SAVE
, 
EOL_Save
, 
NULL
, NULL, NULL, NULL, NULL },

49 { 
K_COLD_MAKE
, 
EOL_CﬁdMake
, 
NULL
, NULL, NULL, NULL, NULL },

53 c⁄° 
KeyEvítLi°_T
 
	gEOL_CP_KeyEvítLi°
[] =

58 { 
K_ROOM
, 
EOL_Room
, 
NULL
, NULL, NULL, NULL, NULL },

59 { 
K_COLD
, 
EOL_Cﬁd
, 
NULL
, NULL, NULL, NULL, NULL },

60 { 
K_AMOUNT
, 
EOL_Amou¡
, 
NULL
, NULL, NULL, NULL, NULL },

62 { 
K_SETTING
, 
EOL_Sëtög
, 
NULL
, NULL, NULL, NULL, NULL },

63 { 
K_ICE_LOCK
, 
EOL_I˚Lock
, 
NULL
, NULL, NULL, NULL, NULL },

64 { 
K_LOCK_ALL
, 
EOL_LockALl
, 
NULL
, NULL, NULL, NULL, NULL },

65 { 
K_SAVE
, 
EOL_Save
, 
NULL
, NULL, NULL, NULL, NULL },

66 { 
K_COLD_MAKE
, 
EOL_CﬁdMake
, 
NULL
, NULL, NULL, NULL, NULL },

68 { 
K_CP_ICE_TURBO
, 
EOL_HŸ
, 
NULL
, NULL, NULL, NULL, NULL },

69 { 
K_CP_ICE_SIZE
, 
EOL_I˚
, 
NULL
, NULL, NULL, NULL, NULL },

70 { 
K_CP_ICE_MAKE
, 
EOL_I˚Make
, 
NULL
, NULL, NULL, NULL, NULL }

76 
U8
 
EOL_SñHŸ
();

77 
U8
 
EOL_SñRoom
();

78 
U8
 
EOL_SñCﬁd
();

79 
U8
 
EOL_Døö
();

81 c⁄° 
KeyEvítLi°_T
 
	gEOL_CHP_KeyLﬂdEvítLi°
[] =

84 { 
K_TEST_EOL
, 
NULL
, NULL, NULL, NULL, NULL, 
EOL_Te°Sól
 },

87 { 
K_HOT
, 
EOL_SñHŸ
, 
NULL
, NULL, NULL, NULL, NULL },

88 { 
K_ROOM
, 
EOL_SñRoom
, 
NULL
, NULL, NULL, NULL, NULL },

89 { 
K_COLD
, 
EOL_SñCﬁd
, 
NULL
, NULL, NULL, NULL, NULL },

90 { 
K_AMOUNT
, 
EOL_Døö
, 
NULL
, NULL, NULL, NULL, NULL }

93 c⁄° 
KeyEvítLi°_T
 
	gEOL_CP_KeyLﬂdEvítLi°
[] =

96 { 
K_TEST_EOL_CP
, 
NULL
, NULL, NULL, NULL, NULL, 
EOL_Te°Sól
 },

99 { 
K_ROOM
, 
EOL_SñRoom
, 
NULL
, NULL, NULL, NULL, NULL },

100 { 
K_COLD
, 
EOL_SñCﬁd
, 
NULL
, NULL, NULL, NULL, NULL },

101 { 
K_AMOUNT
, 
EOL_Døö
, 
NULL
, NULL, NULL, NULL, NULL }

105 
U8
 
EOL_CompOnOff
();

106 
U8
 
EOL_MakeIcög
();

107 
U8
 
EOL_MakeDeIcög
();

108 
U8
 
EOL_MakeCﬁd
();

109 c⁄° 
KeyEvítLi°_T
 
	gEOL_KeySóldLﬂdEvítLi°
[] =

111 { 
K_SETTING
, 
EOL_CompOnOff
, 
NULL
, NULL, NULL, NULL, NULL },

112 { 
K_ICE
, 
EOL_MakeIcög
, 
NULL
, NULL, NULL, NULL, NULL },

113 { 
K_HOT
, 
EOL_MakeDeIcög
, 
NULL
, NULL, NULL, NULL, NULL },

114 { 
K_COLD
, 
EOL_MakeCﬁd
, 
NULL
, NULL, NULL, NULL, NULL },

116 { 
K_CP_ICE_SIZE
, 
EOL_MakeIcög
, 
NULL
, NULL, NULL, NULL, NULL },

117 { 
K_CP_ICE_TURBO
, 
EOL_MakeDeIcög
, 
NULL
, NULL, NULL, NULL, NULL },

120 
U8
 
	$IsVÆidkeyEﬁ
(
U32
 
mu32Key
)

122 if–
	`GëEﬁMode
(Ë!
EOL_MODE_READY


123 && 
	`GëEﬁMode
(Ë!
EOL_MODE_SEALED


124 && 
	`GëEﬁMode
(Ë!
EOL_MODE_DONE
 )

126  
FALSE
;

130 if–
	`GëW©îOut
(Ë=
TRUE
 )

132  
FALSE
;

135  
TRUE
;

136 
	}
}

138 
U8
 
	$IsVÆidKeyFr⁄t
(
U32
 
mu32Key
)

140  
	`IsVÆidkeyEﬁ
–
mu32Key
 );

141 
	}
}

143 
U8
 
	$IsVÆidEﬁKeyC⁄dôi⁄
(
U32
 
mu32Key
)

145 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_FRONT
 )

147  
	`IsVÆidKeyFr⁄t
–
mu32Key
 );

150  
	`IsVÆidkeyEﬁ
–
mu32Key
 );

151 
	}
}

153 * 
	$GëEﬁKeyEvítLi°
()

156 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_FRONT
 )

158 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

160  (*)
EOL_CHP_KeyEvítLi°
;

163  (*)
EOL_CP_KeyEvítLi°
;

167 if–
	`GëEﬁMode
(Ë=
EOL_MODE_SEALED
 )

169  (*)
EOL_KeySóldLﬂdEvítLi°
;

173 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

175  (*)
EOL_CHP_KeyLﬂdEvítLi°
;

178  (*)
EOL_CP_KeyLﬂdEvítLi°
;

179 
	}
}

181 
U8
 
	$GëEﬁKeyEvítLi°Size
()

183 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_FRONT
 )

185 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

187  ( (
EOL_CHP_KeyEvítLi°
Ë/ (
KeyEvítLi°_T
) );

189  ( (
EOL_CP_KeyEvítLi°
Ë/ (
KeyEvítLi°_T
) );

193 if–
	`GëEﬁMode
(Ë=
EOL_MODE_SEALED
 )

195  ( (
EOL_KeySóldLﬂdEvítLi°
Ë/ (
KeyEvítLi°_T
) );

198 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

200  ( (
EOL_CHP_KeyLﬂdEvítLi°
Ë/ (
KeyEvítLi°_T
) );

202  ( (
EOL_CP_KeyLﬂdEvítLi°
Ë/ (
KeyEvítLi°_T
) );

203 
	}
}

206 
	$SëKeyBô
(
U32
 
mu32MaskBô
 )

208 
U32
 
mu32I≈utVÆ
;

211 
mu32I≈utVÆ
 = 
	`GëEﬁTe°I≈utVÆ
();

212 if–(
mu32I≈utVÆ
 & 
mu32MaskBô
 ) != 0 )

214 
	`CÀ¨EﬁTe°I≈utBô
–
mu32MaskBô
 );

218 
	`SëEﬁTe°I≈utBô
–
mu32MaskBô
 );

220 
	}
}

222 
U8
 
	$EOL_Room
()

224 
	`SëKeyBô
–
MK_EOL_KEY_ROOM
 );

226  
SOUND_SELECT
;

227 
	}
}

229 
U8
 
	$EOL_Cﬁd
()

231 
	`SëKeyBô
–
MK_EOL_KEY_COLD
 );

233  
SOUND_SELECT
;

234 
	}
}

236 
U8
 
	$EOL_HŸ
()

238 
	`SëKeyBô
–
MK_EOL_KEY_HOT
 );

240  
SOUND_SELECT
;

241 
	}
}

243 
U8
 
	$EOL_Amou¡
()

245 
	`SëKeyBô
–
MK_EOL_KEY_AMOUNT
 );

247  
SOUND_SELECT
;

248 
	}
}

250 
U8
 
	$EOL_Sëtög
()

252 
	`SëKeyBô
–
MK_EOL_KEY_SETTING
 );

254  
SOUND_SELECT
;

255 
	}
}

257 
U8
 
	$EOL_I˚Make
()

259 
	`SëKeyBô
–
MK_EOL_KEY_ICE_MAKE
 );

260  
SOUND_SELECT
;

261 
	}
}

263 
U8
 
	$EOL_I˚Lock
()

265 
	`SëKeyBô
–
MK_EOL_KEY_ICE_LOCK
 );

266  
SOUND_SELECT
;

267 
	}
}

269 
U8
 
	$EOL_LockALl
()

271 
	`SëKeyBô
–
MK_EOL_KEY_LOCK_ALL
 );

272  
SOUND_SELECT
;

273 
	}
}

275 
U8
 
	$EOL_HŸLock
()

277 
	`SëKeyBô
–
MK_EOL_KEY_HOT_LOCK
 );

278  
SOUND_SELECT
;

279 
	}
}

281 
U8
 
	$EOL_Save
()

283 
	`SëKeyBô
–
MK_EOL_KEY_SAVE
 );

284  
SOUND_SELECT
;

285 
	}
}

287 
U8
 
	$EOL_I˚
()

289 
	`SëKeyBô
–
MK_EOL_KEY_ICE
 );

290  
SOUND_SELECT
;

291 
	}
}

293 
U8
 
	$EOL_CﬁdMake
()

295 
	`SëKeyBô
–
MK_EOL_KEY_COLD_MAKE
 );

296  
SOUND_SELECT
;

297 
	}
}

299 
U8
 
	$EOL_Te°Sól
()

301 
	`SèπDi•œyInô
();

302 
	`SëEﬁMode
–
EOL_MODE_SEALED_INIT
 );

304  
SOUND_SELECT
;

305 
	}
}

309 
U8
 
	$EOL_SñHŸ
()

312 
	`SëW©îOutSñe˘
–
SEL_WATER_HOT
 );

313 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_HOT
 );

314 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_ROOM
 );

315 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_COLD
 );

316  
SOUND_SELECT
;

317 
	}
}

319 
U8
 
	$EOL_SñRoom
()

322 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

323 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_HOT
 );

324 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_ROOM
 );

325 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_COLD
 );

326  
SOUND_SELECT
;

327 
	}
}

329 
U8
 
	$EOL_SñCﬁd
()

332 
	`SëW©îOutSñe˘
–
SEL_WATER_COLD
 );

333 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_HOT
 );

334 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_ROOM
 );

335 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_COLD
 );

336  
SOUND_SELECT
;

337 
	}
}

340 
U8
 
	$EOL_Døö
()

342 if–
	`GëEﬁDøöW©î
(Ë=
FALSE
 )

344 
	`SëEﬁTe°I≈utBô
–
MK_EOL_KEY_AMOUNT
 );

345 
	`SèπEﬁDøöW©î
();

346  
SOUND_SETUP
;

349 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_KEY_AMOUNT
 );

350 
	`St›EﬁDøöW©î
();

351  
SOUND_CANCEL
;

352 
	}
}

357 
U8
 
EOL_PªvComp
;

358 
U8
 
EOL_Comp
;

359 
U8
 
EOL_GasSwôch
;

360 
U16
 
EOL_CompOffDñay
;

361 
U8
 
	$EOL_CompOnOff
()

363 if–
EOL_CompOffDñay
 != 0 )

365  
SOUND_ERROR
;

368 if–
EOL_Comp
 =
OFF
 )

370 
EOL_Comp
 = 
ON
;

374 
EOL_Comp
 = 
OFF
;

376  
SOUND_SELECT
;

377 
	}
}

379 
U8
 
	$EOL_MakeIcög
()

381 
EOL_GasSwôch
 = 
GAS_SWITCH_ICE
;

382  
SOUND_SELECT
;

383 
	}
}

385 
U8
 
	$EOL_MakeDeIcög
()

387 
EOL_GasSwôch
 = 
GAS_SWITCH_HOTGAS
;

388  
SOUND_SELECT
;

389 
	}
}

391 
U8
 
	$EOL_MakeCﬁd
()

393 
EOL_GasSwôch
 = 
GAS_SWITCH_COLD
;

394  
SOUND_SELECT
;

395 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\key_eol_handler.h

1 #i‚de‡
__KEY_EOL_HANDLER_H__


2 
	#__KEY_EOL_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"eﬁ.h
"

8 
U8
 
IsVÆidEﬁKeyC⁄dôi⁄
(
U32
 
mu32Key
);

10 * 
GëEﬁKeyEvítLi°
();

12 
U8
 
GëEﬁKeyEvítLi°Size
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\process_eol.c

1 
	~"hw.h
"

2 
	~"¥o˚ss_eﬁ.h
"

3 
	~"eﬁ.h
"

4 
	~"∑r£r_eﬁ.h
"

6 
	~"key.h
"

7 
	~"ì¥om.h
"

8 
	~"πc.h
"

9 
	~"utû.h
"

10 
	~"comm.h
"

11 
	~"timî.h
"

13 
	~"vÆve.h
"

14 
	~"ªœy.h
"

15 
	~"£rvi˚.h
"

16 
	~"i˚_do‹.h
"

17 
	~"gas_swôch_vÆve.h
"

18 
	~"ãmp.h
"

19 
	~"hÆ_adc.h
"

20 
	~"hÆ_öput.h
"

21 
	~"hÆ_pump.h
"

22 
	~"hÆ_uv.h
"

23 
	~"hÆ_Án_mŸ‹.h
"

24 
	~"hÆ_°ï_mŸ‹.h
"

25 
	~"i˚_fuŒ.h
"

26 
	~"i˚_åay.h
"

27 
	~"Àvñ.h
"

28 
	~"døö_pump.h
"

29 
	~"îr_ãmp_eva_1.h
"

30 
	~"cﬁd_w©î.h
"

31 
	~"Àak.h
"

32 
	~"Êow_vÆve.h
"

33 
	~"Êow_mëî.h
"

34 
	~"voi˚.h
"

35 
	~"WIFI_C⁄åﬁ.h
"

43 
	mEOL_ICE_INIT_ICE
,

44 
	mEOL_ICE_CHECK_ICE
,

45 
	mEOL_ICE_SWITCH
,

46 
	mEOL_ICE_WAIT_SWITCH
,

47 
	mEOL_ICE_INIT_COLD
,

48 
	mEOL_ICE_CHECK_COLD
,

49 
	mEOL_ICE_DONE


53 
	$CheckEïrom
()

55 
U8
 
mu8Inô
 = 
FALSE
;

56 
U8
 
mu8RëryCou¡
 = 5;

57 
U8
 
mu8Rë
 = 
FALSE
;

58 
U8
 
mu8Rë_Rtc
 = 
FALSE
;

61 if–
mu8Inô
 =
TRUE
 )

67 
mu8Rë
 = 
	`Te°Eïrom
();

68 
mu8Rë_Rtc
 = 
	`Te°Rtc
();

69 if–
mu8Rë
 =
TRUE
 && 
mu8Rë_Rtc
 == TRUE )

71 
mu8Inô
 = 
TRUE
;

73 
	`InôRtcTime
();

74 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_EEPROM
, 0xA5 );

78 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_EEPROM
, 0x01 );

81 if–--
mu8RëryCou¡
 == 0 )

83 
mu8Inô
 = 
TRUE
;

85 
	}
}

87 
U8
 
	$MovögI˚Tøy
(
U8
 
mu8Sãp
 )

89  
mu8Sãp
 )

92 
	`MoveI˚TøyIcögEﬁ
();

93 
mu8Sãp
++;

97 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_ICING
 )

99 
mu8Sãp
++;

104 
	`MoveI˚TøyDeIcög
();

105 
mu8Sãp
++;

109 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

111 
mu8Sãp
++;

116 
mu8Sãp
 = 0;

120 
mu8Sãp
 = 0;

124  
mu8Sãp
;

125 
	}
}

127 
	$Te°I˚Tøy
()

129 
U8
 
mu8Sãp
 = 0;

131 
mu8Sãp
 = 
	`MovögI˚Tøy
( mu8Step );

132 if–
mu8Sãp
 == 2 )

134 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_ICING
, 1 );

136 if–
mu8Sãp
 == 4 )

138 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_DEICING
, 1 );

140 
	}
}

144 
	$CheckSís‹DøöPump
()

146 
U16
 
mu16Tmp
;

147 
U16
 
mu16Adc
;

148 
U16
 
mu16Time
 = 50;

150 if–
mu16Time
 != 0 )

152 
mu16Time
--;

153 
	`HAL_Tu∫OnPump
–
HAL_PUMP_DRAIN
, 24.0f );

157 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

160 
mu16Tmp
 = 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_DRAIN_PUMP
 );

161 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_PUMP_DRAIN_FB
 );

162 if–
mu16Tmp
 < 
mu16Adc
 )

164 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_DRAIN_PUMP
, 
mu16Adc
 );

166 
	}
}

169 
	$CheckSís‹SodaPump
()

171 
U16
 
mu16Tmp
;

172 
U16
 
mu16Adc
;

174 
mu16Tmp
 = 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_SODA_PUMP
 );

175 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_PUMP_SODA_CURRENT
 );

176 if–
mu16Tmp
 < 
mu16Adc
 )

178 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_SODA_PUMP
, 
mu16Adc
 );

180 
	}
}

184 
	$CheckSís‹I˚FuŒ
()

186 
U16
 
mu16Tmp
;

187 
U16
 
mu16Adc
;

190 
	`SèπCheckI˚FuŒ
();

191 
mu16Tmp
 = 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_ICE_FULL
 );

192 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_INFRARED
 );

193 if–
mu16Tmp
 < 
mu16Adc
 )

195 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_FULL
, 
mu16Adc
 );

197 
	}
}

199 
U16
 
	gthe_eﬁ_uv_i˚_do‹
 = 0;

200 
U16
 
	gthe_eﬁ_uv_w©î_out
 = 0;

201 
	$CheckSís‹Fr⁄tUvLed
()

203 
U16
 
mu16Tmp
;

204 
U16
 
mu16Adc
;

205 
U16
 
mu16Time
 = 30;

208 if–
mu16Time
 != 0 )

210 
mu16Time
--;

212 
	`HAL_Tu∫OnUv
–
HAL_UV_ICE_DOOR
 );

213 
	`HAL_Tu∫OnUv
–
HAL_UV_WATER_OUT
 );

217 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_DOOR
 );

218 
	`HAL_Tu∫OffUv
–
HAL_UV_WATER_OUT
 );

222 
mu16Tmp
 = 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_DOOR
 );

223 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_DOOR
 );

224 
the_eﬁ_uv_i˚_do‹
 = 
mu16Adc
;

225 if–
mu16Tmp
 < 
mu16Adc
 )

227 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_DOOR
, 
mu16Adc
 );

231 
mu16Tmp
 = 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_WATER_OUT
 );

232 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_UV_WATER_OUT
 );

233 
the_eﬁ_uv_w©î_out
 = 
mu16Adc
;

234 if–
mu16Tmp
 < 
mu16Adc
 )

236 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_UV_WATER_OUT
, 
mu16Adc
 );

238 
	}
}

240 
	$CheckSís‹BodyUvLed
()

242 
U16
 
mu16Tmp
;

243 
U16
 
mu16Adc
;

244 
U16
 
mu16Time
 = 30;

247 if–
mu16Time
 != 0 )

249 
mu16Time
--;

251 
	`HAL_Tu∫OnUv
–
HAL_UV_ICE_TANK
 );

252 
	`HAL_Tu∫OnUv
–
HAL_UV_ICE_TRAY
 );

256 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TANK
 );

257 
	`HAL_Tu∫OffUv
–
HAL_UV_ICE_TRAY
 );

261 
mu16Tmp
 = 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TANK
 );

262 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TANK
 );

263 if–
mu16Tmp
 < 
mu16Adc
 )

265 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TANK
, 
mu16Adc
 );

269 
mu16Tmp
 = 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TRAY
 );

270 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TRAY
 );

271 if–
mu16Tmp
 < 
mu16Adc
 )

273 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_UV_ICE_TRAY
, 
mu16Adc
 );

275 
	}
}

277 
U8
 
	$IsDëe˘Lók
()

279 
U16
 
mu16Adc
;

281 
	`TURN_ON_LEAK_ONOFF
();

282 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_LEAK
 );

283 if–
mu16Adc
 > 50 )

285  
TRUE
;

288  
FALSE
;

289 
	}
}

291 
	$CheckSís‹Lók
()

293 if–
	`IsDëe˘Lók
(Ë=
TRUE
 )

295 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_LEAK
, 1 );

299 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_LEAK
, 0 );

301 
	}
}

303 
	$CheckSís‹FlowMëî
()

305 
U16
 
mu16VÆ
;

307 
mu16VÆ
 = 
	`GëFlowMëîHz
();

308 if–
	`GëEﬁCheckSètus
–
EOL_CHK_ID_FLOW_METER
 ) < 
mu16VÆ
 )

310 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_FLOW_METER
, 
mu16VÆ
 );

312 
	}
}

314 
	$CheckT™kCovî
()

318 
U8
 
mu8Pªv
 = 
LOW
;

319 
U8
 
mu8VÆ
;

322 
mu8VÆ
 = 
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN
 );

323 if–
mu8Pªv
 !
mu8VÆ
)

325 
mu8Pªv
 = 
mu8VÆ
;

326 if–
mu8VÆ
 =
LOW
 )

328 
	`SëEﬁTe°I≈utBô
–
MK_EOL_TANK_COVER
 );

331 
	}
}

333 
	$CheckSís‹
()

335 
	`CheckT™kCovî
();

336 
	`CheckEïrom
();

339 
	`Te°I˚Tøy
();

341 
	`CheckSís‹DøöPump
();

343 
	`CheckSís‹I˚FuŒ
();

344 
	}
}

349 
	$CheckVisuÆTe°
()

351 
U8
 
mu8Sètus
;

355 
mu8Sètus
 = 
	`GëI˚Do‹Sètus
();

356 if–
mu8Sètus
 =
ICE_DOOR_OPEN
 )

358 
	`Clo£I˚Do‹
();

360 if–
mu8Sètus
 =
ICE_DOOR_CLOSE
 )

362 
	`O≥nI˚Do‹
();

366 
	`Tu∫OnRñay
–
RELAY_FEEDER_CW
 );

367 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

369 
	}
}

371 
	$St›VisuÆTe°
()

374 if–
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

376 
	`Clo£I˚Do‹
();

380 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

381 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

382 
	}
}

385 
	$OnOffDøö
()

389 if–
	`GëEﬁDøöW©î
(Ë=
TRUE
 )

391 
	`O≥nVÆve
–
VALVE_DRAIN
 );

392 
	`HAL_Tu∫OnPump
–
HAL_PUMP_DRAIN
, 24.0f );

396 
	`Clo£VÆve
–
VALVE_DRAIN
 );

397 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

400 
	}
}

403 
	#EOL_DRAIN_TIME
 2400U

404 
	`DøöW©î
()

	)

406 
U16
 
	gmu16DøöTimî
 = 
EOL_DRAIN_TIME
;

408 
OnOffDøö
();

411 if–
GëEﬁDøöW©î
(Ë=
TRUE
 )

413 if–
IsDëe˘T™kLevñ
–
LEVEL_ID_COLD
, 
LEVEL_DETECT_LOW
 ) =
TRUE
 )

415 
mu16DøöTimî
 = 
EOL_DRAIN_TIME
;

418 if–
	gmu16DøöTimî
 == 0 )

420 
Re£t
();

424 
	gmu16DøöTimî
--;

430 
	$I¬îPro˚ssFr⁄t
()

433 
	`SëVoi˚Vﬁume
–
MAX_VOICE_VOLUME
 );

436 
	`CheckEïrom
();

439 
	`CheckSís‹Fr⁄tUvLed
();

442 
	`CheckSís‹Lók
();

445 if–
	`GëWifiSètusVÆue
(
WIFI_STATUS_TEST
) != 0 )

448 
	`SëEﬁTe°I≈utBô
–
MK_EOL_WIFI
 );

453 
	`CÀ¨EﬁTe°I≈utBô
–
MK_EOL_WIFI
 );

459 #i‡!
CONFIG_JIG_RBK_FRONT


460 if–(
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_LEVER_WATER
 ) != 0 )

462 
	`St›VisuÆTe°
();

466 
	`CheckVisuÆTe°
();

470 #i‡
CONFIG_JIG_RBK_FRONT


472 if–(
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_FILTER_COVER
) != 0 )

475 
	`Clo£VÆve
–
VALVE_NOS
 );

480 
	`O≥nVÆve
–
VALVE_NOS
 );

485 
	}
}

487 
	$ModeRódy
()

490 
	`CheckVisuÆTe°
();

493 
	`CheckSís‹
();

495 
	`OnOffDøö
();

497 
	`HAL_Tu∫OnF™MŸ‹
();

500 
	`R_C⁄fig_TAU0_2_St›
();

503 
	`O≥nVÆve
–
VALVE_NOS
 );

504 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

505 
	}
}

507 
	$ModeInô
()

509 
	`Tu∫OffRñay
–
RELAY_COMP
 );

510 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

511 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

515 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

516 
	`HAL_Tu∫OffF™MŸ‹
();

518 
	`Clo£VÆve
–
VALVE_ALL
 );

519 
	`O≥nVÆve
–
NORMAL_OPEN_VALVES
 );

521 
	}
}

524 
	#EOL_HEATER_DELAY_TIME
 5

525 
U8
 
RunCheckHóãr
 = 
TRUE
;

528 
	`CheckHóãrFìdback
()

	)

530 
U8
 
	gmu8Sãp
 = 0;

531 
U16
 
	gmu16Dñay
 = 
EOL_HEATER_DELAY_TIME
;

532 
U16
 
	gmu16VÆ
 = 0;

535 if–
	gRunCheckHóãr
 =
FALSE
 )

537 
TURN_OFF_HEATER_RELAY
();

538 
TURN_OFF_HEATER_TRIAC
();

543  
	gmu8Sãp
 )

547 
TURN_ON_HEATER_TRIAC
();

548 
TURN_OFF_HEATER_RELAY
();

550 
	gmu16VÆ
 = 
HAL_GëAdcVÆue
–
ANI_HEATER_FB
 );

551 if–
GëEﬁCheckSètus
–
EOL_CHK_ID_HEATER_TRIAC
 ) < 
	gmu16VÆ
 )

553 
SëEﬁCheckSètus
–
EOL_CHK_ID_HEATER_TRIAC
, 
mu16VÆ
 );

556 if–
	gmu16Dñay
 != 0 )

558 
mu16Dñay
--;

562 
	gmu16Dñay
 = 
EOL_HEATER_DELAY_TIME
;

563 
	gmu8Sãp
++;

570 
TURN_OFF_HEATER_TRIAC
();

571 
TURN_ON_HEATER_RELAY
();

573 
	gmu16VÆ
 = 
HAL_GëAdcVÆue
–
ANI_HEATER_FB
 );

574 if–
GëEﬁCheckSètus
–
EOL_CHK_ID_HEATER_RELAY
 ) < 
	gmu16VÆ
 )

576 
SëEﬁCheckSètus
–
EOL_CHK_ID_HEATER_RELAY
, 
mu16VÆ
 );

579 if–
	gmu16Dñay
 != 0 )

581 
mu16Dñay
--;

585 
	gmu8Sãp
++;

590 
TURN_OFF_HEATER_RELAY
();

591 
TURN_OFF_HEATER_TRIAC
();

593 
	gRunCheckHóãr
 = 
FALSE
;

602 
U8
 
	gRunCheckI˚Tøy
 = 
FALSE
;

603 
	$CheckLﬂdI˚Tøy
()

605 
U8
 
mu8Go
 = 0;

606 
U8
 
mu8Icög
;

607 
U8
 
mu8DeIcög
;

610 
mu8Icög
 = 
	`GET_MICRO_SW_ICE_TRAY_1
();

611 
mu8DeIcög
 = 
	`GET_MICRO_SW_ICE_TRAY_2
();

614 if–
RunCheckI˚Tøy
 =
FALSE
 )

616 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

617 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

621 if–
mu8Icög
 =
LOW
 && 
mu8DeIcög
 == LOW )

624 
mu8Go
 = 0;

626 if–
mu8Icög
 =
HIGH
 && 
mu8DeIcög
 =
LOW
 && 
mu8Go
 != 1 )

630 
mu8Go
 = 1;

632 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_DEICING
, 1 );

634 if–
mu8Icög
 =
LOW
 && 
mu8DeIcög
 =
HIGH
 && 
mu8Go
 != 2)

638 
mu8Go
 = 2;

640 
	`SëEﬁCheckSètus
–
EOL_CHK_ID_ICE_TRAY_ICING
, 1 );

642 if–
mu8Icög
 =
HIGH
 && 
mu8DeIcög
 == HIGH )

645 if–
mu8Go
 == 0 )

647 
mu8Go
 = 2;

651 if–
mu8Go
 == 0 )

654 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

655 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

657 if–
mu8Go
 == 1)

660 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

661 
	`Tu∫OnRñay
–
RELAY_ICE_TRAY_CW
 );

666 
	`Tu∫OnRñay
–
RELAY_ICE_TRAY_CCW
 );

667 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

669 
	}
}

679 
	#EOL_COMP_RPS
 45U

	)

680 
	#EOL_COMP_OFF_DELAY_TIME
 3000U

681 
U8
 
EOL_PªvComp
 = 
OFF
;

	)

682 
U8
 
	gEOL_Comp
 = 
OFF
;

683 
U8
 
	gEOL_GasSwôch
 = 
GAS_SWITCH_COLD
;

684 
U16
 
	gEOL_CompOffDñay
 = 0;

685 
	$TEST_SóÀd
()

688 
	`O≥nVÆve
–
VALVE_NOS
 );

689 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

690 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

691 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

693 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

694 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

695 
	`Clo£VÆve
–
VALVE_ROOM_OUT
 );

696 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

697 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

698 
	`Clo£VÆve
–
VALVE_COLD_FLUSH
 );

699 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

702 if–
	`HAL_GëT¨gëSãp
–
SM_ID_2
 ) == 1800 )

704 
	`HAL_SëT¨gëSãp
–
SM_ID_2
, 1800 );

708 if–
EOL_Comp
 =
ON
 )

710 if–
EOL_CompOffDñay
 == 0 )

712 
	`SëCompBldcT¨gëRps
–
EOL_COMP_RPS
 );

717 
	`SëCompBldcT¨gëRps
( 0U );

720 if–
EOL_PªvComp
 !
EOL_Comp
 )

722 
EOL_PªvComp
 = 
EOL_Comp
;

723 if–
EOL_Comp
 =
OFF
 )

725 
EOL_CompOffDñay
 = 
EOL_COMP_OFF_DELAY_TIME
;

730 if–
EOL_GasSwôch
 =
GAS_SWITCH_COLD
 )

732 
	`GasSwôchCﬁd
();

734 if–
EOL_GasSwôch
 =
GAS_SWITCH_ICE
 )

736 
	`GasSwôchI˚
();

738 if–
EOL_GasSwôch
 =
GAS_SWITCH_HOTGAS
 )

740 
	`GasSwôchHŸGas
();

744 
	`TURN_ON_FAN_MOTOR_1
();

747 
	`SëEﬁTe°Timî
–
DEFAULT_TEST_TIME_VALUE
 );

748 
	}
}

750 
	$I¬îPro˚ssLﬂd
()

752 
U8
 
mu8Mode
;

754 
mu8Mode
 = 
	`GëEﬁMode
();

755  
mu8Mode
 )

758 
EOL_MODE_SEALED_INIT
:

759 
	`St›EﬁDøöW©î
();

760 
	`TEST_St›FlowVÆve
();

761 
	`ModeInô
();

763 
	`GasSwôchInô
();

764 
	`SëEﬁMode
–
EOL_MODE_SEALED
 );

767 
EOL_MODE_SEALED
:

768 
	`TEST_SóÀd
();

772 
EOL_MODE_READY
:

773 
	`SëI≈utC⁄fDëe˘Time
–
IN_FILTER
, 
INPUT_DELAY_100MS
 );

774 
	`SëI≈utC⁄fDëe˘Time
–
IN_TANK_OPEN
, 
INPUT_DELAY_100MS
 );

775 
	`ModeRódy
();

776 
	`SëVoi˚Vﬁume
–
MAX_VOICE_VOLUME
 );

781 if–(
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_TANK_COVER
 ) == MK_EOL_TANK_COVER

782 && ( (
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_FILTER_ONOFF
 ) != 0 )

783 && 
	`IsDëe˘Lók
(Ë=
TRUE
 )

785 
	`SëEﬁTe°Mode
–
EOL_TEST_MODE_2
 );

786 
	`SëEﬁMode
–
EOL_MODE_INIT
 );

791 
	`TEST_SèπFlowVÆve
();

792 
	`TEST_RïótFlowVÆve
();

793 
	`CheckSís‹FlowMëî
();

796 
EOL_MODE_INIT
:

799 
	`TEST_St›FlowVÆve
();

802 
	`St›EﬁDøöW©î
();

805 
	`ModeInô
();

807 
	`Te°I˚Tøy
();

808 
	`CheckSís‹I˚FuŒ
();

809 
	`CheckSís‹BodyUvLed
();

810 
	`CheckSís‹Lók
();

811 
	`CheckSís‹FlowMëî
();

812 
	`CheckHóãrFìdback
();

815 
EOL_MODE_CHECK_SENSOR
:

816 
	`Te°I˚Tøy
();

817 
	`CheckSís‹I˚FuŒ
();

818 
	`CheckSís‹BodyUvLed
();

819 
	`CheckSís‹Lók
();

820 
	`CheckSís‹FlowMëî
();

821 
	`CheckHóãrFìdback
();

824 
EOL_MODE_CHECK_LOAD
:

825 
	`CheckLﬂdI˚Tøy
();

826 
	`TEST_RïótGasVÆve
();

827 
	`TEST_RïótI˚Do‹
();

828 
	`TEST_RïótFlowVÆve
();

831 
EOL_MODE_DONE
:

832 
	`HAL_Tu∫OnF™MŸ‹
();

838 
	}
}

841 
U8
 
	$IsRódyEﬁInôMode
()

846 if–(
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_TANK_COVER
 ) == MK_EOL_TANK_COVER

847 && ( (
	`GëEﬁTe°I≈utVÆ
(Ë& 
MK_EOL_FILTER_ONOFF
 ) != 0 )

848 && 
	`IsDëe˘Lók
(Ë=
TRUE
 )

850  
TRUE
;

853  
FALSE
;

854 
	}
}

856 
	$Upd©eSóldTimî
()

858 if–
EOL_CompOffDñay
 != 0 )

860 
EOL_CompOffDñay
--;

862 
	}
}

864 
	$Pro˚ssEﬁ
()

867 if–
	`GëEﬁTe°Timî
() == 0 )

869 
	`Re£t
();

874 if–
	`GëEﬁTy≥
(Ë=
EOL_TYPE_FRONT
 )

876 
	`I¬îPro˚ssFr⁄t
();

880 
	`Upd©eSóldTimî
();

881 
	`I¬îPro˚ssLﬂd
();

883 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\process_eol.h

1 #i‚de‡
__PROCESS_EOL_H__


2 
	#__PROCESS_EOL_H__


	)

4 
	~"¥j_ty≥.h
"

15 
U8
 
IsRódyEﬁInôMode
();

17 
U8
 
MovögI˚Tøy
(U8 
mu8Sãp
 );

19 
Pro˚ssEﬁ
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc.c

1 
	~"îr_comp_bldc.h
"

2 
	~"comp_bldc.h
"

5 #i‡
CONFIG_COMP_ERROR_ONESHOT


6 
	#ERR_COUNT_NUM
 0

7 #ñ£

	)

8 
	#ERR_COUNT_NUM
 3

10 
	#RELEASE_TIME
 (12UL*60UL*60UL*10UL)

11 

	)

12 
	s_îr_comp_bldc_code_


14 
BldcEº‹Id_T
 
	mEº‹
;

16 
U8
 
	mEºCou¡Li°
[ 
ERR_BLDC_NUM
 ];

17 
U8
 
	mPπCou¡Li°
[ 
ERR_BLDC_NUM
 ];

19 
U32
 
	mRñó£Time
;

20 } 
	tEºCompBldc_T
;

23 
EºCompBldc_T
 
	gEºCompBldc
;

25 
Re£tCompBldcEº‹Cou¡
();

26 
	$InôEºCompBldc
()

28 
EºCompBldc
.
Eº‹
 = 
ERR_BLDC_NONE
;

30 
	`Re£tCompBldcEº‹Cou¡
();

31 
	}
}

33 
U8
 
	$GëEºCompBldcCou¡
(
U8
 
mTy≥
, 
BldcEº‹Id_T
 
mId
)

35 if–
mTy≥
 == 0 )

37  
EºCompBldc
.
EºCou¡Li°
[ 
mId
 ];

40  
EºCompBldc
.
EºCou¡Li°
[ 
mId
 ];

41 
	}
}

44 
U8
 
	$IsEº‹Cou¡
()

46 
U8
 
i
;

48  
i
 = 1; i < 
ERR_BLDC_NUM
 ; i++ )

50 if–
EºCompBldc
.
EºCou¡Li°
[ 
i
 ] < 
ERR_COUNT_NUM
 )

52  
TRUE
;

56  
FALSE
;

57 
	}
}

60 
U8
 
	$IsPπCou¡
()

62 
U8
 
i
;

64  
i
 = 1; i < 
ERR_BLDC_NUM
 ; i++ )

66 if–
EºCompBldc
.
PπCou¡Li°
[ 
i
 ] < 
ERR_COUNT_NUM
 )

68  
TRUE
;

72  
FALSE
;

73 
	}
}

75 
	$Re£tCompBldcEº‹Cou¡
()

77 
U8
 
i
;

79 
EºCompBldc
.
EºCou¡Li°
[ 0 ] = 0;

80 
EºCompBldc
.
PπCou¡Li°
[ 0 ] = 0;

81  
i
 = 1; i < 
ERR_BLDC_NUM
 ; i++ )

83 
EºCompBldc
.
EºCou¡Li°
[ 
i
 ] = 
ERR_COUNT_NUM
;

84 
EºCompBldc
.
PπCou¡Li°
[ 
i
 ] = 
ERR_COUNT_NUM
;

87 
EºCompBldc
.
Rñó£Time
 = 
RELEASE_TIME
;

88 
	}
}

91 
	$Cou¡DownEº‹
–
BldcEº‹Id_T
 
mEº‹
 )

93 if–
EºCompBldc
.
EºCou¡Li°
[ 
mEº‹
 ] != 0 )

95 
EºCompBldc
.
EºCou¡Li°
[ 
mEº‹
 ]--;

97 
	}
}

99 
	$CÀ¨Eº‹
()

101 
	`SëCompBldcEº‹Code
–
ERR_BLDC_NONE
 );

102 
	}
}

106 
U8
 
	$CheckEºCompBldc
(
U8
 
mu8Eº‹
)

108 if–
EºCompBldc
.
Eº‹
 !
ERR_BLDC_NONE
 )

110 if–
EºCompBldc
.
EºCou¡Li°
[ EºCompBldc.
Eº‹
 ] == 0 )

112  
TRUE
;

116 
EºCompBldc
.
Eº‹
 = 
ERR_BLDC_NONE
;

121 if–
EºCompBldc
.
Rñó£Time
 != 0 )

123 
EºCompBldc
.
Rñó£Time
--;

127 
	`Re£tCompBldcEº‹Cou¡
();

131 if–
	`IsEº‹Cou¡
(Ë=
FALSE


132 && 
	`IsPπCou¡
(Ë=
FALSE
 )

134 
EºCompBldc
.
Rñó£Time
 = 
RELEASE_TIME
;

139  
FALSE
;

140 
	}
}

147 
U8
 
	$CheckPrŸe˘CompBldc
(
U8
 
mu8Eº‹
)

149 
BldcEº‹Id_T
 
mEº‹
;

152 
mEº‹
 = 
	`GëCompBldcEº‹Code
();

153 if–
mEº‹
 !
ERR_BLDC_NONE
 )

155 
EºCompBldc
.
Eº‹
 = 
mEº‹
;

158 if–
EºCompBldc
.
PπCou¡Li°
[ 
mEº‹
 ] != 0 )

160 
EºCompBldc
.
PπCou¡Li°
[ 
mEº‹
 ]--;

161 
	`CÀ¨Eº‹
();

165 
EºCompBldc
.
PπCou¡Li°
[ 
mEº‹
 ] = 
ERR_COUNT_NUM
;

167 
	`Cou¡DownEº‹
–
mEº‹
 );

168 
	`SëCompBldcPrŸe˘
–
TRUE
 );

170  
TRUE
;

174  
FALSE
;

175 
	}
}

177 
U8
 
	$Rñó£PrŸe˘CompBldc
(
U8
 
mu8Eº‹
)

179 if–
	`GëCompBldcPrŸe˘
(Ë=
FALSE
 )

181  
FALSE
;

184  
TRUE
;

185 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc.h

1 #i‚de‡
__ERR_COMP_BLDC_H__


2 
	#__ERR_COMP_BLDC_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comp_bldc.h
"

8 
InôEºCompBldc
();

10 
	#ERR_COMP_PRT
 0

	)

11 
	#ERR_COMP_ERR
 1

	)

12 
U8
 
GëEºCompBldcCou¡
(U8 
mTy≥
, 
BldcEº‹Id_T
 
mId
);

15 
U8
 
CheckEºCompBldc
(U8 
mu8Eº‹
);

18 
U8
 
CheckPrŸe˘CompBldc
(U8 
mu8Eº‹
);

19 
U8
 
Rñó£PrŸe˘CompBldc
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc_comm.c

1 
	~"îr_comp_bldc_comm.h
"

2 
	~"comp_bldc.h
"

4 #i‡
CONFIG_COMP_ERROR_ONESHOT


5 
	#ERR_COUNT
 0

	)

7 
	#ERR_COUNT
 3

	)

9 
	#RELEASE_TIME
 (12UL*60UL*60UL*10UL)

10 

	)

12 
	s_îr_comp_bldc_comm_


14 
U8
 
	mEº‹
;

15 
U8
 
	mCou¡
;

16 
U32
 
	mRñó£Time
;

17 } 
	tEºCompBldcComm_T
;

19 
EºCompBldcComm_T
 
	gEºCompComm
;

22 
	$InôEºCompBldcComm
()

24 
EºCompComm
.
Eº‹
 = 
FALSE
;

25 
EºCompComm
.
Cou¡
 = 
ERR_COUNT
;

26 
EºCompComm
.
Rñó£Time
 = 
RELEASE_TIME
;

27 
	}
}

29 
	$Re£tCompBldcCommEº‹Cou¡
()

31 
EºCompComm
.
Cou¡
 = 
ERR_COUNT
;

32 
EºCompComm
.
Rñó£Time
 = 
RELEASE_TIME
;

33 
	}
}

35 
U8
 
	$CheckEºCompBldcComm
(
U8
 
mu8Eº‹
)

37 if–
EºCompComm
.
Eº‹
 =
TRUE
 )

39  
TRUE
;

42  
FALSE
;

43 
	}
}

49 
U8
 
	$CheckPrŸe˘CompBldcComm
(
U8
 
mu8Eº‹
)

51 if–
	`GëCompBldcEº‹Comm
(Ë=
TRUE
 )

53 if–
EºCompComm
.
Cou¡
 != 0 )

55 
EºCompComm
.
Cou¡
--;

56 
	`SëCompBldcEº‹Comm
–
FALSE
 );

57 
	`SëCompBldcPrŸe˘
–
TRUE
 );

59  
TRUE
;

63 
EºCompComm
.
Eº‹
 = 
TRUE
;

68 if–
EºCompComm
.
Rñó£Time
 != 0 )

70 
EºCompComm
.
Rñó£Time
--;

74 
	`Re£tCompBldcCommEº‹Cou¡
();

78  
FALSE
;

79 
	}
}

81 
U8
 
	$Rñó£PrŸe˘CompBldcComm
(
U8
 
mu8Eº‹
)

83 if–
	`GëCompBldcPrŸe˘
(Ë=
FALSE
 )

85  
FALSE
;

88  
TRUE
;

89 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc_comm.h

1 #i‚de‡
__ERR_COMP_BLDC_COMM_H__


2 
	#__ERR_COMP_BLDC_COMM_H__


	)

4 
	~"¥j_ty≥.h
"

7 
InôEºCompBldcComm
();

9 
Re£tCompBldcCommEº‹Cou¡
();

12 
U8
 
CheckEºCompBldcComm
(U8 
mu8Eº‹
);

15 
U8
 
CheckPrŸe˘CompBldcComm
(U8 
mu8Eº‹
);

16 
U8
 
Rñó£PrŸe˘CompBldcComm
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_drain_pump.c

1 
	~"îr_døö_pump.h
"

2 
	~"døö_pump.h
"

5 
U8
 
	$CheckEºDøöPump
(
U8
 
mu8Eº‹
)

7  
	`GëDøöPumpEº‹
();

8 
	}
}

11 
U8
 
	$Rñó£EºDøöPump
(
U8
 
mu8Eº‹
)

13  
	`GëDøöPumpEº‹
();

14 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_drain_pump.h

1 #i‚de‡
__ERR_DRAIN_PUMP_H__


2 
	#__ERR_DRAIN_PUMP_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºDøöPump
(U8 
mu8Eº‹
);

9 
U8
 
Rñó£EºDøöPump
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_ice_tray.c

1 
	~"îr_i˚_åay.h
"

2 
	~"i˚_åay.h
"

6 
U8
 
	$CheckEºI˚TøyMovög
(
U8
 
mu8Eº‹
)

8  
	`GëI˚TøyEº‹Movög
();

9 
	}
}

12 
U8
 
	$CheckEºI˚TøyMi¸oSwôch
(
U8
 
mu8Eº‹
)

14  
	`GëI˚TøyEº‹Mi¸oSwôch
();

15 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_ice_tray.h

1 #i‚de‡
__ERR_ICE_TRAY_H__


2 
	#__ERR_ICE_TRAY_H__


	)

4 
	~"¥j_ty≥.h
"

7 
U8
 
CheckEºI˚TøyMovög
(U8 
mu8Eº‹
);

9 
U8
 
CheckEºI˚TøyMi¸oSwôch
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak.c

1 
	~"îr_Àak.h
"

2 
	~"Àak.h
"

5 
U8
 
	$CheckEºLók
(
U8
 
mu8Eº‹
)

7  
	`GëLókSètus
();

8 
	}
}

10 
U8
 
	$Rñó£EºLók
(
U8
 
mu8Eº‹
)

12  
	`GëLókSètus
();

13 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak.h

1 #i‚de‡
__ERR_LEAK_H__


2 
	#__ERR_LEAK_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºLók
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºLók
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak_flow.c

1 
	~"îr_Àak_Êow.h
"

2 
	~"Êow_mëî.h
"

3 
	~"vÆve.h
"

6 
	#DETECT_TIME
 100U

7 
	#RELEASE_TIME
 600U

8 

	)

9 
	#LEAK_FLOW_HZ
 5

10 

	)

11 
	s_îr_Àak_Êow_


13 
U16
 
	mDëe˘Time
;

14 
U16
 
	mRñó£Time
;

15 } 
	tEºLókFlow_T
;

18 
EºLókFlow_T
 
	gLókFlow
;

20 
	$CÀ¨LókFlow
()

22 
LókFlow
.
Dëe˘Time
 = 
DETECT_TIME
;

23 
LókFlow
.
Rñó£Time
 = 
RELEASE_TIME
;

24 
	}
}

26 
U8
 
	$IsO≥nVÆves
()

28 if–
	`IsO≥nVÆve
–
VALVE_ROOM_OUT
 ) =
TRUE


29 || 
	`IsO≥nVÆve
–
VALVE_COLD_IN
 ) =
TRUE


30 || 
	`IsO≥nVÆve
–
VALVE_COLD_OUT
 ) =
TRUE


31 || 
	`IsO≥nVÆve
–
VALVE_HOT_OUT
 ) =
TRUE


32 || 
	`IsO≥nVÆve
–
VALVE_HOT_IN
 ) =
TRUE


33 || 
	`IsO≥nVÆve
–
VALVE_ICE_TRAY_IN
 ) =
TRUE


34 || 
	`IsO≥nVÆve
–
VALVE_COLD_FLUSH
Ë=
TRUE


37  
TRUE
;

40  
FALSE
;

41 
	}
}

43 
U8
 
	$CheckEºLókFlow
(
U8
 
mu8Eº‹
)

47 if–
	`IsO≥nVÆves
(Ë=
TRUE
 )

49 
	`CÀ¨LókFlow
();

51  
FALSE
;

55 if–
	`GëFlowMëîHz
(Ë> 
LEAK_FLOW_HZ
 )

57 if–
LókFlow
.
Dëe˘Time
 != 0 )

59 
LókFlow
.
Dëe˘Time
--;

63 
	`CÀ¨LókFlow
();

64  
TRUE
;

70 
LókFlow
.
Dëe˘Time
 = 
DETECT_TIME
;

73  
FALSE
;

74 
	}
}

78 
U8
 
	$Rñó£EºLókFlow
(
U8
 
mu8Eº‹
)

82 if–
	`IsO≥nVÆves
(Ë=
TRUE
 )

84 
	`CÀ¨LókFlow
();

86  
TRUE
;

91 if–
	`GëFlowMëîHz
(Ë< 
LEAK_FLOW_HZ
 )

93 if–
LókFlow
.
Rñó£Time
 != 0 )

95 
LókFlow
.
Rñó£Time
--;

99 
	`CÀ¨LókFlow
();

100  
FALSE
;

106 
LókFlow
.
Rñó£Time
 = 
RELEASE_TIME
;

109  
TRUE
;

110 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak_flow.h

1 #i‚de‡
__ERR_LEAK_FLOW_H__


2 
	#__ERR_LEAK_FLOW_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºLókFlow
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_hot_water.c

1 
	~"îr_ouège_hŸ_w©î.h
"

2 
	~"Êow_mëî.h
"

3 
	~"hŸ_w©î.h
"

6 
	#AUTO_RELEASE_TIME
 300U

7 

	)

9 
U16
 
	ggu16AutoHŸW©îRñó£Time
 = 
AUTO_RELEASE_TIME
;

10 
U8
 
	$CheckEºOuègeHŸW©î
(
U8
 
mu8Eº‹
)

12 if–
	`GëOuègeSètus
–
TYPE_HOT_WATER
 ) =
FLOW_OUTAGE
 )

14 
	`SëHŸW©îCoﬁög
–
TRUE
 );

15  
TRUE
;

18 
gu16AutoHŸW©îRñó£Time
 = 
AUTO_RELEASE_TIME
;

19  
FALSE
;

20 
	}
}

23 
U8
 
	$Rñó£EºOuègeHŸW©î
(
U8
 
mu8Eº‹
)

26 if–
gu16AutoHŸW©îRñó£Time
 == 0 )

28 
	`SëOuègeSètus
–
TYPE_HOT_WATER
, 
FLOW_SUPPLY
 );

32 
gu16AutoHŸW©îRñó£Time
--;

35  
	`CheckEºOuègeHŸW©î
–
mu8Eº‹
 );

36 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_hot_water.h

1 #i‚de‡
__ERR_OUTAGE_HOT_WATER_H__


2 
	#__ERR_OUTAGE_HOT_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºOuègeHŸW©î
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºOuègeHŸW©î
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_ice_tray.c

1 
	~"îr_ouège_i˚_åay.h
"

2 
	~"Êow_mëî.h
"

4 
	#AUTO_RELEASE_TIME
 600U

5 

	)

7 
U16
 
	ggu16I˚TøyRñó£Time
 = 
AUTO_RELEASE_TIME
;

8 
U8
 
	$CheckEºOuègeI˚Tøy
(
U8
 
mu8Eº‹
)

10 if–
	`GëOuègeSètus
–
TYPE_ICE_TRAY
 ) =
FLOW_OUTAGE
 )

12  
TRUE
;

15 
gu16I˚TøyRñó£Time
 = 
AUTO_RELEASE_TIME
;

16  
FALSE
;

17 
	}
}

20 
U8
 
	$Rñó£EºOuègeI˚Tøy
(
U8
 
mu8Eº‹
)

23 if–
gu16I˚TøyRñó£Time
 == 0 )

25 
	`SëOuègeSètus
–
TYPE_ICE_TRAY
, 
FLOW_SUPPLY
 );

29 
gu16I˚TøyRñó£Time
--;

32  
	`CheckEºOuègeI˚Tøy
–
mu8Eº‹
 );

33 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_ice_tray.h

1 #i‚de‡
__ERR_OUTAGE_ICE_TRAY_H__


2 
	#__ERR_OUTAGE_ICE_TRAY_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºOuègeI˚Tøy
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºOuègeI˚Tøy
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_water.c

1 
	~"îr_ouège_w©î.h
"

2 
	~"Êow_mëî.h
"

4 
	#AUTO_RELEASE_TIME
 600U

5 

	)

7 
U16
 
	ggu16AutoRñó£Time
 = 
AUTO_RELEASE_TIME
;

8 
U8
 
	$CheckEºOuègeW©î
(
U8
 
mu8Eº‹
)

10 if–
	`GëOuègeSètus
–
TYPE_WATER
 ) =
FLOW_OUTAGE
 )

12  
TRUE
;

15 
gu16AutoRñó£Time
 = 
AUTO_RELEASE_TIME
;

16  
FALSE
;

17 
	}
}

20 
U8
 
	$Rñó£EºOuègeW©î
(
U8
 
mu8Eº‹
)

23 if–
gu16AutoRñó£Time
 == 0 )

25 
	`SëOuègeSètus
–
TYPE_WATER
, 
FLOW_SUPPLY
 );

29 
gu16AutoRñó£Time
--;

32  
	`CheckEºOuègeW©î
–
mu8Eº‹
 );

33 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_water.h

1 #i‚de‡
__ERR_OUTAGE_WATER_H__


2 
	#__ERR_OUTAGE_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºOuègeW©î
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºOuègeW©î
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp.c

1 
	~"îr_ãmp.h
"

13 
	#ADC_12BIT_TOP
 3932

	)

14 
	#ADC_12BIT_BOTTOM
 163

	)

16 
U8
 
	$GëTempEº‹Ty≥
(
U16
 
mu16Adc
)

18 if–
mu16Adc
 > 
ADC_12BIT_TOP
 )

20  
STATUS_SHORT
;

22 if–
mu16Adc
 < 
ADC_12BIT_BOTTOM
 )

24  
STATUS_OPEN
;

27  
STATUS_NORMAL
;

28 
	}
}

31 
U8
 
	$CheckEº‹Temp
(
U8
 
mu8Eº‹
, 
U16
 
mu16Adc
, U8 *
pBuf
)

33 
U8
 
mu8Index
;

36 
mu8Index
 = 
	`GëTempEº‹Ty≥
–
mu16Adc
 );

37 if–
mu8Index
 !
pBuf
[0] )

39 
pBuf
[0] = 
mu8Index
;

41 
pBuf
[1] = 
COUNT_NUM
;

42 
pBuf
[2] = 
COUNT_NUM
;

43 
pBuf
[3] = 
COUNT_NUM
;

44  
mu8Eº‹
;

47 if–
pBuf
[ 
mu8Index
 ] != 0 )

49 
pBuf
[ 
mu8Index
 ]--;

52 if–
pBuf
[ 
mu8Index
 ] == 0 )

54 if–
mu8Index
 =
STATUS_NORMAL
 )

56 
mu8Eº‹
 = 
FALSE
;

60 
mu8Eº‹
 = 
TRUE
;

64  
mu8Eº‹
;

65 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp.h

1 #i‚de‡
__ERR_TEMP_H__


2 
	#__ERR_TEMP_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#STATUS_NORMAL
 1

	)

8 
	#STATUS_OPEN
 2

	)

9 
	#STATUS_SHORT
 3

	)

10 
U8
 
GëTempEº‹Ty≥
(
U16
 
mu16Adc
);

12 
	#COUNT_NUM
 30

	)

13 
U8
 
CheckEº‹Temp
(U8 
mu8Eº‹
, 
U16
 
mu16Adc
, U8 *
pTimîBuf
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_ambient.c

1 
	~"îr_ãmp_ambõ¡.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

5 
U8
 
	gmu8Cou¡Li°
[4] =

8 
COUNT_NUM
,

9 
COUNT_NUM
,

10 
COUNT_NUM


13 
U8
 
	$CheckEºTempAmbõ¡
(
U8
 
mu8Eº‹
)

15 
U16
 
mu16Adc
;

17 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_AMBIENT
 );

18  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

19 
	}
}

22 
U8
 
	$Rñó£EºTempAmbõ¡
(
U8
 
mu8Eº‹
)

24  
	`CheckEºTempAmbõ¡
(
mu8Eº‹
);

25 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_ambient.h

1 #i‚de‡
__ERR_TEMP_AMBIENET_H__


2 
	#__ERR_TEMP_AMBIENET_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempAmbõ¡
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempAmbõ¡
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_cold_water.c

1 
	~"îr_ãmp_cﬁd_w©î.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

4 
	~"cﬁd_w©î.h
"

5 
	~"ãmp.h
"

7 
U8
 
	gmu8Cou¡Li°
[4] =

10 
COUNT_NUM
,

11 
COUNT_NUM
,

12 
COUNT_NUM


15 
U8
 
	$CheckEºTempCﬁdW©î
(
U8
 
mu8Eº‹
)

17 
U16
 
mu16Adc
;

19 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

21  
FALSE
;

23 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_COLD_WATER
 );

24  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

25 
	}
}

27 
U8
 
	$Rñó£EºTempCﬁdW©î
(
U8
 
mu8Eº‹
 )

29 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

31  
FALSE
;

35 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 10 );

37  
	`CheckEºTempCﬁdW©î
–
mu8Eº‹
 );

38 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_cold_water.h

1 #i‚de‡
__ERR_TEMP_COLD_WATER_H__


2 
	#__ERR_TEMP_COLD_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempCﬁdW©î
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempCﬁdW©î
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_eva_1.c

1 
	~"îr_ãmp_eva_1.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

5 
U8
 
	gmu8Cou¡Li°
[4] =

8 
COUNT_NUM
,

9 
COUNT_NUM
,

10 
COUNT_NUM


14 
U8
 
	$CheckEºTempEva_1
(
U8
 
mu8Eº‹
)

16 
U16
 
mu16Adc
;

18 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_EVA_1
 );

19  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

20 
	}
}

23 
U8
 
	$Rñó£EºTempEva_1
(
U8
 
mu8Eº‹
)

25  
	`CheckEºTempEva_1
(
mu8Eº‹
);

26 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_eva_1.h

1 #i‚de‡
__ERR_TEMP_EVA_1_H__


2 
	#__ERR_TEMP_EVA_1_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempEva_1
(U8 
mu8Eº‹
);

7 
U8
 
Rñó£EºTempEva_1
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_heater.c

1 
	~"îr_ãmp_hóãr.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

4 
	~"ãmp.h
"

6 
U8
 
	gmu8Cou¡Li°
[4] =

9 
COUNT_NUM
,

10 
COUNT_NUM
,

11 
COUNT_NUM


15 
U8
 
	$CheckEºTempHóãr
(
U8
 
mu8Eº‹
)

17 
U16
 
mu16Adc
;

19 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HEATER
 );

20  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

21 
	}
}

24 
U8
 
	$Rñó£EºTempHóãr
(
U8
 
mu8Eº‹
)

26  
	`CheckEºTempHóãr
(
mu8Eº‹
);

27 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_heater.h

1 #i‚de‡
__ERR_TEMP_HEATER_H__


2 
	#__ERR_TEMP_HEATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempHóãr
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempHóãr
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_overheat.c

1 
	~"îr_ãmp_hŸ_ovîhót.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hŸ_w©î.h
"

4 
	~"hŸ_w©î_out.h
"

5 
	~"ãmp.h
"

10 
	#TEMP_OVERHEAT_HEATER
 106.0f

	)

11 
	#TEMP_OVERHEAT_OUT
 106.0f

12 

	)

13 
	#DETECT_TIME
 5U

14 
	#AUTO_RELEASE_TIME
 100U

15 

	)

19 
	s_ãmp_hóãr_ovî_hót_


21 
TEMP_T
 
	mtHóãr
;

22 
TEMP_T
 
	mtHŸOut
;

24 
U16
 
	mDëe˘Time
;

25 
U16
 
	mRñó£Time
;

26 } 
	tOvîHót_T
;

28 
OvîHót_T
 
	gOvîHót
;

30 
	$CÀ¨OvîHót
()

32 
OvîHót
.
Dëe˘Time
 = 
DETECT_TIME
;

33 
OvîHót
.
Rñó£Time
 = 
AUTO_RELEASE_TIME
;

34 
	}
}

36 
U8
 
	gdbg_the_hŸ_îr
 = 0;

37 
U8
 
	$CheckEºHóãrOvîhót
(
U8
 
mu8Eº‹
)

39 if–
	`IsHŸOut
(Ë=
FALSE
 )

41 
	`CÀ¨OvîHót
();

42  
FALSE
;

46 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

48 
	`CÀ¨OvîHót
();

49  
FALSE
;

52 
OvîHót
.
tHóãr
 = 
	`GëTemp
–
TEMP_ID_HEATER
 );

53 
OvîHót
.
tHŸOut
 = 
	`GëTemp
–
TEMP_ID_HOT_OUT
 );

55 if–
dbg_the_hŸ_îr
 )

57 
OvîHót
.
tHŸOut
 = 110.0f;

60 if–
OvîHót
.
tHóãr
 >
TEMP_OVERHEAT_HEATER


61 || 
OvîHót
.
tHŸOut
 >
TEMP_OVERHEAT_OUT
 )

63 if–
OvîHót
.
Dëe˘Time
 != 0 )

65 
OvîHót
.
Dëe˘Time
--;

69 
	`SëHŸW©îCoﬁög
–
TRUE
 );

70  
TRUE
;

75 
OvîHót
.
Dëe˘Time
 = 
DETECT_TIME
;

79 
OvîHót
.
Rñó£Time
 = 
AUTO_RELEASE_TIME
;

80  
FALSE
;

81 
	}
}

84 
U8
 
	$Rñó£EºHóãrOvîhót
(
U8
 
mu8Eº‹
)

87 if–
OvîHót
.
Rñó£Time
 != 0 )

89 
OvîHót
.
Rñó£Time
--;

93 
	`CÀ¨OvîHót
();

94  
FALSE
;

97  
TRUE
;

98 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_overheat.h

1 #i‚de‡
__ERR_TEMP_HOT__OVERHEAT_H__


2 
	#__ERR_TEMP_HOT__OVERHEAT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºHóãrOvîhót
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºHóãrOvîhót
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water.c

1 
	~"îr_ãmp_hŸ_w©î.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

4 
	~"ãmp.h
"

6 
U8
 
	gmu8Cou¡Li°
[4] =

9 
COUNT_NUM
,

10 
COUNT_NUM
,

11 
COUNT_NUM


15 
U8
 
	$CheckEºTempHŸW©î
(
U8
 
mu8Eº‹
)

17 
U16
 
mu16Adc
;

19 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HOT_OUT
 );

20  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

21 
	}
}

24 
U8
 
	$Rñó£EºTempHŸW©î
(
U8
 
mu8Eº‹
)

26  
	`CheckEºTempHŸW©î
(
mu8Eº‹
);

27 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water.h

1 #i‚de‡
__ERR_TEMP_HOT_WATER_H__


2 
	#__ERR_TEMP_HOT_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempHŸW©î
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempHŸW©î
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water_in.c

1 
	~"îr_ãmp_hŸ_w©î_ö.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

4 
	~"ãmp.h
"

6 
U8
 
	gmu8Cou¡Li°
[4] =

9 
COUNT_NUM
,

10 
COUNT_NUM
,

11 
COUNT_NUM


15 
U8
 
	$CheckEºTempHŸW©îIn
(
U8
 
mu8Eº‹
)

17 
U16
 
mu16Adc
;

19 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HOT_IN
 );

20  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

21 
	}
}

24 
U8
 
	$Rñó£EºTempHŸW©îIn
(
U8
 
mu8Eº‹
)

26  
	`CheckEºTempHŸW©îIn
(
mu8Eº‹
);

27 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water_in.h

1 #i‚de‡
__ERR_TEMP_HOT_WATER_IN_H__


2 
	#__ERR_TEMP_HOT_WATER_IN_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempHŸW©îIn
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempHŸW©îIn
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_room_water.c

1 
	~"îr_ãmp_room_w©î.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

4 
	~"ãmp.h
"

6 
U8
 
	gmu8Cou¡Li°
[4] =

9 
COUNT_NUM
,

10 
COUNT_NUM
,

11 
COUNT_NUM


15 
U8
 
	$CheckEºTempRoomW©î
(
U8
 
mu8Eº‹
)

17 
U16
 
mu16Adc
;

19 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_ROOM_WATER
 );

20  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

21 
	}
}

24 
U8
 
	$Rñó£EºTempRoomW©î
(
U8
 
mu8Eº‹
)

27 
	`Tu∫OnTempSís‹
–
TEMP_ID_ROOM_WATER
, 10 );

29  
	`CheckEºTempRoomW©î
(
mu8Eº‹
);

30 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_room_water.h

1 #i‚de‡
__ERR_TEMP_ROOM_WATER_H__


2 
	#__ERR_TEMP_ROOM_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempRoomW©î
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempRoomW©î
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\error.c

1 
	~"îr‹.h
"

2 
	~"ì¥om.h
"

3 
	~"πc.h
"

4 
	~"sound.h
"

5 
	~"Êow_mëî.h
"

6 
	~"i˚.h
"

7 
	~"eﬁ.h
"

8 
	~"¥o˚ss_di•œy.h
"

11 
Eº‹_T
 
	gEº
;

13 
	$InôEº‹
()

15 
	`MEMSET
–(
__FAR
 *)&
Eº
, 0, –
Eº‹_T
 ));

16 
	}
}

18 
	$GëEº‹D©a
(
Eº‹_T
 *
pD©a
)

20 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Eº
, –
Eº‹_T
));

21 
	}
}

23 
	$SëEº‹Sètus
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
)

25 
Eº
.
Sètus
[ 
mId
 ] = 
mu8Sètus
;

26 
	}
}

28 
	$SëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
, 
Eº‹D©e_T
 *
pD©e
)

30 if–
mId
 < 
ERR_NUM
 )

32 
Eº
.
Sètus
[ 
mId
 ] = 
mu8Sètus
;

33 
	`MEMCPY
–(
__FAR
 *)&
Eº
.
SètusD©e
[ 
mId
 ], (c⁄° __FAR *)
pD©e
, –
Eº‹D©e_T
 ));

35 
	}
}

37 
U8
 
	$GëEº‹Sètus
(
Eº‹Id_T
 
mId
)

39  
Eº
.
Sètus
[ 
mId
 ];

40 
	}
}

42 
	$GëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
Eº‹D©e_T
 *
pD©e
)

44 if–
mId
 < 
ERR_NUM
 )

46 
	`MEMCPY
–(
__FAR
 *)
pD©e
, (c⁄° __FAR *)&
Eº
.
SètusD©e
[ 
mId
 ], –
Eº‹D©e_T
 ));

48 
	}
}

50 
U8
 
	$IsEº‹
(
Eº‹Id_T
 
mId
 )

52  
Eº
.
Sètus
[ 
mId
 ];

53 
	}
}

55 
Eº‹Id_T
 
	$GëEº‹Id
()

57  
Eº
.
Eº‹Id
;

58 
	}
}

60 
	$SëEº‹Id
(
Eº‹Id_T
 
mEºId
)

62 
Eº
.
Eº‹Id
 = 
mEºId
;

63 
	}
}

66 
	$GëEº‹D©e
(
Eº‹D©e_T
 *
pD©e
)

68 
TimeD©a_T
 
mTime
;

70 if–
pD©e
 !
NULL
 )

72 
	`GëRtcTime
–&
mTime
 );

74 
pD©e
->
u16Yór
 = 
mTime
.
Yór
 + 2000;

75 
pD©e
->
u8M⁄th
 = 
mTime
.
M⁄th
;

76 
pD©e
->
u8D©e
 = 
mTime
.
D©e
;

78 
	}
}

80 
U8
 
	$IsEm±yMemítoEº‹
()

82 
U8
 
mu8Num
;

83 
Memíto_T
 
mMemíto
;

85 
mu8Num
 = 
MEMENTO_LIST_NUM
 - 1;

86 
	`GëMemítoEº‹
–
mu8Num
, &
mMemíto
 );

87 if–
mMemíto
.
Eº‹
 =
ERR_NONE
 )

89  
TRUE
;

92  
FALSE
;

93 
	}
}

95 
U8
 
	$GëMemítoEº‹
(
U8
 
mu8Index
, 
Memíto_T
 *
pMemíto
)

97 if–
mu8Index
 < 
MEMENTO_LIST_NUM
 )

99 
	`MEMCPY
–(
__FAR
 *)
pMemíto
, (c⁄° __FAR *)&
Eº
.
MemítoLi°
[ 
mu8Index
 ], –
Memíto_T
 ));

100  
TRUE
;

103  
FALSE
;

104 
	}
}

106 
	$SëMemítoEº‹
(
U8
 
mu8Index
, 
Eº‹Id_T
 
mEº‹
, 
Eº‹D©e_T
 *
pD©e
 )

108 if–
mu8Index
 >
MEMENTO_LIST_NUM
 )

113 if–
mEº‹
 >
ERR_NUM
 )

118 
Eº
.
MemítoLi°
[ 
mu8Index
 ].
Eº‹
 = 
mEº‹
;

119 
	`MEMCPY
–(
__FAR
 *)&
Eº
.
MemítoLi°
[ 
mu8Index
 ].
D©e
, (c⁄° __FAR *)
pD©e
, –
Eº‹D©e_T
 ));

120 
	}
}

122 
	$CÀ¨MemítoEº‹
()

124 
U8
 
i
;

125 
Eº‹D©e_T
 
mD©e
;

127 
	`MEMSET
–(
__FAR
 *)&
mD©e
, 0, –
Eº‹D©e_T
 ));

128  
i
 = 0; i < 
MEMENTO_LIST_NUM
 ; i++ )

130 
	`SëMemítoEº‹
–
i
, 
ERR_NONE
, &
mD©e
 );

131 
	`SaveEïromId
–
EEP_ID_MEMENTO_1
 );

132 
	`SaveEïromId
–
EEP_ID_MEMENTO_2
 );

133 
	`SaveEïromId
–
EEP_ID_MEMENTO_3
 );

134 
	`SaveEïromId
–
EEP_ID_MEMENTO_4
 );

135 
	`SaveEïromId
–
EEP_ID_MEMENTO_5
 );

137 
	}
}

139 
	$Upd©eMemítoEº‹
–
Memíto_T
 *
pMemíto
 )

141 if–
pMemíto
->
Eº‹
 !
ERR_NONE
 )

145 if–
Eº
.
MemítoLi°
[ 
MEMENTO_LIST_NUM
 - 1 ].
Eº‹
 !
pMemíto
->Error )

149 
	`MEMCPY
–(
__FAR
 *)&
Eº
.
MemítoLi°
[ 0 ], (c⁄° __FAR *)&Eº.MemítoLi°[1], –
Memíto_T
 ) * (
MEMENTO_LIST_NUM
 - 1) );

150 
	`MEMCPY
–(
__FAR
 *)&
Eº
.
MemítoLi°
[ 
MEMENTO_LIST_NUM
 - 1 ], (c⁄° __FAR *)
pMemíto
, –
Memíto_T
 ) );

152 
	`SaveEïromId
–
EEP_ID_MEMENTO_1
 );

153 
	`SaveEïromId
–
EEP_ID_MEMENTO_2
 );

154 
	`SaveEïromId
–
EEP_ID_MEMENTO_3
 );

155 
	`SaveEïromId
–
EEP_ID_MEMENTO_4
 );

156 
	`SaveEïromId
–
EEP_ID_MEMENTO_5
 );

159 
	}
}

161 
U8
 
IsEºRoomOut
();

162 
U8
 
IsEºCﬁdOut
();

163 
U8
 
IsEºHŸOut
();

165 
U8
 
IsEºCﬁdMake
();

166 
U8
 
IsEºHŸMake
();

167 
U8
 
IsEºI˚Make
();

168 
U8
 
IsEºDøö
();

169 
U8
 
IsEºEm±yCﬁdT™k
();

170 
U8
 
IsEºSãr
();

172 
U8
 
	$IsEº‹Ty≥
–
EºTy≥_T
 
mTy≥
 )

174 
U8
 
IsEº‹
 = 
FALSE
;

176  
mTy≥
 )

178 
ERR_TYPE_ROOM_WATER_OUT
:

179 if–
	`GëEﬁSètus
(Ë=
FALSE
 )

181 
IsEº‹
 = 
	`IsEºRoomOut
();

185 
ERR_TYPE_COLD_WATER_OUT
:

186 if–
	`GëEﬁSètus
(Ë=
FALSE
 )

188 
IsEº‹
 = 
	`IsEºCﬁdOut
();

192 
ERR_TYPE_HOT_WATER_OUT
:

193 if–
	`GëEﬁSètus
(Ë=
FALSE
 )

195 
IsEº‹
 = 
	`IsEºHŸOut
();

199 
ERR_TYPE_COLD_MAKE
:

200 
IsEº‹
 = 
	`IsEºCﬁdMake
();

203 
ERR_TYPE_HOT_MAKE
:

204 
IsEº‹
 = 
	`IsEºHŸMake
();

207 
ERR_TYPE_ICE_MAKE
:

208 
IsEº‹
 = 
	`IsEºI˚Make
();

211 
ERR_TYPE_DRAIN
:

212 
IsEº‹
 = 
	`IsEºDøö
();

215 
ERR_TYPE_EMPTY_COLD
:

216 
IsEº‹
 = 
	`IsEºEm±yCﬁdT™k
();

219 
ERR_TYPE_STER
:

220 
IsEº‹
 = 
	`IsEºSãr
();

227  
IsEº‹
;

228 
	}
}

230 
U8
 
	$IsEºLók
()

232 if–
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


233 || 
	`IsEº‹
–
ERR_LEAK_FLOW
 ) =
TRUE


236  
TRUE
;

239  
FALSE
;

240 
	}
}

243 
U8
 
	$IsEºRoomOut
()

245 if–
	`IsEºLók
(Ë=
TRUE
 )

247  
TRUE
;

250 if–
	`IsEº‹
–
ERR_OUTAGE_WATER
 ) =
TRUE
)

252  
TRUE
;

255  
FALSE
;

256 
	}
}

258 
U8
 
	$IsEºCﬁdOut
()

260 if–
	`IsEºLók
(Ë=
TRUE
 )

262  
TRUE
;

265 if–
	`IsEº‹
–
ERR_OUTAGE_WATER
 ) =
TRUE


272  
TRUE
;

274  
FALSE
;

275 
	}
}

277 
U8
 
	$IsEºHŸOut
()

279 if–
	`IsEºLók
(Ë=
TRUE
 )

281  
TRUE
;

284 if–
	`IsEº‹
–
ERR_TEMP_HOT_WATER
 ) =
TRUE


285 || 
	`IsEº‹
–
ERR_TEMP_HOT_WATER_IN
 ) =
TRUE


286 || 
	`IsEº‹
–
ERR_TEMP_HEATER
 ) =
TRUE


288 || 
	`IsEº‹
–
ERR_OUTAGE_HOT_WATER
 ) =
TRUE


289 || 
	`IsEº‹
–
ERR_OUTAGE_WATER
 ) =
TRUE


292  
TRUE
;

295  
FALSE
;

296 
	}
}

298 
U8
 
	$IsEºHŸMake
()

300 if–
	`IsEºLók
(Ë=
TRUE
 )

302  
TRUE
;

305 if–
	`IsEº‹
–
ERR_OUTAGE_HOT_WATER
 ) =
TRUE


309  
TRUE
;

311  
FALSE
;

312 
	}
}

314 
U8
 
	$IsEºCﬁdMake
()

316 if–
	`IsEº‹
–
ERR_TEMP_COLD_WATER
 ) =
TRUE


317 || 
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE


318 || 
	`IsEº‹
–
ERR_COMP
 ) =
TRUE


319 || 
	`IsEº‹
–
ERR_COMP_COMM
 ) =
TRUE


320 || 
	`IsEº‹
–
ERR_PROTECT_COMP
 ) =
TRUE


321 || 
	`IsEº‹
–
ERR_PROTECT_COMP_COMM
 ) =
TRUE


322 || 
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


325  
TRUE
;

328  
FALSE
;

329 
	}
}

331 
U8
 
	$IsEºI˚Make
()

333 if–
	`IsEºLók
(Ë=
TRUE
 )

335  
TRUE
;

338 if–
	`IsEº‹
–
ERR_TEMP_ROOM_WATER
 ) =
TRUE


339 || 
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE


340 || 
	`IsEº‹
–
ERR_COMP
 ) =
TRUE


341 || 
	`IsEº‹
–
ERR_COMP_COMM
 ) =
TRUE


342 || 
	`IsEº‹
–
ERR_PROTECT_COMP
 ) =
TRUE


343 || 
	`IsEº‹
–
ERR_PROTECT_COMP_COMM
 ) =
TRUE


344 || 
	`IsEº‹
–
ERR_OUTAGE_WATER
 ) =
TRUE


345 || 
	`IsEº‹
–
ERR_DRAIN_PUMP
 ) =
TRUE


346 || 
	`IsEº‹
–
ERR_MICRO_SW_DETECT
 ) =
TRUE


347 || 
	`IsEº‹
–
ERR_MICRO_SW_MOVE
 ) =
TRUE


350  
TRUE
;

353  
FALSE
;

354 
	}
}

356 
U8
 
	$IsEºDøö
()

358 if–
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


359 || 
	`IsEº‹
–
ERR_LEAK_FLOW
 ) =
TRUE


360 || 
	`IsEº‹
–
ERR_OUTAGE_WATER
 ) =
TRUE


361 || 
	`IsEº‹
–
ERR_DRAIN_PUMP
 ) =
TRUE


364  
TRUE
;

367  
FALSE
;

368 
	}
}

370 
U8
 
	$IsEºEm±yCﬁdT™k
()

372 if–
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


373 || 
	`IsEº‹
–
ERR_LEAK_FLOW
 ) =
TRUE


374 || 
	`IsEº‹
–
ERR_DRAIN_PUMP
 ) =
TRUE


377  
TRUE
;

380  
FALSE
;

381 
	}
}

383 
U8
 
	$IsEºSãr
()

385 if–
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


386 || 
	`IsEº‹
–
ERR_LEAK_FLOW
 ) =
TRUE


387 || 
	`IsEº‹
–
ERR_OUTAGE_WATER
 ) =
TRUE


388 || 
	`IsEº‹
–
ERR_DRAIN_PUMP
 ) =
TRUE


391  
TRUE
;

394  
FALSE
;

395 
	}
}

398 
	$SoundEº‹
(
U8
 
mu8Eº‹
)

400  
mu8Eº‹
 )

402 
ERR_LEAK
:

403 
ERR_LEAK_FLOW
:

404 
	`Sound
–
SOUND_ERROR_LEAK
 );

407 
ERR_TEMP_ROOM_WATER
:

408 
ERR_DRAIN_PUMP
:

409 
ERR_MICRO_SW_MOVE
:

410 
ERR_MICRO_SW_DETECT
:

411 
	`Sound
–
SOUND_ERROR_ICE
 );

414 
ERR_COMP
:

415 
ERR_COMP_COMM
:

416 
ERR_TEMP_AMBIENT
:

419 if–
	`GëI˚C⁄figMake
(Ë=
TRUE
 )

421 
	`Sound
–
SOUND_ERROR_ICE
 );

425 
	`Sound
–
SOUND_ERROR_COLD
 );

429 
ERR_TEMP_COLD_WATER
:

430 
	`Sound
–
SOUND_ERROR_COLD
 );

433 
ERR_TEMP_HOT_WATER
:

434 
ERR_TEMP_HOT_WATER_IN
:

435 
ERR_TEMP_HEATER
:

436 
	`Sound
–
SOUND_ERROR_HOT
 );

439 
ERR_OUTAGE_HOT_WATER
:

440 
ERR_OUTAGE_WATER
:

441 
	`Sound
–
SOUND_ERROR_OUTAGE
 );

447 
	}
}

449 
	$Upd©eNewEº‹
(
Eº‹Id_T
 
mu8Eº‹
)

451 
Memíto_T
 
mMemíto
;

454 if–
mu8Eº‹
 =
ERR_TEMP_EVA_1
 )

459 if–
Eº
.
Eº‹Id
 !
mu8Eº‹
 )

461 
Eº
.
PªvEº‹Id
 = Eº.
Eº‹Id
;

463 
mMemíto
.
Eº‹
 = 
mu8Eº‹
;

464 
	`GëEº‹SètusD©e
–
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

466 
	`Upd©eMemítoEº‹
–&
mMemíto
 );

468 
	`SoundEº‹
–
mu8Eº‹
 );

469 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

472 
Eº
.
Eº‹Id
 = 
mu8Eº‹
;

473 
	}
}

476 
	$CÀ¨OuègeHŸEº‹
()

479 if–
	`GëEº‹Sètus
–
ERR_OUTAGE_HOT_WATER
 ) =
TRUE
 )

481 
	`SëEº‹Sètus
–
ERR_OUTAGE_HOT_WATER
, 
FALSE
 );

482 
	`SëOuègeSètus
–
TYPE_HOT_WATER
, 
FLOW_SUPPLY
 );

484 
	}
}

487 
	$CÀ¨OuègeEº‹
()

490 if–
	`GëEº‹Sètus
–
ERR_OUTAGE_WATER
 ) =
TRUE
 )

492 
	`SëEº‹Sètus
–
ERR_OUTAGE_WATER
, 
FALSE
 );

493 
	`SëOuègeSètus
–
TYPE_WATER
, 
FLOW_SUPPLY
 );

495 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\error.h

1 #i‚de‡
__ERROR_H__


2 
	#__ERROR_H__


	)

4 
	~"¥j_ty≥.h
"

12 
	e_îr‹_id_


14 
	mERR_NONE
,

16 
	mERR_TEMP_EVA_1
,

17 
	mERR_MICRO_SW_MOVE
,

18 
	mERR_MICRO_SW_DETECT
,

19 
	mERR_DRAIN_PUMP
,

21 
	mERR_TEMP_HEATER
,

22 
	mERR_TEMP_HOT_WATER
,

23 
	mERR_TEMP_HOT_WATER_IN
,

24 
	mERR_TEMP_COLD_WATER
,

25 
	mERR_TEMP_AMBIENT
,

26 
	mERR_TEMP_ROOM_WATER
,

28 
	mERR_COMP
,

29 
	mERR_COMP_COMM
,

31 
	mERR_PROTECT_COMP
,

32 
	mERR_PROTECT_COMP_COMM
,

34 
	mERR_OUTAGE_WATER
,

35 
	mERR_OUTAGE_HOT_WATER
,

36 
	mERR_HEATER_OVERHEAT
,

38 
	mERR_LEAK
,

39 
	mERR_LEAK_FLOW
,

64 
	mERR_NUM


65 } 
	tEº‹Id_T
;

68 
	s_îr‹_d©e_


70 
U16
 
	mu16Yór
;

71 
U8
 
	mu8M⁄th
;

72 
U8
 
	mu8D©e
;

73 } 
	tEº‹D©e_T
;

75 
	s_memíto_


77 
Eº‹Id_T
 
	mEº‹
;

78 
Eº‹D©e_T
 
	mD©e
;

79 } 
	tMemíto_T
;

82 
	#MEMENTO_LIST_NUM
 5

	)

83 
	s_îr‹_


85 
Eº‹Id_T
 
	mPªvEº‹Id
;

86 
Eº‹Id_T
 
	mEº‹Id
;

87 
Eº‹D©e_T
 
	mEº‹D©e
;

89 
U8
 
	mSètus
[ 
ERR_NUM
 ];

90 
Eº‹D©e_T
 
	mSètusD©e
[ 
ERR_NUM
 ];

94 
Memíto_T
 
	mMemítoLi°
[ 
MEMENTO_LIST_NUM
 ];

95 }
	tEº‹_T
;

98 
InôEº‹
();

100 
GëEº‹D©a
(
Eº‹_T
 *
pD©a
);

102 
SëEº‹Sètus
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
);

103 
SëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
, 
Eº‹D©e_T
 *
pD©e
);

105 
U8
 
GëEº‹Sètus
(
Eº‹Id_T
 
mId
);

106 
GëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
Eº‹D©e_T
 *
pD©e
);

108 
U8
 
IsEº‹
(
Eº‹Id_T
 
mId
 );

109 
Eº‹Id_T
 
GëEº‹Id
();

110 
SëEº‹Id
(
Eº‹Id_T
 
mEºId
);

111 
GëEº‹D©e
(
Eº‹D©e_T
 *
pD©e
);

115 
U8
 
IsEm±yMemítoEº‹
();

116 
U8
 
GëMemítoEº‹
(U8 
mu8Index
, 
Memíto_T
 *
pMemíto
);

117 
SëMemítoEº‹
(
U8
 
mu8Index
, 
Eº‹Id_T
 
mEº‹
, 
Eº‹D©e_T
 *
pD©e
 );

118 
CÀ¨MemítoEº‹
();

124 
	mERR_TYPE_ROOM_WATER_OUT
,

125 
	mERR_TYPE_COLD_WATER_OUT
,

126 
	mERR_TYPE_HOT_WATER_OUT
,

127 
	mERR_TYPE_SODA_WATER_OUT
,

129 
	mERR_TYPE_COLD_MAKE
,

130 
	mERR_TYPE_HOT_MAKE
,

131 
	mERR_TYPE_ICE_MAKE
,

133 
	mERR_TYPE_DRAIN
,

134 
	mERR_TYPE_EMPTY_COLD
,

135 
	mERR_TYPE_STER
,

136 } 
	tEºTy≥_T
;

137 
U8
 
IsEº‹Ty≥
(
EºTy≥_T
 
mId
 );

139 
Upd©eNewEº‹
(
Eº‹Id_T
 
mu8Eº‹
);

141 
CÀ¨OuègeHŸEº‹
();

143 
CÀ¨OuègeEº‹
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\process_error.c

1 
	~"¥o˚ss_îr‹.h
"

2 
	~"îr‹.h
"

4 
	~"ì¥om.h
"

5 
	~"£rvi˚.h
"

6 
	~"Àvñ.h
"

7 
	~"‰⁄t.h
"

8 
	~"WIFI_C⁄åﬁ.h
"

10 
	~"îr_ãmp_cﬁd_w©î.h
"

11 
	~"îr_ãmp_room_w©î.h
"

12 
	~"îr_ãmp_eva_1.h
"

13 
	~"îr_ãmp_ambõ¡.h
"

14 
	~"îr_ãmp_hŸ_w©î.h
"

15 
	~"îr_ãmp_hŸ_w©î_ö.h
"

16 
	~"îr_ãmp_hóãr.h
"

17 
	~"îr_ãmp_hŸ_ovîhót.h
"

18 
	~"îr_Àak.h
"

19 
	~"îr_i˚_åay.h
"

20 
	~"îr_døö_pump.h
"

21 
	~"îr_comp_bldc.h
"

22 
	~"îr_comp_bldc_comm.h
"

23 
	~"îr_ouège_w©î.h
"

24 
	~"îr_ouège_hŸ_w©î.h
"

29 
	$U8
 (*
	tEºFun_T
)(
	tU8
 
	tmu8Eº‹
);

30 
	s_îr‹_li°_


32 
Eº‹Id_T
 
Id
;

33 
U8
 
PªvEº‹
;

34 
U8
 
Eº‹
;

35 
U8
 
SãrA˘ive
;

36 
U8
 
Di•A˘ive
;

37 
U8
 
CHPA˘ive
;

39 
EºFun_T
 
Check
;

40 
EºFun_T
 
Rñó£
;

41 } 
	tEº‹Li°_T
;

43 
	$InôEº‹Li°
()

45 
	`InôEº‹
();

47 
	`InôEºCompBldcComm
();

48 
	`InôEºCompBldc
();

49 
	}
}

53 
Eº‹Li°_T
 
	gEºLi°
[] =

56 { 
ERR_TEMP_EVA_1
, 
FALSE
, FALSE, FALSE, FALSE, FALSE, 
CheckEºTempEva_1
, 
Rñó£EºTempEva_1
 },

57 { 
ERR_MICRO_SW_MOVE
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºI˚TøyMovög
, 
NULL
 },

58 { 
ERR_MICRO_SW_DETECT
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºI˚TøyMi¸oSwôch
, 
NULL
 },

59 { 
ERR_DRAIN_PUMP
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºDøöPump
, 
NULL
 },

61 { 
ERR_TEMP_HEATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
CheckEºTempHóãr
, 
Rñó£EºTempHóãr
 },

62 { 
ERR_TEMP_HOT_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
CheckEºTempHŸW©î
, 
Rñó£EºTempHŸW©î
 },

63 { 
ERR_TEMP_HOT_WATER_IN
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
CheckEºTempHŸW©îIn
, 
Rñó£EºTempHŸW©îIn
 },

64 { 
ERR_TEMP_COLD_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºTempCﬁdW©î
, 
Rñó£EºTempCﬁdW©î
 },

65 { 
ERR_TEMP_AMBIENT
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºTempAmbõ¡
, 
Rñó£EºTempAmbõ¡
 },

66 { 
ERR_TEMP_ROOM_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºTempRoomW©î
, 
Rñó£EºTempRoomW©î
 },

67 { 
ERR_HEATER_OVERHEAT
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
CheckEºHóãrOvîhót
, 
Rñó£EºHóãrOvîhót
 },

69 { 
ERR_COMP
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºCompBldc
, 
NULL
 },

70 { 
ERR_COMP_COMM
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºCompBldcComm
, 
NULL
 },

72 { 
ERR_PROTECT_COMP
, 
FALSE
, FALSE, FALSE, FALSE, FALSE, 
CheckPrŸe˘CompBldc
, 
Rñó£PrŸe˘CompBldc
 },

73 { 
ERR_PROTECT_COMP_COMM
, 
FALSE
, FALSE, FALSE, FALSE, FALSE, 
CheckPrŸe˘CompBldcComm
, 
Rñó£PrŸe˘CompBldcComm
 },

75 { 
ERR_OUTAGE_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºOuègeW©î
, 
Rñó£EºOuègeW©î
 },

76 { 
ERR_OUTAGE_HOT_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
CheckEºOuègeHŸW©î
, 
Rñó£EºOuègeHŸW©î
 },

79 { 
ERR_LEAK
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
CheckEºLók
, 
Rñó£EºLók
 },

99 
Eº‹Li°_T
 
	gEºLi°
[] =

102 { 
ERR_TEMP_EVA_1
, 
FALSE
, FALSE, FALSE, FALSE, FALSE, 
NULL
, NULL },

103 { 
ERR_OUTAGE_ICE_TRAY
, 
FALSE
, FALSE, FALSE, FALSE, FALSE, 
NULL
, NULL },

104 { 
ERR_MICRO_SW_MOVE
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

105 { 
ERR_MICRO_SW_DETECT
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

106 { 
ERR_DRAIN_PUMP
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

108 { 
ERR_TEMP_HEATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
NULL
, NULL },

109 { 
ERR_TEMP_HOT_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
NULL
, NULL },

110 { 
ERR_TEMP_HOT_WATER_IN
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
NULL
, NULL },

111 { 
ERR_TEMP_COLD_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

112 { 
ERR_TEMP_AMBIENT
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

113 { 
ERR_TEMP_ROOM_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

114 { 
ERR_HEATER_OVERHEAT
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
NULL
, NULL },

116 { 
ERR_COMP
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

117 { 
ERR_COMP_COMM
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

119 { 
ERR_PROTECT_COMP
, 
FALSE
, FALSE, FALSE, FALSE, FALSE, 
NULL
, NULL },

120 { 
ERR_PROTECT_COMP_COMM
, 
FALSE
, FALSE, FALSE, FALSE, FALSE, 
NULL
, NULL },

122 { 
ERR_OUTAGE_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

123 { 
ERR_OUTAGE_HOT_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, TRUE, 
NULL
, NULL },

125 { 
ERR_LEAK_FLOW
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL },

126 { 
ERR_LEAK
, 
FALSE
, FALSE, 
TRUE
, TRUE, FALSE, 
NULL
, NULL }

129 
	#SZ_ERR_LIST
 ((
EºLi°
)/(
Eº‹Li°_T
))

	)

132 
U8
 
	gdbg_iŸ_îr
 = 0;

133 
Eº‹Id_T
 
	$FödCheckEº‹
–
Eº‹Li°_T
 *
pEºLi°
, 
U16
 
mu16Size
 )

135 
U8
 
i
;

136 
EºFun_T
 
pCheck
;

137 
EºFun_T
 
pRñó£
;

138 
Eº‹Id_T
 
mId
 = 
ERR_NONE
;

139 
Eº‹Id_T
 
mNewId
 = 
ERR_NONE
;

140 
U8
 
mu8Eº‹
 = 
FALSE
;

141 
Eº‹D©e_T
 
mD©e
;

142 
Eº‹Li°_T
 *
pLi°
 = 
NULL
;

143 
U8
 
mu8IsCh™gedEº‹Sètus
 = 
FALSE
;

146 
	`GëEº‹D©e
–&
mD©e
 );

147  
i
 = 0; i < 
mu16Size
; i++ )

149 
pLi°
 = (
pEºLi°
 + 
i
 );

152 
mId
 = 
pLi°
->
Id
;

153 
mu8Eº‹
 = 
pLi°
->
Eº‹
;

154 
pCheck
 = 
pLi°
->
Check
;

155 
pRñó£
 = 
pLi°
->
Rñó£
;

157 #i‡
CONFIG_STER


159 if–
	`IsSèπSãr
(Ë=
TRUE
 )

161 if–
pLi°
->
SãrA˘ive
 =
FALSE
 )

169 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

171 if–
pLi°
->
CHPA˘ive
 =
TRUE
 )

178 if–
mu8Eº‹
 =
TRUE
 )

180 #i‡
CONFIG_STER


181 if–
	`GëSãrEºW©îOut
(Ë=
FALSE
 )

184 if–
pRñó£
 !
NULL
 )

186 
mu8Eº‹
 = 
	`pRñó£
( mu8Error );

192 if–
pCheck
 !
NULL
 )

194 
mu8Eº‹
 = 
	`pCheck
( mu8Error );

199 
pLi°
->
Eº‹
 = 
mu8Eº‹
;

200 if–
pLi°
->
PªvEº‹
 !pLi°->
Eº‹
 )

202 
pLi°
->
PªvEº‹
 =ÖLi°->
Eº‹
;

205 
	`SëEº‹SètusD©e
–
mId
, 
pLi°
->
Eº‹
, &
mD©e
 );

208 if–
pLi°
->
Di•A˘ive
 =
TRUE
 )

210 
mu8IsCh™gedEº‹Sètus
 = 
TRUE
;

214 if–
pLi°
->
Di•A˘ive
 =
TRUE
 )

217 if–
	`GëEº‹Sètus
–
mId
 ) =
TRUE
 )

219 
mNewId
 = 
mId
;

226 if–
mu8IsCh™gedEº‹Sètus
 =
TRUE
 )

228 
	`WifiSídD©a
(
WIFI_DATA_ERROR
);

229 
dbg_iŸ_îr
++;

232  
mNewId
;

233 
	}
}

236 #i‡(
CONFIG_TANK_TYPE
 =
TANK_RO
 )

237 
	$Re£tRoomLevñEº‹Cou¡
()

239 
U8
 
mu8PªvT™kO≥n
 = 
TRUE
;

240 
U8
 
mu8CurT™kO≥n
 = 
TRUE
;

243 
mu8CurT™kO≥n
 = 
	`GëSîvi˚CheckT™kO≥n
();

244 if–
mu8PªvT™kO≥n
 =
TRUE


245 && 
mu8CurT™kO≥n
=
FALSE
 )

247 
	`CÀ¨T™kLevñEº‹Cou¡
();

250 if–
mu8PªvT™kO≥n
 !
mu8CurT™kO≥n
 )

252 
mu8PªvT™kO≥n
 = 
mu8CurT™kO≥n
;

254 
	}
}

258 
	$Pro˚ssEº‹
()

260 #i‡
CONFIG_ERR_ALL


261 
Eº‹Id_T
 
mNewId
 = 
ERR_NONE
;

264 
mNewId
 = 
	`FödCheckEº‹
–&
EºLi°
[0], 
SZ_ERR_LIST
 );

267 
	`Upd©eNewEº‹
–
mNewId
 );

269 #i‡(
CONFIG_TANK_TYPE
 =
TANK_RO
)

270 
	`Re£tRoomLevñEº‹Cou¡
();

274 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\process_error.h

1 #i‚de‡
__PROCESS_ERROR_H__


2 
	#__PROCESS_ERROR_H__


	)

4 
	~"¥j_ty≥.h
"

7 
InôEº‹Li°
();

8 
Pro˚ssEº‹
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct.c

1 
	~"f˘.h
"

4 
	#DEFAULT_LIMIT_TIME_VALUE
 30U

	)

5 
	#DEFAULT_TEST_TIME_VALUE
 1800U

	)

8 
	s_f˘_


10 
U8
 
	mSètus
;

11 
U16
 
	mLimôTimî
;

12 
U16
 
	mTe°Timî
;

15 
U32
 
	mI≈utTe°
;

16 } 
	tF˘_T
;

18 
F˘_T
 
	gf˘
;

21 
	$InôF˘
()

23 
f˘
.
Sètus
 = 
FALSE
;

24 
f˘
.
LimôTimî
 = 
DEFAULT_LIMIT_TIME_VALUE
;

25 
f˘
.
Te°Timî
 = 
DEFAULT_TEST_TIME_VALUE
;

26 
f˘
.
I≈utTe°
 = 0UL;

27 
	}
}

29 
	$SèπF˘
()

31 if–
f˘
.
LimôTimî
 == 0 )

36 
f˘
.
Sètus
 = 
TRUE
;

37 
	}
}

39 
	$St›F˘
()

41 
f˘
.
Sètus
 = 
FALSE
;

42 
	}
}

44 
U8
 
	$IsExpúedF˘LimôTimî
()

46 if–
f˘
.
LimôTimî
 != 0 )

48  
FALSE
;

50  
TRUE
;

51 
	}
}

53 
U8
 
	$GëF˘Sètus
()

55  
f˘
.
Sètus
;

56 
	}
}

58 
	$SëF˘Te°Timî
(
U16
 
mu16Time
)

60 
f˘
.
Te°Timî
 = 
mu16Time
;

61 
	}
}

63 
U16
 
	$GëF˘Te°Timî
()

65  
f˘
.
Te°Timî
;

66 
	}
}

70 
	$SëF˘Te°I≈utBô
(
U32
 
mu32MaskBô
)

72 
f˘
.
I≈utTe°
 |
mu32MaskBô
;

73 
	}
}

75 
	$CÀ¨F˘Te°I≈utBô
(
U32
 
mu32MaskBô
)

77 
f˘
.
I≈utTe°
 &~
mu32MaskBô
;

78 
	}
}

80 
	$SëF˘Te°I≈utVÆ
(
U32
 
mu32MaskBô
)

82 
f˘
.
I≈utTe°
 = 
mu32MaskBô
;

83 
	}
}

85 
U8
 
	$IsSëF˘Te°I≈utVÆ
–
U32
 
mu32MaskBô
 )

87 if–(
f˘
.
I≈utTe°
 & 
mu32MaskBô
) != 0 )

89  
TRUE
;

92  
FALSE
;

93 
	}
}

95 
U32
 
	$GëF˘Te°I≈utVÆ
()

97  
f˘
.
I≈utTe°
;

98 
	}
}

101 
	$Upd©eF˘Timî
()

103 if–
f˘
.
LimôTimî
 != 0 )

105 
f˘
.
LimôTimî
--;

107 if–
f˘
.
Te°Timî
 != 0 )

109 
f˘
.
Te°Timî
--;

111 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct.h

1 #i‚de‡
__FCT_H__


2 
	#__FCT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôF˘
();

8 
SèπF˘
();

9 
St›F˘
();

10 
U8
 
IsExpúedF˘LimôTimî
();

11 
U8
 
GëF˘Sètus
();

13 
SëF˘Te°Timî
(
U16
 
mu16Time
);

14 
U16
 
GëF˘Te°Timî
();

18 
	#MK_FCT_KEY_ROOM
 0x00000001UL

	)

19 
	#MK_FCT_KEY_SETTING
 0x00000002UL

	)

20 
	#MK_FCT_KEY_HOT
 0x00000004UL

	)

21 
	#MK_FCT_KEY_COLD
 0x00000008UL

	)

23 
	#MK_FCT_KEY_COLD_MAKE
 0x00000010UL

	)

24 
	#MK_FCT_KEY_AMOUNT
 0x00000020UL

	)

25 
	#MK_FCT_KEY_ICE
 0x00000040UL

	)

26 
	#MK_FCT_KEY_ICE_LOCK
 0x00000080UL

	)

28 
	#MK_FCT_KEY_SAVE
 0x00000100UL

	)

29 
	#MK_FCT_KEY_ICE_MAKE
 0x00000200UL

	)

30 
	#MK_FCT_KEY_HOT_LOCK
 0x00000400UL

	)

31 
	#MK_FCT_KEY_LOCK_ALL
 0x00000800UL

	)

33 
	#MK_FCT_EEPROM
 0x00001000UL

	)

34 
	#MK_FCT_COMM_WIFI
 0x00002000UL

	)

35 
	#MK_FCT_COMM_COMP
 0x00004000UL

	)

36 
	#MK_FCT_COMM_EOL
 0x00008000UL

	)

38 
	#MK_FCT_LEVER_WATER
 0x00010000UL

	)

39 
	#MK_FCT_LEVER_ICE
 0x00020000UL

	)

40 
	#MK_FCT_TEMP_COLD
 0x00040000UL

	)

41 
	#MK_FCT_TEMP_ROOM
 0x00080000UL

	)

43 
	#MK_FCT_TEMP_AMBI
 0x00100000UL

	)

44 
	#MK_FCT_TEMP_EVA_1
 0x00200000UL

	)

45 
	#MK_FCT_TEMP_HOT_IN
 0x00400000UL

	)

46 
	#MK_FCT_TEMP_HOT_OUT
 0x00800000UL

	)

48 
	#MK_FCT_TEMP_HEATER
 0x01000000UL

	)

49 
	#MK_FCT_FB_UV_ICE_ROOM
 0x02000000UL

	)

50 
	#MK_FCT_FB_UV_ICE_TRAY
 0x04000000UL

	)

51 
	#MK_FCT_FB_DRAIN_PUMP
 0x08000000UL

	)

53 
	#MK_FCT_ALL
 0x0FFFFFFFUL

	)

56 
SëF˘Te°I≈utBô
(
U32
 
mu32MaskBô
);

57 
CÀ¨F˘Te°I≈utBô
(
U32
 
mu32MaskBô
);

58 
SëF˘Te°I≈utVÆ
(
U32
 
mu32MaksBô
);

59 
U8
 
IsSëF˘Te°I≈utVÆ
–
U32
 
mu32MaskBô
 );

60 
U32
 
GëF˘Te°I≈utVÆ
();

63 
Upd©eF˘Timî
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct_lever_handler.c

1 
	~"f˘_Àvî_h™dÀr.h
"

2 
	~"Àvî_comm⁄_h™dÀr.h
"

4 
	~"f˘.h
"

5 
	~"sound.h
"

8 
U8
 
LevîO≥nT≠W©î
();

12 
U8
 
LevîO≥nI˚Do‹
();

15 c⁄° 
LevîEvítLi°_T
 
	gFCT_LevîEvítLi°
[] =

18 { 
LevîO≥nT≠W©î
, 
NULL
, NULL, NULL },

19 { 
LevîO≥nI˚Do‹
, 
NULL
, NULL, NULL }

23 
U8
 
	$LevîO≥nT≠W©î
()

25 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_LEVER_WATER
 ) =
TRUE
 )

27 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_LEVER_WATER
 );

31 
	`SëF˘Te°I≈utBô
–
MK_FCT_LEVER_WATER
 );

34  
SOUND_SELECT
;

35 
	}
}

46 
U8
 
	$LevîO≥nI˚Do‹
()

48 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_LEVER_ICE
 ) =
TRUE
 )

50 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_LEVER_ICE
 );

54 
	`SëF˘Te°I≈utBô
–
MK_FCT_LEVER_ICE
 );

57  
SOUND_SELECT
;

58 
	}
}

67 * 
	$GëF˘LevîEvítLi°
()

70  (*)
FCT_LevîEvítLi°
;

71 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct_lever_handler.h

1 #i‚de‡
__FCT_LEVER_HANDLER_H__


2 
	#__FCT_LEVER_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

6 * 
GëF˘LevîEvítLi°
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\key_fct_handler.c

1 
	~"key_f˘_h™dÀr.h
"

2 
	~"key.h
"

3 
	~"key_comm⁄_h™dÀr.h
"

4 
	~"di•œy.h
"

5 
	~"sound.h
"

6 
	~"¥o˚ss_f˘.h
"

9 
SëKeyBô
(
U32
 
mu32MaskBô
 );

11 
U8
 
FCT_I˚Mode
();

12 
U8
 
FCT_Room
();

13 
U8
 
FCT_Cﬁd
();

14 
U8
 
FCT_HŸ
();

15 
U8
 
FCT_Amou¡
();

16 
U8
 
FCT_Sëtög
();

17 
U8
 
FCT_I˚Make
();

18 
U8
 
FCT_I˚Lock
();

19 
U8
 
FCT_LockALl
();

20 
U8
 
FCT_HŸLock
();

21 
U8
 
FCT_Save
();

22 
U8
 
FCT_CﬁdMake
();

25 c⁄° 
KeyEvítLi°_T
 
	gFCT_KeyEvítLi°
[] =

30 { 
K_SETTING
, {
FCT_Sëtög
, 
NULL
, NULL, NULL, NULL, NULL} },

31 { 
K_ICE
, {
FCT_I˚Mode
, 
NULL
, NULL, NULL, NULL, NULL} },

32 { 
K_HOT
, {
FCT_HŸ
, 
NULL
, NULL, NULL, NULL, NULL} },

33 { 
K_ROOM
, {
FCT_Room
, 
NULL
, NULL, NULL, NULL, NULL} },

34 { 
K_COLD
, {
FCT_Cﬁd
, 
NULL
, NULL, NULL, NULL, NULL} },

35 { 
K_AMOUNT
, {
FCT_Amou¡
, 
NULL
, NULL, NULL, NULL, NULL} },

38 { 
K_CP_ICE_SIZE
, {
FCT_I˚Mode
, 
NULL
, NULL, NULL, NULL, NULL} },

39 { 
K_CP_ICE_TURBO
, {
FCT_HŸ
, 
NULL
, NULL, NULL, NULL, NULL} },

40 { 
K_CP_ICE_MAKE
, {
FCT_HŸLock
, 
NULL
, NULL, NULL, NULL, NULL} },

42 { 
K_ICE_MAKE
, {
FCT_I˚Make
, 
NULL
, NULL, NULL, NULL, NULL} },

43 { 
K_ICE_LOCK
, {
FCT_I˚Lock
, 
NULL
, NULL, NULL, NULL, NULL} },

44 { 
K_HOT_LOCK
, {
FCT_HŸLock
, 
NULL
, NULL, NULL, NULL, NULL} },

45 { 
K_LOCK_ALL
, {
FCT_LockALl
, 
NULL
, NULL, NULL, NULL, NULL} },

46 { 
K_COLD_MAKE
, {
FCT_CﬁdMake
, 
NULL
, NULL, NULL, NULL, NULL} },

47 { 
K_SAVE
, {
FCT_Save
, 
NULL
, NULL, NULL, NULL, NULL} },

51 
U8
 
	$IsVÆidF˘KeyC⁄dôi⁄
(
U32
 
mu32Key
)

54  
TRUE
;

55 
	}
}

57 * 
	$GëF˘KeyEvítLi°
()

59  (*)
FCT_KeyEvítLi°
;

60 
	}
}

62 
U8
 
	$GëF˘KeyEvítLi°Size
()

64  ( (
FCT_KeyEvítLi°
Ë/ (
KeyEvítLi°_T
) );

65 
	}
}

72 
	$SëKeyBô
(
U32
 
mu32MaskBô
 )

74 
U32
 
mu32I≈utVÆ
;

77 
mu32I≈utVÆ
 = 
	`GëF˘Te°I≈utVÆ
();

78 if–(
mu32I≈utVÆ
 & 
mu32MaskBô
 ) != 0 )

80 
	`CÀ¨F˘Te°I≈utBô
–
mu32MaskBô
 );

84 
	`SëF˘Te°I≈utBô
–
mu32MaskBô
 );

86 
	}
}

89 
U8
 
	$FCT_Room
()

91 
	`SëKeyBô
–
MK_FCT_KEY_ROOM
 );

93  
SOUND_SELECT
;

94 
	}
}

96 
U8
 
	$FCT_Cﬁd
()

98 
	`SëKeyBô
–
MK_FCT_KEY_COLD
 );

100  
SOUND_SELECT
;

101 
	}
}

103 
U8
 
	$FCT_HŸ
()

105 
	`SëKeyBô
–
MK_FCT_KEY_HOT
 );

107  
SOUND_SELECT
;

108 
	}
}

110 
U8
 
	$FCT_Amou¡
()

112 
	`SëKeyBô
–
MK_FCT_KEY_AMOUNT
 );

114  
SOUND_SELECT
;

115 
	}
}

117 
U8
 
	$FCT_Sëtög
()

119 
	`SëKeyBô
–
MK_FCT_KEY_SETTING
 );

121  
SOUND_SELECT
;

122 
	}
}

124 
U8
 
	$FCT_I˚Mode
()

126 
	`SëKeyBô
–
MK_FCT_KEY_ICE
 );

128  
SOUND_SELECT
;

129 
	}
}

131 
U8
 
	$FCT_I˚Make
()

133 
	`SëKeyBô
–
MK_FCT_KEY_ICE_MAKE
 );

134  
SOUND_SELECT
;

135 
	}
}

137 
U8
 
	$FCT_I˚Lock
()

139 
	`SëKeyBô
–
MK_FCT_KEY_ICE_LOCK
 );

140  
SOUND_SELECT
;

141 
	}
}

143 
U8
 
	$FCT_LockALl
()

145 
	`SëKeyBô
–
MK_FCT_KEY_LOCK_ALL
 );

146  
SOUND_SELECT
;

147 
	}
}

149 
U8
 
	$FCT_HŸLock
()

151 
	`SëKeyBô
–
MK_FCT_KEY_HOT_LOCK
 );

152  
SOUND_SELECT
;

153 
	}
}

155 
U8
 
	$FCT_Save
()

157 
	`SëKeyBô
–
MK_FCT_KEY_SAVE
 );

158  
SOUND_SELECT
;

159 
	}
}

161 
U8
 
	$FCT_CﬁdMake
()

163 
	`SëKeyBô
–
MK_FCT_KEY_COLD_MAKE
 );

164  
SOUND_SELECT
;

165 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\key_fct_handler.h

1 #i‚de‡
__KEY_FCT_HANDLER_H__


2 
	#__KEY_FCT_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"f˘.h
"

8 
U8
 
IsVÆidF˘KeyC⁄dôi⁄
(
U32
 
mu32Key
);

10 * 
GëF˘KeyEvítLi°
();

12 
U8
 
GëF˘KeyEvítLi°Size
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\process_fct.c

1 
	~"hw.h
"

2 
	~"¥o˚ss_f˘.h
"

3 
	~"f˘.h
"

5 
	~"hÆ_adc.h
"

6 
	~"hÆ_°ï_mŸ‹.h
"

7 
	~"hÆ_pump.h
"

8 
	~"hÆ_Àd.h
"

10 
	~"key.h
"

11 
	~"ì¥om.h
"

12 
	~"πc.h
"

13 
	~"utû.h
"

14 
	~"comm.h
"

15 
	~"timî.h
"

16 
	~"di•œy.h
"

17 
	~"ãmp.h
"

18 
	~"comp_bldc.h
"

20 
	~"vÆve.h
"

21 
	~"ªœy.h
"

22 
	~"£rvi˚.h
"

23 
	~"i˚_fuŒ.h
"

24 
	~"w©î_out.h
"

25 
	~"‰⁄t.h
"

26 
	~"WIFI_C⁄åﬁ.h
"

29 
U8
 
	$IsExpúedTe°Time
()

31 if–
	`GëF˘Te°Timî
() != 0 )

33  
FALSE
;

36  
TRUE
;

37 
	}
}

40 
	$InôLﬂd
()

42 
U8
 
mu8Rë
;

43 
U8
 
mu8Rë_Rtc
;

48 
	`R_C⁄fig_UART3_St›
();

51 
	`R_C⁄fig_TAU0_2_St›
();

54 
	`HAL_InôSãpVÆ
–
SM_ID_0
 );

55 
	`HAL_InôSãpVÆ
–
SM_ID_1
 );

56 
	`HAL_InôSãpVÆ
–
SM_ID_2
 );

59 
	`Clo£VÆve
–
VALVE_ALL
 );

60 
	`O≥nVÆve
–
NORMAL_OPEN_VALVES
 );

63 
	`Tu∫OffRñayAŒ
();

65 
	`TURN_ON_SMPS_12V
();

66 
	`OPEN_VALVE_POWER_OUT
();

69 
	`HAL_SëInA˘ive
–
SM_ID_0
, 1 );

70 
	`HAL_SëInA˘ive
–
SM_ID_1
, 1 );

71 
	`HAL_SëInA˘ive
–
SM_ID_2
, 1 );

74 
mu8Rë
 = 
	`Te°Eïrom
();

75 
mu8Rë_Rtc
 = 
	`Te°Rtc
();

76 if–
mu8Rë
 =
TRUE
 && 
mu8Rë_Rtc
 == TRUE)

78 
	`InôRtcTime
();

79 
	`SëF˘Te°I≈utBô
–
MK_FCT_EEPROM
 );

83 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_EEPROM
 );

85 
	}
}

88 
	$C⁄åﬁSt›GasVÆve
()

90 
	`TURN_OFF_STEP_MOTOR_GAS_SW_1
();

91 
	`TURN_OFF_STEP_MOTOR_GAS_SW_2
();

92 
	`TURN_OFF_STEP_MOTOR_GAS_SW_3
();

93 
	`TURN_OFF_STEP_MOTOR_GAS_SW_4
();

94 
	}
}

96 
	$C⁄åﬁMoveGasVÆve
()

98 
U8
 
mu8Cou¡
 = 0;

99 
U8
 
mu8Sãp
 = 0;

101 if–
mu8Cou¡
 != 0 )

103 
mu8Cou¡
--;

106 
mu8Cou¡
 = 100;

107  
mu8Sãp
++ )

110 
	`TURN_ON_STEP_MOTOR_GAS_SW_1
();

111 
	`TURN_OFF_STEP_MOTOR_GAS_SW_2
();

112 
	`TURN_OFF_STEP_MOTOR_GAS_SW_3
();

113 
	`TURN_OFF_STEP_MOTOR_GAS_SW_4
();

116 
	`TURN_OFF_STEP_MOTOR_GAS_SW_1
();

117 
	`TURN_ON_STEP_MOTOR_GAS_SW_2
();

118 
	`TURN_OFF_STEP_MOTOR_GAS_SW_3
();

119 
	`TURN_OFF_STEP_MOTOR_GAS_SW_4
();

122 
	`TURN_OFF_STEP_MOTOR_GAS_SW_1
();

123 
	`TURN_OFF_STEP_MOTOR_GAS_SW_2
();

124 
	`TURN_ON_STEP_MOTOR_GAS_SW_3
();

125 
	`TURN_OFF_STEP_MOTOR_GAS_SW_4
();

128 
	`TURN_OFF_STEP_MOTOR_GAS_SW_1
();

129 
	`TURN_OFF_STEP_MOTOR_GAS_SW_2
();

130 
	`TURN_OFF_STEP_MOTOR_GAS_SW_3
();

131 
	`TURN_ON_STEP_MOTOR_GAS_SW_4
();

132 
mu8Sãp
 = 0;

135 
mu8Sãp
 = 0;

138 
	}
}

142 
U8
 
	$IsVÆidR™geTemp
(
U8
 
mu8Id
, 
TEMP_T
 
tMö
, TEMP_T 
tMax
)

144 if–
	`GëTemp
–
mu8Id
 ) >
tMö


145 && 
	`GëTemp
–
mu8Id
 ) <
tMax
 )

147  
TRUE
;

150  
FALSE
;

151 
	}
}

153 
	$CheckCommComp
()

155 if–
	`GëCompBldcCommTe°
(Ë=
FALSE
 )

157 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_COMM_COMP
 );

161 
	`SëF˘Te°I≈utBô
–
MK_FCT_COMM_COMP
 );

163 
	}
}

165 
	$CheckCommEﬁ
()

167 
U8
 
mu8Sãp
 = 0;

169  
mu8Sãp
 )

175 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_COMM_EOL
 );

176 
mu8Sãp
++;

181 
	`PIN_WRITE
(
P_EOL_TX
) = 1;

182 if–
	`PIN_READ
(
P_EOL_RX
) == 1 )

184 
mu8Sãp
++;

189 
	`PIN_WRITE
(
P_EOL_TX
) = 0;

190 if–
	`PIN_READ
(
P_EOL_RX
) == 0 )

192 
mu8Sãp
++;

197 
	`PIN_WRITE
(
P_EOL_TX
) = 1;

198 if–
	`PIN_READ
(
P_EOL_RX
) == 1 )

200 
mu8Sãp
++;

205 
	`SëF˘Te°I≈utBô
–
MK_FCT_COMM_EOL
 );

209 
mu8Sãp
 = 0;

212 
	}
}

215 
U8
 
	$Di•Vîsi⁄OnTime
()

217 
U16
 
mu16Dñay
 = 100;

219 if–
mu16Dñay
 != 0)

221 
mu16Dñay
--;

222 
	`Di•Vîsi⁄
–
VERSION_MAJOR
 );

223  
FALSE
;

226  
TRUE
;

227 
	}
}

229 
U8
 
	$Di•Sy°emOnTime
()

231 
U16
 
mu16Dñay
 = 100;

233 if–
mu16Dñay
 != 0)

235 
mu16Dñay
--;

236 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

238 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CHP
 );

242 
	`Di•SegmítCh¨
–
SEGMENT_CHAR_ID_CP
 );

244  
FALSE
;

247  
TRUE
;

248 
	}
}

250 
	$Pro˚ssF˘LﬂdTe°
()

253 
	`Tu∫OffAŒLED
();

256 if–
	`Di•Vîsi⁄OnTime
(Ë=
FALSE
 )

261 if–
	`Di•Sy°emOnTime
(Ë=
FALSE
 )

269 
	`HAL_SëInA˘ive
–
SM_ID_1
, 0 );

270 
	`HAL_SëInA˘ive
–
SM_ID_2
, 0 );

273 if–
	`GëWifiSètusVÆue
(
WIFI_STATUS_TEST
) == 1 )

275 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI
, 
ON
 );

279 
	`HAL_Tu∫OnOffLED
–
ICON_WIFI
, 
OFF
 );

284 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_EEPROM
 ) =
TRUE
 )

286 
	`HAL_Tu∫OnOffLED
–
ICON_SUN
, 
ON
 );

290 
	`HAL_Tu∫OnOffLED
–
ICON_SUN
, 
OFF
 );

294 
	`CheckCommComp
();

295 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_COMM_COMP
 ) =
TRUE
 )

297 
	`HAL_Tu∫OnOffLED
–
ICON_CLOUD
, 
ON
 );

301 
	`HAL_Tu∫OnOffLED
–
ICON_CLOUD
, 
OFF
 );

305 
	`CheckCommEﬁ
();

306 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_COMM_EOL
 ) =
TRUE
 )

308 
	`HAL_Tu∫OnOffLED
–
ICON_RAIN
, 
ON
 );

312 
	`HAL_Tu∫OnOffLED
–
ICON_RAIN
, 
OFF
 );

316 if–
	`GëI˚FuŒSètus
(Ë=
TRUE
 )

318 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_FULL
, 
ON
 );

322 
	`HAL_Tu∫OnOffLED
–
ICON_ICE_FULL
, 
OFF
 );

330 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_SETTING
 ) =
TRUE
 )

332 
	`Clo£VÆve
–
VALVE_NOS
 );

333 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
ON
 );

336 if–
	`HAL_GëAdcVÆue
–
ANI_24V_FB
 ) >= 60

337 && 
	`HAL_GëAdcVÆue
–
ANI_24V_FB
 ) <= 120 )

339 
	`HAL_Tu∫OnOffLED
–
ICON_FLUSHING
, 
ON
 );

343 
	`HAL_Tu∫OnOffLED
–
ICON_FLUSHING
, 
OFF
 );

348 
	`O≥nVÆve
–
VALVE_NOS
 );

349 
	`HAL_Tu∫OnOffLED
–
SETTING
, 
OFF
 );

350 
	`HAL_Tu∫OnOffLED
–
ICON_FLUSHING
, 
OFF
 );

353 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_ICE
 ) =
TRUE
 )

355 
	`O≥nVÆve
–
VALVE_ICE_TRAY_IN
 );

356 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

358 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
ON
 );

362 
	`HAL_Tu∫OnOffLED
–
CP_ICE_SIZE
, 
ON
 );

367 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

368 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

370 
	`HAL_Tu∫OnOffLED
–
ICE_MODE
, 
OFF
 );

374 
	`HAL_Tu∫OnOffLED
–
CP_ICE_SIZE
, 
OFF
 );

379 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_HOT
 ) =
TRUE
 )

381 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

383 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

384 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
ON
 );

388 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
ON
 );

389 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
ON
 );

394 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

395 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

397 
	`HAL_Tu∫OnOffLED
–
HOT_WATER
, 
OFF
 );

401 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO_2
, 
OFF
 );

402 
	`HAL_Tu∫OnOffLED
–
CP_ICE_TURBO
, 
OFF
 );

406 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_ROOM
 ) =
TRUE
 )

408 
	`O≥nVÆve
–
VALVE_ROOM_OUT
 );

409 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
ON
 );

413 
	`Clo£VÆve
–
VALVE_ROOM_OUT
 );

414 
	`HAL_Tu∫OnOffLED
–
ROOM_WATER
, 
OFF
 );

418 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_COLD
 ) =
TRUE
 )

420 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

421 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
ON
 );

425 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

426 
	`HAL_Tu∫OnOffLED
–
COLD_WATER
, 
OFF
 );

430 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_COLD_MAKE
 ) =
TRUE
 )

432 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

433 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

435 
	`O≥nVÆve
–
VALVE_COLD_FLUSH
 );

437 
	`HAL_Tu∫OnOffLED
–
COLD_MAKE
, 
ON
 );

441 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

442 
	`Clo£VÆve
–
VALVE_COLD_FLUSH
 );

443 
	`HAL_Tu∫OnOffLED
–
COLD_MAKE
, 
OFF
 );

446 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_AMOUNT
 ) =
TRUE
 )

448 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

449 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
ON
 );

453 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

454 
	`HAL_Tu∫OnOffLED
–
AMOUNT
, 
OFF
 );

459 
U8
 
mu8O√ShŸ
 = 
FALSE
;

461 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_SAVE
 ) =
TRUE
 )

463 if–
mu8O√ShŸ
 =
FALSE
 )

465 
mu8O√ShŸ
 = 
TRUE
;

466 
	`SèπTimî
–
TIMER_ID_COMP
, 
	`TIMER_SEC
(0) );

468 
	`Tu∫OnRñay
–
RELAY_COMP
 );

470 
	`HAL_Tu∫OnOffLED
–
SAVING
, 
ON
 );

474 
mu8O√ShŸ
 = 
FALSE
;

476 
	`St›Timî
–
TIMER_ID_COMP
 );

477 
	`Tu∫OffRñay
–
RELAY_COMP
 );

479 
	`HAL_Tu∫OnOffLED
–
SAVING
, 
OFF
 );

483 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_HOT_LOCK
 ) =
TRUE
 )

485 
	`TURN_ON_UV_ICE_TANK
();

486 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

488 
	`HAL_Tu∫OnOffLED
–
HOT_LOCK
, 
ON
 );

492 
	`HAL_Tu∫OnOffLED
–
CP_ICE_MAKE
, 
ON
 );

497 
	`TURN_OFF_UV_ICE_TANK
();

498 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

500 
	`HAL_Tu∫OnOffLED
–
HOT_LOCK
, 
OFF
 );

504 
	`HAL_Tu∫OnOffLED
–
CP_ICE_MAKE
, 
OFF
 );

508 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_LOCK_ALL
 ) =
TRUE
 )

510 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

511 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
ON
 );

515 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

516 
	`HAL_Tu∫OnOffLED
–
LOCK_ALL
, 
OFF
 );

521 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_ICE_MAKE
 ) =
TRUE
 )

523 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

524 
	`HAL_Tu∫OnOffLED
–
ICE_MAKE
, 
ON
 );

528 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

529 
	`HAL_Tu∫OnOffLED
–
ICE_MAKE
, 
OFF
 );

533 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_ICE_LOCK
 ) =
TRUE
 )

535 
	`TURN_ON_UV_ICE_TRAY
();

536 
	`HAL_Tu∫OnOffLED
–
ICE_LOCK
, 
ON
 );

540 
	`TURN_OFF_UV_ICE_TRAY
();

541 
	`HAL_Tu∫OnOffLED
–
ICE_LOCK
, 
OFF
 );

548 
U16
 
mu16OnTime
 = 300U;

550 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_ICE_MAKE
 ) =
TRUE
 )

552 if–
mu16OnTime
 != 0 )

554 
mu16OnTime
--;

556 
	`TURN_ON_HEATER_TRIAC
();

560 
	`TURN_OFF_HEATER_TRIAC
();

565 
mu16OnTime
 = 300U;

567 
	`TURN_OFF_HEATER_TRIAC
();

573 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

576 
U16
 
mu16OnTime
 = 300U;

578 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_HOT
 ) =
TRUE
 )

580 if–
mu16OnTime
 != 0 )

582 
mu16OnTime
--;

584 
	`TURN_ON_HEATER_RELAY
();

585 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
ON
 );

589 
	`TURN_OFF_HEATER_RELAY
();

590 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
OFF
 );

595 
mu16OnTime
 = 300U;

597 
	`TURN_OFF_HEATER_RELAY
();

598 
	`HAL_Tu∫OnOffLED
–
ICE_TURBO
, 
OFF
 );

603 
	`TURN_OFF_HEATER_RELAY
();

607 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_LEVER_WATER
 ) =
TRUE
 )

609 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
ON
 );

610 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
ON
 );

614 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_2
, 
OFF
 );

615 
	`HAL_Tu∫OnOffLED
–
WATER_OUT_1
, 
OFF
 );

618 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_LEVER_ICE
 ) =
TRUE
 )

620 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

622 
	`Clo£VÆve
–
VALVE_HOT_DRAIN
 );

624 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_2
, 
ON
 );

625 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_1
, 
ON
 );

629 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

630 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_2
, 
OFF
 );

631 
	`HAL_Tu∫OnOffLED
–
ICE_OUT_1
, 
OFF
 );

639 
U8
 
mu8Off
 = 
TRUE
;

642 if–
	`GET_MICRO_SW_ICE_TRAY_1
() != 0 )

644 
mu8Off
 = 
TRUE
;

646 if–
	`HAL_GëCuºítSãp
–
SM_ID_1
 ) == 1000 )

648 
	`HAL_SëT¨gëSãp
–
SM_ID_1
, 0 );

650 if–
	`HAL_GëCuºítSãp
–
SM_ID_1
 ) == 0 )

652 
	`HAL_SëT¨gëSãp
–
SM_ID_1
, 1000 );

657 if–
mu8Off
 =
TRUE
 )

659 
mu8Off
 = 
FALSE
;

660 
	`HAL_St›Move
–
SM_ID_1
 );

661 
	`HAL_InôSãpVÆ
–
SM_ID_1
 );

668 if–
	`GET_MICRO_SW_ICE_TRAY_2
() != 0 )

670 
	`C⁄åﬁMoveGasVÆve
();

673 if–
	`HAL_GëAdcVÆue
–
ANI_12V_FB
 ) >= 60

674 && 
	`HAL_GëAdcVÆue
–
ANI_12V_FB
 ) <= 120 )

676 
	`HAL_Tu∫OnOffLED
–
ICON_DRAIN
, 
ON
 );

686 
	`C⁄åﬁSt›GasVÆve
();

687 
	`HAL_Tu∫OnOffLED
–
ICON_DRAIN
, 
OFF
 );

692 
U8
 
mu8Off
 = 
TRUE
;

695 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_LEVER_WATER
 ) =
TRUE
 )

697 
mu8Off
 = 
TRUE
;

699 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

701 if–
	`HAL_GëCuºítSãp
–
SM_ID_2
 ) == 1000 )

703 
	`HAL_SëT¨gëSãp
–
SM_ID_2
, 0 );

705 if–
	`HAL_GëCuºítSãp
–
SM_ID_2
 ) == 0 )

707 
	`HAL_SëT¨gëSãp
–
SM_ID_2
, 1000 );

713 if–
mu8Off
 =
TRUE
 )

715 
mu8Off
 = 
FALSE
;

716 
	`HAL_St›Move
–
SM_ID_2
 );

717 
	`HAL_InôSãpVÆ
–
SM_ID_2
 );

723 if–
	`GET_STATUS_HEATER_INPUT
(Ë=
HIGH
 )

725 
	`HAL_Tu∫OnOffLED
–
ICON_UV_SMART_CARE
, 
ON
 );

729 
	`HAL_Tu∫OnOffLED
–
ICON_UV_SMART_CARE
, 
OFF
 );

733 if–
	`GET_DRAIN_TANK_HIGH
(Ë=
HIGH
 )

735 
	`Tu∫OnRñay
–
RELAY_ICE_TRAY_CW
 );

736 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

738 if–
	`GET_DRAIN_TANK_LOW
(Ë=
HIGH
 )

740 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

741 
	`Tu∫OnRñay
–
RELAY_ICE_TRAY_CCW
 );

745 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

746 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

750 if–
	`GET_REED_SW_TANK_OPEN
(Ë=
HIGH
 )

752 
	`Tu∫OnRñay
–
RELAY_FEEDER_CCW
 );

753 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

755 if–
	`GET_STATUS_FILTER_DETECT
(Ë=
HIGH
 )

757 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

758 
	`Tu∫OnRñay
–
RELAY_FEEDER_CW
 );

762 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

763 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

767 if–
	`GET_REED_SW_TANK_OPEN_2
(Ë=
HIGH
 )

769 
	`TURN_ON_FAN_MOTOR_1
();

773 
	`TURN_OFF_FAN_MOTOR_1
();

778 
	`Di•SegmítEº‹
( 0xFF );

779 if–
	`IsVÆidR™geTemp
–
TEMP_ID_COLD_WATER
, 22.0f, 28.0‡Ë=
FALSE
 )

781 
	`Di•SegmítEº‹
( 1 );

785 if–
	`IsVÆidR™geTemp
–
TEMP_ID_AMBIENT
, 22.0f, 28.0‡Ë=
FALSE
 )

787 
	`Di•SegmítEº‹
( 2 );

791 if–
	`IsVÆidR™geTemp
–
TEMP_ID_ROOM_WATER
, 22.0f, 28.0‡Ë=
FALSE
 )

793 
	`Di•SegmítEº‹
( 3 );

797 if–
	`IsVÆidR™geTemp
–
TEMP_ID_EVA_1
, 22.0f, 28.0‡Ë=
FALSE
 )

799 
	`Di•SegmítEº‹
( 4 );

802 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

805 if–
	`IsVÆidR™geTemp
–
TEMP_ID_HOT_IN
, 22.0f, 28.0‡Ë=
FALSE
 )

807 
	`Di•SegmítEº‹
( 5 );

811 if–
	`IsVÆidR™geTemp
–
TEMP_ID_HOT_OUT
, 22.0f, 28.0‡Ë=
FALSE
 )

813 
	`Di•SegmítEº‹
( 6 );

817 if–
	`IsVÆidR™geTemp
–
TEMP_ID_HEATER
, 22.0f, 28.0‡Ë=
FALSE
 )

819 
	`Di•SegmítEº‹
( 7 );

824 
	`TURN_ON_LEAK_ONOFF
();

825 if–
	`HAL_GëAdcVÆue
–
ANI_SENSOR_LEAK
 ) >= 800 )

827 
	`TURN_ON_SWING_BAR
();

831 
	`TURN_OFF_SWING_BAR
();

835 if–
	`GET_FLOW_SENSOR
(Ë=
HIGH
 )

837 
	`HAL_Tu∫OnOffLED
–
ICON_FILTER
, 
ON
 );

838 
	`HAL_Tu∫OnPump
–
HAL_PUMP_DRAIN
, 24.0f );

842 
	`HAL_Tu∫OnOffLED
–
ICON_FILTER
, 
OFF
 );

843 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

848 if–
	`HAL_GëAdcVÆue
–
ANI_PUMP_DRAIN_FB
 ) >= 250

849 && 
	`HAL_GëAdcVÆue
–
ANI_PUMP_DRAIN_FB
 ) <= 370 )

851 
	`HAL_Tu∫OnOffLED
–
ICON_SAVING
, 
ON
 );

855 
	`HAL_Tu∫OnOffLED
–
ICON_SAVING
, 
OFF
 );

859 if–
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_DOOR
 ) >= 10

860 && 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_DOOR
 ) <= 60 )

862 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE
, 
ON
 );

866 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE
, 
OFF
 );

871 if–
	`HAL_GëAdcVÆue
–
ANI_UV_WATER_OUT
 ) >= 10

872 && 
	`HAL_GëAdcVÆue
–
ANI_UV_WATER_OUT
 ) <= 60 )

874 
	`HAL_Tu∫OnOffLED
–
ICON_UV_WATER
, 
ON
 );

878 
	`HAL_Tu∫OnOffLED
–
ICON_UV_WATER
, 
OFF
 );

882 if–
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TRAY
 ) >= 10

883 && 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TRAY
 ) <= 60 )

885 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TRAY
, 
ON
 );

889 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TRAY
, 
OFF
 );

893 if–
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TANK
 ) >= 10

894 && 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TANK
 ) <= 60 )

896 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TANK
, 
ON
 );

900 
	`HAL_Tu∫OnOffLED
–
ICON_UV_ICE_TANK
, 
OFF
 );

908 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

910 if–
	`HAL_GëAdcVÆue
–
ANI_HEATER_FB
 ) >= 30

911 && 
	`HAL_GëAdcVÆue
–
ANI_HEATER_FB
 ) <= 80 )

913 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
ON
 );

914 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
ON
 );

915 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
ON
 );

919 
	`HAL_Tu∫OnOffLED
–
AMOUNT_120
, 
OFF
 );

920 
	`HAL_Tu∫OnOffLED
–
AMOUNT_250
, 
OFF
 );

921 
	`HAL_Tu∫OnOffLED
–
AMOUNT_500
, 
OFF
 );

924 
	}
}

927 
	$Pro˚ssF˘
()

929 
U8
 
mu8Inô
 = 0;

932 if–
	`IsExpúedTe°Time
(Ë=
TRUE
 )

934 
	`Re£t
();

938 if–
mu8Inô
 == 0 )

940 
mu8Inô
 = 1;

941 
	`InôLﬂd
();

944 
	`SèπCheckI˚FuŒ
();

945 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\process_fct.h

1 #i‚de‡
__PROCESS_FCT_H__


2 
	#__PROCESS_FCT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
Pro˚ssF˘LﬂdTe°
();

8 
Pro˚ssF˘
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\filter\filter.c

1 
	~"fûãr.h
"

2 
	~"hÆ_öput.h
"

3 
	~"sound.h
"

4 
	~"¥o˚ss_di•œy.h
"

5 
	~"vÆve.h
"

6 
	~"w©î_out.h
"

7 
	~"Êush_w©î_out.h
"

8 
	~"ì¥om.h
"

9 
	~"cody_kô.h
"

11 
	~<°dio.h
>

12 
	~<°rög.h
>

15 
	#ONE_DAY_MIN
 ( 1440U )

	)

17 
Fûãr_T
 
	gFûãr
;

19 
	$InôFûãr
()

21 
Fûãr
.
Sètus
[ 
ID_FILTER_COVER
 ] = 
FILTER_CLOSE
;

22 
Fûãr
.
Sètus
[ 
ID_FILTER
 ] = 
FILTER_CLOSE
;

23 
Fûãr
.
Ch™gedSètus
 = 
FILTER_MOUNTED
;

24 
Fûãr
.
Ch™gedFlushSètus
 = 
FILTER_CHANGED_NONE
;

26 
Fûãr
.
UßgeSètus
 = 
FILTER_USAGE_NORMAL
;

27 
Fûãr
.
UßgeTime
 = 
FILTER_USAGE_TIME
;

28 
Fûãr
.
SaveTime
 = 
ONE_DAY_MIN
;

29 
	}
}

32 
U8
 
	$GëFûãrCh™gedFlushSètus
()

34  
Fûãr
.
Ch™gedFlushSètus
;

35 
	}
}

37 
	$SëFûãrCh™gedFlushSètus
(
U8
 
mu8Flush
)

39 
Fûãr
.
Ch™gedFlushSètus
 = 
mu8Flush
;

40 
	}
}

42 
U8
 
	$GëFûãrCh™gedSètus
()

44  
Fûãr
.
Ch™gedSètus
;

45 
	}
}

47 
	$SëFûãrCh™gedSètus
(
U8
 
mu8Ch™ged
)

49 
Fûãr
.
Ch™gedSètus
 = 
mu8Ch™ged
;

50 
	}
}

52 
U8
 
	$IsO≥nFûãr
(
U8
 
mu8Id
)

54 if–
Fûãr
.
Sètus
[ 
mu8Id
 ] =
FILTER_OPEN
 )

56  
TRUE
;

59  
FALSE
;

60 
	}
}

62 
	$SëFûãrSètus
(
U8
 
mu8Id
, U8 
mu8Sètus
)

64 
Fûãr
.
Sètus
[ 
mu8Id
 ] = 
mu8Sètus
;

65 
	}
}

67 
U8
 
	$GëFûãrSètus
(
U8
 
mu8Id
)

69  
Fûãr
.
Sètus
[ 
mu8Id
 ];

70 
	}
}

74 
	$SëFûãrUßgeSètus
(
U8
 
mu8Sètus
)

76 
Fûãr
.
UßgeSètus
 = 
mu8Sètus
;

77 
	}
}

79 
U8
 
	$GëFûãrUßgeSètus
()

81  
Fûãr
.
UßgeSètus
;

82 
	}
}

85 
	$SëFûãrUßgeTime
(
U32
 
mu32Time
)

87 
Fûãr
.
UßgeTime
 = 
mu32Time
;

89 
	`SaveEïromId
–
EEP_ID_FILTER_USAGE_TIME
 );

90 
	}
}

92 
U32
 
	$GëFûãrUßgeTime
()

94  
Fûãr
.
UßgeTime
;

95 
	}
}

97 
	$Re£tFûãrUßge
()

99 
	`SëFûãrUßgeSètus
–
FILTER_USAGE_NORMAL
 );

100 
	`SëFûãrUßgeTime
–
FILTER_USAGE_TIME
 );

101 
	}
}

104 
	$CheckFûãrSètus
()

106 if–
	`HAL_GëI≈utVÆue
–
IN_FILTER
 ) =
HIGH
 )

108 
Fûãr
.
Sètus
[ 
ID_FILTER
 ] = 
FILTER_OPEN
;

112 
Fûãr
.
Sètus
[ 
ID_FILTER
 ] = 
FILTER_CLOSE
;

114 
	}
}

116 
	#INIT_DELAY_TIME
 50

117 
	#DELAY_TIME
 20

118 
	#OPEN_TIME
 70

119 

	)

120 
U8
 
	gthe_fûãr_›í
 = 
FALSE
;

121 
	$CheckO≥nFûãrCovî
()

123 
U8
 
mu8CheckFûãr
 = 
FALSE
;

124 
U8
 
mu8Check
 = 
FALSE
;

125 
U8
 
mu8Dñay
 = 
OPEN_TIME
;

126 
U8
 
mu8InôDñay
 = 
INIT_DELAY_TIME
;

127 
U8
 
mu8DñayW©îOut
 = 0;

131 if–
	`GëDi•œyInô
(Ë=
FALSE
 )

137 if–
	`GëCodyKôSètus
(Ë=
TRUE
 )

142 if–
mu8InôDñay
 != 0 )

144 
mu8InôDñay
--;

148 if–
	`IsO≥nFûãr
–
ID_FILTER_COVER
 ) =
FILTER_OPEN


149 || 
	`IsO≥nFûãr
–
ID_FILTER
 ) =
FILTER_OPEN
 )

152 if–
	`GëW©îOut
(Ë=
TRUE
 )

154 
	`St›W©îOut
();

155 
	`Sound
–
SOUND_EFFLUENT_END
 );

157 
mu8DñayW©îOut
 = 
DELAY_TIME
;

162 if–
mu8DñayW©îOut
 != 0 )

164 
mu8DñayW©îOut
--;

168 if–
mu8Check
 =
FALSE
 )

170 
mu8Check
 = 
TRUE
;

172 
	`SëFûãrDi•
–
TRUE
 );

174 
	`Sound
–
SOUND_COVER_OPEN_FRONT
 );

176 if–
	`IsO≥nVÆve
–
VALVE_ICE_TRAY_IN
 ) =
FALSE
 )

178 
	`O≥nVÆve
–
VALVE_ICE_TRAY_IN
 );

179 
the_fûãr_›í
 = 
TRUE
;

185 if–
	`IsO≥nFûãr
–
ID_FILTER_COVER
 ) =
FILTER_CLOSE


186 && 
	`IsO≥nFûãr
–
ID_FILTER
 ) =
FILTER_OPEN
 )

188 if–
mu8CheckFûãr
 =
FALSE
 )

190 
mu8CheckFûãr
 = 
TRUE
;

191 
	`Sound
–
SOUND_FILTER_CHECK
 );

196 
mu8CheckFûãr
 = 
FALSE
;

201 if–
mu8Check
 =
TRUE
 )

203 if–
Fûãr
.
Ch™gedSètus
 =
FILTER_CHANGED
 )

206 
	`Sound
–
SOUND_FILTER_FLUSHING_READY
 );

216 
mu8Check
 = 
FALSE
;

218 
	`SëFûãrDi•
–
FALSE
 );

221 if–
the_fûãr_›í
 =
FALSE
 )

223 
mu8Dñay
 = 
OPEN_TIME
;

227 
mu8Dñay
 = 0;

229 
mu8CheckFûãr
 = 
FALSE
;

233 if–
mu8Dñay
 != 0 )

235 
mu8Dñay
--;

239 if–
the_fûãr_›í
 =
TRUE
 )

241 
the_fûãr_›í
 = 
FALSE
;

242 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

245 
	}
}

252 
	$CheckCh™gedFûãrRe£tFlushOut
()

254 
U8
 
mu8PªvFûãr
 = 
FILTER_CLOSE
;

255 
U8
 
mu8CurFûãr
;

258 if–
	`GëFûãrSètus
–
ID_FILTER_COVER
 ) =
FILTER_OPEN
 )

260 
mu8CurFûãr
 = 
	`GëFûãrSètus
–
ID_FILTER
 );

261 if–
mu8PªvFûãr
 !
mu8CurFûãr
 )

263 
mu8PªvFûãr
 = 
mu8CurFûãr
;

264 if–
mu8CurFûãr
 =
FILTER_CLOSE


265 && 
Fûãr
.
Ch™gedSètus
 !
FILTER_CHANGED
)

267 
Fûãr
.
Ch™gedSètus
 = 
FILTER_CHANGED
;

268 
	`SaveEïromId
–
EEP_ID_FILTER_CHANGED
 );

275 if–
	`GëFûãrSètus
–
ID_FILTER
 ) =
FILTER_CLOSE


276 && 
Fûãr
.
Ch™gedSètus
 =
FILTER_CHANGED
 )

278 
Fûãr
.
Ch™gedSètus
 = 
FILTER_MOUNTED
;

281 
	`Re£tFlushW©îOut
();

284 
	}
}

287 
	$Cou¡FûãrUßge
()

289 if–
	`IsO≥nFûãr
–
ID_FILTER
 ) =
FILTER_OPEN
 )

294 if–
Fûãr
.
UßgeTime
 != 0 )

296 
Fûãr
.
UßgeTime
--;

300 if–
Fûãr
.
UßgeSètus
 =
FILTER_USAGE_NORMAL
 )

302 if–
Fûãr
.
UßgeTime
 == 0 )

305 
	`SëFûãrUßgeSètus
–
FILTER_USAGE_TIME_OUT
 );

306 
	`SaveEïromId
–
EEP_ID_FILTER_USAGE_TIME
 );

311 if–
Fûãr
.
SaveTime
 != 0 )

313 
Fûãr
.
SaveTime
--;

318 
Fûãr
.
SaveTime
 = 
ONE_DAY_MIN
;

319 
	`SaveEïromId
–
EEP_ID_FILTER_USAGE_TIME
 );

323 
	}
}

325 #i‡
CONFIG_TEST_FILTER


326 
	$TEST_CheckFûãr
()

328 
U8
 
mu8Pªv
 = 
FILTER_CLOSE
;

329 
U8
 
mu8Cur
 = 
FILTER_CLOSE
;

331 
mu8Cur
 = 
	`GëFûãrSètus
–
ID_FILTER
 );

332 if–
mu8Cur
 !
mu8Pªv
 )

334 if–
mu8Cur
 =
FILTER_OPEN
 )

336 
	`Sound
–
SOUND_SELECT
 );

340 
	`Sound
–
SOUND_ERROR
 );

343 
mu8Pªv
 = 
mu8Cur
;

345 
	}
}

348 
	$Pro˚ssFûãr
()

351 
	`CheckFûãrSètus
();

354 
	`CheckO≥nFûãrCovî
();

356 
	`CheckCh™gedFûãrRe£tFlushOut
();

358 #i‡
CONFIG_TEST_FILTER


359 
	`SëI≈utC⁄fDëe˘Time
–
IN_FILTER
 , 
INPUT_DELAY_100MS
 );

360 
	`TEST_CheckFûãr
();

362 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\filter\filter.h

1 #i‚de‡
__FILTER_H__


2 
	#__FILTER_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	#ID_FILTER_COVER
 0

	)

9 
	#ID_FILTER
 1

	)

10 
	#MAX_FILTER_NUM
 2

	)

12 
	s_fûãr_


14 
U8
 
	mSètus
[ 
MAX_FILTER_NUM
 ];

15 
U8
 
	mCh™gedSètus
;

16 
U8
 
	mCh™gedFlushSètus
;

18 
U8
 
	mUßgeSètus
;

19 
U32
 
	mUßgeTime
;

20 
U16
 
	mSaveTime
;

21 } 
	tFûãr_T
;

24 
InôFûãr
();

27 
	#FILTER_CHANGED_NONE
 0

28 
	#FILTER_CHANGED_FLUSH
 1

29 
U8
 
	`GëFûãrCh™gedFlushSètus
();

	)

30 
SëFûãrCh™gedFlushSètus
(
U8
 
mu8Flush
);

32 
	#FILTER_MOUNTED
 0

	)

33 
	#FILTER_CHANGED
 1

	)

34 
U8
 
GëFûãrCh™gedSètus
();

35 
SëFûãrCh™gedSètus
(
U8
 
mu8Ch™ged
);

39 
U8
 
IsO≥nFûãr
(U8 
mu8Id
);

41 
	#FILTER_OPEN
 1

	)

42 
	#FILTER_CLOSE
 0

	)

43 
SëFûãrSètus
(
U8
 
mu8Id
, U8 
mu8Sètus
);

44 
U8
 
GëFûãrSètus
(U8 
mu8Id
);

47 
	#FILTER_USAGE_NORMAL
 0

	)

48 
	#FILTER_USAGE_TIME_OUT
 1

	)

49 
SëFûãrUßgeSètus
(
U8
 
mu8Sètus
);

50 
U8
 
GëFûãrUßgeSètus
();

53 
	#FILTER_USAGE_TIME
 ( 172800UL )

	)

54 
SëFûãrUßgeTime
(
U32
 
mu32Time
);

55 
U32
 
GëFûãrUßgeTime
();

58 
Re£tFûãrUßge
();

60 
Cou¡FûãrUßge
();

63 
CheckFûãrSètus
();

65 
Pro˚ssFûãr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_adc.c

1 
	~"hw.h
"

2 
	~"hÆ_adc.h
"

3 
	~"C⁄fig_ADC.h
"

8 
	#TURN_ON_DELAY
 1000UL

9 

	)

11 
	#ADC_SET_CHANNEL
(
x
Ëdo{ 
ADS
 = (x); }0)

	)

12 
	#ADC_START_CONVERSION
(Ëdo{ 
ADCS
 = 1; }0)

	)

13 
	#ADC_STOP_CONVERSION
(Ëdo{ 
ADCS
 = 0; }0)

	)

14 
	#ADC_SAMPLING
(Ë!
ADIF
)

	)

15 
	#ADC_GET_VALUE
(Ë(
ADCR
 >> 6)

	)

17 (*
	tA˘i⁄_T
)();

19 
	s_adc_c⁄fig_


21 
U8
 
id
;

22 
U8
 
ch™√l
;

23 
U8
 
ªsﬁuti⁄
;

25 
U8
 
cou¡
;

26 
U16
 
mö
;

27 
U16
 
max
;

29 
U8
 
OnOff
;

30 
U16
 
Tu∫OnDñay
;

31 
A˘i⁄_T
 
pfE«bÀ
;

32 
A˘i⁄_T
 
pfDißbÀ
;

33 } 
	tTAdcC⁄fig_T
;

35 
	`E«bÀTempCﬁd
();

36 #i‡!
CONFIG_TEST_TEMP_READ


37 
	`DißbÀTempCﬁd
();

39 
	`E«bÀTempRoom
();

40 #i‡!
CONFIG_TEST_TEMP_READ


41 
	`DißbÀTempRoom
();

45 
TAdcC⁄fig_T
 
adcC⁄fLi°
[] =

48 { 
ANI_TEMP_HOT_OUT
, 0, 12, 6U, 4096U, 0U, 
ON
, 0U, 
NULL
, NULL},

49 { 
ANI_TEMP_HEATER
, 1, 12, 6U, 4096U, 0U, 
ON
, 0U, 
NULL
, NULL},

51 { 
ANI_TEMP_AMBIENT
, 2, 12, 52U, 4096U, 0U, 
ON
, 0U, 
NULL
, NULL},

52 #i‡
CONFIG_TEST_TEMP_READ


53 { 
ANI_TEMP_ROOM_WATER
, 3, 12, 52U, 4096U, 0U, 
ON
, 
TURN_ON_DELAY
, 
E«bÀTempRoom
, EnableTempRoom},

54 { 
ANI_TEMP_COLD_WATER
, 4, 12, 52U, 4096U, 0U, 
ON
, 
TURN_ON_DELAY
, 
E«bÀTempCﬁd
, EnableTempCold},

56 { 
ANI_TEMP_ROOM_WATER
, 3, 12, 52U, 4096U, 0U, 
ON
, 
TURN_ON_DELAY
, 
E«bÀTempRoom
, 
DißbÀTempRoom
},

57 { 
ANI_TEMP_COLD_WATER
, 4, 12, 52U, 4096U, 0U, 
ON
, 
TURN_ON_DELAY
, 
E«bÀTempCﬁd
, 
DißbÀTempCﬁd
},

59 { 
ANI_TEMP_EVA_1
, 5, 12, 52U, 4096U, 0U, 
ON
, 0U, 
NULL
, NULL},

61 { 
ANI_SENSOR_LEAK
, 8, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

62 { 
ANI_SENSOR_INFRARED
, 9, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

63 { 
ANI_DC_FAN
, 10, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

65 { 
ANI_TEMP_HOT_IN
, 11, 12, 6U, 4096U, 0U, 
ON
, 0U, 
NULL
, NULL},

66 { 
ANI_24V_FB
, 12, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

67 { 
ANI_12V_FB
, 13, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

69 { 
ANI_UV_ICE_TANK
, 14, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

70 { 
ANI_HEATER_FB
, 18, 10, 12U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

71 { 
ANI_UV_ICE_TRAY
, 19, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL},

72 { 
ANI_PUMP_DRAIN_FB
, 20, 10, 52U, 1024U, 0U, 
ON
, 0U, 
NULL
, NULL}

86 
	}
};

90 
TAdcC⁄fig_T
 
	gadcC⁄fLi°
[] =

93 { 
ANI_TEMP_HOT_IN
, 11, 12, 6U, 4096U, 0U, 
ON
, 0U, 
NULL
, NULL},

97 
	#SZ_ADC_CONF_LIST
 ((
adcC⁄fLi°
)/(
TAdcC⁄fig_T
))

	)

99 
	$E«bÀTempCﬁd
()

101 
	`TURN_ON_ADC_COLD
();

102 
	}
}

104 #i‡!
CONFIG_TEST_TEMP_READ


105 
	$DißbÀTempCﬁd
()

107 
	`TURN_OFF_ADC_COLD
();

108 
	}
}

112 
	$E«bÀTempRoom
()

114 
	`TURN_ON_ADC_ROOM
();

115 
	}
}

117 #i‡!
CONFIG_TEST_TEMP_READ


118 
	$DißbÀTempRoom
()

120 
	`TURN_OFF_ADC_ROOM
();

121 
	}
}

125 
U8
 
	$GëIndexC⁄fLi°
(
U8
 
mu8Id
, U8 *
pIndex
)

127 
U8
 
i
;

129  
i
 = 0; i < 
SZ_ADC_CONF_LIST
 ; i++ )

131 if–
adcC⁄fLi°
[ 
i
 ].
id
 =
mu8Id
 )

133 *
pIndex
 = 
i
;

134  
TRUE
;

138  
FALSE
;

139 
	}
}

141 
	$HAL_Tu∫OnSísögAdc
(
U8
 
mu8Id
 )

143 
U8
 
mu8Index
;

145 if–
	`GëIndexC⁄fLi°
–
mu8Id
, &
mu8Index
Ë=
TRUE
 )

147 
adcC⁄fLi°
[ 
mu8Index
 ].
OnOff
 = 
ON
;

150 
	}
}

152 
	$HAL_Tu∫OffSísögAdc
(
U8
 
mu8Id
 )

154 
U8
 
mu8Index
;

156 if–
	`GëIndexC⁄fLi°
–
mu8Id
, &
mu8Index
Ë=
TRUE
 )

158 
adcC⁄fLi°
[ 
mu8Index
 ].
OnOff
 = 
OFF
;

160 
	}
}

162 
	s_£ns‹_


164 
U32
 
	msum
;

165 
U16
 
	msum_cou¡
;

167 
U32
 
	mavîage
;

169 
U16
 
	mmö
;

170 
U16
 
	mmax
;

171 } 
	tAdcVÆue_T
;

172 
AdcVÆue_T
 
	gadcVÆue
[ 
ANI_MAX_NUM
 ];

175 
U16
 
Sam∂eAdc
–
U8
 
ch™√l
, U8 
ªsﬁuti⁄
 );

176 
Sum
( );

177 
Avîage
( );

180 
	$HAL_InôAdc
()

182 
U8
 
i
;

183 
U8
 
ch
;

184 
U8
 
ªs
;

187  
i
 = 0; i < 
SZ_ADC_CONF_LIST
 ; i++ )

189 if–
adcC⁄fLi°
[ 
i
 ].
pfE«bÀ
 !
NULL
 )

191 
adcC⁄fLi°
[ 
i
 ].
	`pfE«bÀ
();

194 
ch
 = 
adcC⁄fLi°
[ 
i
 ].
ch™√l
;

195 
ªs
 = 
adcC⁄fLi°
[ 
i
 ].
ªsﬁuti⁄
;

196 
adcVÆue
[ 
i
 ].
avîage
 = 
	`Sam∂eAdc
–
ch
, 
ªs
 );

198 
	}
}

200 
U16
 
	$HAL_GëAdcVÆue
–
U8
 
mu8Id
 )

202 if–
mu8Id
 >
ANI_MAX_NUM
 )

207  
adcVÆue
[ 
mu8Id
 ].
avîage
;

208 
	}
}

210 
	$HAL_SëAdcVÆue
(
U8
 
mu8Id
, 
U16
 
mu16Adc
 )

212 if–
mu8Id
 < 
ANI_MAX_NUM
 )

214 
adcVÆue
[ 
mu8Id
 ].
avîage
 = 
mu16Adc
;

216 
	}
}

219 
U16
 
	$Sam∂eAdc
–
U8
 
ch™√l
, U8 
ªsﬁuti⁄
 )

221 
U16
 
øw
 = 0;

225 
ADIF
 = 0;

226 
	`ADC_STOP_CONVERSION
();

229 
	`R_C⁄fig_ADC_Së_ADCh™√l
–(
e_ad_ch™√l_t
)
ch™√l
 );

232 
	`R_C⁄fig_ADC_Së_O≥øti⁄On
();

233 
	`R_C⁄fig_ADC_Sèπ
();

236 
	`ADC_SAMPLING
();

237 
	`R_C⁄fig_ADC_Gë_Resu…_12bô
–&
øw
 );

240 
	`ADC_SAMPLING
();

241 
	`R_C⁄fig_ADC_Gë_Resu…_12bô
–&
øw
 );

244 
	`R_C⁄fig_ADC_St›
();

245 
	`R_C⁄fig_ADC_Së_O≥øti⁄Off
();

247 if–
ªsﬁuti⁄
 == 10 )

249 
øw
 =Ñaw >> 2;

252  
øw
;

253 
	}
}

255 
	$InôAdcVÆue
(
U8
 
mu8VÆueId
)

257 
U8
 
mu8Index
;

260 if–
	`GëIndexC⁄fLi°
–
mu8VÆueId
, &
mu8Index
Ë=
TRUE
 )

262 
adcVÆue
[ 
mu8VÆueId
 ].
sum
 = 0;

263 
adcVÆue
[ 
mu8VÆueId
 ].
sum_cou¡
 = 0;

264 
adcVÆue
[ 
mu8VÆueId
 ].
mö
 = 
adcC⁄fLi°
[ 
mu8Index
 ].min;

265 
adcVÆue
[ 
mu8VÆueId
 ].
max
 = 
adcC⁄fLi°
[ 
mu8Index
 ].max;

267 
	}
}

269 
	$Sum
( )

271 
U8
 
mu8Index
;

272 
U8
 
mu8VÆueId
;

273 
U8
 
mu8Ch
;

274 
U8
 
mu8Res
;

275 
U8
 
mu8Cou¡
;

276 
U16
 
mu16VÆ
;

278  
mu8Index
 = 0; mu8Index < 
SZ_ADC_CONF_LIST
 ; mu8Index++ )

280 
mu8VÆueId
 = 
adcC⁄fLi°
[ 
mu8Index
 ].
id
;

281 #i‡!
CONFIG_TEST_TEMP_READ


282 if–
adcC⁄fLi°
[ 
mu8Index
 ].
OnOff
 =
OFF
 )

285 if–
adcC⁄fLi°
[ 
mu8Index
 ].
pfDißbÀ
 !
NULL
 )

288 
adcC⁄fLi°
[ 
mu8Index
 ].
	`pfDißbÀ
();

289 
adcC⁄fLi°
[ 
mu8Index
 ].
Tu∫OnDñay
 = 
TURN_ON_DELAY
;

292 
	`InôAdcVÆue
–
mu8VÆueId
 );

298 if–
adcC⁄fLi°
[ 
mu8Index
 ].
pfE«bÀ
 !
NULL
 )

300 
adcC⁄fLi°
[ 
mu8Index
 ].
	`pfE«bÀ
();

302 #i‡!
CONFIG_TEST_TEMP_READ


304 if–
adcC⁄fLi°
[ 
mu8Index
 ].
Tu∫OnDñay
 != 0 )

306 
adcC⁄fLi°
[ 
mu8Index
 ].
Tu∫OnDñay
--;

312 
mu8Cou¡
 = 
adcVÆue
[ 
mu8VÆueId
 ].
sum_cou¡
;

313 if–
mu8Cou¡
 < 
adcC⁄fLi°
 [ 
mu8Index
 ].
cou¡
 )

315 
mu8Ch
 = 
adcC⁄fLi°
[ 
mu8Index
 ].
ch™√l
;

316 
mu8Res
 = 
adcC⁄fLi°
[ 
mu8Index
 ].
ªsﬁuti⁄
;

317 
mu16VÆ
 = 
	`Sam∂eAdc
–
mu8Ch
, 
mu8Res
 );

319 
adcVÆue
[ 
mu8VÆueId
 ].
sum
 +
mu16VÆ
;

320 
adcVÆue
[ 
mu8VÆueId
 ].
sum_cou¡
++;

323 if–
mu16VÆ
 < 
adcVÆue
[ 
mu8VÆueId
 ].
mö
 )

325 
adcVÆue
[ 
mu8VÆueId
 ].
mö
 = 
mu16VÆ
;

328 if–
mu16VÆ
 > 
adcVÆue
[ 
mu8VÆueId
 ].
max
 )

330 
adcVÆue
[ 
mu8VÆueId
 ].
max
 = 
mu16VÆ
;

335 
	}
}

338 
	$Avîage
( )

340 
U8
 
mu8Index
;

341 
U8
 
mu8VÆueId
;

342 
U8
 
cou¡
;

343 
AdcVÆue_T
 *
pVÆue
 = 
NULL
;

346  
mu8Index
 = 0; mu8Index < 
SZ_ADC_CONF_LIST
 ; mu8Index++ )

348 
mu8VÆueId
 = 
adcC⁄fLi°
[ 
mu8Index
 ].
id
;

349 
pVÆue
 = &
adcVÆue
[ 
mu8VÆueId
 ];

351 
cou¡
 = 
pVÆue
->
sum_cou¡
;

352 if–
adcC⁄fLi°
[ 
mu8Index
 ].
cou¡
 == count )

355 
pVÆue
->
sum
 -pVÆue->
mö
 +ÖVÆue->
max
;

356 
pVÆue
->
avîage
 =ÖVÆue->
sum
 / (
cou¡
 - 2);

357 
pVÆue
->
avîage
 =ÖVÆue->
sum
 / (
cou¡
 - 2);

359 
	`InôAdcVÆue
–
mu8VÆueId
 );

362 
	}
}

364 
	$HAL_Pro˚ssAdc
()

366 
	`Sum
();

367 
	`Avîage
();

368 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_adc.h

1 #i‚de‡
__HAL_ADC_H__


2 
	#__HAL_ADC_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mANI_TEMP_HOT_OUT
,

10 
	mANI_TEMP_HEATER
,

11 
	mANI_TEMP_AMBIENT
,

12 
	mANI_TEMP_ROOM_WATER
,

13 
	mANI_TEMP_COLD_WATER
,

15 
	mANI_TEMP_EVA_1
,

16 
	mANI_SENSOR_LEAK
,

17 
	mANI_SENSOR_INFRARED
,

18 
	mANI_DC_FAN
,

20 
	mANI_TEMP_HOT_IN
,

21 
	mANI_24V_FB
,

22 
	mANI_12V_FB
,

23 
	mANI_UV_ICE_TRAY
,

25 
	mANI_HEATER_FB
,

26 
	mANI_UV_ICE_TANK
,

27 
	mANI_PUMP_DRAIN_FB
,

30 
	mANI_UV_ICE_DOOR
,

31 
	mANI_UV_WATER_OUT
,

33 
	mANI_MAX_NUM


36 
HAL_InôAdc
();

38 
U16
 
HAL_GëAdcVÆue
(
U8
 
mu8Id
 );

40 
HAL_SëAdcVÆue
(
U8
 
mu8Id
, 
U16
 
mu16Adc
 );

42 
HAL_Tu∫OnSísögAdc
(
U8
 
mu8Id
 );

44 
HAL_Tu∫OffSísögAdc
(
U8
 
mu8Id
 );

46 
HAL_Pro˚ssAdc
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_eeprom.c

3 
	~"hw.h
"

4 
	~"r_cg_iiˇ.h
"

5 
	~"hÆ_i2c.h
"

6 
	~"hÆ_ì¥om.h
"

7 
	~"utû.h
"

10 
	#EEP_OP_WR
 0x00

	)

11 
	#EEP_OP_RD
 0x01

	)

13 
	#DEFAULT_DELAY
 35

	)

14 
	#DEFAULT_RETRY_COUNT
 3

	)

16 
	s_πc_i¶12026_


19 
U8
 
	mWrôeProc
;

20 
U8
 
	mRódProc
;

22 
U32
 
	mRódFaû
;

23 
U32
 
	mRódOk
;

25 
U32
 
	mWrôeFaû
;

26 
U32
 
	mWrôeOk
;

27 } 
	tRTC_T
;

29 
RTC_T
 
	gπc
;

40 
	$HAL_RTC_Inô
()

42 
	`MEMSET
–(
__FAR
 *)&
πc
, 0, –
RTC_T
 ));

43 
	}
}

50 
	$HAL_RTC_SëWrôeProc
–
U8
 
_¥oc
 )

52 
πc
.
WrôeProc
 = 
_¥oc
;

53 
	}
}

60 
U8
 
	$HAL_RTC_GëWrôeProc
( )

62  
πc
.
WrôeProc
;

63 
	}
}

70 
BOOL_T
 
	$HAL_RTC_WrôeProcCom∂ëe
( )

72 
U16
 
waô
 = 10000;

76 if–
waô
 > 0 )

77 
waô
--;

79  
FALSE
;

81  !–
	`HAL_RTC_GëWrôeProc
(Ë=
EEP_PROC_DONE
 ) );

83  
TRUE
;

84 
	}
}

91 
	$HAL_RTC_SëRódProc
–
U8
 
_¥oc
 )

93 
πc
.
RódProc
 = 
_¥oc
;

94 
	}
}

101 
U8
 
	$HAL_RTC_GëRódProc
( )

103  
πc
.
RódProc
;

104 
	}
}

111 
BOOL_T
 
	$HAL_RTC_RódProcCom∂ëe
( )

113 
U16
 
waô
 = 10000;

117 if–
waô
 > 0 )

118 
waô
--;

120  
FALSE
;

122  !–
	`HAL_RTC_GëRódProc
(Ë=
EEP_PROC_DONE
 ) );

124  
TRUE
;

125 
	}
}

127 
	$Cou¡RódEº‹
()

129 
πc
.
RódFaû
++;

130 
	}
}

132 
	$Cou¡WrôeEº‹
()

134 
πc
.
WrôeFaû
++;

135 
	}
}

137 
	$i2ˇ0_St›C⁄dôi⁄
()

139 
	`R_C⁄fig_IICA0_St›C⁄dôi⁄
();

141 
	}
}

148 
BOOL_T
 
	$ByãWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 
_d©a
 )

150 
U8
 
buf
[ 3 ];

152 
buf
[ 0 ] = 
	`GET_HIGH_BYTE
(
_addr
);

153 
buf
[ 1 ] = 
	`GET_LOW_BYTE
(
_addr
);

154 
buf
[ 2 ] = 
_d©a
;

157 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

158 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , 
buf
 , 3 , 200 ) !
MD_OK
 )

160 
	`Cou¡WrôeEº‹
();

162 
	`i2ˇ0_St›C⁄dôi⁄
();

163  
FALSE
;

166 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

168 
	`Cou¡WrôeEº‹
();

169 
	`i2ˇ0_St›C⁄dôi⁄
();

170  
FALSE
;

173 
	`i2ˇ0_St›C⁄dôi⁄
();

174 
	`Dñay_MS
–
DEFAULT_DELAY
 );

177 
πc
.
WrôeOk
++;

178  
TRUE
;

179 
	}
}

181 
BOOL_T
 
	$HAL_RTC_ByãWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 
_d©a
 )

183 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

189 if–
mu8RëryCou¡
 == 0 )

191  
FALSE
;

193 
mu8RëryCou¡
--;

195 
	`RESET_WDT
();

198  
	`ByãWrôe
–
_dev
, 
_addr
, 
_d©a
 ) !
TRUE
 );

200 
	`RESET_WDT
();

201  
TRUE
;

202 
	}
}

210 
BOOL_T
 
	$PageWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
, U8 
_Àn
 )

212 
U8
 
buf
 [ 
EEP_PAGE_SIZE
 + 2 ];

213 
U8
 
rbuf
[ 
EEP_PAGE_SIZE
 ];

215 
buf
[ 0 ] = 
	`GET_HIGH_BYTE
(
_addr
);

216 
buf
[ 1 ] = 
	`GET_LOW_BYTE
(
_addr
);

218 
	`MEMCPY
–(
__FAR
 *)&
buf
[ 2 ], (c⁄° __FAR *)&
_d©a
[ 0 ], 
_Àn
 );

220 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

223 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , &
buf
[ 0 ] , 
_Àn
 + 2 , 200 ) !
MD_OK
 )

225 
	`Cou¡WrôeEº‹
();

226 
	`i2ˇ0_St›C⁄dôi⁄
();

227  
FALSE
;

230 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

232 
	`Cou¡WrôeEº‹
();

233 
	`i2ˇ0_St›C⁄dôi⁄
();

234  
FALSE
;

237 
	`i2ˇ0_St›C⁄dôi⁄
();

238 
	`Dñay_MS
–
DEFAULT_DELAY
 );

242 if–!
	`HAL_RTC_SeqRód
–
_dev
, 
_addr
, &
rbuf
[ 0 ], 
_Àn
 ) )

244 
	`Cou¡WrôeEº‹
();

245 
	`i2ˇ0_St›C⁄dôi⁄
();

246  
FALSE
;

250 if–
	`memcmp
–&
buf
[ 2 ], &
rbuf
[ 0 ], 
_Àn
 ) != 0 )

252 
	`Cou¡WrôeEº‹
();

253 
	`i2ˇ0_St›C⁄dôi⁄
();

254  
FALSE
;

257 
	`i2ˇ0_St›C⁄dôi⁄
();

258 
	`Dñay_MS
–
DEFAULT_DELAY
 );

260 
πc
.
WrôeOk
++;

261  
TRUE
;

262 
	}
}

264 
BOOL_T
 
	$HAL_RTC_PageWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
, U8 
_Àn
 )

266 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

271 if–
mu8RëryCou¡
 == 0 )

273  
FALSE
;

275 
mu8RëryCou¡
--;

277 
	`RESET_WDT
();

280  
	`PageWrôe
–
_dev
, 
_addr
, 
_d©a
, 
_Àn
 ) !
TRUE
 );

282 
	`RESET_WDT
();

283  
TRUE
;

284 
	}
}

293 
BOOL_T
 
	$CuºítAddrRód
–
U8
 
_dev
, U8 *
_d©a
 )

295 
	`HAL_RTC_SëRódProc
–
EEP_PROC_START
 );

297 if–
	`i2ˇ0_ma°î_ªcv
–
_dev
 | 
EEP_OP_RD
 , 
_d©a
 , 1 , 10 ) !
MD_OK
 )

299 
	`Cou¡RódEº‹
();

300 
	`i2ˇ0_St›C⁄dôi⁄
();

301  
FALSE
;

304 if–!
	`HAL_RTC_RódProcCom∂ëe
() )

306 
	`Cou¡RódEº‹
();

307 
	`i2ˇ0_St›C⁄dôi⁄
();

308  
FALSE
;

311 
	`i2ˇ0_St›C⁄dôi⁄
();

312 
	`Dñay_MS
–
DEFAULT_DELAY
 );

313 
πc
.
RódOk
++;

314  
TRUE
;

315 
	}
}

317 
BOOL_T
 
	$HAL_RTC_CuºítAddrRód
–
U8
 
_dev
, U8 *
_d©a
 )

319 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

325 if–
mu8RëryCou¡
 == 0 )

327  
FALSE
;

329 
mu8RëryCou¡
--;

331 
	`RESET_WDT
();

334  
	`CuºítAddrRód
–
_dev
, 
_d©a
 ) !
TRUE
 );

336 
	`RESET_WDT
();

337  
TRUE
;

338 
	}
}

344 
BOOL_T
 
	$ByãRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
 )

346 
U8
 
buf
[2] = {0};

349 
buf
[0] = 
	`GET_HIGH_BYTE
–
_addr
 );

350 
buf
[1] = 
	`GET_LOW_BYTE
–
_addr
 );

352 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

354 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , 
buf
 , 2 , 200 ) !
MD_OK
 )

356 
	`Cou¡RódEº‹
();

357 
	`i2ˇ0_St›C⁄dôi⁄
();

358  
FALSE
;

361 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

363 
	`Cou¡RódEº‹
();

364 
	`i2ˇ0_St›C⁄dôi⁄
();

365  
FALSE
;

368 
	`HAL_RTC_SëRódProc
–
EEP_PROC_START
 );

371 if–
	`i2ˇ0_ma°î_ªcv
–
_dev
 | 
EEP_OP_RD
 , 
_d©a
 , 1 , 200 ) !
MD_OK
 )

373 
	`Cou¡RódEº‹
();

374 
	`i2ˇ0_St›C⁄dôi⁄
();

375  
FALSE
;

379 if–!
	`HAL_RTC_RódProcCom∂ëe
() )

381 
	`Cou¡RódEº‹
();

382 
	`i2ˇ0_St›C⁄dôi⁄
();

383  
FALSE
;

386 
	`i2ˇ0_St›C⁄dôi⁄
();

387 
	`Dñay_MS
–
DEFAULT_DELAY
 );

388 
πc
.
RódOk
++;

389  
TRUE
;

390 
	}
}

392 
BOOL_T
 
	$HAL_RTC_ByãRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
 )

394 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

399 if–
mu8RëryCou¡
 == 0 )

401  
FALSE
;

403 
mu8RëryCou¡
--;

405 
	`RESET_WDT
();

408  
	`ByãRód
–
_dev
, 
_addr
 , 
_d©a
 ) !
TRUE
 );

410 
	`RESET_WDT
();

411  
TRUE
;

412 
	}
}

419 
BOOL_T
 
	$SeqRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 * 
_d©a
, U8 
_Àn
 )

421 
U8
 
buf
[2] = {0};

424 
buf
[0] = 
	`GET_HIGH_BYTE
–
_addr
 );

425 
buf
[1] = 
	`GET_LOW_BYTE
–
_addr
 );

426 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

429 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , 
buf
 , 2 , 200 ) !
MD_OK
 )

431 
	`Cou¡RódEº‹
();

432 
	`i2ˇ0_St›C⁄dôi⁄
();

433  
FALSE
;

437 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

439 
	`Cou¡RódEº‹
();

440 
	`i2ˇ0_St›C⁄dôi⁄
();

441  
FALSE
;

444 
	`HAL_RTC_SëRódProc
–
EEP_PROC_START
 );

447 if–
	`i2ˇ0_ma°î_ªcv
–
_dev
 | 
EEP_OP_RD
 , 
_d©a
 , 
_Àn
 , 200 ) !
MD_OK
 )

449 
	`Cou¡RódEº‹
();

450 
	`i2ˇ0_St›C⁄dôi⁄
();

451  
FALSE
;

454 if–!
	`HAL_RTC_RódProcCom∂ëe
() )

456 
	`Cou¡RódEº‹
();

457 
	`i2ˇ0_St›C⁄dôi⁄
();

458  
FALSE
;

462 
	`i2ˇ0_St›C⁄dôi⁄
();

463 
	`Dñay_MS
–
DEFAULT_DELAY
 );

464 
πc
.
RódOk
++;

465  
TRUE
;

466 
	}
}

468 
BOOL_T
 
	$HAL_RTC_SeqRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 * 
_d©a
, U8 
_Àn
 )

470 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

475 if–
mu8RëryCou¡
 == 0 )

477  
FALSE
;

479 
mu8RëryCou¡
--;

481 
	`RESET_WDT
();

484  
	`SeqRód
–
_dev
, 
_addr
 , 
_d©a
, 
_Àn
 ) !
TRUE
 );

486 
	`RESET_WDT
();

487  
TRUE
;

488 
	}
}

495 
BOOL_T
 
	$HAL_RTC_EEPROM_AŒEø£
( )

497 
U8
 
buf
[ 
EEP_PAGE_SIZE
 + 2 ];

498 
U16
 
i
;

499 
U16
 
addr
;

501 
	`MEMSET
((
__FAR
 *Ë&
buf
[ 2 ], 0x00, 
EEP_PAGE_SIZE
 );

503  
i
 = 0; i < 
EEP_PAGE_NUM
; i++ )

505 
addr
 = (
i
 * 
EEP_PAGE_SIZE
);

506 
buf
[ 0 ] = 
	`GET_HIGH_BYTE
–
addr
 );

507 
buf
[ 1 ] = 
	`GET_LOW_BYTE
–
addr
 );

509 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

511 if–
	`i2ˇ0_ma°î_£nd
–
DEV_ADDR_EEP
 | 
EEP_OP_WR
 , &
buf
[ 0 ] , 
EEP_PAGE_SIZE
 + 2 , 200 ) !
MD_OK
 )

513 
	`Cou¡WrôeEº‹
();

514 
	`i2ˇ0_St›C⁄dôi⁄
();

515  
FALSE
;

518 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

520 
	`Cou¡WrôeEº‹
();

521 
	`i2ˇ0_St›C⁄dôi⁄
();

522  
FALSE
;

525 
	`i2ˇ0_St›C⁄dôi⁄
();

526 
	`Dñay_MS
–
DEFAULT_DELAY
 );

529 
	`i2ˇ0_St›C⁄dôi⁄
();

530 
	`Dñay_MS
–
DEFAULT_DELAY
 );

531 
πc
.
WrôeOk
++;

532  
TRUE
;

533 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_eeprom.h

3 #i‚de‡
__HAL_EEPROM_H__


4 
	#__HAL_EEPROM_H__


	)

7 
	~"¥j_ty≥.h
"

10 
	#DEV_ADDR_EEP
 0xAE

	)

11 
	#DEV_ADDR_RTC
 0xDE

	)

13 
	#EEP_MAX_SIZE
 512

	)

14 
	#EEP_PAGE_SIZE
 16

	)

15 
	#EEP_PAGE_NUM
 32

	)

16 
	#RTC_PAGE_SIZE
 8

	)

19 
	#EEP_PROC_START
 0

	)

20 
	#EEP_PROC_DONE
 1

	)

24 
HAL_RTC_Inô
();

31 
HAL_RTC_SëWrôeProc
–
U8
 
_¥oc
 );

38 
U8
 
HAL_RTC_GëWrôeProc
( );

45 
HAL_RTC_SëRódProc
–
U8
 
_¥oc
 );

52 
U8
 
HAL_RTC_GëRódProc
( );

59 
BOOL_T
 
HAL_RTC_ByãWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 
_d©a
 );

66 
BOOL_T
 
HAL_RTC_PageWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
, U8 
_Àn
 );

73 
BOOL_T
 
HAL_RTC_CuºítAddrRód
–
U8
 
_dev
, U8 *
_d©a
 );

80 
BOOL_T
 
HAL_RTC_ByãRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
 );

87 
BOOL_T
 
HAL_RTC_SeqRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 * 
_d©a
, U8 
_Àn
 );

94 
BOOL_T
 
HAL_RTC_EEPROM_AŒEø£
( );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_fan_motor.c

1 
	~"hw.h
"

2 
	~"hÆ_Án_mŸ‹.h
"

6 
	$HAL_Tu∫OnF™MŸ‹
()

8 
	`TURN_ON_FAN_MOTOR_1
();

9 
	}
}

11 
	$HAL_Tu∫OffF™MŸ‹
()

13 
	`TURN_OFF_FAN_MOTOR_1
();

14 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_fan_motor.h

1 #i‚de‡
__HAL_FAN_MOTOR_H__


2 
	#__HAL_FAN_MOTOR_H__


	)

5 
HAL_Tu∫OnF™MŸ‹
();

6 
HAL_Tu∫OffF™MŸ‹
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_i2c.c

5 
	#TEST_EEP_NO_STOP
 1

	)

7 
	~"hÆ_i2c.h
"

8 
	~"r_cg_iiˇ.h
"

9 
	~"hÆ_ì¥om.h
"

11 #¥agm®
öãºu±
 
r_i2ˇ0_öãºu±
(
ve˘
=
INTIICA0
)

17 vﬁ©ûê
uöt8_t
 
	gi2ˇ0_m°©us
 = 0;

18 vﬁ©ûê
uöt8_t
 *
	gi2ˇ0_rx_pbuf
 = 0;

19 vﬁ©ûê
uöt16_t
 
	gi2ˇ0_rx_Àn
 = 0;

20 vﬁ©ûê
uöt16_t
 
	gi2ˇ0_rx_˙t
 = 0;

22 vﬁ©ûê
uöt8_t
 *
	gi2ˇ0_tx_pbuf
 = 0;

23 vﬁ©ûê
uöt16_t
 
	gi2ˇ0_tx_˙t
 = 0;

26 vﬁ©ûê
uöt8_t
 
	gi2ˇ1_m°©us
 = 0;

27 vﬁ©ûê
uöt8_t
 *
	gi2ˇ1_rx_pbuf
 = 0;

28 vﬁ©ûê
uöt16_t
 
	gi2ˇ1_rx_Àn
 = 0;

29 vﬁ©ûê
uöt16_t
 
	gi2ˇ1_rx_˙t
 = 0;

31 vﬁ©ûê
uöt8_t
 *
	gi2ˇ1_tx_pbuf
 = 0;

32 vﬁ©ûê
uöt16_t
 
	gi2ˇ1_tx_˙t
 = 0;

41 
MD_STATUS
 
	$i2ˇ0_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 )

43 
MD_STATUS
 
°©us
 = 
MD_OK
;

45 
IICAMK0
 = 1U;

48 if–1U =
IICBSY0
 )

50 
IICAMK0
 = 0U;

51 
°©us
 = 
MD_ERROR1
;

54 if––1U =
SPT0
 ) || ( 1U =
STT0
 ) )

56 
IICAMK0
 = 0U;

57 
°©us
 = 
MD_ERROR2
;

61 
STT0
 = 1U;

62 
IICAMK0
 = 0U;

65  
_waô
-- )

70 if–0U =
STD0
 )

72 
°©us
 = 
MD_ERROR3
;

76 
i2ˇ0_tx_˙t
 = 
_tx_num
;

77 
i2ˇ0_tx_pbuf
 = 
_tx_buf
;

78 
i2ˇ0_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

79 
_addr
 &(
uöt8_t
)~0x01U;

80 
IICA0
 = 
_addr
;

83  ( 
°©us
 );

84 
	}
}

91 
MD_STATUS
 
	$i2ˇ0_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 )

93 
MD_STATUS
 
°©us
 = 
MD_OK
;

96 #i‡!
TEST_EEP_NO_STOP


97 
IICAMK0
 = 1U;

100 if–1U =
IICBSY0
 )

102 
IICAMK0
 = 0U;

103 
°©us
 = 
MD_ERROR1
;

106 if––1U =
SPT0
 ) || ( 1U =
STT0
 ) )

108 
IICAMK0
 = 0U;

109 
°©us
 = 
MD_ERROR2
;

114 
STT0
 = 1U;

115 
IICAMK0
 = 0U;

118  
_waô
-- )

123 if–0U =
STD0
 )

125 
°©us
 = 
MD_ERROR3
;

129 
i2ˇ0_rx_˙t
 = 0U;

130 
i2ˇ0_rx_Àn
 = 
_rx_num
;

131 
i2ˇ0_rx_pbuf
 = 
_rx_buf
;

132 
i2ˇ0_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

133 
_addr
 |= 0x01U;

134 
IICA0
 = 
_addr
;

137  ( 
°©us
 );

138 
	}
}

141 
i2ˇ0_ˇŒback_ma°î_îr‹
(
MD_STATUS
 
Êag
);

142 
i2ˇ0_ˇŒback_ma°î_ª˚ivìnd
();

143 
i2ˇ0_ˇŒback_ma°î_£ndíd
();

150 
	$i2ˇ0_ma°î_h™dÀr
( )

153 if––0U =
IICBSY0
 ) && ( 
i2ˇ0_tx_˙t
 != 0U ) )

155 
	`i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_SPT
 );

160 if––
i2ˇ0_m°©us
 & 
_80_IICA_ADDRESS_COMPLETE
 ) == 0U )

162 if–1U =
ACKD0
 )

164 
i2ˇ0_m°©us
 |
_80_IICA_ADDRESS_COMPLETE
;

166 if–1U =
TRC0
 )

168 
WTIM0
 = 1U;

170 if–
i2ˇ0_tx_˙t
 > 0U )

172 
IICA0
 = *
i2ˇ0_tx_pbuf
;

173 
i2ˇ0_tx_pbuf
++;

174 
i2ˇ0_tx_˙t
--;

178 
	`i2ˇ0_ˇŒback_ma°î_£ndíd
();

183 
ACKE0
 = 1U;

184 
WTIM0
 = 0U;

185 
WREL0
 = 1U;

190 
	`i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

196 if–1U =
TRC0
 )

198 if––0U =
ACKD0
 ) && ( 
i2ˇ0_tx_˙t
 != 0U ) )

200 
	`i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

205 if–
i2ˇ0_tx_˙t
 > 0U )

207 
IICA0
 = *
i2ˇ0_tx_pbuf
;

208 
i2ˇ0_tx_pbuf
++;

209 
i2ˇ0_tx_˙t
--;

213 
	`i2ˇ0_ˇŒback_ma°î_£ndíd
();

220 if–
i2ˇ0_rx_˙t
 < 
i2ˇ0_rx_Àn
 )

222 *
i2ˇ0_rx_pbuf
 = 
IICA0
;

223 
i2ˇ0_rx_pbuf
++;

224 
i2ˇ0_rx_˙t
++;

226 if–
i2ˇ0_rx_˙t
 =
i2ˇ0_rx_Àn
 )

228 
ACKE0
 = 0U;

229 
WREL0
 = 1U;

230 
WTIM0
 = 1U;

234 
WREL0
 = 1U;

239 
	`i2ˇ0_ˇŒback_ma°î_ª˚ivìnd
();

244 
	}
}

251 
	$i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_STATUS
 
Êag
 )

256 
	}
}

263 
	$i2ˇ0_ˇŒback_ma°î_ª˚ivìnd
( )

265 #i‡!
TEST_EEP_NO_STOP


266 
SPT0
 = 1U;

269 
	`HAL_RTC_SëRódProc
–
EEP_PROC_DONE
 );

270 
	}
}

277 
	$i2ˇ0_ˇŒback_ma°î_£ndíd
( )

279 #i‡!
TEST_EEP_NO_STOP


280 
SPT0
 = 1U;

283 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_DONE
 );

284 
	}
}

287 
__√¨
 
	$r_i2ˇ0_öãºu±
()

289 i‡((
IICS0
 & 
_80_IICA_STATUS_MASTER
) == 0x80U)

291 
	`i2ˇ0_ma°î_h™dÀr
();

293 
	}
}

295 
	$R_C⁄fig_IICA0_Cª©e_U£rInô
()

297 
	}
}

306 
MD_STATUS
 
	$i2ˇ1_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 )

308 
MD_STATUS
 
°©us
 = 
MD_OK
;

311 
IICAMK1
 = 1U;

314 if–1U =
IICBSY1
 )

316 
IICAMK1
 = 0U;

317 
°©us
 = 
MD_ERROR1
;

320 if––1U =
SPT1
 ) || ( 1U =
STT1
 ) )

322 
IICAMK1
 = 0U;

323 
°©us
 = 
MD_ERROR2
;

327 
STT1
 = 1U;

328 
IICAMK1
 = 0U;

331  
_waô
-- )

336 if–0U =
STD1
 )

338 
°©us
 = 
MD_ERROR3
;

342 
i2ˇ1_tx_˙t
 = 
_tx_num
;

343 
i2ˇ1_tx_pbuf
 = 
_tx_buf
;

344 
i2ˇ1_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

345 
_addr
 &(
uöt8_t
)~0x01U;

346 
IICA1
 = 
_addr
;

349  ( 
°©us
 );

350 
	}
}

357 
MD_STATUS
 
	$i2ˇ1_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 )

359 
MD_STATUS
 
°©us
 = 
MD_OK
;

361 
IICAMK1
 = 1U;

364 if–1U =
IICBSY1
 )

366 
IICAMK1
 = 0U;

367 
°©us
 = 
MD_ERROR1
;

370 if––1U =
SPT1
 ) || ( 1U =
STT1
 ) )

372 
IICAMK1
 = 0U;

373 
°©us
 = 
MD_ERROR2
;

377 
STT1
 = 1U;

378 
IICAMK1
 = 0U;

381  
_waô
-- )

386 if–0U =
STD1
 )

388 
°©us
 = 
MD_ERROR3
;

392 
i2ˇ1_rx_˙t
 = 0U;

393 
i2ˇ1_rx_Àn
 = 
_rx_num
;

394 
i2ˇ1_rx_pbuf
 = 
_rx_buf
;

395 
i2ˇ1_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

396 
_addr
 |= 0x01U;

397 
IICA1
 = 
_addr
;

400  ( 
°©us
 );

401 
	}
}

404 
i2ˇ1_ˇŒback_ma°î_îr‹
(
MD_STATUS
 
Êag
);

405 
i2ˇ1_ˇŒback_ma°î_ª˚ivìnd
();

406 
i2ˇ1_ˇŒback_ma°î_£ndíd
();

413 
	$i2ˇ1_ma°î_h™dÀr
( )

416 if––0U =
IICBSY1
 ) && ( 
i2ˇ1_tx_˙t
 != 0U ) )

418 
	`i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_SPT
 );

423 if––
i2ˇ1_m°©us
 & 
_80_IICA_ADDRESS_COMPLETE
 ) == 0U )

425 if–1U =
ACKD1
 )

427 
i2ˇ1_m°©us
 |
_80_IICA_ADDRESS_COMPLETE
;

429 if–1U =
TRC1
 )

431 
WTIM1
 = 1U;

433 if–
i2ˇ1_tx_˙t
 > 0U )

435 
IICA1
 = *
i2ˇ1_tx_pbuf
;

436 
i2ˇ1_tx_pbuf
++;

437 
i2ˇ1_tx_˙t
--;

441 
	`i2ˇ1_ˇŒback_ma°î_£ndíd
();

446 
ACKE1
 = 1U;

447 
WTIM1
 = 0U;

448 
WREL1
 = 1U;

453 
	`i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

459 if–1U =
TRC1
 )

461 if––0U =
ACKD1
 ) && ( 
i2ˇ1_tx_˙t
 != 0U ) )

463 
	`i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

467 if–
i2ˇ1_tx_˙t
 > 0U )

469 
IICA1
 = *
i2ˇ1_tx_pbuf
;

470 
i2ˇ1_tx_pbuf
++;

471 
i2ˇ1_tx_˙t
--;

475 
	`i2ˇ1_ˇŒback_ma°î_£ndíd
();

482 if–
i2ˇ1_rx_˙t
 < 
i2ˇ1_rx_Àn
 )

484 *
i2ˇ1_rx_pbuf
 = 
IICA1
;

485 
i2ˇ1_rx_pbuf
++;

486 
i2ˇ1_rx_˙t
++;

488 if–
i2ˇ1_rx_˙t
 =
i2ˇ1_rx_Àn
 )

490 
ACKE1
 = 0U;

491 
WREL1
 = 1U;

492 
WTIM1
 = 1U;

496 
WREL1
 = 1U;

501 
	`i2ˇ1_ˇŒback_ma°î_ª˚ivìnd
();

506 
	}
}

513 
	$i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_STATUS
 
Êag
 )

518 
	}
}

525 
	$i2ˇ1_ˇŒback_ma°î_ª˚ivìnd
( )

527 
SPT1
 = 1U;

531 
	}
}

538 
	$i2ˇ1_ˇŒback_ma°î_£ndíd
( )

540 
SPT1
 = 1U;

544 
	}
}

547 
	$r_C⁄fig_IICA1_öãºu±
()

549 i‡((
IICS1
 & 
_80_IICA_STATUS_MASTER
) == 0x80U)

551 
	`i2ˇ1_ma°î_h™dÀr
();

553 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_i2c.h

2 #i‚de‡
__HAL_I2C_H__


3 
	#__HAL_I2C_H__


	)

6 
	~"r_cg_ma¸odrivî.h
"

7 
	~"¥j_ty≥.h
"

20 
MD_STATUS
 
i2ˇ0_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 );

27 
MD_STATUS
 
i2ˇ0_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 );

35 
MD_STATUS
 
i2ˇ1_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 );

42 
MD_STATUS
 
i2ˇ1_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_input.c

1 
	~"hw.h
"

2 
	~"hÆ_öput.h
"

6 
U8
 
HAL_GëFûãr
();

7 
U8
 
HAL_GëT™kO≥n
();

8 
U8
 
HAL_GëT™kO≥n_1
();

9 
U8
 
HAL_GëT™kO≥n_2
();

11 
U8
 
HAL_GëLevñDøöHigh
();

12 
U8
 
HAL_GëLevñDøöLow
();

15 
	$U8
 (*
	tA˘i⁄_T
)();

16 
	s_öput_c⁄fig_


18 
U8
 
¥evVÆ
;

19 
U8
 
curVÆ
;

21 
U16
 
dñay
;

22 
U16
 
£tupDñay
;

24 
A˘i⁄_T
 
pfGëSètus
;

25 } 
	tI≈utC⁄fig_T
;

28 
I≈utC⁄fig_T
 
öputLi°
[ 
IN_MAX_NUM
 ] =

30 { 0, 0, 
INPUT_DELAY_1SEC
, INPUT_DELAY_1SEC, 
HAL_GëFûãr
 },

32 { 0, 0, 
INPUT_DELAY_1SEC
, INPUT_DELAY_1SEC, 
HAL_GëT™kO≥n
 },

33 { 0, 0, 
INPUT_DELAY_100MS
, INPUT_DELAY_100MS, 
HAL_GëT™kO≥n
 },

35 { 0, 0, 
INPUT_DELAY_100MS
, 
INPUT_DELAY_1SEC
, 
HAL_GëT™kO≥n_1
 },

36 { 0, 0, 
INPUT_DELAY_100MS
, INPUT_DELAY_100MS, 
HAL_GëT™kO≥n_2
 },

38 { 0, 0, 
INPUT_DELAY_1SEC
, INPUT_DELAY_1SEC, 
HAL_GëHóãrPBA
 },

40 { 0, 0, 
INPUT_DELAY_1SEC
, INPUT_DELAY_1SEC, 
HAL_GëLevñDøöHigh
 },

41 { 0, 0, 
INPUT_DELAY_1SEC
, INPUT_DELAY_1SEC, 
HAL_GëLevñDøöLow
 }

42 
	}
};

44 
	$InôI≈utC⁄fDëe˘Time
()

46 
	`SëI≈utC⁄fDëe˘Time
–
IN_FILTER
 , 
INPUT_DELAY_1SEC
 );

47 
	`SëI≈utC⁄fDëe˘Time
–
IN_TANK_OPEN
, 
INPUT_DELAY_1SEC
 );

48 
	`SëI≈utC⁄fDëe˘Time
–
IN_TANK_OPEN_UV
, 
INPUT_DELAY_100MS
 );

49 
	`SëI≈utC⁄fDëe˘Time
–
IN_HEATER
, 
INPUT_DELAY_1SEC
 );

50 
	}
}

52 
	$SëI≈utC⁄fDëe˘Time
(
U8
 
mu8Id
, U8 
mu16Dëe˘Time
)

54 
öputLi°
[ 
mu8Id
 ].
£tupDñay
 = 
mu16Dëe˘Time
;

55 
	}
}

58 
U8
 
	$HAL_GëFûãr
()

60  (
U8
)
	`GET_STATUS_FILTER_DETECT
();

61 
	}
}

64 
U8
 
	$HAL_GëT™kO≥n
()

67 #i‡!
CONFIG_TANK_REED


68 if–
	`GET_REED_SW_TANK_OPEN
(Ë=
HIGH
 ||

69 
	`GET_REED_SW_TANK_OPEN_2
(Ë=
HIGH
 )

71  
HIGH
;

73  
LOW
;

75 if–
	`GET_REED_SW_TANK_OPEN
(Ë=
HIGH
 )

77  
HIGH
;

79  
LOW
;

81 
	}
}

83 
U8
 
	$HAL_GëT™kO≥n_1
()

85  (
U8
)
	`GET_REED_SW_TANK_OPEN
();

86 
	}
}

88 
U8
 
	$HAL_GëT™kO≥n_2
()

90  (
U8
)
	`GET_REED_SW_TANK_OPEN_2
();

91 
	}
}

93 
U8
 
	$HAL_GëHóãrPBA
()

95  (
U8
)
	`GET_STATUS_HEATER_INPUT
();

96 
	}
}

98 
U8
 
	$HAL_GëLevñDøöHigh
()

100  (
U8
)
	`GET_DRAIN_TANK_HIGH
();

101 
	}
}

103 
U8
 
	$HAL_GëLevñDøöLow
()

105  (
U8
)
	`GET_DRAIN_TANK_LOW
();

106 
	}
}

109 
U32
 
	$HAL_GëI≈ut
()

111 
U32
 
mu32VÆ
;

113 
mu32VÆ
 = 0UL;

115 if–
	`HAL_GëI≈utVÆue
–
IN_FILTER
 ) != 0 )

117 
mu32VÆ
 |
MK_INPUT_FILTER
;

120 if–
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN
 ) != 0 )

122 
mu32VÆ
 |
MK_INPUT_TANK_OPEN
;

125 if–
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN_UV
 ) != 0 )

127 
mu32VÆ
 |
MK_INPUT_TANK_OPEN_UV
;

130 if–
	`HAL_GëI≈utVÆue
–
IN_HEATER
 ) != 0 )

132 
mu32VÆ
 |
MK_INPUT_HEATER_PBA
;

135  
mu32VÆ
;

136 
	}
}

139 
U8
 
	$HAL_GëI≈utVÆue
(
U8
 
mu8Id
)

141 if–
mu8Id
 >
IN_MAX_NUM
 )

146  
öputLi°
[ 
mu8Id
 ].
curVÆ
;

147 
	}
}

150 
	$HAL_Pro˚ssI≈ut
()

152 
U8
 
i
;

153 
A˘i⁄_T
 
pGë
 = 
NULL
;

154 
U8
 
mu8VÆ
;

157  
i
 = 0; i < 
IN_MAX_NUM
 ; i++ )

159 
pGë
 = 
öputLi°
[ 
i
 ].
pfGëSètus
;

160 if–
pGë
 !
NULL
 )

163 
mu8VÆ
 = 
	`pGë
();

164 if–
öputLi°
[ 
i
 ].
¥evVÆ
 !
mu8VÆ
 )

167 
öputLi°
[ 
i
 ].
dñay
 = i≈utLi°[ i ].
£tupDñay
;

168 
öputLi°
[ 
i
 ].
¥evVÆ
 = 
mu8VÆ
;

172 
öputLi°
[ 
i
 ].
dñay
--;

173 if–
öputLi°
[ 
i
 ].
dñay
 == 0 )

176 
öputLi°
[ 
i
 ].
curVÆ
 = 
mu8VÆ
;

181 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_input.h

1 #i‚de‡
__HAL_INPUT_H__


2 
	#__HAL_INPUT_H__


	)

8 
	mIN_FILTER
,

10 
	mIN_TANK_OPEN
,

11 
	mIN_TANK_OPEN_UV
,

13 
	mIN_TANK_OPEN_1
,

14 
	mIN_TANK_OPEN_2
,

16 
	mIN_HEATER
,

18 
	mIN_LEVEL_DRAIN_HIGH
,

19 
	mIN_LEVEL_DRAIN_LOW
,

21 
	mIN_MAX_NUM


24 
	#INPUT_DELAY_30MS
 3U

	)

25 
	#INPUT_DELAY_100MS
 10U

	)

26 
	#INPUT_DELAY_300MS
 30U

	)

27 
	#INPUT_DELAY_1SEC
 100U

	)

29 
InôI≈utC⁄fDëe˘Time
();

31 
SëI≈utC⁄fDëe˘Time
(
U8
 
mu8Id
, U8 
mu16Dëe˘Time
);

34 
	#MK_INPUT_FILTER
 0x00000001UL

	)

35 
	#MK_INPUT_TANK_OPEN
 0x00000002UL

	)

36 
	#MK_INPUT_TANK_OPEN_UV
 0x00000004UL

	)

37 
	#MK_INPUT_HEATER_PBA
 0x00000008UL

	)

38 
U32
 
HAL_GëI≈ut
();

41 
U8
 
HAL_GëHóãrPBA
();

43 
U8
 
HAL_GëI≈utVÆue
(U8 
mu8Id
 );

45 
HAL_Pro˚ssI≈ut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_key.c

1 
	~"hw.h
"

2 
	~"hÆ_key.h
"

5 
	#HAL_KEY_PUSHED
 
LOW


	)

6 
	#HAL_LEVER_PUSHED
 
LOW


	)

9 
	s_hÆ_key_


11 
U32
 
	mKey
;

12 
U8
 
	mW©îOut
;

13 
U8
 
	mI˚Out
;

14 } 
	tTKeyVÆ
;

16 
TKeyVÆ
 
	gHÆKey
;

19 
	$HAL_InôKey
()

21 
HÆKey
.
Key
 = 0UL;

22 
HÆKey
.
W©îOut
 = 0U;

23 
HÆKey
.
I˚Out
 = 0U;

24 
	}
}

26 
	$HAL_SëKeyVÆ
(
U32
 
mu32VÆ
)

28 
HÆKey
.
Key
 = 
mu32VÆ
;

29 
	}
}

31 
U32
 
	$HAL_GëKeyVÆ
()

33  
HÆKey
.
Key
;

34 
	}
}

37 
	$HAL_SëLevîI˚
(
U8
 
mu8VÆ
)

39 
HÆKey
.
I˚Out
 = 
mu8VÆ
;

40 
	}
}

42 
U8
 
	$HAL_GëLevîI˚
()

44  
HÆKey
.
I˚Out
;

45 
	}
}

48 
	$HAL_SëLevîW©î
(
U8
 
mu8VÆ
)

50 
HÆKey
.
W©îOut
 = 
mu8VÆ
;

51 
	}
}

54 
U8
 
	$HAL_GëLevîW©î
()

56  
HÆKey
.
W©îOut
;

57 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_key.h

1 #i‚de‡
__HAL_KEY_H__


2 
	#__HAL_KEY_H__


	)

4 
	#HAL_KEY_NONE
 0x00000000UL

	)

5 
	#HAL_KEY_1
 0x00000001UL

	)

6 
	#HAL_KEY_2
 0x00000002UL

	)

7 
	#HAL_KEY_3
 0x00000004UL

	)

8 
	#HAL_KEY_4
 0x00000008UL

	)

10 
	#HAL_KEY_5
 0x00000010UL

	)

11 
	#HAL_KEY_6
 0x00000020UL

	)

12 
	#HAL_KEY_7
 0x00000040UL

	)

13 
	#HAL_KEY_8
 0x00000080UL

	)

15 
	#HAL_KEY_9
 0x00000100UL

	)

16 
	#HAL_KEY_10
 0x00000200UL

17 
	#HAL_KEY_11
 0x00000400UL

18 
	#HAL_KEY_12
 0x00000800UL

19 

	)

20 
	#HAL_KEY_13
 0x00001000UL

	)

21 
	#HAL_KEY_14
 0x00002000UL

	)

22 
	#HAL_KEY_15
 0x00004000UL

	)

23 
	#HAL_KEY_16
 0x00008000UL

	)

25 
	#HAL_KEY_17
 0x00010000UL

	)

26 
	#HAL_KEY_18
 0x00020000UL

	)

27 
	#HAL_KEY_19
 0x00040000UL

	)

28 
	#HAL_KEY_20
 0x00080000UL

	)

29 
	#HAL_KEY_ALL
 0x000FFFFFUL

	)

32 
HAL_InôKey
();

34 
HAL_SëKeyVÆ
(
U32
 
mu32VÆ
);

35 
U32
 
HAL_GëKeyVÆ
();

37 
HAL_SëLevîI˚
(
U8
 
mu8VÆ
);

38 
U8
 
HAL_GëLevîI˚
();

40 
HAL_SëLevîW©î
(
U8
 
mu8VÆ
);

41 
U8
 
HAL_GëLevîW©î
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_led.c

1 
	~"hw.h
"

2 
	~"hÆ_Àd.h
"

3 
	~"‰⁄t.h
"

6 
	#ALL_ON
 0xFFU

	)

7 
	#ALL_OFF
 0x00U

	)

10 
	s_Àds_


12 
U8
 
	mLeds
[ 
MAX_LED_BUF
 ];

13 
U8
 
	mDuty
;

14 } 
	tLed_T
;

16 
Led_T
 
	gOnOff
;

17 
Led_T
 
	gDimmög
;

19 
	$HAL_InôLed
()

21 
	`MEMSET
((
__FAR
 *)&
OnOff
.
Leds
[0], 
OFF
, 
MAX_LED_BUF
 );

22 
	`MEMSET
((
__FAR
 *)&
Dimmög
.
Leds
[0], 
OFF
, 
MAX_LED_BUF
 );

24 
OnOff
.
Duty
 = 
DEFAULT_ONOFF_DUTY
;

25 
Dimmög
.
Duty
 = 
DEFAULT_DIMMING_DUTY
;

26 
	}
}

29 
	$HAL_Tu∫OnOffLEDAŒ
(
U8
 
mu8OnOff
)

31 if–
mu8OnOff
 =
ON
 )

33 
	`MEMSET
((
__FAR
 *)&
OnOff
.
Leds
[0], 
ALL_ON
, 
MAX_LED_BUF
 );

37 
	`MEMSET
((
__FAR
 *)&
OnOff
.
Leds
[0], 
ALL_OFF
, 
MAX_LED_BUF
 );

39 
	}
}

42 
U8
 
	$IsVÆidCp
(
LedId_T
 
Àd
)

44 if–
Àd
 =
HOT_COFFE


45 || 
Àd
 =
HOT_TEA


46 || 
Àd
 =
HOT_LOCK


47 || 
Àd
 =
ICON_HOT_LOCK


48 || 
Àd
 =
HOT_WATER


49 || 
Àd
 =
ICE_MAKE


52  
FALSE
;

55  
TRUE
;

56 
	}
}

59 
LedId_T
 
	$MaskChp2Cp
(
LedId_T
 
Àd
)

61 if–
Àd
 =
CP_ICE_TURBO
 )

63 
Àd
 = 
HOT_WATER
;

65 if–
Àd
 =
CP_ICE_SIZE
 )

67 
Àd
 = 
ICE_MODE
;

69 if–
Àd
 =
CP_ICE_MAKE
 )

71 
Àd
 = 
HOT_LOCK
;

74  
Àd
;

75 
	}
}

78 
	$HAL_Tu∫OnOffLED
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
)

80 
U8
 
mu8Byã
;

81 
U8
 
mu8Bô
;

84 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

86 if–
	`IsVÆidCp
–
Àd
 ) =
FALSE
 )

91 
Àd
 = 
	`MaskChp2Cp
(Üed );

94 
mu8Byã
 = (
U8
)(
Àd
 / 8);

95 
mu8Bô
 = (
U8
)(
Àd
 % 8);

96 if–
mu8OnOff
 =
ON
 )

98 
OnOff
.
Leds
[ 
mu8Byã
 ] |((
U8
)1U<<
mu8Bô
);

102 
OnOff
.
Leds
[ 
mu8Byã
 ] &~((
U8
)1U<<
mu8Bô
);

104 
	}
}

106 
	$HAL_Tu∫OnOffLEDEx
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
)

108 
U8
 
mu8Byã
;

109 
U8
 
mu8Bô
;

111 
mu8Byã
 = (
U8
)(
Àd
 / 8);

112 
mu8Bô
 = (
U8
)(
Àd
 % 8);

113 if–
mu8OnOff
 =
ON
 )

115 
OnOff
.
Leds
[ 
mu8Byã
 ] |((
U8
)1U<<
mu8Bô
);

119 
OnOff
.
Leds
[ 
mu8Byã
 ] &~((
U8
)1U<<
mu8Bô
);

122 
	}
}

124 
	$HAL_GëLedOnOffSètus
(
U8
 *
pBuf
)

126 
	`MEMCPY
–(
__FAR
 *)
pBuf
, (c⁄° __FAR *)&
OnOff
.
Leds
[0], 
MAX_LED_BUF
 );

127 
	}
}

129 
	$HAL_SëLedDuty
(
U8
 
mu8Duty
)

131 
OnOff
.
Duty
 = 
mu8Duty
;

132 if–
OnOff
.
Duty
 > 100 )

134 
OnOff
.
Duty
 = 100;

136 
	}
}

138 
U8
 
	$HAL_GëLedDuty
()

140  
OnOff
.
Duty
;

141 
	}
}

145 
	$HAL_DimmögLedAŒ
(
U8
 
mu8OnOff
)

147 if–
mu8OnOff
 =
ON
 )

149 
	`MEMSET
((
__FAR
 *)&
Dimmög
.
Leds
[0], 
ALL_ON
, 
MAX_LED_BUF
 );

153 
	`MEMSET
((
__FAR
 *)&
Dimmög
.
Leds
[0], 
ALL_OFF
, 
MAX_LED_BUF
 );

155 
	}
}

157 
	$HAL_DimmögLed
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
)

159 
U8
 
mu8Byã
;

160 
U8
 
mu8Bô
;

163 if–
	`GëSy°em
(Ë=
SYSTEM_CP
 )

165 if–
	`IsVÆidCp
–
Àd
 ) =
FALSE
 )

170 
Àd
 = 
	`MaskChp2Cp
(Üed );

173 
mu8Byã
 = (
U8
)(
Àd
 / 8);

174 
mu8Bô
 = (
U8
)(
Àd
 % 8);

175 if–
mu8OnOff
 =
ON
 )

177 
Dimmög
.
Leds
[ 
mu8Byã
 ] |((
U8
)1U<<
mu8Bô
);

181 
Dimmög
.
Leds
[ 
mu8Byã
 ] &~((
U8
)1U<<
mu8Bô
);

183 
	}
}

185 
	$HAL_GëLedDimmögSètus
(
U8
 *
pBuf
)

187 
	`MEMCPY
–(
__FAR
 *)
pBuf
, (c⁄° __FAR *)&
Dimmög
.
Leds
[0], 
MAX_LED_BUF
 );

188 
	}
}

190 
	$HAL_SëLedDimmögDuty
(
U8
 
mu8Duty
)

192 
Dimmög
.
Duty
 = 
mu8Duty
;

193 if–
mu8Duty
 > 100 )

195 
Dimmög
.
Duty
 = 100;

197 
	}
}

199 
U8
 
	$HAL_GëLedDimmögDuty
()

201  
Dimmög
.
Duty
;

202 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_led.h

1 #i‚de‡
__HAL_LED_H__


2 
	#__HAL_LED_H__


	)

5 
	#CONFIG_LED_LPP
 1

	)

7 
	#MAX_LED_BUF
 12

	)

29 
	#DEFAULT_ONOFF_DUTY
 90U

	)

30 
	#DEFAULT_DIMMING_DUTY
 30U

	)

31 
	#DEFAULT_ONOFF_DUTY_DARK
 50U

	)

32 
	#DEFAULT_DIMMING_DUTY_DARK
 20U

	)

35 
	mSEG_1_G
,

36 
	mSEG_1_F
,

37 
	mSEG_1_E
,

38 
	mSEG_1_D
,

39 
	mSEG_1_C
,

40 
	mSEG_1_B
,

41 
	mSEG_1_A
,

43 
	mSEG_2_G
,

44 
	mSEG_2_F
,

45 
	mSEG_2_E
,

46 
	mSEG_2_D
,

47 
	mSEG_2_C
,

48 
	mSEG_2_B
,

49 
	mSEG_2_A
,

51 
	mSEG_3_G
,

52 
	mSEG_3_F
,

53 
	mSEG_3_E
,

54 
	mSEG_3_D
,

55 
	mSEG_3_C
,

56 
	mSEG_3_B
,

57 
	mSEG_3_A
,

59 
	mICON_FLUSHING
,

60 
	mICON_DRAIN
,

61 
	mSETTING
,

62 
	mICE_MAKE
,

63 
	mICE_OUT_2
,

64 
	mICE_OUT_1
,

65 
	mICON_ICE_FULL
,

67 
	mICE_LOCK
,

68 
	mICON_ICE_LOCK
,

69 
	mICE_MODE
,

70 
	mICE_SIZE_SMALL
,

71 
	mICE_SIZE_BAR
,

72 
	mICE_SIZE_LARGE
,

73 
	mICE_TURBO
,

76 #i‡!
CONFIG_LED_LPP


77 
	mHOT_COFFE
,

78 
	mHOT_TEA
,

79 
	mHOT_MILK
,

81 
	mHOT_MILK
,

82 
	mHOT_TEA
,

83 
	mHOT_COFFE
,

85 
	mHOT_WATER
,

86 
	mICON_HOT_LOCK
,

87 
	mHOT_LOCK
,

88 
	mCP_ICE_TURBO_2
,

91 
	mCOLON
,

92 
	mSEG_0_C
,

93 
	mSEG_0_B
,

94 
	mICON_PM
,

95 
	mICON_UV_SMART_CARE_TM
,

96 
	mICON_AM
,

97 
	mICON_FILTER
,

100 
	mICON_CLOUD
,

101 
	mICON_SUN
,

102 
	mICON_WIFI_BLE
,

103 
	mICON_WIFI
,

104 
	mICON_PERCENT
,

105 
	mICON_CELSIUS
,

106 
	mICON_SAVING
,

109 
	mICON_UV_ICE_TANK
,

110 
	mICON_UV_ICE_TRAY
,

111 
	mICON_UV_ICE
,

112 
	mICON_UV_WATER
,

113 
	mICON_UV_SMART_CARE
,

114 
	mICON_RAIN
,

115 
	mICON_ML
,

118 
	mAMOUNT_500
,

119 
	mAMOUNT_250
,

120 
	mAMOUNT_120
,

121 
	mAMOUNT
,

122 
	mSAVING
,

123 
	mWATER_OUT_1
,

124 
	mWATER_OUT_2
,

127 
	mAMOUNT_INFINITY
,

128 
	mCOLD_TEMP_WHITE
,

129 
	mCOLD_TEMP_BLUE
,

130 
	mCOLD_WATER
,

131 
	mCOLD_MAKE
,

132 
	mROOM_WATER
,

133 
	mLOCK_ALL
,

136 
	mWELCOM_ICE
,

137 
	mWELCOM_WATER
,

141 
	mCP_ICE_TURBO
,

142 
	mCP_ICE_MAKE
,

143 
	mCP_ICE_SIZE
,

156 
	mLED_ALL
,

158 
	mMAX_LED_NUM


160 } 
	tLedId_T
;

164 
HAL_InôLed
();

167 
HAL_Tu∫OnOffLEDAŒ
(
U8
 
mu8OnOff
);

168 
HAL_Tu∫OnOffLED
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
);

169 
HAL_Tu∫OnOffLEDEx
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
);

170 
HAL_GëLedOnOffSètus
(
U8
 *
pBuf
);

174 
HAL_SëLedDuty
(
U8
 
mu8Duty
);

175 
U8
 
HAL_GëLedDuty
();

178 
HAL_DimmögLedAŒ
(
U8
 
mu8OnOff
);

179 
HAL_DimmögLed
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
);

180 
HAL_GëLedDimmögSètus
(
U8
 *
pBuf
);

183 
HAL_SëLedDimmögDuty
(
U8
 
mu8Duty
);

184 
U8
 
HAL_GëLedDimmögDuty
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_level.c

1 
	~"hw.h
"

2 
	~"hÆ_Àvñ.h
"

5 
U8
 
	$HAL_GëLevñRoomT™k
()

8 
U8
 
mu8VÆ
 = 0;

11 if–
	`GET_ROOM_TANK_LOW
(Ë=
HIGH
 )

13 
mu8VÆ
 |
LEVEL_DETECT_LOW
;

16 if–
	`GET_ROOM_TANK_HIGH
(Ë=
HIGH
 )

18 
mu8VÆ
 |
LEVEL_DETECT_HIGH
;

21 if–
	`GET_ROOM_TANK_OVERFLOW
(Ë=
HIGH
 )

23 
mu8VÆ
 |
LEVEL_DETECT_OVF
;

26  
mu8VÆ
;

28  (
LEVEL_DETECT_LOW
 | 
LEVEL_DETECT_HIGH
);

30 
	}
}

32 
U8
 
	$HAL_GëLevñHŸT™k
()

35 
U8
 
mu8VÆ
 = 0;

44 if–
	`GET_ROOM_TANK_LOW
(Ë=
HIGH
 )

46 
mu8VÆ
 |
LEVEL_DETECT_LOW
;

47 
mu8VÆ
 |
LEVEL_DETECT_HIGH
;

50  
mu8VÆ
;

54  (
LEVEL_DETECT_LOW
 | 
LEVEL_DETECT_HIGH
);

56 
	}
}

58 
U8
 
	$HAL_GëLevñCﬁdT™k
()

60  (
LEVEL_DETECT_LOW
 | 
LEVEL_DETECT_HIGH
);

61 
	}
}

64 
U8
 
	$HAL_GëLevñDøöT™k
()

66 
U8
 
mu8VÆ
 = 0;

69 if–
	`GET_DRAIN_TANK_LOW
(Ë=
HIGH
 )

71 
mu8VÆ
 |
LEVEL_DETECT_LOW
;

74 if–
	`GET_DRAIN_TANK_HIGH
(Ë=
HIGH
 )

76 
mu8VÆ
 |
LEVEL_DETECT_HIGH
;

79  
mu8VÆ
;

80 
	}
}

83 
U8
 
	$HAL_GëLevñI˚Tøy
()

86 
U8
 
mu8VÆ
 = 0;

92 if–
	`GET_DRAIN_TANK_LOW
(Ë=
HIGH
 )

94 
mu8VÆ
 |
LEVEL_DETECT_HIGH
;

97  
mu8VÆ
;

99  (
LEVEL_DETECT_LOW
 | 
LEVEL_DETECT_HIGH
);

101 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_level.h

1 #i‚de‡
__HAL_LEVEL_H__


2 
	#__HAL_LEVEL_H__


	)

6 
	#LEVEL_DETECT_NONE
 0x00

7 
	#LEVEL_DETECT_LOW
 0x01

8 
	#LEVEL_DETECT_HIGH
 0x02

9 
	#LEVEL_DETECT_OVF
 0x04

10 

	)

12 
	#HAL_LEVEL_LOW
 ( 
LEVEL_DETECT_NONE
 | LEVEL_DETECT_NONE )

	)

13 
	#HAL_LEVEL_MID
 ( 
LEVEL_DETECT_LOW
 | 
LEVEL_DETECT_NONE
 )

	)

14 
	#HAL_LEVEL_ERR_LOW
 ( 
LEVEL_DETECT_NONE
 | 
LEVEL_DETECT_HIGH
 )

	)

15 
	#HAL_LEVEL_HIGH
 ( 
LEVEL_DETECT_LOW
 | 
LEVEL_DETECT_HIGH
 )

	)

17 
	#HAL_LEVEL_ERR_COMPLEX
 ( 
LEVEL_DETECT_OVF
 | 
HAL_LEVEL_LOW
 )

	)

18 
	#HAL_LEVEL_ERR_HIGH
 ( 
LEVEL_DETECT_OVF
 | 
HAL_LEVEL_MID
 )

	)

19 
	#HAL_LEVEL_ERR_OVF_LOW
 ( 
LEVEL_DETECT_OVF
 | 
HAL_LEVEL_ERR_LOW
 )

	)

20 
	#HAL_LEVEL_OVF
 ( 
LEVEL_DETECT_OVF
 | 
HAL_LEVEL_HIGH
 )

	)

24 
U8
 
HAL_GëLevñRoomT™k
();

27 
U8
 
HAL_GëLevñHŸT™k
();

30 
U8
 
HAL_GëLevñCﬁdT™k
();

33 
U8
 
HAL_GëLevñI˚Tøy
();

38 
U8
 
HAL_GëLevñDøöT™k
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_pump.c

1 
	~"hw.h
"

2 
	~"hÆ_pump.h
"

6 
	#CONFIG_CIRCULATE_PUMP
 0

	)

7 
	#CONFIG_SODA_PUMP
 0

	)

8 
	#CONFIG_DRAIN_PUMP
 1

	)

12 
	#PUMP_DRAIN_TDR_REG
 
TDR13


	)

15 
	$Timî_Tu∫OnDøöPump
()

17 
TOE1
 |
_0008_TAU_CH3_OUTPUT_ENABLE
;

18 
TS1
 |
_0004_TAU_CH2_START_TRG_ON
 | 
_0008_TAU_CH3_START_TRG_ON
;

19 
	}
}

22 
	$Timî_Tu∫OffDøöPump
()

24 
TOE1
 &~
_0008_TAU_CH3_OUTPUT_ENABLE
;

25 
TT1
 |
_0004_TAU_CH2_STOP_TRG_ON
 | 
_0008_TAU_CH3_STOP_TRG_ON
;

26 
TO1
 &~
_0008_TAU_CH3_OUTPUT_VALUE_1
;

27 
	}
}

29 
U8
 
	$HAL_IsTu∫OnDøöPump
()

31 if–(
TOE1
 & 
_0008_TAU_CH3_OUTPUT_ENABLE
) != 0 )

33  
TRUE
;

36  
FALSE
;

37 
	}
}

40 #i‡
CONFIG_CIRCULATE_PUMP


41 
	#PUMP_CIRCULATE_TDR_REG
 
TDR12


	)

43 
	$Timî_Tu∫OnCúcuœãPump
()

45 
TOE1
 |
_0004_TAU_CH2_OUTPUT_ENABLE
;

46 
TS1
 |
_0001_TAU_CH0_START_TRG_ON
 | 
_0004_TAU_CH2_START_TRG_ON
;

47 
	}
}

50 
	$Timî_Tu∫OffCúcuœãPump
()

52 
TOE1
 &~
_0004_TAU_CH2_OUTPUT_ENABLE
;

53 
TS1
 &~
_0004_TAU_CH2_START_TRG_ON
;

54 
	}
}

58 #i‡
CONFIG_SODA_PUMP


59 
	#PUMP_SODA_TDR_REG
 
TDR04


	)

61 
	$Timî_Tu∫OnSodaPump
()

63 
TOE0
 |
_0010_TAU_CH4_OUTPUT_ENABLE
;

64 
TS0
 |
_0004_TAU_CH2_START_TRG_ON
 | 
_0010_TAU_CH4_START_TRG_ON
;

65 
	}
}

68 
	$Timî_Tu∫OffSodaPump
()

70 
TOE0
 &~
_0010_TAU_CH4_OUTPUT_ENABLE
;

71 
TT0
 |
_0004_TAU_CH2_STOP_TRG_ON
 | 
_0010_TAU_CH4_STOP_TRG_ON
;

72 
TO0
 &~
_0010_TAU_CH4_OUTPUT_VALUE_1
;

73 
	}
}

81 
	#DRAIN_MAX_TDR
 0x0C80

	)

83 
	#SODA_MAX_TDR
 1600U

84 
U16
 
	`C⁄vVﬁt2Reg
(U16 
mu16MaxTDR
, 
F32
 
mf32Vﬁt
)

	)

86 
F32
 
	gmfCÆcVÆ
 = 0.0f;

87 
U16
 
	gmu16TDR
 = 0U;

90 if–
	gmf32Vﬁt
 <= 0.0f )

96 
	gmfCÆcVÆ
 = ((
F32
)
mu16MaxTDR
 / 24.0fË* 
mf32Vﬁt
;

97 
	gmu16TDR
 = (
U16
)
mfCÆcVÆ
;

100 if–
	gmu16TDR
 > 
	gmu16MaxTDR
 )

102 
	gmu16TDR
 = 
mu16MaxTDR
;

105  
	gmu16TDR
;

110 
	$HAL_Tu∫OnPump
(
U8
 
mu8PumpId
, 
F32
 
mf32Vﬁt
)

112 if–
mu8PumpId
 =
HAL_PUMP_DRAIN
 )

114 #i‡
CONFIG_DRAIN_PUMP


115 
	`Timî_Tu∫OnDøöPump
();

116 
PUMP_DRAIN_TDR_REG
 = 
	`C⁄vVﬁt2Reg
–
DRAIN_MAX_TDR
, 
mf32Vﬁt
 );

119 #i‡
CONFIG_CIRCULATE_PUMP


120 if–
mu8PumpId
 =
HAL_PUMP_CIRCULATE
 )

122 
	`TURN_ON_PUMP_CIRCULATE
();

124 
	`Timî_Tu∫OnCúcuœãPump
();

125 
PUMP_CIRCULATE_TDR_REG
 = 
	`C⁄vVﬁt2Reg
–
SODA_MAX_TDR
, 
mf32Vﬁt
 );

128 #i‡
CONFIG_SODA_PUMP


129 if–
mu8PumpId
 =
HAL_PUMP_SODA
 )

131 
	`Timî_Tu∫OnSodaPump
();

132 
PUMP_SODA_TDR_REG
 = 
	`C⁄vVﬁt2Reg
–
SODA_MAX_TDR
, 
mf32Vﬁt
 );

135 
	}
}

139 
	$HAL_Tu∫OffPump
(
U8
 
mu8PumpId
)

141 if–
mu8PumpId
 =
HAL_PUMP_DRAIN
 )

143 #i‡
CONFIG_DRAIN_PUMP


144 
	`Timî_Tu∫OffDøöPump
();

147 #i‡
CONFIG_CIRCULATE_PUMP


148 if–
mu8PumpId
 =
HAL_PUMP_CIRCULATE
 )

150 
	`TURN_OFF_PUMP_CIRCULATE
();

152 
	`Timî_Tu∫OffCúcuœãPump
();

155 #i‡
CONFIG_SODA_PUMP


156 if–
mu8PumpId
 =
HAL_PUMP_SODA
 )

158 
	`Timî_Tu∫OffSodaPump
();

161 
	}
}

164 #i‡
CONFIG_SODA_PUMP


165 
	$HAL_Tu∫OnPumpPowî
(
U8
 
mu8PumpId
 )

167 if–
mu8PumpId
 =
HAL_PUMP_SODA
 )

169 
	`TURN_ON_PUMP_SODA
();

171 
	}
}

174 
	$HAL_Tu∫OffPumpPowî
(
U8
 
mu8PumpId
 )

176 if–
mu8PumpId
 =
HAL_PUMP_SODA
 )

178 
	`TURN_ON_PUMP_SODA
();

180 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_pump.h

1 #i‚de‡
__HAL_PUMP_H__


2 
	#__HAL_PUMP_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#HAL_PUMP_DRAIN
 0U

	)

8 
	#HAL_PUMP_CIRCULATE
 1U

	)

9 
	#HAL_PUMP_SODA
 2U

	)

14 
HAL_Tu∫OnPump
(
U8
 
mu8PumpId
, 
F32
 
mf32Vﬁt
);

15 
HAL_Tu∫OffPump
(
U8
 
mu8PumpId
);

16 
U8
 
HAL_IsTu∫OnDøöPump
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_relay.c

1 
	~"hw.h
"

2 
	~"hÆ_ªœy.h
"

6 
	$HAL_Tu∫OnRñay
–
Rñay_T
 
ªœy
 )

8 if–
HAL_RELAY_COMP
 =
ªœy
 )

10 
	`TURN_ON_COMP
();

21 if–
HAL_RELAY_FEEDER_CW
 =
ªœy
 )

23 
	`TURN_ON_FEEDER_CW
();

25 if–
HAL_RELAY_FEEDER_CCW
 =
ªœy
 )

27 
	`TURN_ON_FEEDER_CCW
();

29 if–
HAL_RELAY_ICE_TRAY_CW
 =
ªœy
 )

31 
	`TURN_ON_ICE_TRAY_CW
();

33 if–
HAL_RELAY_ICE_TRAY_CCW
 =
ªœy
 )

35 
	`TURN_ON_ICE_TRAY_CCW
();

37 
	}
}

39 
	$HAL_Tu∫OffRñay
–
Rñay_T
 
ªœy
)

41 if–
HAL_RELAY_COMP
 =
ªœy
 )

43 
	`TURN_OFF_COMP
();

54 if–
HAL_RELAY_FEEDER_CW
 =
ªœy
 )

56 
	`TURN_OFF_FEEDER_CW
();

58 if–
HAL_RELAY_FEEDER_CCW
 =
ªœy
 )

60 
	`TURN_OFF_FEEDER_CCW
();

62 if–
HAL_RELAY_ICE_TRAY_CW
 =
ªœy
 )

64 
	`TURN_OFF_ICE_TRAY_CW
();

66 if–
HAL_RELAY_ICE_TRAY_CCW
 =
ªœy
 )

68 
	`TURN_OFF_ICE_TRAY_CCW
();

70 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_relay.h

1 #i‚de‡
__HAL_RELAY_H__


2 
	#__HAL_RELAY_H__


	)

6 
	mHAL_RELAY_COMP
,

10 
	mHAL_RELAY_FEEDER_CW
,

11 
	mHAL_RELAY_FEEDER_CCW
,

13 
	mHAL_RELAY_ICE_TRAY_CW
,

14 
	mHAL_RELAY_ICE_TRAY_CCW
,

16 
	mMAX_HAL_RELAY_NUM


17 } 
	tRñay_T
;

20 
HAL_Tu∫OnRñay
–
Rñay_T
 
ªœy
);

21 
HAL_Tu∫OffRñay
–
Rñay_T
 
ªœy
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_serial.c

1 
	#CONFIG_UART_0
 1

	)

2 
	#CONFIG_UART_1
 1

	)

3 
	#CONFIG_UART_2
 1

	)

4 
	#CONFIG_UART_3
 1

	)

6 
	~"hw.h
"

7 
	~"hÆ_£rül.h
"

8 
	~<°rög.h
>

9 
	~"timî.h
"

10 
	~"WIFI_C⁄åﬁ.h
"

13 #i‡
CONFIG_UART_0


14 #¥agm®
öãºu±
 
r_u¨t0_öãºu±_£nd
(
ve˘
=
INTST0
)

15 #¥agm®
öãºu±
 
r_u¨t0_öãºu±_ª˚ive
(
ve˘
=
INTSR0
)

19 #i‡
CONFIG_UART_1


20 #¥agm®
öãºu±
 
r_u¨t1_öãºu±_£nd
(
ve˘
=
INTST1
)

21 #¥agm®
öãºu±
 
r_u¨t1_öãºu±_ª˚ive
(
ve˘
=
INTSR1
)

25 #i‡
CONFIG_UART_2


26 #¥agm®
öãºu±
 
r_u¨t2_öãºu±_£nd
(
ve˘
=
INTST2
)

27 #¥agm®
öãºu±
 
r_u¨t2_öãºu±_ª˚ive
(
ve˘
=
INTSR2
)

31 #i‡
CONFIG_UART_3


32 #¥agm®
öãºu±
 
r_u¨t3_öãºu±_£nd
(
ve˘
=
INTST3
)

33 #¥agm®
öãºu±
 
r_u¨t3_öãºu±_ª˚ive
(
ve˘
=
INTSR3
)

36 #i‡
CONFIG_UART_0


37 
	#COMP_TXD
 
TXD0


	)

38 
	#COMP_RXD
 
RXD0


	)

41 #i‡
CONFIG_UART_1


42 
	#WIFI_TXD
 
TXD1


	)

43 
	#WIFI_RXD
 
RXD1


	)

46 #i‡
CONFIG_UART_2


47 
	#FRONT_TXD
 
TXD2


	)

48 
	#FRONT_RXD
 
RXD2


	)

51 #i‡
CONFIG_UART_3


52 
	#EOL_TXD
 
TXD3


	)

53 
	#EOL_RXD
 
RXD3


	)

57 
	#UART0_RX_TIME_STAMP
 100

	)

58 
	#UART1_RX_TIME_STAMP
 10

	)

59 
	#UART2_RX_TIME_STAMP
 10

	)

60 
	#UART3_RX_TIME_STAMP
 10

	)

63 #i‡
CONFIG_UART_0


64 
U8
 
	gªcv_0_buf
[ 
MAX_COMM_0_RX_BUF_SZ
 ];

65 
U8
 
	g£nd_0_buf
[ 
MAX_COMM_0_TX_BUF_SZ
 ];

68 #i‡
CONFIG_UART_1


69 
U8
 
	gªcv_1_buf
[ 
MAX_COMM_1_RX_BUF_SZ
 ];

70 
U8
 
	g£nd_1_buf
[ 
MAX_COMM_1_TX_BUF_SZ
 ];

73 #i‡
CONFIG_UART_2


74 
U8
 
	gªcv_2_buf
[ 
MAX_COMM_2_RX_BUF_SZ
 ];

75 
U8
 
	g£nd_2_buf
[ 
MAX_COMM_2_TX_BUF_SZ
 ];

78 #i‡
CONFIG_UART_3


79 
U8
 
	gªcv_3_buf
[ 
MAX_COMM_3_RX_BUF_SZ
 ];

80 
U8
 
	g£nd_3_buf
[ 
MAX_COMM_3_TX_BUF_SZ
 ];

83 
	s_comm_


86 
I16
 
	mªcv_Àn
;

88 
I16
 
	m£nd_Àn
;

89 
I16
 
	mtx_Àn
;

90 } 
	tcomm_t
;

92 
comm_t
 
	gcomm
[ 
MAX_COMM_ID
 ];

96 
	$HAL_InôCommId
–
U8
 
u¨t_id
 )

98 if–
u¨t_id
 =
COMM_ID_COMP
 )

100 #i‡
CONFIG_UART_0


101 
	`MEMSET
–(
__FAR
 *)&
ªcv_0_buf
[0], 0, 
MAX_COMM_0_RX_BUF_SZ
 );

102 
	`MEMSET
–(
__FAR
 *)&
£nd_0_buf
[0], 0, 
MAX_COMM_0_TX_BUF_SZ
 );

105 if–
u¨t_id
 =
COMM_ID_WIFI
 )

107 #i‡
CONFIG_UART_1


108 
	`MEMSET
–(
__FAR
 *)&
ªcv_1_buf
[0], 0, 
MAX_COMM_1_RX_BUF_SZ
 );

109 
	`MEMSET
–(
__FAR
 *)&
£nd_1_buf
[0], 0, 
MAX_COMM_1_TX_BUF_SZ
 );

112 if–
u¨t_id
 =
COMM_ID_FRONT
)

114 #i‡
CONFIG_UART_2


115 
	`MEMSET
–(
__FAR
 *)&
ªcv_2_buf
[0], 0, 
MAX_COMM_2_RX_BUF_SZ
 );

116 
	`MEMSET
–(
__FAR
 *)&
£nd_2_buf
[0], 0, 
MAX_COMM_2_TX_BUF_SZ
 );

121 #i‡
CONFIG_UART_3


122 
	`MEMSET
–(
__FAR
 *)&
ªcv_3_buf
[0], 0, 
MAX_COMM_3_RX_BUF_SZ
 );

123 
	`MEMSET
–(
__FAR
 *)&
£nd_3_buf
[0], 0, 
MAX_COMM_3_TX_BUF_SZ
 );

127 
	`MEMSET
–(
__FAR
 *)&
comm
[ 
u¨t_id
 ], 0, –
comm_t
 ) );

128 
	}
}

130 
	$HAL_InôComm
( )

132 #i‡
CONFIG_UART_0


133 
	`HAL_InôCommId
–
COMM_ID_COMP
 );

134 
	`R_C⁄fig_UART0_Sèπ
();

137 #i‡
CONFIG_UART_1


138 
	`HAL_InôCommId
–
COMM_ID_WIFI
 );

139 
	`R_C⁄fig_UART1_Sèπ
();

142 #i‡
CONFIG_UART_2


143 
	`HAL_InôCommId
–
COMM_ID_FRONT
 );

144 
	`R_C⁄fig_UART2_Sèπ
();

147 #i‡
CONFIG_UART_3


148 
	`HAL_InôCommId
–
COMM_ID_EOL
 );

149 
	`R_C⁄fig_UART3_Sèπ
();

152 
	}
}

154 
I16
 
	$HAL_GëMaxRecvBuf„rLígth
(
U8
 
u¨t_id
)

156 if–
u¨t_id
 == 0 )

158  
MAX_COMM_0_RX_BUF_SZ
;

160 if–
u¨t_id
 == 1 )

162  
MAX_COMM_1_RX_BUF_SZ
;

164 if–
u¨t_id
 == 2 )

166  
MAX_COMM_2_RX_BUF_SZ
;

169  
MAX_COMM_3_RX_BUF_SZ
;

170 
	}
}

172 
U8
 
	$HAL_IsFuŒRecvBuf„r
–
U8
 
u¨t_id
 )

174 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 >
	`HAL_GëMaxRecvBuf„rLígth
( uart_id ) )

176  
TRUE
;

179  
FALSE
;

180 
	}
}

182 
U8
 
	$HAL_IsEm±yRecvBuf„r
–
U8
 
u¨t_id
 )

184 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 > 0 )

186  
FALSE
;

189  
TRUE
;

191 
	}
}

193 
I16
 
	$HAL_GëMaxSídBuf„rLígth
(
U8
 
u¨t_id
)

195 if–
u¨t_id
 == 0 )

197  
MAX_COMM_0_TX_BUF_SZ
;

199 if–
u¨t_id
 == 1 )

201  
MAX_COMM_1_TX_BUF_SZ
;

203 if–
u¨t_id
 == 2 )

205  
MAX_COMM_2_TX_BUF_SZ
;

208  
MAX_COMM_3_TX_BUF_SZ
;

209 
	}
}

211 
U8
 
	$HAL_IsFuŒSídBuf„r
–
U8
 
u¨t_id
 )

213 if–
comm
[ 
u¨t_id
 ].
£nd_Àn
 >
	`HAL_GëMaxSídBuf„rLígth
( uart_id ) )

215  
TRUE
;

218  
FALSE
;

219 
	}
}

221 
	$HAL_InôRecvLígth
(
U8
 
u¨t_id
 )

223 
comm
[ 
u¨t_id
 ].
ªcv_Àn
 = 0;

224 
	}
}

226 
I16
 
	$HAL_GëRecvLígth
–
U8
 
u¨t_id
 )

228  
comm
[ 
u¨t_id
 ].
ªcv_Àn
;

229 
	}
}

231 
I16
 
	$HAL_GëSídLígth
–
U8
 
u¨t_id
 )

233  
comm
[ 
u¨t_id
].
£nd_Àn
;

234 
	}
}

237 
	$HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 )

239 
comm_t
 *
p_comm
;

241 
p_comm
 = &
comm
[ 
u¨t_id
 ];

243 
p_comm
->
ªcv_buf
[Ö_comm->
ªcv_Àn
 ] = 
_byã
;

245 if–
u¨t_id
 =
COMM_ID_COMP
 )

247 
ªcv_0_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

249 if–
u¨t_id
 =
COMM_ID_WIFI
 )

251 
ªcv_1_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

253 if–
u¨t_id
 =
COMM_ID_FRONT
)

255 
ªcv_2_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

259 
ªcv_3_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

262 
p_comm
->
ªcv_Àn
++;

264 
	}
}

266 
U8
 
	$HAL_GëRecvBuf„r
–
U8
 
u¨t_id
, 
U16
 
ödex
 )

269  
comm
[ 
u¨t_id
 ].
ªcv_buf
[ 
ödex
 ];

271 if–
u¨t_id
 =
COMM_ID_COMP
 )

273  
ªcv_0_buf
[ 
ödex
 ];

275 if–
u¨t_id
 =
COMM_ID_WIFI
 )

277  
ªcv_1_buf
[ 
ödex
 ];

279 if–
u¨t_id
 =
COMM_ID_FRONT
)

281  
ªcv_2_buf
[ 
ödex
 ];

285  
ªcv_3_buf
[ 
ödex
 ];

288 
	}
}

291 
	$HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 )

293 
comm_t
 *
p_comm
;

295 if–
	`HAL_IsFuŒSídBuf„r
–
u¨t_id
 ) =
FALSE
 )

297 
p_comm
 = &
comm
[ 
u¨t_id
 ];

299 
p_comm
->
£nd_buf
[Ö_comm->
£nd_Àn
 ] = 
_byã
;

301 if–
u¨t_id
 =
COMM_ID_COMP
 )

303 
£nd_0_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

305 if–
u¨t_id
 =
COMM_ID_WIFI
 )

307 
£nd_1_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

309 if–
u¨t_id
 =
COMM_ID_FRONT
)

311 
£nd_2_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

315 
£nd_3_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

318 
p_comm
->
£nd_Àn
++;

320 
	}
}

322 
U8
 
	$HAL_GëSídBuf„r
–
U8
 
u¨t_id
, 
U16
 
ödex
 )

325  
comm
[ 
u¨t_id
 ].
£nd_buf
[ 
ödex
 ];

327 if–
u¨t_id
 =
COMM_ID_COMP
 )

329  
£nd_0_buf
[
ödex
];

331 if–
u¨t_id
 =
COMM_ID_WIFI
 )

333  
£nd_1_buf
[
ödex
];

335 if–
u¨t_id
 =
COMM_ID_FRONT
)

337  
£nd_2_buf
[
ödex
];

341  
£nd_3_buf
[
ödex
];

344 
	}
}

347 
	$HAL_SídByã
–
U8
 
u¨t_id
 )

349 
U8
 
ch
;

350 
comm_t
 *
p_comm
;

353 
p_comm
 = &
comm
[ 
u¨t_id
 ];

355 
ch
 = 
p_comm
->
£nd_buf
[Ö_comm->
tx_Àn
 ];

357 if–
u¨t_id
 =
COMM_ID_COMP
 )

359 
ch
 = 
£nd_0_buf
[
p_comm
->
tx_Àn
];

361 if–
u¨t_id
 =
COMM_ID_WIFI
 )

363 
ch
 = 
£nd_1_buf
[
p_comm
->
tx_Àn
];

365 if–
u¨t_id
 =
COMM_ID_FRONT
)

367 
ch
 = 
£nd_2_buf
[
p_comm
->
tx_Àn
];

371 
ch
 = 
£nd_3_buf
[
p_comm
->
tx_Àn
];

375 
p_comm
->
tx_Àn
++;

377 if–
u¨t_id
 =
COMM_ID_COMP
 )

379 #i‡
CONFIG_UART_0


380 
COMP_TXD
 = 
ch
;

383 if–
u¨t_id
 =
COMM_ID_WIFI
 )

385 #i‡
CONFIG_UART_1


386 
WIFI_TXD
 = 
ch
;

389 if–
u¨t_id
 =
COMM_ID_FRONT
 )

391 #i‡
CONFIG_UART_2


392 
FRONT_TXD
 = 
ch
;

395 if–
u¨t_id
 =
COMM_ID_EOL
 )

397 #i‡
CONFIG_UART_3


398 
EOL_TXD
 = 
ch
;

401 
	}
}

403 
U8
 
	$IsCom∂ëeTx
–
U8
 
u¨t_id
 )

405 if–
comm
[
u¨t_id
].
tx_Àn
 < comm[ u¨t_id ].
£nd_Àn
 )

407  
FALSE
;

410  
TRUE
;

412 
	}
}

417 #i‡
CONFIG_UART_0


419 
__√¨
 
	$r_u¨t0_öãºu±_ª˚ive
()

421 vﬁ©ûê
U8
 
îr_ty≥
;

422 vﬁ©ûê
U8
 
rx_d©a
;

425 
îr_ty≥
 = (
uöt8_t
)(
SSR01
 & 0x0007U);

426 
SIR01
 = (
uöt16_t
)
îr_ty≥
;

428 
rx_d©a
 = 
COMP_RXD
;

430 if–
îr_ty≥
 == 0 )

432 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_COMP
 ) =
FALSE
 )

434 
	`HAL_SëRecvBuf„r
–
COMM_ID_COMP
, 
rx_d©a
 );

438 
	`HAL_InôCommId
–
COMM_ID_COMP
 );

441 
	`SèπTimî
–
TIMER_ID_COMM_COMP_RX
, 
UART0_RX_TIME_STAMP
 );

443 
	}
}

446 
__√¨
 
	$r_u¨t0_öãºu±_£nd
()

448 if–
	`IsCom∂ëeTx
–
COMM_ID_COMP
 ) =
FALSE
 )

450 
	`HAL_SídByã
–
COMM_ID_COMP
 );

454 
	`HAL_InôCommId
–
COMM_ID_COMP
 );

456 
	}
}

460 #i‡
CONFIG_UART_1


462 
__√¨
 
	$r_u¨t1_öãºu±_ª˚ive
()

465 vﬁ©ûê
U8
 
rx_d©a
;

466 vﬁ©ûê
U8
 
îr_ty≥
;

468 
îr_ty≥
 = (
U8
)(
SSR03
 & 0x0007U);

469 
SIR03
 = (
U16
)
îr_ty≥
;

471 
rx_d©a
 = 
WIFI_RXD
;

473 if–
îr_ty≥
 == 0 )

475 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_WIFI
 ) =
FALSE
 )

477 
	`HAL_SëRecvBuf„r
–
COMM_ID_WIFI
, 
rx_d©a
 );

481 
	`HAL_InôCommId
–
COMM_ID_WIFI
 );

485 
	`SèπTimî
–
TIMER_ID_COMM_WIFI_RX
, 
UART1_RX_TIME_STAMP
 );

488 vﬁ©ûê
U8
 
rx_d©a
;

490 
rx_d©a
 = 
WIFI_RXD
;

492 
	`I¡îru±U¨tWifiEº‹
();

493 
	`I¡îru±U¨tWifiRx
–
rx_d©a
 );

494 
	}
}

497 
__√¨
 
	$r_u¨t1_öãºu±_£nd
()

500 if–
	`IsCom∂ëeTx
–
COMM_ID_WIFI
 ) =
FALSE
 )

502 
	`HAL_SídByã
–
COMM_ID_WIFI
 );

506 
	`HAL_InôCommId
–
COMM_ID_WIFI
 );

509 
	`I¡îru±U¨tWifiTx
();

510 
	}
}

514 #i‡
CONFIG_UART_2


515 
U16
 
	gthe_rx_îr_cou¡
 = 0;

517 
__√¨
 
	$r_u¨t2_öãºu±_ª˚ive
()

519 vﬁ©ûê
U8
 
îr_ty≥
;

520 vﬁ©ûê
U8
 
rx_d©a
;

522 
îr_ty≥
 = (
uöt8_t
)(
SSR11
 & 0x0007U);

523 
SIR11
 = (
uöt16_t
)
îr_ty≥
;

525 
rx_d©a
 = 
FRONT_RXD
;

527 
	`EI
();

528 if–
îr_ty≥
 == 0 )

530 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_FRONT
 ) =
FALSE
 )

532 
	`HAL_SëRecvBuf„r
–
COMM_ID_FRONT
, 
rx_d©a
 );

536 
	`HAL_InôCommId
–
COMM_ID_FRONT
 );

539 
	`SèπTimî
–
TIMER_ID_COMM_FRONT_RX
, 
UART2_RX_TIME_STAMP
 );

543 
the_rx_îr_cou¡
++;

545 
	}
}

548 
__√¨
 
	$r_u¨t2_öãºu±_£nd
()

550 
	`EI
();

551 if–
	`IsCom∂ëeTx
–
COMM_ID_FRONT
 ) =
FALSE
 )

553 
	`HAL_SídByã
–
COMM_ID_FRONT
 );

557 
	`HAL_InôCommId
–
COMM_ID_FRONT
 );

559 
	}
}

564 #i‡
CONFIG_UART_3


565 
U16
 
	gthe_i§_îr_cou¡
 = 0;

567 
__√¨
 
	$r_u¨t3_öãºu±_ª˚ive
()

569 vﬁ©ûê
U8
 
îr_ty≥
;

570 vﬁ©ûê
U8
 
rx_d©a
;

572 
îr_ty≥
 = (
uöt8_t
)(
SSR13
 & 0x0007U);

573 
SIR13
 = (
uöt16_t
)
îr_ty≥
;

575 
rx_d©a
 = 
EOL_RXD
;

577 if–
îr_ty≥
 == 0 )

579 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_EOL
 ) =
FALSE
 )

581 
	`HAL_SëRecvBuf„r
–
COMM_ID_EOL
, 
rx_d©a
 );

585 
	`HAL_InôCommId
–
COMM_ID_EOL
 );

588 
	`SèπTimî
–
TIMER_ID_COMM_EOL_RX
, 
UART3_RX_TIME_STAMP
 );

592 
the_i§_îr_cou¡
++;

594 
	}
}

598 
__√¨
 
	$r_u¨t3_öãºu±_£nd
()

600 if–
	`IsCom∂ëeTx
–
COMM_ID_EOL
 ) =
FALSE
 )

602 
	`HAL_SídByã
–
COMM_ID_EOL
 );

606 
	`HAL_InôCommId
–
COMM_ID_EOL
 );

608 
	}
}

610 
	$R_C⁄fig_UART0_Cª©e_U£rInô
()

612 
	}
}

614 
	$R_C⁄fig_UART1_Cª©e_U£rInô
()

616 
	}
}

618 
	$R_C⁄fig_UART2_Cª©e_U£rInô
()

620 
	}
}

622 
	$R_C⁄fig_UART3_Cª©e_U£rInô
()

624 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_serial.h

1 #i‚de‡
__HAL_SERIAL_H__


2 
	#__HAL_SERIAL_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#COMM_ID_COMP
 0

	)

8 
	#COMM_ID_WIFI
 1

	)

9 
	#COMM_ID_FRONT
 2

	)

10 
	#COMM_ID_EOL
 3

	)

11 
	#MAX_COMM_ID
 4

	)

15 
	#MAX_COMM_0_RX_BUF_SZ
 30

	)

16 
	#MAX_COMM_0_TX_BUF_SZ
 30

	)

19 
	#MAX_COMM_1_RX_BUF_SZ
 8

	)

20 
	#MAX_COMM_1_TX_BUF_SZ
 8

	)

23 
	#MAX_COMM_2_RX_BUF_SZ
 128

	)

24 
	#MAX_COMM_2_TX_BUF_SZ
 128

	)

27 
	#MAX_COMM_3_RX_BUF_SZ
 255

	)

28 
	#MAX_COMM_3_TX_BUF_SZ
 255

	)

31 
	#MAX_COMM_RX_BUF_SZ
 255

	)

32 
	#MAX_COMM_TX_BUF_SZ
 255

	)

36 
HAL_InôCommId
–
U8
 
u¨t_id
 );

37 
HAL_InôComm
( );

39 
U8
 
HAL_IsFuŒRecvBuf„r
–U8 
u¨t_id
 );

40 
U8
 
HAL_IsEm±yRecvBuf„r
–U8 
u¨t_id
 );

41 
U8
 
HAL_IsFuŒSídBuf„r
–U8 
u¨t_id
 );

43 
HAL_InôRecvLígth
(
U8
 
u¨t_id
 );

44 
I16
 
HAL_GëRecvLígth
–
U8
 
u¨t_id
 );

45 
I16
 
HAL_GëSídLígth
–
U8
 
u¨t_id
 );

47 
HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 );

48 
U8
 
HAL_GëRecvBuf„r
–U8 
u¨t_id
, 
U16
 
ödex
 );

50 
HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 );

51 
U8
 
HAL_GëSídBuf„r
–U8 
u¨t_id
, 
U16
 
ödex
 );

53 
HAL_SídByã
–
U8
 
u¨t_id
 );

55 
R_C⁄fig_UART0_Cª©e_U£rInô
();

56 
R_C⁄fig_UART1_Cª©e_U£rInô
();

57 
R_C⁄fig_UART2_Cª©e_U£rInô
();

58 
R_C⁄fig_UART3_Cª©e_U£rInô
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_step_motor.c

3 
	~"hw.h
"

4 
	~"hÆ_°ï_mŸ‹.h
"

7 #¥agm®
öãºu±
 
SãpMŸ‹TimîI¡îru±
(
ve˘
=
INTTM01
)

10 
	#INTS_BYTE
(Ë
_öts_byã


	)

11 
	#MASK_STEP_MOTOR_TIMER
 
TMMK01


	)

12 
	#DISABLE_INT_MASK_MOTOR_TIMER
() \

14 
MASK_STEP_MOTOR_TIMER
 = 1; \

15 }0)

	)

17 
	#ENABLE_INT_MASK_MOTOR_TIMER
() \

19 
MASK_STEP_MOTOR_TIMER
 = 0; \

20 }0)

	)

22 
	#ENTER_CRITICAL_SECTION_STEP_MOTOR
() \

24 
_öts_byã
 = 
MASK_STEP_MOTOR_TIMER
; \

25 
	`DISABLE_INT_MASK_MOTOR_TIMER
(); \

26 }0)

	)

28 
	#EXIT_CRITICAL_SECTION_STEP_MOTOR
() \

30 
MASK_STEP_MOTOR_TIMER
 = 
_öts_byã
; \

31 } 0)

	)

38 
	#SM_SPEED_1_COUNT
 12

	)

39 
	#SM_SPEED_2_COUNT
 1

	)

41 
	#SM_HOLD_STEP_0
 79

	)

42 
	#SM_HOLD_STEP_1
 5

	)

43 
	#SM_HOLD_STEP_2
 5

	)

46 
	s_hÆ_sm_


48 
sm_°ï_t
 
	mèrgë
;

49 
sm_°ï_t
 
	mcuºít
;

52 
sm_•ìd_t
 
	m•ìd
;

53 
U8
 
	m•ìd_˙t
;

56 
sm_°ï_t
 
	mmove_°ï
;

59 
sm_°ï_t
 
	mhﬁd_°¨t_°ï
;

60 
sm_°ï_t
 
	mhﬁd_°›_°ï
;

63 
I8
 
	mcuºít_mode
;

64 
I8
 
	m¥ev_mode
;

67 
U8
 
	mö_a˘ive
;

68 } 
	thÆ_sm_öfo_t
;

70 
LOCAL
 
hÆ_sm_öfo_t
 
	gsm_öfo
[ 
MAX_SM_ID
 ];

72 
	#PHASE_STEP_NUM
 8

	)

73 
U8
 
	ggu8Pha£TabÀ
[ 
MAX_SM_ID
 ][ 
PHASE_STEP_NUM
 ] =

81 
U8
 
	ggu8HﬁdSãpTabÀ
[ 
MAX_SM_SPEED_NUM
 ] =

83 
SM_HOLD_STEP_0
,

84 
SM_HOLD_STEP_1
,

85 
SM_HOLD_STEP_2


90 
	$HAL_InôSãpMŸ‹
()

92 
U8
 
i
;

95  
i
 = 0; i < 
MAX_SM_ID
 ; i++ )

97 
sm_öfo
[ 
i
 ].
èrgë
 = 0;

98 
sm_öfo
[ 
i
 ].
cuºít
 = 0;

100 
sm_öfo
[ 
i
 ].
•ìd
 = 0;

101 
sm_öfo
[ 
i
 ].
•ìd_˙t
 = 0;

103 
sm_öfo
[ 
i
 ].
move_°ï
 = 0;

105 
sm_öfo
[ 
i
 ].
hﬁd_°¨t_°ï
 = 0;

106 
sm_öfo
[ 
i
 ].
hﬁd_°›_°ï
 = 0;

108 
sm_öfo
[ 
i
 ].
cuºít_mode
 = 0;

110 
sm_öfo
[ 
i
 ].
ö_a˘ive
 = 0;

113 
	`R_C⁄fig_TAU0_1_Sèπ
();

114 
	}
}

117 
	$HAL_InôSãpVÆ
–
U8
 
_id
 )

119 
	`INTS_BYTE
();

121 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

122 
sm_öfo
[ 
_id
 ].
èrgë
 = 0;

123 
sm_öfo
[ 
_id
 ].
cuºít
 = 0;

124 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

125 
	}
}

128 
	$HAL_SëInA˘ive
–
U8
 
_id
, U8 
_ö_a˘ive
 )

130 
sm_öfo
[ 
_id
 ].
ö_a˘ive
 = 
_ö_a˘ive
;

131 
	}
}

134 
	$HAL_SëT¨gëSãp
–
U8
 
_id
, 
sm_°ï_t
 
°ï
 )

136 
	`INTS_BYTE
();

138 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

139 
sm_öfo
[ 
_id
 ].
èrgë
 = 
°ï
;

140 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

141 
	}
}

143 
sm_°ï_t
 
	$HAL_GëT¨gëSãp
–
U8
 
_id
 )

145  
sm_öfo
[ 
_id
 ].
èrgë
;

146 
	}
}

148 
	$HAL_SëCuºítSãp
–
U8
 
_id
, 
sm_°ï_t
 
°ï
 )

150 
	`INTS_BYTE
();

152 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

153 
sm_öfo
[ 
_id
 ].
cuºít
 = 
°ï
;

154 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

155 
	}
}

157 
sm_°ï_t
 
	$HAL_GëCuºítSãp
–
U8
 
_id
 )

159 
sm_°ï_t
 
°ï
;

160 
	`INTS_BYTE
();

162 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

163 
°ï
 = 
sm_öfo
[ 
_id
 ].
cuºít
;

164 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

166  
°ï
;

167 
	}
}

169 
	$HAL_SëHﬁdSãp
–
U8
 
_id
, 
sm_°ï_t
 
°ï
 )

171 
	`INTS_BYTE
();

172 
sm_•ìd_t
 
mS≥ed
;

173 
sm_°ï_t
 
mHﬁdSãp
;

176 
mS≥ed
 = 
sm_öfo
[ 
_id
 ].
•ìd
;

177 
mHﬁdSãp
 = 
gu8HﬁdSãpTabÀ
[ 
mS≥ed
 ];

180 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

182 
sm_öfo
[ 
_id
 ].
hﬁd_°¨t_°ï
 = 
mHﬁdSãp
;

183 
sm_öfo
[ 
_id
 ].
hﬁd_°›_°ï
 = 
mHﬁdSãp
;

186 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

188 
	}
}

190 
	$HAL_SëDñèSãp
–
U8
 
_id
, 
sm_°ï_t
 
_°ï
 )

192 
	`INTS_BYTE
();

193 
sm_•ìd_t
 
mS≥ed
;

194 
sm_°ï_t
 
mHﬁdSãp
;

197 
mS≥ed
 = 
sm_öfo
[ 
_id
 ].
•ìd
;

198 
mHﬁdSãp
 = 
gu8HﬁdSãpTabÀ
[ 
mS≥ed
 ];

201 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

203 
sm_öfo
[ 
_id
 ].
move_°ï
 = 
_°ï
;

204 
sm_öfo
[ 
_id
 ].
hﬁd_°¨t_°ï
 = 
mHﬁdSãp
;

205 
sm_öfo
[ 
_id
 ].
hﬁd_°›_°ï
 = 
mHﬁdSãp
;

207 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

210 
	}
}

212 
sm_°ï_t
 
	$HAL_GëDñèSãp
–
U8
 
_id
 )

214 
	`INTS_BYTE
();

215 
sm_°ï_t
 
°ï
;

219 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

221 
°ï
 = 
sm_öfo
[ 
_id
 ].
move_°ï
;

223 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

226  
°ï
;

227 
	}
}

230 
	$HAL_SëSãpS≥ed
–
U8
 
_id
, 
sm_•ìd_t
 
•ìd
 )

232 
	`INTS_BYTE
();

234 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

235 
sm_öfo
[ 
_id
 ].
•ìd
 = speed;

236 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

237 
	}
}

239 
sm_•ìd_t
 
	$HAL_GëSãpS≥ed
–
U8
 
_id
 )

241  
sm_öfo
[ 
_id
 ].
•ìd
;

242 
	}
}

245 
	$HAL_SëSãpS≥edCou¡
–
U8
 
_id
, U8 
_˙t
 )

247 
	`INTS_BYTE
();

249 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

250 
sm_öfo
[ 
_id
 ].
•ìd_˙t
 = 
_˙t
;

251 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

252 
	}
}

254 
U8
 
	$HAL_GëSãpS≥edCou¡
–
U8
 
_id
 )

256  
sm_öfo
[ 
_id
 ].
•ìd_˙t
;

257 
	}
}

259 
	$HAL_DecSãpS≥edCou¡
–
U8
 
_id
 )

261 if–
sm_öfo
[ 
_id
 ].
•ìd_˙t
 != 0 )

263 
sm_öfo
[ 
_id
 ].
•ìd_˙t
--;

265 
	}
}

268 
U8
 
	$HAL_IsD⁄eMoveSãp
–
U8
 
_id
 )

270 
sm_°ï_t
 
èrgë
;

271 
sm_°ï_t
 
cuºít
;

273 
	`INTS_BYTE
();

275 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

276 
èrgë
 = 
	`HAL_GëT¨gëSãp
–
_id
 );

277 
cuºít
 = 
	`HAL_GëCuºítSãp
–
_id
 );

278 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

280 if–
èrgë
 =
cuºít
 )

282  
TRUE
;

285  
FALSE
;

286 
	}
}

288 
	$HAL_St›Move
–
U8
 
id
 )

290 
sm_°ï_t
 
cuºít
;

291 
	`INTS_BYTE
();

294 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

296 
cuºít
 = 
	`HAL_GëCuºítSãp
–
id
 );

297 
	`HAL_SëT¨gëSãp
–
id
, 
cuºít
 );

298 
	`HAL_SëDñèSãp
–
id
, 0 );

300 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

301 
	}
}

304 
U8
 
	$HAL_SëT¨gëSãpD⁄e
–
U8
 
id
, 
sm_°ï_t
 
°ï
 )

306 
	`HAL_SëT¨gëSãp
–
id
, 
°ï
 );

308  
	`HAL_IsD⁄eMoveSãp
–
id
 );

309 
	}
}

313 
	$HAL_C⁄åﬁSãpMŸ‹
–
U8
 
_id
 )

315 
sm_°ï_t
 
vÆ
;

316 
sm_°ï_t
 
èrgë
;

317 
sm_°ï_t
 
cuºít
;

318 
	`INTS_BYTE
();

321 
	`ENTER_CRITICAL_SECTION_STEP_MOTOR
();

323 
vÆ
 = 
	`HAL_GëDñèSãp
–
_id
 );

324 
èrgë
 = 
	`HAL_GëT¨gëSãp
–
_id
 );

325 
cuºít
 = 
	`HAL_GëCuºítSãp
–
_id
 );

327 
	`EXIT_CRITICAL_SECTION_STEP_MOTOR
();

330 if–
vÆ
 == 0 )

332 if–
èrgë
 !
cuºít
 )

334 
vÆ
 = 
èrgë
 - 
cuºít
;

335 
	`HAL_SëDñèSãp
–
_id
, 
vÆ
 );

340 if–
	`HAL_GëSãpS≥ed
–
_id
 ) =
SM_SPEED_1
 )

342 if–
	`HAL_GëSãpS≥edCou¡
–
_id
 ) != 0 )

344 
	`HAL_DecSãpS≥edCou¡
–
_id
 );

349 
	`HAL_SëSãpS≥edCou¡
–
_id
, 
SM_SPEED_1_COUNT
 );

352 if–
	`HAL_GëSãpS≥ed
–
_id
 ) =
SM_SPEED_2
 )

354 if–
	`HAL_GëSãpS≥edCou¡
–
_id
 ) != 0 )

356 
	`HAL_DecSãpS≥edCou¡
–
_id
 );

361 
	`HAL_SëSãpS≥edCou¡
–
_id
, 
SM_SPEED_2_COUNT
 );

365 
	`HAL_MoveSãp
–
_id
 );

366 
	}
}

368 
HAL_C⁄åﬁGasVÆveMŸ‹
–
U8
 
mode
 );

369 
HAL_C⁄åﬁI˚Do‹MŸ‹
–
U8
 
mode
 );

370 
HAL_C⁄åﬁFlowVÆve
–
U8
 
mode
 );

371 
	$HAL_MoveSãp
–
U8
 
_id
 )

373 
hÆ_sm_öfo_t
 *
p_öfo
 = 
NULL
;

374 
U8
 
vÆ
 = 0;

377 
p_öfo
 = &
sm_öfo
[ 
_id
 ];

380 if–
p_öfo
->
hﬁd_°¨t_°ï
 > 0 )

382 
p_öfo
->
hﬁd_°¨t_°ï
--;

383 
vÆ
 = 
gu8Pha£TabÀ
[ 
_id
 ][ 
p_öfo
->
cuºít_mode
 ];

385 if–
p_öfo
->
move_°ï
 == 0 )

388 if–
p_öfo
->
hﬁd_°›_°ï
 > 0 )

390 
p_öfo
->
hﬁd_°›_°ï
--;

391 
vÆ
 = 
gu8Pha£TabÀ
[ 
_id
 ][ 
p_öfo
->
cuºít_mode
 ];

396 
vÆ
 = 0x00;

400 if–
p_öfo
->
move_°ï
 > 0 )

403 
p_öfo
->
move_°ï
--;

404 
p_öfo
->
cuºít
++;

406 
p_öfo
->
¥ev_mode
 =Ö_öfo->
cuºít_mode
;

407 
p_öfo
->
cuºít_mode
++;

408 if–
p_öfo
->
cuºít_mode
 >
PHASE_STEP_NUM
 )

410 
p_öfo
->
cuºít_mode
 = 0;

413 
vÆ
 = 
gu8Pha£TabÀ
[ 
_id
 ][ 
p_öfo
->
cuºít_mode
 ];

416 if–
p_öfo
->
move_°ï
 < 0 )

419 
p_öfo
->
move_°ï
++;

420 
p_öfo
->
cuºít
--;

422 
p_öfo
->
¥ev_mode
 =Ö_öfo->
cuºít_mode
;

423 
p_öfo
->
cuºít_mode
--;

424 if–
p_öfo
->
cuºít_mode
 < 0 )

426 
p_öfo
->
cuºít_mode
 = 
PHASE_STEP_NUM
 - 1;

429 
vÆ
 = 
gu8Pha£TabÀ
[ 
_id
 ][ 
p_öfo
->
cuºít_mode
 ];

432 if–
_id
 =
SM_ID_0
 )

434 
	`HAL_C⁄åﬁGasVÆveMŸ‹
–
vÆ
 );

436 if–
_id
 =
SM_ID_1
 )

438 
	`HAL_C⁄åﬁI˚Do‹MŸ‹
–
vÆ
 );

440 if–
_id
 =
SM_ID_2
 )

442 
	`HAL_C⁄åﬁFlowVÆve
–
vÆ
 );

444 
	}
}

447 
	$HAL_C⁄åﬁGasVÆveMŸ‹
–
U8
 
mode
 )

449  
mode
 )

452 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 0;

453 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 0;

454 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 0;

455 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 0;

458 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 1;

459 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 0;

460 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 0;

461 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 1;

464 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 0;

465 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 0;

466 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 0;

467 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 1;

470 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 0;

471 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 0;

472 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 1;

473 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 1;

476 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 0;

477 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 0;

478 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 1;

479 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 0;

482 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 0;

483 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 1;

484 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 1;

485 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 0;

488 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 0;

489 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 1;

490 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 0;

491 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 0;

494 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 1;

495 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 1;

496 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 0;

497 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 0;

500 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 1;

501 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 0;

502 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 0;

503 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 0;

507 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
) = 0;

508 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
) = 0;

509 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
) = 1;

510 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
) = 1;

513 
	}
}

516 
	$HAL_C⁄åﬁI˚Do‹MŸ‹
–
U8
 
mode
 )

518  
mode
 )

521 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
) = 0;

522 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
) = 0;

523 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
) = 0;

524 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
) = 0;

527 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
) = 0;

528 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
) = 0;

529 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
) = 1;

530 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
) = 1;

533 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
) = 1;

534 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
) = 0;

535 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
) = 0;

536 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
) = 1;

539 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
) = 1;

540 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
) = 1;

541 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
) = 0;

542 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
) = 0;

545 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
) = 0;

546 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
) = 1;

547 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
) = 1;

548 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
) = 0;

551 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
) = 0;

552 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
) = 0;

553 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
) = 0;

554 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
) = 0;

557 
	}
}

561 
	$HAL_C⁄åﬁFlowVÆve
–
U8
 
mode
 )

563  
mode
 )

566 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
) = 0;

567 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
) = 0;

568 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
) = 0;

569 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
) = 0;

572 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
) = 0;

573 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
) = 0;

574 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
) = 1;

575 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
) = 1;

578 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
) = 1;

579 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
) = 0;

580 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
) = 0;

581 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
) = 1;

584 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
) = 1;

585 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
) = 1;

586 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
) = 0;

587 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
) = 0;

590 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
) = 0;

591 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
) = 1;

592 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
) = 1;

593 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
) = 0;

597 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
) = 0;

598 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
) = 0;

599 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
) = 0;

600 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
) = 0;

603 
	}
}

606 
	$R_C⁄fig_TAU0_1_Cª©e_U£rInô
()

608 
	}
}

611 
__√¨
 
	$SãpMŸ‹TimîI¡îru±
()

613 if–
sm_öfo
[ 
SM_ID_0
 ].
ö_a˘ive
 == 0 )

615 
	`HAL_C⁄åﬁSãpMŸ‹
–
SM_ID_0
 );

618 if–
sm_öfo
[ 
SM_ID_1
 ].
ö_a˘ive
 == 0 )

620 
	`HAL_C⁄åﬁSãpMŸ‹
–
SM_ID_1
 );

623 if–
sm_öfo
[ 
SM_ID_2
 ].
ö_a˘ive
 == 0 )

625 
	`HAL_C⁄åﬁSãpMŸ‹
–
SM_ID_2
 );

627 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_step_motor.h

1 #i‚de‡
__HAL_STEP_MOTOR_H__


2 
	#__HAL_STEP_MOTOR_H__


	)

3 
	~"¥j_ty≥.h
"

6 
	#SM_ID_0
 0

7 
	#SM_ID_1
 1

8 
	#SM_ID_2
 2

9 
	#MAX_SM_ID
 3

	)

15 
	#SM_SPEED_0
 0

	)

16 
	#SM_SPEED_1
 1

	)

17 
	#SM_SPEED_2
 2

	)

18 
	#MAX_SM_SPEED_NUM
 3

	)

21 
	tsm_°ï_t
;

22 
	tsm_•ìd_t
;

25 
HAL_InôSãpMŸ‹
();

26 
HAL_InôSãpVÆ
–
U8
 
_id
 );

28 
HAL_SëInA˘ive
–
U8
 
_id
, U8 
_ö_a˘ive
 );

30 
HAL_SëT¨gëSãp
–
U8
 
_id
, 
sm_°ï_t
 
°ï
 );

31 
sm_°ï_t
 
HAL_GëT¨gëSãp
–
U8
 
_id
 );

33 
HAL_SëCuºítSãp
–
U8
 
_id
, 
sm_°ï_t
 
°ï
 );

34 
sm_°ï_t
 
HAL_GëCuºítSãp
–
U8
 
_id
 );

37 
HAL_SëHﬁdSãp
–
U8
 
_id
, 
sm_°ï_t
 
°ï
 );

39 
HAL_SëSãpS≥ed
–
U8
 
_id
, 
sm_•ìd_t
 
•ìd
 );

40 
sm_•ìd_t
 
HAL_GëSãpS≥ed
–
U8
 
_id
 );

42 
HAL_SëSãpS≥edCou¡
–
U8
 
_id
, U8 
_˙t
 );

43 
U8
 
HAL_GëSãpS≥edCou¡
–U8 
_id
 );

44 
HAL_DecSãpS≥edCou¡
–
U8
 
_id
 );

46 
U8
 
HAL_IsD⁄eMoveSãp
–U8 
_id
 );

47 
HAL_St›Move
–
U8
 
id
 );

48 
U8
 
HAL_SëT¨gëSãpD⁄e
–U8 
id
, 
sm_°ï_t
 
°ï
 );

50 
HAL_MoveSãp
–
U8
 
_id
 );

51 
HAL_C⁄åﬁSãpMŸ‹
–
U8
 
_id
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_uv.c

1 
	~"hw.h
"

2 
	~"hÆ_uv.h
"

5 
	#UV_OFF
 0

	)

6 
	#UV_ON
 1

	)

8 
U8
 
	ggu8UvOnOff_I˚Do‹
 = 
UV_OFF
;

9 
U8
 
	ggu8UvOnOff_W©îOut
 = 
UV_OFF
;

12 
	$HAL_Tu∫OnUv
–
HÆ_Uv_T
 
mId
)

14 if–
HAL_UV_ICE_DOOR
 =
mId
 )

16 
gu8UvOnOff_I˚Do‹
 = 
UV_ON
;

18 if–
HAL_UV_WATER_OUT
 =
mId
 )

20 
gu8UvOnOff_W©îOut
 = 
UV_ON
;

22 if–
HAL_UV_ICE_TANK
 =
mId
 )

24 
	`TURN_ON_UV_ICE_TANK
();

26 if–
HAL_UV_ICE_TRAY
 =
mId
 )

28 
	`TURN_ON_UV_ICE_TRAY
();

30 
	}
}

32 
	$HAL_Tu∫OffUv
–
HÆ_Uv_T
 
mId
)

34 if–
HAL_UV_ICE_DOOR
 =
mId
 )

36 
gu8UvOnOff_I˚Do‹
 = 
UV_OFF
;

38 if–
HAL_UV_WATER_OUT
 =
mId
 )

40 
gu8UvOnOff_W©îOut
 = 
UV_OFF
;

42 if–
HAL_UV_ICE_TANK
 =
mId
 )

44 
	`TURN_OFF_UV_ICE_TANK
();

46 if–
HAL_UV_ICE_TRAY
 =
mId
 )

48 
	`TURN_OFF_UV_ICE_TRAY
();

50 
	}
}

56 
U8
 
	$HAL_GëUvOnOffSètus
–
HÆ_Uv_T
 
mId
 )

58 
U8
 
mu8OnOff
 = 
OFF
;

60 if–
HAL_UV_ICE_DOOR
 =
mId
 )

62 
mu8OnOff
 = 
gu8UvOnOff_I˚Do‹
;

64 if–
HAL_UV_WATER_OUT
 =
mId
 )

66 
mu8OnOff
 = 
gu8UvOnOff_W©îOut
;

68 if–
HAL_UV_ICE_TANK
 =
mId
 )

70 
mu8OnOff
 = 
	`GET_STATUS_UV_ICE_TANK
();

72 if–
HAL_UV_ICE_TRAY
 =
mId
 )

74 
mu8OnOff
 = 
	`GET_STATUS_UV_ICE_TRAY
();

77  
mu8OnOff
;

78 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_uv.h

1 #i‚de‡
__HAL_UV_H__


2 
	#__HAL_UV_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	mHAL_UV_ICE_DOOR
,

9 
	mHAL_UV_WATER_OUT
,

10 
	mHAL_UV_ICE_TANK
,

11 
	mHAL_UV_ICE_TRAY
,

13 
	mMAX_HAL_UV_NUM


14 } 
	tHÆ_Uv_T
;

17 
HAL_Tu∫OnUv
–
HÆ_Uv_T
 
mId
);

19 
HAL_Tu∫OffUv
–
HÆ_Uv_T
 
mId
);

25 
U8
 
HAL_GëUvOnOffSètus
–
HÆ_Uv_T
 
mId
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_valve.c

1 
	~"hw.h
"

2 
	~"hÆ_vÆve.h
"

4 
	$HAL_Powî
()

6 if–
	`GET_STATUS_VALVE_ROOM_OUT
() != 0

7 || 
	`GET_STATUS_VALVE_COLD_OUT
() != 0

8 || 
	`GET_STATUS_VALVE_HOT_OUT
() != 0

11 
	`OPEN_VALVE_POWER_OUT
();

15 
	`CLOSE_VALVE_POWER_OUT
();

17 
	}
}

19 
	$HAL_O≥n
(
VÆve_T
 
vÆve
 )

21 if–
HAL_VALVE_NOS
 =
vÆve
 )

23 
	`OPEN_VALVE_NOS
();

25 if–
HAL_VALVE_ROOM_OUT
 =
vÆve
 )

27 
	`OPEN_VALVE_ROOM_OUT
();

29 if–
HAL_VALVE_HOT_IN
 =
vÆve
 )

31 
	`OPEN_VALVE_HOT_IN
();

33 if–
HAL_VALVE_HOT_OUT
 =
vÆve
 )

35 
	`OPEN_VALVE_HOT_OUT
();

37 if–
HAL_VALVE_HOT_DRAIN
 =
vÆve
 )

39 
	`OPEN_VALVE_HOT_DRAIN
();

41 if–
HAL_VALVE_COLD_AIR
 =
vÆve
 )

43 
	`OPEN_VALVE_COLD_AIR
();

45 if–
HAL_VALVE_COLD_OUT
 =
vÆve
 )

47 
	`OPEN_VALVE_COLD_OUT
();

49 if–
HAL_VALVE_COLD_IN
 =
vÆve
 )

51 
	`OPEN_VALVE_COLD_IN
();

53 if–
HAL_VALVE_COLD_DRAIN
 =
vÆve
 )

55 
	`OPEN_VALVE_COLD_DRAIN
();

57 if–
HAL_VALVE_COLD_FLUSH
 =
vÆve
 )

59 
	`OPEN_VALVE_COLD_FLUSH
();

61 if–
HAL_VALVE_ICE_TRAY_IN
 =
vÆve
 )

63 
	`OPEN_VALVE_ICE_TRAY_IN
();

66 if–
HAL_VALVE_SODA_OUT
 =
vÆve
 )

68 
	`OPEN_VALVE_SODA_OUT
();

69 
	`OPEN_VALVE_POWER_OUT
();

71 if–
HAL_VALVE_SODA_DRAIN
 =
vÆve
 )

73 
	`OPEN_VALVE_SODA_DRAIN
();

75 if–
HAL_VALVE_FEED
 =
vÆve
 )

77 
	`OPEN_VALVE_FEED
();

81 
	}
}

84 
	$HAL_Clo£
(
VÆve_T
 
vÆve
)

86 if–
HAL_VALVE_NOS
 =
vÆve
 )

88 
	`CLOSE_VALVE_NOS
();

90 if–
HAL_VALVE_ROOM_OUT
 =
vÆve
 )

92 
	`CLOSE_VALVE_ROOM_OUT
();

94 if–
HAL_VALVE_HOT_IN
 =
vÆve
 )

96 
	`CLOSE_VALVE_HOT_IN
();

98 if–
HAL_VALVE_HOT_OUT
 =
vÆve
 )

100 
	`CLOSE_VALVE_HOT_OUT
();

102 if–
HAL_VALVE_HOT_DRAIN
 =
vÆve
 )

104 
	`CLOSE_VALVE_HOT_DRAIN
();

106 if–
HAL_VALVE_COLD_AIR
 =
vÆve
 )

108 
	`CLOSE_VALVE_COLD_AIR
();

110 if–
HAL_VALVE_COLD_OUT
 =
vÆve
 )

112 
	`CLOSE_VALVE_COLD_OUT
();

114 if–
HAL_VALVE_COLD_IN
 =
vÆve
 )

116 
	`CLOSE_VALVE_COLD_IN
();

118 if–
HAL_VALVE_COLD_DRAIN
 =
vÆve
 )

120 
	`CLOSE_VALVE_COLD_DRAIN
();

122 if–
HAL_VALVE_COLD_FLUSH
 =
vÆve
 )

124 
	`CLOSE_VALVE_COLD_FLUSH
();

126 if–
HAL_VALVE_ICE_TRAY_IN
 =
vÆve
 )

128 
	`CLOSE_VALVE_ICE_TRAY_IN
();

131 if–
HAL_VALVE_SODA_OUT
 =
vÆve
 )

133 
	`CLOSE_VALVE_SODA_OUT
();

135 if–
HAL_VALVE_SODA_DRAIN
 =
vÆve
 )

137 
	`CLOSE_VALVE_SODA_DRAIN
();

139 if–
HAL_VALVE_FEED
 =
vÆve
 )

141 
	`CLOSE_VALVE_FEED
();

145 
	}
}

147 
	$HAL_O≥nVÆve
(
VÆve_T
 
vÆve
 )

149 
	`HAL_O≥n
(
vÆve
);

150 
	`HAL_Powî
();

151 
	}
}

153 
	$HAL_Clo£VÆve
(
VÆve_T
 
vÆve
)

155 
	`HAL_Clo£
(
vÆve
);

156 
	`HAL_Powî
();

157 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_valve.h

1 #i‚de‡
__HAL_VALVE_H__


2 
	#__HAL_VALVE_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	mHAL_VALVE_NOS
,

9 
	mHAL_VALVE_ROOM_OUT
,

10 
	mHAL_VALVE_HOT_IN
,

11 
	mHAL_VALVE_HOT_OUT
,

12 
	mHAL_VALVE_HOT_DRAIN
,

13 
	mHAL_VALVE_COLD_AIR
,

14 
	mHAL_VALVE_COLD_OUT
,

15 
	mHAL_VALVE_COLD_IN
,

16 
	mHAL_VALVE_COLD_DRAIN
,

17 
	mHAL_VALVE_COLD_FLUSH
,

18 
	mHAL_VALVE_ICE_TRAY_IN
,

25 
	mMAX_HAL_VALVE_NUM


26 } 
	tVÆve_T
;

28 
HAL_O≥nVÆve
–
VÆve_T
 
vÆve
);

29 
HAL_Clo£VÆve
–
VÆve_T
 
vÆve
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hw.h

1 #i‚de‡
__HW__H__


2 
	#__HW__H__


	)

4 
	~"mcu.h
"

5 
	~"r_smc_íåy.h
"

30 
	#RESET_WDT
(Ë
	`R_C⁄fig_WDT_Re°¨t
()

	)

33 
	#P_COMP_ONOFF
 4,5

34 
	#TURN_ON_COMP
(Ëdo{ 
	`PIN_WRITE
(
P_COMP_ONOFF
Ë1; }0)

	)

35 
	#TURN_OFF_COMP
(Ëdo{ 
	`PIN_WRITE
(
P_COMP_ONOFF
Ë0; }0)

	)

36 
	#GET_STATUS_COMP
(Ë
	`PIN_READ
(
P_COMP_ONOFF
)

	)

39 
	#P_FEEDER_CW
 4,4

40 
	#TURN_ON_FEEDER_CW
(Ëdo{ 
	`PIN_WRITE
(
P_FEEDER_CW
Ë1; }0)

	)

41 
	#TURN_OFF_FEEDER_CW
(Ëdo{ 
	`PIN_WRITE
(
P_FEEDER_CW
Ë0; }0)

	)

42 
	#GET_STATUS_FEEDER_CW
(Ë
	`PIN_READ
(
P_FEEDER_CW
)

	)

45 
	#P_FEEDER_CCW
 4,3

46 
	#TURN_ON_FEEDER_CCW
(Ëdo{ 
	`PIN_WRITE
(
P_FEEDER_CCW
Ë1; }0)

	)

47 
	#TURN_OFF_FEEDER_CCW
(Ëdo{ 
	`PIN_WRITE
(
P_FEEDER_CCW
Ë0; }0)

	)

48 
	#GET_STATUS_FEEDER_CCW
(Ë
	`PIN_READ
–
P_FEEDER_CCW
 )

	)

51 
	#P_ICE_TRAY_CW
 4,1

52 
	#TURN_ON_ICE_TRAY_CW
(Ëdo{ 
	`PIN_WRITE
(
P_ICE_TRAY_CW
Ë1; }0)

	)

53 
	#TURN_OFF_ICE_TRAY_CW
(Ëdo{ 
	`PIN_WRITE
(
P_ICE_TRAY_CW
Ë0; }0)

	)

54 
	#GET_STATUS_ICE_TRAY_CW
(Ë
	`PIN_READ
–
P_ICE_TRAY_CW
 )

	)

57 
	#P_ICE_TRAY_CCW
 4,2

58 
	#TURN_ON_ICE_TRAY_CCW
(Ëdo{ 
	`PIN_WRITE
(
P_ICE_TRAY_CCW
Ë1; }0)

	)

59 
	#TURN_OFF_ICE_TRAY_CCW
(Ëdo{ 
	`PIN_WRITE
(
P_ICE_TRAY_CCW
Ë0; }0)

	)

60 
	#GET_STATUS_ICE_TRAY_CCW
(Ë
	`PIN_READ
–
P_ICE_TRAY_CCW
 )

	)

63 
	#P_SMPS_12V
 4,7

64 
	#TURN_ON_SMPS_12V
(Ëdo{ 
	`PIN_WRITE
(
P_SMPS_12V
Ë0; }0)

	)

65 
	#TURN_OFF_SMPS_12V
(Ëdo{ 
	`PIN_WRITE
(
P_SMPS_12V
Ë1; }0)

	)

66 
	#GET_STATUS_SMPS_12V
(Ë
	`PIN_READ
–
P_SMPS_12V
 )

	)

69 
	#P_DRAIN_TANK_HIGH
 8,1

70 
	#GET_DRAIN_TANK_HIGH
(Ë
	`PIN_READ
–
P_DRAIN_TANK_HIGH
 )

	)

73 
	#P_DRAIN_TANK_LOW
 8,0

74 
	#GET_DRAIN_TANK_LOW
(Ë
	`PIN_READ
–
P_DRAIN_TANK_LOW
 )

	)

79 
	#P_STEP_MOTOR_GAS_SW_1
 7,0

80 
	#P_STEP_MOTOR_GAS_SW_2
 0,5

81 
	#P_STEP_MOTOR_GAS_SW_3
 7,1

82 
	#P_STEP_MOTOR_GAS_SW_4
 0,6

83 

	)

84 
	#TURN_ON_STEP_MOTOR_GAS_SW_1
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
Ë1; }0)

	)

85 
	#TURN_ON_STEP_MOTOR_GAS_SW_2
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
Ë1; }0)

	)

86 
	#TURN_ON_STEP_MOTOR_GAS_SW_3
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
Ë1; }0)

	)

87 
	#TURN_ON_STEP_MOTOR_GAS_SW_4
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
Ë1; }0)

	)

89 
	#TURN_OFF_STEP_MOTOR_GAS_SW_1
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_1
Ë0; }0)

	)

90 
	#TURN_OFF_STEP_MOTOR_GAS_SW_2
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_2
Ë0; }0)

	)

91 
	#TURN_OFF_STEP_MOTOR_GAS_SW_3
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_3
Ë0; }0)

	)

92 
	#TURN_OFF_STEP_MOTOR_GAS_SW_4
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_GAS_SW_4
Ë0; }0)

	)

94 
	#GET_STEP_MOTOR_GAS_SW_1
(Ë
	`PIN_READ
(
P_STEP_MOTOR_GAS_SW_1
)

	)

95 
	#GET_STEP_MOTOR_GAS_SW_2
(Ë
	`PIN_READ
(
P_STEP_MOTOR_GAS_SW_2
)

	)

96 
	#GET_STEP_MOTOR_GAS_SW_3
(Ë
	`PIN_READ
(
P_STEP_MOTOR_GAS_SW_3
)

	)

97 
	#GET_STEP_MOTOR_GAS_SW_4
(Ë
	`PIN_READ
(
P_STEP_MOTOR_GAS_SW_4
)

	)

100 
	#P_STEP_MOTOR_ICE_DOOR_4
 5,5

101 
	#P_STEP_MOTOR_ICE_DOOR_3
 5,6

102 
	#P_STEP_MOTOR_ICE_DOOR_2
 5,7

103 
	#P_STEP_MOTOR_ICE_DOOR_1
 1,7

104 

	)

105 
	#TURN_ON_STEP_MOTOR_ICE_DOOR_1
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
Ë1; }0)

	)

106 
	#TURN_ON_STEP_MOTOR_ICE_DOOR_2
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
Ë1; }0)

	)

107 
	#TURN_ON_STEP_MOTOR_ICE_DOOR_3
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
Ë1; }0)

	)

108 
	#TURN_ON_STEP_MOTOR_ICE_DOOR_4
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
Ë1; }0)

	)

110 
	#TURN_OFF_STEP_MOTOR_ICE_DOOR_1
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_1
Ë0; }0)

	)

111 
	#TURN_OFF_STEP_MOTOR_ICE_DOOR_2
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_2
Ë0; }0)

	)

112 
	#TURN_OFF_STEP_MOTOR_ICE_DOOR_3
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_3
Ë0; }0)

	)

113 
	#TURN_OFF_STEP_MOTOR_ICE_DOOR_4
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_ICE_DOOR_4
Ë0; }0)

	)

115 
	#GET_STEP_MOTOR_ICE_DOOR_4
(Ë
	`PIN_READ
(
P_STEP_MOTOR_ICE_DOOR_4
)

	)

116 
	#GET_STEP_MOTOR_ICE_DOOR_3
(Ë
	`PIN_READ
(
P_STEP_MOTOR_ICE_DOOR_3
)

	)

117 
	#GET_STEP_MOTOR_ICE_DOOR_2
(Ë
	`PIN_READ
(
P_STEP_MOTOR_ICE_DOOR_2
)

	)

118 
	#GET_STEP_MOTOR_ICE_DOOR_1
(Ë
	`PIN_READ
(
P_STEP_MOTOR_ICE_DOOR_1
)

	)

121 
	#P_STEP_MOTOR_FLOW_VALVE_4
 14,2

122 
	#P_STEP_MOTOR_FLOW_VALVE_3
 14,1

123 
	#P_STEP_MOTOR_FLOW_VALVE_2
 14,0

124 
	#P_STEP_MOTOR_FLOW_VALVE_1
 4,6

125 

	)

126 
	#TURN_ON_STEP_MOTOR_FLOW_VALVE_1
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
Ë1; }0)

	)

127 
	#TURN_ON_STEP_MOTOR_FLOW_VALVE_2
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
Ë1; }0)

	)

128 
	#TURN_ON_STEP_MOTOR_FLOW_VALVE_3
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
Ë1; }0)

	)

129 
	#TURN_ON_STEP_MOTOR_FLOW_VALVE_4
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
Ë1; }0)

	)

131 
	#TURN_OFF_STEP_MOTOR_FLOW_VALVE_1
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_1
Ë0; }0)

	)

132 
	#TURN_OFF_STEP_MOTOR_FLOW_VALVE_2
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_2
Ë0; }0)

	)

133 
	#TURN_OFF_STEP_MOTOR_FLOW_VALVE_3
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_3
Ë0; }0)

	)

134 
	#TURN_OFF_STEP_MOTOR_FLOW_VALVE_4
(Ëdÿ{ 
	`PIN_WRITE
(
P_STEP_MOTOR_FLOW_VALVE_4
Ë0; }0)

	)

136 
	#GET_STEP_MOTOR_FLOW_VALVE_4
(Ë
	`PIN_READ
(
P_STEP_MOTOR_FLOW_VALVE_4
)

	)

137 
	#GET_STEP_MOTOR_FLOW_VALVE_3
(Ë
	`PIN_READ
(
P_STEP_MOTOR_FLOW_VALVE_3
)

	)

138 
	#GET_STEP_MOTOR_FLOW_VALVE_2
(Ë
	`PIN_READ
(
P_STEP_MOTOR_FLOW_VALVE_2
)

	)

139 
	#GET_STEP_MOTOR_FLOW_VALVE_1
(Ë
	`PIN_READ
(
P_STEP_MOTOR_FLOW_VALVE_1
)

	)

142 
	#P_DRAIN_PUMP
 6,7

143 
	#TURN_ON_DRAIN_PUMP
(Ëdo{ 
	`PIN_WRITE
(
P_DRAIN_PUMP
Ë1; }0)

	)

144 
	#TURN_OFF_DRAIN_PUMP
(Ëdo{ 
	`PIN_WRITE
(
P_DRAIN_PUMP
Ë0; }0)

	)

147 
	#P_FILTER_DETECT
 6,6

148 
	#GET_STATUS_FILTER_DETECT
(Ë
	`PIN_READ
–
P_FILTER_DETECT
 )

	)

152 
	#P_SWING_BAR
 5,0

153 
	#TURN_ON_SWING_BAR
(Ëdo{ 
	`PIN_WRITE
(
P_SWING_BAR
Ë1; }0)

	)

154 
	#TURN_OFF_SWING_BAR
(Ëdo{ 
	`PIN_WRITE
(
P_SWING_BAR
Ë0; }0)

	)

155 
	#GET_STATUS_SWING_BAR
(Ë
	`PIN_READ
–
P_SWING_BAR
 )

	)

158 
	#P_UV_ONOFF_ICE_TRAY
 1,5

159 
	#TURN_ON_UV_ICE_TRAY
(Ëdo{ 
	`PIN_WRITE
(
P_UV_ONOFF_ICE_TRAY
Ë1; }0)

	)

160 
	#TURN_OFF_UV_ICE_TRAY
(Ëdo{ 
	`PIN_WRITE
(
P_UV_ONOFF_ICE_TRAY
Ë0; }0)

	)

161 
	#GET_STATUS_UV_ICE_TRAY
(Ë
	`PIN_READ
–
P_UV_ONOFF_ICE_TRAY
 )

	)

164 
	#P_UV_ONOFF_ICE_TANK
 1,6

165 
	#TURN_ON_UV_ICE_TANK
(Ëdo{ 
	`PIN_WRITE
(
P_UV_ONOFF_ICE_TANK
Ë1; }0)

	)

166 
	#TURN_OFF_UV_ICE_TANK
(Ëdo{ 
	`PIN_WRITE
(
P_UV_ONOFF_ICE_TANK
Ë0; }0)

	)

167 
	#GET_STATUS_UV_ICE_TANK
(Ë
	`PIN_READ
–
P_UV_ONOFF_ICE_TANK
 )

	)

171 
	#P_WIFI_ONOFF
 0,4

172 
	#TURN_ON_WIFI_MODULE
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_ONOFF
Ë1; }0)

	)

173 
	#TURN_OFF_WIFI_MODULE
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_ONOFF
Ë0; }0)

	)

175 
	#P_WIFI_RESET
 0,1

176 
	#TURN_ON_RESET_WIFI_MODULE
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_RESET
Ë1; }0)

	)

177 
	#TURN_OFF_RESET_WIFI_MODULE
(Ëdo{ 
	`PIN_WRITE
(
P_WIFI_RESET
Ë0; }0)

	)

181 
	#P_MICRO_SW_ICE_TRAY_2
 11,1

182 
	#GET_MICRO_SW_ICE_TRAY_2
(Ë
	`PIN_READ
–
P_MICRO_SW_ICE_TRAY_2
 )

	)

185 
	#P_MICRO_SW_ICE_TRAY_1
 14,6

186 
	#GET_MICRO_SW_ICE_TRAY_1
(Ë
	`PIN_READ
–
P_MICRO_SW_ICE_TRAY_1
 )

	)

189 
	#P_REED_SW_TANK_OPEN
 1,0

190 
	#GET_REED_SW_TANK_OPEN
(Ë
	`PIN_READ
–
P_REED_SW_TANK_OPEN
 )

	)

193 
	#P_REED_SW_TANK_OPEN_2
 10,1

194 
	#GET_REED_SW_TANK_OPEN_2
(Ë
	`PIN_READ
–
P_REED_SW_TANK_OPEN_2
 )

	)

198 
	#P_COLD_TANK_LOW
 
P7
.5

	)

199 
	#GET_COLD_TANK_LOW
(Ë–
P_COLD_TANK_LOW
 )

	)

202 
	#P_COLD_TANK_HIGH
 
P7
.5

	)

203 
	#GET_COLD_TANK_HIGH
(Ë–
P_COLD_TANK_HIGH
 )

	)

206 
	#P_COLD_TANK_OVERFLOW
 
P10
.1

	)

207 
	#GET_COLD_TANK_OVERFLOW
(Ë–
P_COLD_TANK_OVERFLOW
 )

	)

211 
	#P_ICE_INFRARED
 0,0

212 
	#TURN_ON_ICE_INFRARED
(Ëdo{ 
	`PIN_WRITE
(
P_ICE_INFRARED
Ë1; }0)

	)

213 
	#TURN_OFF_ICE_INFRARED
(Ëdo{ 
	`PIN_WRITE
(
P_ICE_INFRARED
Ë0; }0)

	)

214 
	#GET_STATUS_ICE_INFRARED
(Ë
	`PIN_READ
–
P_ICE_INFRARED
 )

	)

218 
	#P_LEAK_ONOFF
 13,0

219 
	#TURN_ON_LEAK_ONOFF
(Ëdo{ 
	`PIN_WRITE
(
P_LEAK_ONOFF
Ë0; }0)

	)

220 
	#TURN_OFF_LEAK_ONOFF
(Ëdo{ 
	`PIN_WRITE
(
P_LEAK_ONOFF
Ë1; }0)

	)

221 
	#GET_STATUS_LEAK_ONOFF
(Ë
	`PIN_READ
–
P_LEAK_ONOFF
 )

	)

225 
	#P_FAN_MOTOR_1
 5,1

226 
	#TURN_ON_FAN_MOTOR_1
(Ëdo{ 
	`PIN_WRITE
(
P_FAN_MOTOR_1
Ë1; }0)

	)

227 
	#TURN_OFF_FAN_MOTOR_1
(Ëdo{ 
	`PIN_WRITE
(
P_FAN_MOTOR_1
Ë0; }0)

	)

228 
	#GET_STATUS_FAN_MOTOR_1_ONOFF
(Ë
	`PIN_READ
(
P_FAN_MOTOR_1
)

	)

232 
	#P_ADC_COLD_ONOFF
 6,2

233 
	#TURN_ON_ADC_COLD
(Ëdo{ 
	`PIN_WRITE
(
P_ADC_COLD_ONOFF
Ë1; }0)

	)

234 
	#TURN_OFF_ADC_COLD
(Ëdo{ 
	`PIN_WRITE
(
P_ADC_COLD_ONOFF
Ë0; }0)

	)

238 
	#P_ADC_COLD_2_ONOFF
 7,6

239 
	#TURN_ON_ADC_COLD_2
(Ëdo{ 
	`PIN_WRITE
(
P_ADC_COLD_2_ONOFF
Ë1; }0)

	)

240 
	#TURN_OFF_ADC_COLD_2
(Ëdo{ 
	`PIN_WRITE
(
P_ADC_COLD_2_ONOFF
Ë0; }0)

	)

244 
	#P_ADC_ROOM_ONOFF
 6,3

245 
	#TURN_ON_ADC_ROOM
(Ëdo{ 
	`PIN_WRITE
(
P_ADC_ROOM_ONOFF
Ë1; }0)

	)

246 
	#TURN_OFF_ADC_ROOM
(Ëdo{ 
	`PIN_WRITE
(
P_ADC_ROOM_ONOFF
Ë0; }0)

	)

249 
	#P_SERVICE_SW
 14,5

250 
	#GET_STATUS_SERVICE
(Ë
	`PIN_READ
–
P_SERVICE_SW
 )

	)

253 
	#PM_EOL_RX
 
PM14
.3

	)

254 
	#P_EOL_RX
 14,3

255 

	)

256 
	#PM_EOL_TX
 
PM14
.4

	)

257 
	#P_EOL_TX
 14,4

258 

	)

267 
	#P_FLOW_SENSOR
 7,7

268 
	#GET_FLOW_SENSOR
(Ë
	`PIN_READ
–
P_FLOW_SENSOR
 )

	)

272 
	#P_HEATER_RELAY
 7,3

273 
	#TURN_ON_HEATER_RELAY
(Ëdo{ 
	`PIN_WRITE
(
P_HEATER_RELAY
Ë1; }0)

	)

274 
	#TURN_OFF_HEATER_RELAY
(Ëdo{ 
	`PIN_WRITE
(
P_HEATER_RELAY
)0; }0)

	)

275 
	#GET_STATUS_HEATER_RELAY
(Ë
	`PIN_READ
(
P_HEATER_RELAY
)

	)

278 
	#P_HEATER_TRIAC
 7,2

279 
	#TURN_ON_HEATER_TRIAC
(Ëdo{ 
	`PIN_WRITE
(
P_HEATER_TRIAC
Ë1; }0)

	)

280 
	#TURN_OFF_HEATER_TRIAC
(Ëdo{ 
	`PIN_WRITE
(
P_HEATER_TRIAC
Ë0; }0)

	)

281 
	#GET_STATUS_HEATER_TRIAC
(Ë
	`PIN_READ
(
P_HEATER_TRIAC
)

	)

283 
	#P_HEATER_INPUT
 13,7

284 
	#GET_STATUS_HEATER_INPUT
(Ë
	`PIN_READ
(
P_HEATER_INPUT
 )

	)

289 
	#P_VALVE_POWER_OUT
 7,4

290 
	#OPEN_VALVE_POWER_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_POWER_OUT
Ë1; }0)

	)

291 
	#CLOSE_VALVE_POWER_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_POWER_OUT
Ë0; }0)

	)

292 
	#GET_STATUS_VALVE_POWER_OUT
(Ë
	`PIN_READ
–
P_VALVE_POWER_OUT
 )

	)

296 
	#P_VALVE_NOS
 5,4

297 
	#OPEN_VALVE_NOS
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_NOS
Ë0; }0)

	)

298 
	#CLOSE_VALVE_NOS
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_NOS
Ë1; }0)

	)

299 
	#GET_STATUS_VALVE_NOS
(Ë
	`PIN_READ
–
P_VALVE_NOS
 )

	)

303 
	#P_VALVE_ROOM_OUT
 8,3

304 
	#OPEN_VALVE_ROOM_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_ROOM_OUT
Ë1; }0)

	)

305 
	#CLOSE_VALVE_ROOM_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_ROOM_OUT
Ë0; }0)

	)

306 
	#GET_STATUS_VALVE_ROOM_OUT
(Ë
	`PIN_READ
–
P_VALVE_ROOM_OUT
 )

	)

309 
	#P_VALVE_ICE_TRAY_IN
 8,6

310 
	#OPEN_VALVE_ICE_TRAY_IN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_ICE_TRAY_IN
Ë1; }0)

	)

311 
	#CLOSE_VALVE_ICE_TRAY_IN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_ICE_TRAY_IN
Ë0; }0)

	)

312 
	#GET_STATUS_VALVE_ICE_TRAY_IN
(Ë
	`PIN_READ
–
P_VALVE_ICE_TRAY_IN
 )

	)

316 
	#P_VALVE_COLD_OUT
 10,2

317 
	#OPEN_VALVE_COLD_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_OUT
Ë1; }0)

	)

318 
	#CLOSE_VALVE_COLD_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_OUT
Ë0; }0)

	)

319 
	#GET_STATUS_VALVE_COLD_OUT
(Ë
	`PIN_READ
–
P_VALVE_COLD_OUT
 )

	)

322 
	#P_VALVE_COLD_IN
 8,2

323 
	#OPEN_VALVE_COLD_IN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_IN
Ë1; }0)

	)

324 
	#CLOSE_VALVE_COLD_IN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_IN
Ë0; }0)

	)

325 
	#GET_STATUS_VALVE_COLD_IN
(Ë
	`PIN_READ
–
P_VALVE_COLD_IN
 )

	)

328 
	#P_VALVE_COLD_AIR
 8,7

329 
	#OPEN_VALVE_COLD_AIR
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_AIR
Ë0; }0)

	)

330 
	#CLOSE_VALVE_COLD_AIR
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_AIR
Ë1; }0)

	)

331 
	#GET_STATUS_VALVE_COLD_AIR
(Ë
	`PIN_READ
–
P_VALVE_COLD_AIR
 )

	)

333 
	#P_VALVE_COLD_DRAIN
 3,0

334 
	#OPEN_VALVE_COLD_DRAIN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_DRAIN
Ë1; }0)

	)

335 
	#CLOSE_VALVE_COLD_DRAIN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_DRAIN
Ë0; }0)

	)

336 
	#GET_STATUS_VALVE_COLD_DRAIN
(Ë
	`PIN_READ
–
P_VALVE_COLD_DRAIN
 )

	)

339 
	#P_VALVE_COLD_FLUSH
 5,2

340 
	#OPEN_VALVE_COLD_FLUSH
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_FLUSH
Ë1; }0)

	)

341 
	#CLOSE_VALVE_COLD_FLUSH
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_COLD_FLUSH
Ë0; }0)

	)

342 
	#GET_STATUS_VALVE_COLD_FLUSH
(Ë
	`PIN_READ
(
P_VALVE_COLD_FLUSH
)

	)

345 
	#P_VALVE_HOT_IN
 5,3

346 
	#OPEN_VALVE_HOT_IN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_HOT_IN
Ë1; }0)

	)

347 
	#CLOSE_VALVE_HOT_IN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_HOT_IN
Ë0; }0)

	)

348 
	#GET_STATUS_VALVE_HOT_IN
(Ë
	`PIN_READ
–
P_VALVE_HOT_IN
 )

	)

350 
	#P_VALVE_HOT_DRAIN
 8,4

351 
	#OPEN_VALVE_HOT_DRAIN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_HOT_DRAIN
Ë0; }0)

	)

352 
	#CLOSE_VALVE_HOT_DRAIN
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_HOT_DRAIN
Ë1; }0)

	)

353 
	#GET_STATUS_VALVE_HOT_DRAIN
(Ë
	`PIN_READ
–
P_VALVE_HOT_DRAIN
 )

	)

355 
	#P_VALVE_HOT_OUT
 8,5

356 
	#OPEN_VALVE_HOT_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_HOT_OUT
Ë1; }0)

	)

357 
	#CLOSE_VALVE_HOT_OUT
(Ëdo{ 
	`PIN_WRITE
(
P_VALVE_HOT_OUT
Ë0; }0)

	)

358 
	#GET_STATUS_VALVE_HOT_OUT
(Ë
	`PIN_READ
–
P_VALVE_HOT_OUT
 )

	)

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\mcu.h

1 #i‚de‡
__MCU_H__


2 
	#__MCU_H__


	)

4 
	~"r_cg_ma¸odrivî.h
"

6 
	~"¥j_ty≥.h
"

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\drain_water.c

5 
	~"døö_w©î.h
"

6 
	~"hó…h_makî.h
"

7 
	~"w©î_out.h
"

8 
	~"cﬁd_w©î.h
"

9 
	~"îr‹.h
"

10 
	~"Êow_mëî.h
"

14 
	#MIN_CONSUMPTION_COLD_WATER
 (
AMOUNT_500
)

	)

17 
DøöW©î_T
 
	gDøöW©î
;

20 
U32
 
	ggu32DøöTimeTabÀ
[ 2 ] =

22 
AMOUNT_250
,

23 
AMOUNT_12000
,

26 
U8
 
IsVÆidSèπDøö
();

27 
U8
 
CheckW©îC⁄sum±i⁄
();

28 
Upd©eDøöTime
();

30 
	$InôDøöW©î
()

32 
DøöW©î
.
Sèπ
 = 
FALSE
;

33 
DøöW©î
.
Mode
 = 
HALF_DRAIN
;

35 
DøöW©î
.
DøöAmou¡
 = 0UL;

36 
DøöW©î
.
C⁄sumCﬁdW©î
 = 
MIN_CONSUMPTION_COLD_WATER
;

37 
	}
}

39 
	$GëDøöW©îD©a
(
DøöW©î_T
 *
pD©a
)

41 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
DøöW©î
, –
DøöW©î_T
 ));

42 
	}
}

45 
U8
 
	$SèπDøöW©î
(
U8
 
mu8Mode
)

48 if–
	`IsVÆidSèπDøö
(Ë=
TRUE
 )

51 if–
mu8Mode
 =
HALF_DRAIN
 )

53 if–
	`CheckW©îC⁄sum±i⁄
(Ë=
FALSE
 )

55 
DøöW©î
.
C⁄sumCﬁdW©î
 = 
MIN_CONSUMPTION_COLD_WATER
;

56  
FALSE
;

60 
DøöW©î
.
Sèπ
 = 
TRUE
;

62 
DøöW©î
.
Mode
 = 
mu8Mode
;

63 
DøöW©î
.
DøöAmou¡
 = 
gu32DøöTimeTabÀ
[ DøöW©î.
Mode
 ];

64 
	`InôHó…hDøö
();

66 
	`Regi°îFlowMëîId
–
FLOW_ID_DRAIN
, 
Upd©eDøöTime
 );

68  
TRUE
;

71  
FALSE
;

72 
	}
}

74 
	$St›DøöW©î
()

76 
DøöW©î
.
Sèπ
 = 
FALSE
;

78 
DøöW©î
.
C⁄sumCﬁdW©î
 = 
MIN_CONSUMPTION_COLD_WATER
;

80 
	`InôHó…hDøö
();

82 
	`Regi°îFlowMëîId
–
FLOW_ID_DRAIN
, 
NULL
 );

83 
	}
}

85 
U8
 
	$IsSèπDøöW©î
()

87  
DøöW©î
.
Sèπ
;

88 
	}
}

90 
U8
 
	$IsDøöW©îHÆf
()

92 if–
DøöW©î
.
Mode
 =
HALF_DRAIN
 )

94  
TRUE
;

97  
FALSE
;

98 
	}
}

100 
U8
 
	$GëDøöTimePî˚¡
()

102 
U32
 
mu32VÆ
 = 0;

103 
U32
 
mu32Cuºít
;

104 
U32
 
mu32Ba£
;

106 
mu32Cuºít
 = 
DøöW©î
.
DøöAmou¡
 * 100;

107 
mu32Ba£
 = 
gu32DøöTimeTabÀ
[ 
DøöW©î
.
Mode
 ];

109 
mu32VÆ
 = (
mu32Cuºít
 / 
mu32Ba£
 );

110 
mu32VÆ
 = 100UL - mu32Val;

112  (
U8
)
mu32VÆ
;

113 
	}
}

117 
U8
 
	$IsGoögOnDøöW©îFuŒ
()

119 if–
	`IsSèπDøöW©î
(Ë=
TRUE


120 && 
	`IsDøöW©îHÆf
(Ë=
FALSE
 )

122  
TRUE
;

125  
FALSE
;

126 
	}
}

129 
U8
 
	$Re£tDøöW©î
()

131 if–
	`IsSèπDøöW©î
(Ë=
TRUE
 )

133 
	`St›Hó…hDøö
();

134  
TRUE
;

137  
FALSE
;

138 
	}
}

146 
U8
 
	$IsVÆidSèπDøö
()

148 if–
	`IsEº‹Ty≥
–
ERR_TYPE_DRAIN
 ) =
TRUE
 )

150  
FALSE
;

153  
TRUE
;

154 
	}
}

156 
	$Upd©eDøöCﬁdW©îC⁄sume
(
U32
 
mu32Amou¡
)

158 if–
DøöW©î
.
C⁄sumCﬁdW©î
 <
mu32Amou¡
 )

160 
DøöW©î
.
C⁄sumCﬁdW©î
 = 0UL;

164 
DøöW©î
.
C⁄sumCﬁdW©î
 -
mu32Amou¡
;

166 
	}
}

175 
U8
 
	$CheckW©îC⁄sum±i⁄
()

177 if–
DøöW©î
.
C⁄sumCﬁdW©î
 != 0 )

180  
TRUE
;

183  
FALSE
;

184 
	}
}

187 
	$Upd©eDøöTime
()

189 if–
DøöW©î
.
DøöAmou¡
 != 0 )

191 
DøöW©î
.
DøöAmou¡
--;

193 
	}
}

195 
	$C⁄åﬁDøöW©î
()

197 if–
	`IsSèπDøöW©î
(Ë=
FALSE
 )

204 if–
DøöW©î
.
DøöAmou¡
 == 0

205 || 
	`IsEº‹Ty≥
–
ERR_TYPE_DRAIN
 ) =
TRUE
 )

207 
	`St›Hó…hDøö
();

211 if–
	`DoHó…hDøö
(Ë=
HMS_STATUS_DONE
 )

213 
	`St›DøöW©î
();

215 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\drain_water.h

1 #i‚de‡
__DRAIN_WATER_H__


2 
	#__DRAIN_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_døö_w©î_


8 
U8
 
	mSèπ
;

9 
U8
 
	mMode
;

11 
U32
 
	mDøöAmou¡
;

12 
U32
 
	mC⁄sumCﬁdW©î
;

13 } 
	tDøöW©î_T
;

16 
InôDøöW©î
();

17 
GëDøöW©îD©a
(
DøöW©î_T
 *
pD©a
);

20 
	#HALF_DRAIN
 0

21 
	#FULL_DRAIN
 1

22 
U8
 
	`SèπDøöW©î
(U8 
mu8Mode
);

	)

23 
U8
 
IsSèπDøöW©î
();

29 
U8
 
IsDøöW©îHÆf
();

32 
U8
 
GëDøöTimePî˚¡
();

36 
U8
 
IsGoögOnDøöW©îFuŒ
();

38 
U8
 
Re£tDøöW©î
();

41 
Upd©eDøöCﬁdW©îC⁄sume
(
U32
 
amou¡
);

43 
C⁄åﬁDøöW©î
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health.c

1 
	~"hó…h.h
"

2 
	~"ì¥om.h
"

4 
	~"πc.h
"

5 
	~"îr‹.h
"

6 
	~"døö_w©î.h
"

7 
	~"w©î_out.h
"

8 
	~"i˚_do‹.h
"

9 
	~"Êush_w©î_out.h
"

10 
	~"Êow_mëî.h
"

13 
Hó…h_T
 
	gHó…h
;

16 
	#DEFAULT_HEALTH_MODE
 ( 
HEALTH_MODE_NONE
 )

	)

18 
	$InôHó…h
()

20 
Hó…h
.
Mode
 = 
DEFAULT_HEALTH_MODE
;

22 
Hó…h
.
Hour
 = 0;

23 
Hó…h
.
Mö
 = 0;

24 
Hó…h
.
Adju°Mode
 = 0;

28 
Hó…h
.
C⁄fT¨gëTime
 = 
NONE_RTC_TARGET_TIME
;

29 
Hó…h
.
C⁄f1Hour
 = 
NONE_RTC_1HOUR
;

30 
Hó…h
.
C⁄f2Hour
 = 
NONE_RTC_2HOUR
;

31 
Hó…h
.
C⁄fMaxT¨gëTime
 = 
MAX_NONE_RTC_TIME_OUT
;

32 
Hó…h
.
C⁄fWìkDays
 = 
DEFAULT_UNUSED_WEEK_DAYS
;

34 
Hó…h
.
Unu£dWìkDays
 = 
DEFAULT_UNUSED_WEEK_DAYS
;

35 
Hó…h
.
T¨gëTimeOut
 = 
NONE_RTC_TARGET_TIME
;

36 
Hó…h
.
CuºítTimeOut
 = 0;

37 
	}
}

39 
	$GëHó…hD©a
(
Hó…h_T
 *
pD©a
)

41 
	`mem˝y
–
pD©a
, &
Hó…h
, –
Hó…h_T
 ));

42 
	}
}

48 
U8
 
	$IsC⁄fHó…h
()

50 #i‡
CONFIG_STER


51 
NFC_TagTime_T
 
mTime
;

55 if–
	`IsRTC_Eº‹
(Ë=
TRUE
 )

57  
FALSE
;

61 if–
	`GëSãrPîiodMode
() == 0xFF

62 || 
	`GëHó…hHour
() == 0xFF

63 || 
	`GëHó…hMö
() == 0xFF

64 || 
	`GëSãrPîiodMode
() == 0xFF )

66  
FALSE
;

71 if–
	`IsVÆidHó…h
(Ë=
FALSE
 )

73  
FALSE
;

76  
TRUE
;

77 
	}
}

80 
U8
 
	$IsSèπHó…h
()

83 if–
	`IsGoögOnDøöW©îFuŒ
(Ë=
TRUE
 )

85  
TRUE
;

88  
FALSE
;

89 
	}
}

92 
	$SëHó…hModeVÆ
(
U8
 
mu8Mode
)

94 
Hó…h
.
Mode
 = 
mu8Mode
;

95 
	}
}

97 
	$SëHó…hMode
(
U8
 
mu8Mode
 )

99 #i‡!
CONFIG_STER


100 
mu8Mode
 &~
HEALTH_MODE_STER
;

103 
Hó…h
.
Mode
 |
mu8Mode
;

104 
	`SaveEïromId
–
EEP_ID_CONF_HEALTH
 );

105 
	}
}

107 
	$CÀ¨Hó…hMode
(
U8
 
mu8Mode
 )

109 
Hó…h
.
Mode
 &~
mu8Mode
;

110 
	`SaveEïromId
–
EEP_ID_CONF_HEALTH
 );

111 
	}
}

113 
U8
 
	$IsSëHó…hMode
(
U8
 
mu8Mode
 )

115 if–(
Hó…h
.
Mode
 & 
mu8Mode
 ) == mu8Mode )

117  
TRUE
;

120  
FALSE
;

121 
	}
}

123 
U8
 
	$GëHó…hMode
()

125  
Hó…h
.
Mode
;

126 
	}
}

130 
	$SëHó…hHour
(
U8
 
mu8VÆ
 )

132 if–
mu8VÆ
 < 24U )

134 if–
Hó…h
.
Hour
 !
mu8VÆ
 )

136 
	`SaveEïromId
(
EEP_ID_STER_RESERVATION_HOUR
);

138 
Hó…h
.
Hour
 = 
mu8VÆ
;

140 
	}
}

142 
U8
 
	$GëHó…hHour
()

144  
Hó…h
.
Hour
;

145 
	}
}

148 
	$SëHó…hMö
(
U8
 
mu8VÆ
 )

150 if–
mu8VÆ
 == 30U || mu8Val == 0U )

152 if–
Hó…h
.
Mö
 !
mu8VÆ
 )

154 
	`SaveEïromId
(
EEP_ID_STER_RESERVATION_MIN
);

156 
Hó…h
.
Mö
 = 
mu8VÆ
;

158 
	}
}

160 
U8
 
	$GëHó…hMö
()

162  
Hó…h
.
Mö
;

163 
	}
}

167 
	$SëHó…hAdju°Mode
(
U8
 
mu8Mode
)

169 if–
mu8Mode
 > 
ADJUST_MODE_AFTER
 )

174 
Hó…h
.
Adju°Mode
 = 
mu8Mode
;

175 
	`SaveEïromId
–
EEP_ID_STER_ADJUST_MODE
 );

176 
	}
}

178 
U8
 
	$GëHó…hAdju°Mode
()

180  
Hó…h
.
Adju°Mode
;

181 
	}
}

185 
U8
 
	$GëHó…hHourAdju°
()

187 
U8
 
mu8Hour
;

188 
U8
 
mu8Mode
;

191 
mu8Hour
 = 
	`GëHó…hHour
();

192 
mu8Mode
 = 
	`GëHó…hAdju°Mode
();

193 if–
mu8Mode
 =
ADJUST_MODE_BEFORE
 )

195 if–
mu8Hour
 >= 2 )

197 
mu8Hour
 = mu8Hour - 2;

199 if–
mu8Hour
 == 1 )

201 
mu8Hour
 = 23;

203 if–
mu8Hour
 == 0 )

205 
mu8Hour
 = 22;

208 if–
mu8Mode
 =
ADJUST_MODE_AFTER
 )

211 if–
mu8Hour
 <= 21 )

213 
mu8Hour
 = mu8Hour + 2;

215 if–
mu8Hour
 == 22 )

217 
mu8Hour
 = 0;

219 if–
mu8Hour
 == 23 )

221 
mu8Hour
 = 1;

225  
mu8Hour
;

226 
	}
}

232 
U8
 
	$IsU£rUsög
()

234 if–
	`GëW©îOut
(Ë=
TRUE
 )

236  
TRUE
;

239 if–
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

241  
TRUE
;

245  
FALSE
;

246 
	}
}

248 
	$Re£tTime
()

250 
Hó…h
.
T¨gëTimeOut
 = Hó…h.
C⁄fT¨gëTime
;

251 
Hó…h
.
CuºítTimeOut
 = 0;

252 
	}
}

254 
	$SëHó…hC⁄fDøöW©î
(
U32
 
mu32T¨gë
, U32 
mu32Hour_1
, U32 
mu32Hour_2
, 
U8
 
mu8Days
 )

256 
Hó…h
.
C⁄fT¨gëTime
 = 
mu32T¨gë
;

257 
Hó…h
.
C⁄f1Hour
 = 
mu32Hour_1
;

258 
Hó…h
.
C⁄f2Hour
 = 
mu32Hour_2
;

259 
Hó…h
.
C⁄fWìkDays
 = 
mu8Days
;

260 
Hó…h
.
C⁄fMaxT¨gëTime
 = (
mu32T¨gë
 + 
mu32Hour_1
);

262 
	`Re£tTime
();

263 
	}
}

269 
U8
 
	$IsVÆidHó…h
()

272 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

274  
FALSE
;

278 if–
	`GëOuègeSètus
(
TYPE_WATER
Ë=
FLOW_OUTAGE


279 || 
	`GëOuègeSètus
–
TYPE_HOT_WATER
 ) =
FLOW_OUTAGE
 )

281  
FALSE
;

285 if–
	`IsEº‹Ty≥
–
ERR_TYPE_STER
 ) =
TRUE
 )

287  
FALSE
;

291 if–
	`IsU£rUsög
(Ë=
TRUE
 )

293  
FALSE
;

296 if–
	`IsSèπDøöW©î
(Ë=
TRUE
 )

298  
FALSE
;

301  
TRUE
;

302 
	}
}

304 #i‡
CONFIG_STER


305 
U8
 
	$GëAœømByRTC
(
U8
 
mu8A˘i⁄
)

307 
U8
 
mu8Aœøm
 = 
FALSE
;

308 
U8
 
mu8Hour
;

309 
U8
 
mu8Mö
;

312 
mu8Hour
 = 
	`GëHó…hHourAdju°
();

313 
mu8Mö
 = 
	`GëHó…hMö
();

314 i‡–
	`IsAœømTime
(
mu8Hour
, 
mu8Mö
, 0Ë=
STATUS_ALARAM


315 && 
	`IsAœømTime
(
mu8Hour
, 
mu8Mö
 + 10, 0Ë=
STATUS_NOT_YET
 )

318 if–
mu8Aœøm
 =
FALSE
 )

320 
mu8Aœøm
 = 
TRUE
;

321 
mu8A˘i⁄
 = 
TRUE
;

326 
mu8Aœøm
 = 
FALSE
;

327 
mu8A˘i⁄
 = 
FALSE
;

331  
mu8A˘i⁄
;

332 
	}
}

337 
	$MakeO√HourE¨ly
()

339 if–
Hó…h
.
Unu£dWìkDays
 != 0 )

341 
Hó…h
.
Unu£dWìkDays
--;

345 
Hó…h
.
Unu£dWìkDays
 = Hó…h.
C⁄fWìkDays
;

346 
Hó…h
.
CuºítTimeOut
 = Hó…h.
C⁄f1Hour
;

348 
	}
}

350 
U8
 
	$GëAœømByN⁄eRTC
(
U8
 
mu8A˘i⁄
)

352 
U32
 
mu32RemaöTime
;

355 
mu32RemaöTime
 = 
Hó…h
.
T¨gëTimeOut
 - Hó…h.
CuºítTimeOut
;

359 if–
mu32RemaöTime
 <
Hó…h
.
C⁄f2Hour
 )

361 if–
	`IsU£rUsög
(Ë=
TRUE
 )

363 
Hó…h
.
Unu£dWìkDays
 = Hó…h.
C⁄fWìkDays
;

370 if–
mu32RemaöTime
 <
Hó…h
.
C⁄f1Hour
 )

372 if–
	`IsU£rUsög
(Ë=
TRUE
 )

374 if–
Hó…h
.
T¨gëTimeOut
 < Hó…h.
C⁄fMaxT¨gëTime
 )

376 
Hó…h
.
T¨gëTimeOut
 +Hó…h.
C⁄f1Hour
;

382 if–
Hó…h
.
T¨gëTimeOut
 > Hó…h.
CuºítTimeOut
 )

384 
mu8A˘i⁄
 = 
FALSE
;

386 
Hó…h
.
CuºítTimeOut
++;

390 
mu8A˘i⁄
 = 
TRUE
;

393 
	`Re£tTime
();

396 
	`MakeO√HourE¨ly
();

399  
mu8A˘i⁄
;

400 
	}
}

404 
	$Upd©eHó…hOnTime
()

406 
TimeD©a_T
 
mTime
;

407 
U8
 
mu8Hour
;

408 
U8
 
mu8Mö
;

411 
mu8Hour
 = 
	`GëHó…hHourAdju°
();

412 
mu8Mö
 = 
	`GëHó…hMö
();

413 
	`GëRtcTime
–&
mTime
 );

415 if–
mu8Mö
 == 0 )

417 if–
mu8Hour
 != 0 )

419 
mTime
.
Hour
 = 
mu8Hour
 - 1;

423 
mTime
.
Hour
 = 23;

426 
mTime
.
Mö
 = 59;

430 
mTime
.
Hour
 = 
mu8Hour
;

431 
mTime
.
Mö
 = 29;

434 
mTime
.
Sec
 = 55;

436 
	`SëRtcTime
–&
mTime
 );

438 
	}
}

440 
	$Upd©eHó…hOnTime_2
()

442 
Hó…h
.
CuºítTimeOut
 = Hó…h.
T¨gëTimeOut
 - 5UL;

443 
	}
}

445 
	$Upd©eHó…hOnTimeO√Hour
()

447 
Hó…h
.
CuºítTimeOut
 = Hó…h.
T¨gëTimeOut
 - (
NONE_RTC_1HOUR
);

448 
	}
}

450 
	$Upd©eHó…hOnTimeTwoHour
()

452 
Hó…h
.
CuºítTimeOut
 = Hó…h.
T¨gëTimeOut
 - (
NONE_RTC_2HOUR
);

453 
	}
}

455 
	$Upd©eHó…hOnTimeWìk
()

457 
Hó…h
.
Unu£dWìkDays
 = 0;

458 
	}
}

461 
	$C⁄åﬁHó…h
()

463 
U8
 
mu8CheckA˘i⁄
 = 
FALSE
;

466 #i‡
CONFIG_STER


468 if–
	`IsRTC_Eº‹
(Ë=
TRUE


469 && 
	`GëHó…hMode
(Ë!
HEALTH_MODE_NONE
 )

471 
	`CÀ¨Hó…hMode
–
HEALTH_MODE_ALL
 );

475 
mu8CheckA˘i⁄
 = 
	`GëAœømByN⁄eRTC
( mu8CheckAction );

478 if–
Hó…h
.
Mode
 =
HEALTH_MODE_NONE
 )

480 
mu8CheckA˘i⁄
 = 
FALSE
;

485 if–
	`IsVÆidHó…h
(Ë=
FALSE
 )

491 #i‡
CONFIG_STER


492 
mu8CheckA˘i⁄
 = 
	`GëAœømByRTC
( mu8CheckAction );

496 if–
mu8CheckA˘i⁄
 =
TRUE
 )

499 if–
	`IsSëHó…hMode
–
HEALTH_MODE_DRAIN
 ) =
TRUE
 )

501 
	`SèπDøöW©î
–
HALF_DRAIN
 );

504 if–
	`IsSèπDøöW©î
(Ë=
TRUE
 )

506 
mu8CheckA˘i⁄
 = 
FALSE
;

509 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health.h

1 #i‚de‡
__HEALTH_H__


2 
	#__HEALTH_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_hó…h_


8 
U8
 
	mMode
;

10 
U8
 
	mHour
;

11 
U8
 
	mMö
;

12 
U8
 
	mAdju°Mode
;

15 
U32
 
	mC⁄fT¨gëTime
;

16 
U32
 
	mC⁄f1Hour
;

17 
U32
 
	mC⁄f2Hour
;

18 
U32
 
	mC⁄fMaxT¨gëTime
;

19 
U8
 
	mC⁄fWìkDays
;

21 
U8
 
	mUnu£dWìkDays
;

22 
U32
 
	mT¨gëTimeOut
;

23 
U32
 
	mCuºítTimeOut
;

24 } 
	tHó…h_T
;

27 
InôHó…h
();

28 
GëHó…hD©a
(
Hó…h_T
 *
pD©a
);

33 
U8
 
IsC⁄fHó…h
();

38 
U8
 
IsSèπHó…h
();

40 
	#HEALTH_MODE_NONE
 0x00

41 
	#HEALTH_MODE_STER
 0x01

42 
	#HEALTH_MODE_DRAIN
 0x02

43 
	#HEALTH_MODE_ALL
 ( 
HEALTH_MODE_STER
 | 
HEALTH_MODE_DRAIN
 )

	)

44 
SëHó…hModeVÆ
(
U8
 
mu8Mode
 );

45 
SëHó…hMode
(
U8
 
mu8Mode
 );

46 
CÀ¨Hó…hMode
(
U8
 
mu8Mode
 );

47 
U8
 
IsSëHó…hMode
(U8 
mu8Mode
 );

48 
U8
 
GëHó…hMode
();

51 
SëHó…hHour
(
U8
 
mu8VÆ
 );

52 
U8
 
GëHó…hHour
();

55 
SëHó…hMö
(
U8
 
mu8VÆ
 );

56 
U8
 
GëHó…hMö
();

59 
	#ADJUST_MODE_NONE
 0

	)

60 
	#ADJUST_MODE_BEFORE
 1

	)

61 
	#ADJUST_MODE_AFTER
 2

	)

62 
U8
 
GëHó…hAdju°Mode
();

63 
SëHó…hAdju°Mode
(
U8
 
mu8Mode
);

64 
U8
 
GëHó…hHourAdju°
();

67 
	#NONE_RTC_TARGET_TIME
 86400UL

	)

69 
	#NONE_RTC_1HOUR
 3600UL

	)

70 
	#NONE_RTC_2HOUR
 7200UL

	)

71 
	#MAX_NONE_RTC_TIME_OUT
 ( 
NONE_RTC_TARGET_TIME
 + 
NONE_RTC_1HOUR
 )

	)

72 
	#DEFAULT_UNUSED_WEEK_DAYS
 7U

	)

73 
SëHó…hC⁄fDøöW©î
(
U32
 
mu32T¨gë
, U32 
mu32Hour_1
, U32 
mu32Hour_2
, 
U8
 
mu8Days
);

75 
U8
 
IsVÆidHó…h
();

77 
U8
 
GëAœømByN⁄eRTC
(U8 
mu8A˘i⁄
);

80 
Upd©eHó…hOnTime
();

81 
Upd©eHó…hOnTime_2
();

82 
Upd©eHó…hOnTimeO√Hour
();

83 
Upd©eHó…hOnTimeTwoHour
();

84 
Upd©eHó…hOnTimeWìk
();

87 
C⁄åﬁHó…h
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health_maker.c

1 
	~"hó…h_makî.h
"

3 
	~"hÆ_adc.h
"

4 
	~"Àvñ.h
"

5 
	~"vÆve.h
"

6 
	~"døö.h
"

7 
	~"døö_pump.h
"

8 
	~"cﬁd_w©î.h
"

9 
	~"i˚.h
"

10 
	~"ènk_˛ón.h
"

11 
	~"w©î_out_comm⁄.h
"

15 
	#CONFIG_USE_DRAIN_TIMEOUT
 1

	)

18 
	#DRAIN_MAX_TIMEOUT
 6000U

	)

20 
DoDøö_T
 
	gDøöSãp
;

22 
	$InôHó…hDøö
()

24 
DøöSãp
.
Sãp
 = 
STEP_DRAIN_READY
;

26 #i‡
CONFIG_USE_DRAIN_TIMEOUT


27 
DøöSãp
.
ExôTime
 = 
DRAIN_MAX_TIMEOUT
;

29 
	}
}

31 
	$GëHó…hDøöD©a
(
DoDøö_T
 *
pDøö
)

33 
	`MEMCPY
–(
__FAR
 *)
pDøö
, (c⁄° __FAR *)&
DøöSãp
, –
DoDøö_T
 ));

34 
	}
}

36 
	$Upd©eHó…hDøöTime
()

38 
DøöSãp
.
ExôTime
 = 0U;

39 
	}
}

41 
	$St›Hó…hDøö
()

43 if–
DøöSãp
.
Sãp
 <
STEP_DRAIN_COLD
 )

45 
DøöSãp
.
Sãp
 = 
STEP_DRAIN_CLOSE_IN
;

47 
	}
}

49 
HMSètus_T
 
	$DoHó…hDøö
()

52 
HMSètus_T
 
mSètus
 = 
HMS_STATUS_GOING
;

55 
DøöSãp
.
Sãp
)

57 
STEP_DRAIN_READY
:

58 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

59 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

61 
DøöSãp
.
ExôTime
 = 
DRAIN_MAX_TIMEOUT
;

63 
DøöSãp
.
WaôTime
 = 
WAIT_200MS
;

64 
DøöSãp
.
Sãp
++;

67 
STEP_DRAIN
:

68 if–
DøöSãp
.
WaôTime
 != 0 )

70 
DøöSãp
.
WaôTime
--;

74 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

75 
DøöSãp
.
Sãp
++;

79 
STEP_DRAIN_COLD
:

81 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

82 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

84 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

85 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

88 if–
DøöSãp
.
ExôTime
 != 0 )

90 
DøöSãp
.
ExôTime
--;

94 
DøöSãp
.
Sãp
++;

99 
STEP_DRAIN_CLOSE_IN
:

100 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

101 
DøöSãp
.
WaôTime
 = 
WAIT_100MS
;

103 
DøöSãp
.
Sãp
++;

106 
STEP_DRAIN_CLOSE_DRAIN
:

107 if–
DøöSãp
.
WaôTime
 != 0 )

109 
DøöSãp
.
WaôTime
--;

113 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

114 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

116 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

117 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

119 
DøöSãp
.
Sãp
++;

123 
STEP_DRAIN_DONE
:

125 
mSètus
 = 
HMS_STATUS_DONE
;

129 
DøöSãp
.
Sãp
 = 
STEP_DRAIN_READY
;

134  
mSètus
;

135 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health_maker.h

1 #i‚de‡
__HEALTH_MAKER_H__


2 
	#__HEALTH_MAKER_H__


	)

4 
	~"¥j_ty≥.h
"

11 
	mHMS_STATUS_GOING
,

12 
	mHMS_STATUS_DONE
,

13 
	mHMS_STATUS_ERR
,

14 } 
	tHMSètus_T
;

19 
	mSTEP_DRAIN_READY
,

20 
	mSTEP_DRAIN
,

21 
	mSTEP_DRAIN_COLD
,

22 
	mSTEP_DRAIN_CLOSE_IN
,

23 
	mSTEP_DRAIN_CLOSE_DRAIN
,

24 
	mSTEP_DRAIN_DONE
,

25 } 
	tDøöSãp_T
;

27 
	s_do_døö_


29 
DøöSãp_T
 
	mSãp
;

30 
U16
 
	mWaôTime
;

31 
U16
 
	mExôTime
;

34 } 
	tDoDøö_T
;

37 
InôHó…hDøö
();

38 
GëHó…hDøöD©a
(
DoDøö_T
 *
pDøö
);

39 
Upd©eHó…hDøöTime
();

41 
St›Hó…hDøö
();

44 
HMSètus_T
 
DoHó…hDøö
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\process_uv.c

1 
	~"¥j_ty≥.h
"

2 
	~"¥o˚ss_uv.h
"

3 
	~"uv.h
"

4 
	~"utû.h
"

5 
	~"vÆve.h
"

7 
	~"i˚.h
"

8 
	~"i˚_fuŒ.h
"

9 
	~"i˚_do‹.h
"

10 
	~"i˚_åay.h
"

11 
	~"w©î_out.h
"

12 
	~"hÆ_öput.h
"

13 
	~"hÆ_uv.h
"

14 
	~"powî_ßvög.h
"

15 
	~"hó…h.h
"

19 
	#UV_3_SEC
 30UL

20 
	#UV_7_SEC
 70UL

21 
	#UV_2_MIN
 1200UL

22 
	#UV_15_MIN
 9000UL

23 
	#UV_30_MIN
 18000UL

24 
	#UV_1_HOUR
 36000UL

25 
	#UV_2_HOUR
 72000UL

26 
	#UV_4_HOUR
 144000UL

27 
	#UV_6_HOUR
 216000UL

28 
	#UV_24_HOUR
 864990UL

29 

	)

34 
	#LIMIT_COUNT_ICE_TRAY
 6

	)

36 
	s_uv_öfo_


38 
U32
 
	mRe£tTimî
;

40 
U32
 
	mOutReguœrTimî
;

41 
U32
 
	mI˚ReguœrTimî
;

42 }
	tUvInfo_T
;

43 
UvInfo_T
 
	gUvInfo
;

46 
InôUvLimôCou¡
();

47 
	$InôUv
()

49 
UvInfo
.
Re£tTimî
 = 
UV_24_HOUR
;

50 
UvInfo
.
OutReguœrTimî
 = 
UV_6_HOUR
;

51 
UvInfo
.
I˚ReguœrTimî
 = 
UV_6_HOUR
;

54 
	`SëLimôC⁄fUvId
–
UV_ICE_DOOR
, 
UNLIMITED
 );

55 
	`SëLimôC⁄fUvId
–
UV_WATER_OUT
, 
UNLIMITED
 );

56 
	`SëLimôC⁄fUvId
–
UV_ICE_TANK
, 
UNLIMITED
 );

57 
	`SëLimôC⁄fUvId
–
UV_ICE_TRAY
, 
LIMITED
 );

59 
	`SëLimôC⁄fUvId
–
UV_ICE_DOOR_SHOT
, 
UNLIMITED
 );

60 
	`SëLimôC⁄fUvId
–
UV_WATER_OUT_SHOT
, 
UNLIMITED
 );

61 
	`SëLimôC⁄fUvId
–
UV_ICE_TRAY_SHOT
, 
UNLIMITED
 );

64 
	`InôUvLimôCou¡
();

65 
	}
}

67 
	$InôUvLimôCou¡
()

72 
	`SëLimôCou¡UvId
–
UV_ICE_TRAY
, 
LIMIT_COUNT_ICE_TRAY
 );

73 
	}
}

75 
	$Re£tLimôCou¡
()

77 if–
UvInfo
.
Re£tTimî
 != 0 )

79 
UvInfo
.
Re£tTimî
--;

83 
UvInfo
.
Re£tTimî
 = 
UV_24_HOUR
;

85 
	`InôUvLimôCou¡
();

87 
	}
}

90 
	s_uv_˘æ_


92 
UvId_T
 
	mId
;

93 
U32
 
	mOffTime
;

94 
U32
 
	mOnTime
;

96 
U8
 
	mPªvSètus
;

97 
U8
 
	mCuºítSètus
;

98 
U8
 
	mTriggîSètus
;

99 
U8
 (*
GëSètus
)();

100 } 
	tUvCål_T
;

102 
U8
 
IsW©îOut
();

103 
U8
 
IsI˚Out
();

104 
UvCål_T
 
	gCålLi°
[] =

106 { 
UV_WATER_OUT_SHOT
, 
UV_3_SEC
, 
UV_7_SEC
, 0, 0, 
FALSE
, 
IsW©îOut
 },

107 { 
UV_ICE_DOOR_SHOT
, 
UV_3_SEC
, 
UV_7_SEC
, 0, 0, 
FALSE
, 
IsI˚Out
 },

109 
	#SZ_CTRL_LIST
 ( (
CålLi°
)/(
UvCål_T
))

	)

112 
	$CheckUv
()

114 
U8
 
i
;

115 
UvCål_T
 *
pIãm
;

117  
i
 = 0; i < 
SZ_CTRL_LIST
; i++ )

119 
pIãm
 = &
CålLi°
[ 
i
 ];

121 
pIãm
->
CuºítSètus
 =ÖIãm->
	`GëSètus
();

122 if–
pIãm
->
PªvSètus
 !pIãm->
CuºítSètus
 )

124 if–
pIãm
->
CuºítSètus
 =pIãm->
TriggîSètus
 )

126 
	`Tu∫OnUvId
–
pIãm
->
Id
,ÖIãm->
OffTime
,ÖIãm->
OnTime
 );

130 
	`Tu∫OffUvId
–
pIãm
->
Id
 );

133 
pIãm
->
PªvSètus
 =ÖIãm->
CuºítSètus
;

136 
	}
}

139 
U8
 
	$IsW©îOut
()

141 if–
	`GëW©îOut
(Ë=
TRUE
 )

143 if–
	`IsO≥nVÆve
–
VALVE_ROOM_OUT
 ) =
TRUE


144 || 
	`IsO≥nVÆve
–
VALVE_COLD_OUT
 ) =
TRUE


145 || 
	`IsO≥nVÆve
–
VALVE_HOT_OUT
 ) =
TRUE
 )

147  
TRUE
;

151  
FALSE
;

152 
	}
}

154 
U8
 
	$IsI˚Out
()

156  
	`IsO≥nI˚Do‹
();

157 
	}
}

161 
	$CheckReguœrOutUv
()

163 if–
UvInfo
.
OutReguœrTimî
 != 0 )

165 
UvInfo
.
OutReguœrTimî
--;

169 
UvInfo
.
OutReguœrTimî
 = 
UV_6_HOUR
;

171 
	`Tu∫OnUvId
–
UV_WATER_OUT
, 0, 
UV_30_MIN
 );

172 
	`Tu∫OnUvId
–
UV_ICE_DOOR
, 0, 
UV_30_MIN
 );

174 
	}
}

177 
	$CheckReguœrI˚Uv
()

179 if–
UvInfo
.
I˚ReguœrTimî
 != 0 )

181 
UvInfo
.
I˚ReguœrTimî
--;

185 
UvInfo
.
I˚ReguœrTimî
 = 
UV_6_HOUR
 + 
UV_2_HOUR
;

187 
	`Tu∫OnUvId
–
UV_ICE_TANK
, 0, 
UV_2_HOUR
 );

189 
	}
}

195 
	$CheckReguœrI˚TøyUv
()

197 
U8
 
mu8CheckA˘i⁄
 = 
FALSE
;

201 
mu8CheckA˘i⁄
 = 
	`GëAœømByN⁄eRTC
( mu8CheckAction );

202 if–
mu8CheckA˘i⁄
 =
TRUE
 )

204 if–
	`GëSavögSètus
(Ë=
TRUE
 )

206 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

208 
mu8CheckA˘i⁄
 = 
FALSE
;

209 
	`Tu∫OnUvId
–
UV_ICE_TRAY
, 0, 
UV_1_HOUR
 );

214 if–
	`GëI˚FuŒSètus
(Ë=
TRUE
 )

216 
mu8CheckA˘i⁄
 = 
FALSE
;

217 
	`Tu∫OnUvId
–
UV_ICE_TRAY
, 0, 
UV_1_HOUR
 );

223 if–
	`GëI˚TøySètus
(Ë!
ICE_TRAY_DEICING
 )

225 
	`Tu∫OffUvId
–
UV_ICE_TRAY
 );

227 
	}
}

232 
	$CheckReguœrI˚TøyUv
()

234 
U8
 
mu8Pªv
 = 
FALSE
;

235 
U8
 
mu8Cur
;

238 
mu8Cur
 = 
	`GëI˚FuŒSètus
();

239 if–
mu8Pªv
 !
mu8Cur
 )

241 
mu8Pªv
 = 
mu8Cur
;

242 if–
mu8Cur
 =
TRUE
 )

244 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

246 
	`Tu∫OnUvId
–
UV_ICE_TRAY
, 0, 
UV_1_HOUR
 );

252 if–
	`GëI˚TøySètus
(Ë!
ICE_TRAY_DEICING
 )

254 
	`Tu∫OffUvId
–
UV_ICE_TRAY
 );

256 
	}
}

259 
	$CheckPau£Uv
()

261 
U8
 
mu8Pau£
 = 
FALSE
;

265 if–
	`IsI˚Out
(Ë=
TRUE
 )

267 
mu8Pau£
 = 
TRUE
;

270 if–
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN_UV
 ) =
HIGH
 )

272 
mu8Pau£
 = 
TRUE
;

275 
	`SëPau£UvId
–
UV_ICE_TANK
, 
mu8Pau£
 );

276 
	`SëPau£UvId
–
UV_ICE_TRAY
, 
mu8Pau£
 );

277 
	`SëPau£UvId
–
UV_ICE_TRAY_SHOT
, 
mu8Pau£
 );

281 if–
	`IsW©îOut
(Ë=
TRUE
 )

283 
	`SëPau£UvId
–
UV_WATER_OUT
, 
TRUE
 );

287 
	`SëPau£UvId
–
UV_WATER_OUT
, 
FALSE
 );

291 if–
	`IsI˚Out
(Ë=
TRUE
 )

293 
	`SëPau£UvId
–
UV_ICE_DOOR
, 
TRUE
 );

297 
	`SëPau£UvId
–
UV_ICE_DOOR
, 
FALSE
 );

299 
	}
}

301 
	$CheckC⁄figUv
()

303 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

305 
	`SëC⁄figUvId
–
UV_ICE_TANK
, 
FALSE
 );

306 
	`SëC⁄figUvId
–
UV_ICE_TRAY
, 
FALSE
 );

307 
	`SëC⁄figUvId
–
UV_ICE_TRAY_SHOT
, 
FALSE
 );

308 
	`SëC⁄figUvId
–
UV_ICE_DOOR
, 
FALSE
 );

312 
	`SëC⁄figUvId
–
UV_ICE_TANK
, 
TRUE
 );

313 
	`SëC⁄figUvId
–
UV_ICE_TRAY
, 
TRUE
 );

314 
	`SëC⁄figUvId
–
UV_ICE_TRAY_SHOT
, 
TRUE
 );

315 
	`SëC⁄figUvId
–
UV_ICE_DOOR
, 
TRUE
 );

317 
	}
}

322 #i‡
CONFIG_UV_MANUAL


323 
U8
 
	gdbg_uv_i˚_do‹
 = 0;

324 
U8
 
	gdbg_uv_w©î_out
 = 0;

325 
U8
 
	gdbg_uv_i˚_åay
 = 0;

326 
U8
 
	gdbg_uv_i˚_ènk
 = 0;

327 
	$Te°UvM™uÆ
()

329 if–
dbg_uv_i˚_do‹
 != 0 )

331 
	`HAL_Tu∫OnUv
 ( 
HAL_UV_ICE_DOOR
 );

335 
	`HAL_Tu∫OffUv
 ( 
HAL_UV_ICE_DOOR
 );

338 if–
dbg_uv_w©î_out
 != 0 )

340 
	`HAL_Tu∫OnUv
 ( 
HAL_UV_WATER_OUT
 );

344 
	`HAL_Tu∫OffUv
 ( 
HAL_UV_WATER_OUT
 );

347 if–
dbg_uv_i˚_åay
 != 0 )

349 
	`HAL_Tu∫OnUv
 ( 
HAL_UV_ICE_TANK
 );

353 
	`HAL_Tu∫OffUv
 ( 
HAL_UV_ICE_TANK
 );

356 if–
dbg_uv_i˚_ènk
 != 0 )

358 
	`HAL_Tu∫OnUv
 ( 
HAL_UV_ICE_TRAY
 );

362 
	`HAL_Tu∫OffUv
 ( 
HAL_UV_ICE_TRAY
 );

364 
	}
}

367 
	$Pro˚ssUv
()

369 #i‡
CONFIG_UV_MANUAL


370 
	`Te°UvM™uÆ
();

373 
	`CheckC⁄figUv
();

374 
	`CheckUv
();

375 
	`CheckReguœrOutUv
();

376 
	`CheckReguœrI˚Uv
();

377 
	`CheckReguœrI˚TøyUv
();

378 
	`CheckPau£Uv
();

380 
	`C⁄åﬁUv
();

382 
	`Re£tLimôCou¡
();

384 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\process_uv.h

1 #i‚de‡
__PROCESS_UV_H__


2 
	#__PROCESS_UV_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôUv
();

8 
Pro˚ssUv
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\uv.c

1 
	~"hw.h
"

2 
	~"hÆ_uv.h
"

3 
	~"uv.h
"

4 
	~"utû.h
"

6 
	~"i˚.h
"

7 
	~"i˚_do‹.h
"

8 
	~"i˚_fuŒ.h
"

9 
	~"w©î_out.h
"

10 
	~"hÆ_öput.h
"

14 
	s_uv_ôem_


16 
UvId_T
 
	mId
;

17 
HÆ_Uv_T
 
	mId_HÆ
;

19 
U8
 
	mC⁄fig
;

20 
U8
 
	mPau£
;

22 
U32
 
	mOffTime
;

23 
U32
 
	mOnTime
;

24 
U32
 
	mC⁄fOnTime
;

26 
U8
 
	mIsLimôed
;

27 
U8
 
	mCou¡
;

28 } 
	tUvIãm_T
;

30 
UvIãm_T
 
	gUvOnOffLi°
[] =

33 { 
UV_ICE_DOOR
, 
HAL_UV_ICE_DOOR
, 
TRUE
, 
OFF
, 0, 0, 0, 
UNLIMITED
, 0 },

34 { 
UV_ICE_DOOR_SHOT
, 
HAL_UV_ICE_DOOR
, 
FALSE
, 
OFF
, 0, 0, 0, 
UNLIMITED
, 0 },

36 { 
UV_WATER_OUT
, 
HAL_UV_WATER_OUT
, 
TRUE
, 
OFF
, 0, 0, 0, 
UNLIMITED
, 0 },

37 { 
UV_WATER_OUT_SHOT
, 
HAL_UV_WATER_OUT
, 
FALSE
, 
OFF
, 0, 0, 0, 
UNLIMITED
, 0 },

39 { 
UV_ICE_TRAY
, 
HAL_UV_ICE_TRAY
, 
TRUE
, 
OFF
, 0, 0, 0, 
LIMITED
, 6 },

40 { 
UV_ICE_TRAY_SHOT
, 
HAL_UV_ICE_TRAY
, 
FALSE
, 
OFF
, 0, 0, 0, 
UNLIMITED
, 0 },

42 { 
UV_ICE_TANK
, 
HAL_UV_ICE_TANK
, 
TRUE
, 
OFF
, 0, 0, 0, 
UNLIMITED
, 0 },

45 
	#SZ_UV_LIST
 (–
UvOnOffLi°
 ) / –
UvIãm_T
 ))

	)

51 
I8
 
	gUvOnOff
[
MAX_HAL_UV_NUM
];

52 
	$InôOnOffUv
()

54 
U8
 
i
;

56  
i
 = 0; i < 
MAX_HAL_UV_NUM
 ; i++ )

58 
UvOnOff
[ 
i
 ] = 0;

60 
	}
}

62 
	$Tu∫OnUv
–
HÆ_Uv_T
 
mId
)

64 
UvOnOff
[ 
mId
 ]++;

65 
	}
}

75 
	$OnOffUv
()

77 
HÆ_Uv_T
 
i
;

79  
i
 = 
HAL_UV_ICE_DOOR
; i < 
MAX_HAL_UV_NUM
 ; i++ )

81 if–
UvOnOff
[ 
i
 ] > 0 )

83 
	`HAL_Tu∫OnUv
–
i
 );

87 
	`HAL_Tu∫OffUv
–
i
 );

90 
	}
}

93 
U8
 
	$FödLi°IndexId
(
UvId_T
 
id
, 
U8
 *
pIndex
)

95 
U8
 
i
;

97  
i
 = 0; i < 
SZ_UV_LIST
 ; i++ )

99 if–
UvOnOffLi°
[ 
i
 ].
Id
 =
id
 )

101 *
pIndex
 = 
i
;

102  
TRUE
;

106  
FALSE
;

107 
	}
}

110 
	$SëC⁄figUvId
(
UvId_T
 
id
, 
U8
 
c⁄fig
)

112 
U8
 
mu8Index
;

114 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

116 
UvOnOffLi°
[ 
mu8Index
 ].
C⁄fig
 = 
c⁄fig
;

118 
	}
}

120 
U8
 
	$GëC⁄figUvId
(
UvId_T
 
id
)

122 
U8
 
mu8Index
;

124 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

126  
UvOnOffLi°
[ 
mu8Index
 ].
C⁄fig
;

129  
FALSE
;

130 
	}
}

135 
U8
 
	$IsOvîLimôCou¡
(
U8
 
mu8Index
)

137 if–
UvOnOffLi°
[ 
mu8Index
 ].
IsLimôed
 =
UNLIMITED
 )

139  
FALSE
;

142 if–
UvOnOffLi°
[ 
mu8Index
 ].
Cou¡
 == 0 )

144  
TRUE
;

147  
FALSE
;

148 
	}
}

151 
	$Tu∫OnUvId
(
UvId_T
 
id
, 
U32
 
OffTime
, U32 
OnTime
 )

153 
U8
 
mu8Index
;

155 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

157 if–
UvOnOffLi°
[ 
mu8Index
 ].
C⁄fig
 =
FALSE
 )

162 if–
	`IsOvîLimôCou¡
–
mu8Index
 ) =
TRUE
 )

167 
	`DOWN_COUNT
–
UvOnOffLi°
[ 
mu8Index
 ].
Cou¡
 );

168 
UvOnOffLi°
[ 
mu8Index
 ].
OffTime
 = OffTime;

169 
UvOnOffLi°
[ 
mu8Index
 ].
OnTime
 = OnTime;

170 
UvOnOffLi°
[ 
mu8Index
 ].
C⁄fOnTime
 = 
OnTime
;

172 
	}
}

174 
	$Tu∫OffUvId
(
UvId_T
 
id
)

176 
U8
 
mu8Index
;

178 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

180 
UvOnOffLi°
[ 
mu8Index
 ].
OffTime
 = 0;

181 
UvOnOffLi°
[ 
mu8Index
 ].
OnTime
 = 0;

182 
UvOnOffLi°
[ 
mu8Index
 ].
C⁄fOnTime
 = 0;

184 
	}
}

186 
U8
 
	$IsTu∫OnUvId
(
UvId_T
 
id
)

188 
U8
 
mu8Index
;

190 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

192 if–
UvOnOffLi°
[ 
mu8Index
 ].
OffTime
 == 0

193 && 
UvOnOffLi°
[ 
mu8Index
 ].
OnTime
 != 0 )

195  
TRUE
;

199  
FALSE
;

200 
	}
}

202 
	$SëPau£UvId
(
UvId_T
 
id
, 
U8
 
°©us
)

204 
U8
 
mu8Index
;

206 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

208 
UvOnOffLi°
[ 
mu8Index
 ].
Pau£
 = 
°©us
;

210 
	}
}

213 
U8
 
	$GëUvOnPî˚¡
(
UvId_T
 
id
)

215 
U8
 
mu8Index
;

216 
U32
 
mu32Cuºít
;

217 
U32
 
mu32T¨gë
;

219 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

221 
mu32Cuºít
 = 
UvOnOffLi°
[
mu8Index
].
C⁄fOnTime
 - UvOnOffLi°[mu8Index].
OnTime
;

222 
mu32T¨gë
 = 
UvOnOffLi°
[
mu8Index
].
C⁄fOnTime
;

224  (
U8
)(–(
F32
)
mu32Cuºít
 / (F32)
mu32T¨gë
 ) * 100.0f);

228 
	}
}

230 
	$SëLimôC⁄fUvId
(
UvId_T
 
id
, 
U8
 
IsLimôed
)

232 
U8
 
mu8Index
;

234 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

236 
UvOnOffLi°
[ 
mu8Index
 ].
IsLimôed
 = IsLimited;

238 
	}
}

240 
	$SëLimôCou¡UvId
(
UvId_T
 
id
, 
U8
 
mu8Cou¡
)

242 
U8
 
mu8Index
;

244 if–
	`FödLi°IndexId
–
id
, &
mu8Index
 ) =
TRUE
 )

246 
UvOnOffLi°
[ 
mu8Index
 ].
Cou¡
 = 
mu8Cou¡
;

248 
	}
}

251 
	$C⁄åﬁUv
()

253 
U8
 
i
;

254 
UvIãm_T
 *
pIãm
 = 
NULL
;

257 
	`InôOnOffUv
();

258  
i
 = 0; i < 
SZ_UV_LIST
 ; i++ )

260 
pIãm
 = &
UvOnOffLi°
[ 
i
 ];

263 if–
pIãm
->
Pau£
 =
TRUE
 )

265 
	`DOWN_COUNT
–
pIãm
->
OffTime
 );

270 if–
pIãm
->
OffTime
 == 0

271 && 
pIãm
->
OnTime
 != 0)

273 
	`Tu∫OnUv
–
pIãm
->
Id_HÆ
 );

274 
	`DOWN_COUNT
–
pIãm
->
OnTime
 );

278 
	`DOWN_COUNT
–
pIãm
->
OffTime
 );

282 
	`OnOffUv
();

283 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\uv.h

1 #i‚de‡
__UV_H__


2 
	#__UV_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mUV_ICE_DOOR
,

10 
	mUV_ICE_DOOR_SHOT
,

12 
	mUV_WATER_OUT
,

13 
	mUV_WATER_OUT_SHOT
,

15 
	mUV_ICE_TRAY
,

16 
	mUV_ICE_TRAY_SHOT
,

18 
	mUV_ICE_TANK
,

20 
	mMAX_UV_NUM


21 }
	tUvId_T
;

25 
SëC⁄figUvId
(
UvId_T
 
id
, 
U8
 
c⁄fig
);

26 
U8
 
GëC⁄figUvId
(
UvId_T
 
id
);

29 
Tu∫OnUvId
(
UvId_T
 
id
, 
U32
 
OffTime
, U32 
OnTime
 );

30 
Tu∫OffUvId
(
UvId_T
 
id
);

31 
U8
 
IsTu∫OnUvId
(
UvId_T
 
id
);

36 
SëPau£UvId
(
UvId_T
 
id
, 
U8
 
°©us
);

38 
U8
 
GëUvOnPî˚¡
(
UvId_T
 
id
);

41 
	#UNLIMITED
 0

	)

42 
	#LIMITED
 1

	)

43 
SëLimôC⁄fUvId
(
UvId_T
 
id
, 
U8
 
IsLimôed
);

45 
SëLimôCou¡UvId
(
UvId_T
 
id
, 
U8
 
mu8Cou¡
);

47 
C⁄åﬁUv
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\deicing_table.c

1 
	~"deicög_èbÀ.h
"

4 
	#DEICING_REGION_1_COUNT
 2

5 
	#DEICING_REGION_2_COUNT
 2

6 
	#DEICING_REGION_3_COUNT
 2

7 
	#DEICING_REGION_4_COUNT
 2

8 
	#DEICING_REGION_5_COUNT
 2

9 
	#DEICING_REGION_6_COUNT
 2

10 
	#DEICING_REGION_NUM
 6

	)

13 
U8
 
	gOnOffCou¡Li°
[ 
DEICING_REGION_NUM
 ] =

15 
DEICING_REGION_1_COUNT
,

16 
DEICING_REGION_2_COUNT
,

17 
DEICING_REGION_3_COUNT
,

18 
DEICING_REGION_4_COUNT
,

19 
DEICING_REGION_5_COUNT
,

20 
DEICING_REGION_6_COUNT
,

26 
U16
 
	gOnOffTimeLi°_Levñ_1
[ 
DEICING_REGION_1_COUNT
 ] =

33 
U16
 
	gOnOffTimeLi°_Levñ_2
[ 
DEICING_REGION_2_COUNT
 ] =

40 
U16
 
	gOnOffTimeLi°_Levñ_3
[ 
DEICING_REGION_3_COUNT
 ] =

45 
U16
 
	gOnOffTimeLi°_Levñ_4
[ 
DEICING_REGION_4_COUNT
 ] =

51 
U16
 
	gOnOffTimeLi°_Levñ_5
[ 
DEICING_REGION_5_COUNT
 ] =

58 
U16
 
	gOnOffTimeLi°_Levñ_6
[ 
DEICING_REGION_6_COUNT
 ] =

65 
U8
 
	$GëDeIcögRegi⁄
–
TEMP_T
 
_tAmbi
 )

67 if–
_tAmbi
 >= 30.0f )

69  
DEICING_REGION_6
;

71 if–
_tAmbi
 >= 25.0f )

73  
DEICING_REGION_5
;

75 if–
_tAmbi
 >= 20.0f )

77  
DEICING_REGION_4
;

79 if–
_tAmbi
 >= 14.0f )

81  
DEICING_REGION_3
;

83 if–
_tAmbi
 >= 9.0f )

85  
DEICING_REGION_2
;

88  
DEICING_REGION_1
;

89 
	}
}

91 
U8
 
	$GëDeIcögRïótNum
(
U8
 
mu8Regi⁄
 )

93  
OnOffCou¡Li°
[ 
mu8Regi⁄
 ];

94 
	}
}

96 
U8
 
	$GëDeIcögCmd
(
U8
 
mu8Index
)

100 if––
mu8Index
 % 2 == 0 ) )

102  
ON
;

105  
OFF
;

106 
	}
}

108 
U16
 
	$GëDeIcögTime
(
U8
 
mu8Regi⁄
, U8 
mu8Index
)

110 
U16
 
mu16Time
 = 0;

113 if–
mu8Regi⁄
 =
DEICING_REGION_1
 )

115 
mu16Time
 = 
OnOffTimeLi°_Levñ_1
[ 
mu8Index
 ];

117 if–
mu8Regi⁄
 =
DEICING_REGION_2
 )

119 
mu16Time
 = 
OnOffTimeLi°_Levñ_2
[ 
mu8Index
 ];

121 if–
mu8Regi⁄
 =
DEICING_REGION_3
 )

123 
mu16Time
 = 
OnOffTimeLi°_Levñ_3
[ 
mu8Index
 ];

125 if–
mu8Regi⁄
 =
DEICING_REGION_4
 )

127 
mu16Time
 = 
OnOffTimeLi°_Levñ_4
[ 
mu8Index
 ];

129 if–
mu8Regi⁄
 =
DEICING_REGION_5
 )

131 
mu16Time
 = 
OnOffTimeLi°_Levñ_5
[ 
mu8Index
 ];

133 if–
mu8Regi⁄
 =
DEICING_REGION_6
 )

135 
mu16Time
 = 
OnOffTimeLi°_Levñ_6
[ 
mu8Index
 ];

140 
mu16Time
 = 
OnOffTimeLi°_Levñ_5
[ 
mu8Index
 ];

143  
mu16Time
;

144 
	}
}

146 
U8
 
	$GëDeIcögCompRps
(
U8
 
mu8Regi⁄
)

148 
U8
 
mu8Rps
;

151 if–
mu8Regi⁄
 =
DEICING_REGION_1
 )

153 
mu8Rps
 = 50;

155 if–
mu8Regi⁄
 =
DEICING_REGION_2
 )

157 
mu8Rps
 = 50;

159 if–
mu8Regi⁄
 =
DEICING_REGION_3
 )

161 
mu8Rps
 = 50;

163 if–
mu8Regi⁄
 =
DEICING_REGION_4
 )

165 
mu8Rps
 = 47;

167 if–
mu8Regi⁄
 =
DEICING_REGION_5
 )

169 
mu8Rps
 = 47;

171 if–
mu8Regi⁄
 =
DEICING_REGION_6
 )

173 
mu8Rps
 = 43;

178 
mu8Rps
 = 43;

181  
mu8Rps
;

182 
	}
}

184 
U8
 
	$GëDeIcögF™OnOff
(
U8
 
mu8Regi⁄
)

186 
U8
 
mu8F™OnOff
 = 
OFF
;

188 if–
mu8Regi⁄
 =
DEICING_REGION_1
 )

190 
mu8F™OnOff
 = 
OFF
;

192 if–
mu8Regi⁄
 =
DEICING_REGION_2
 )

194 
mu8F™OnOff
 = 
OFF
;

196 if–
mu8Regi⁄
 =
DEICING_REGION_3
 )

198 
mu8F™OnOff
 = 
OFF
;

200 if–
mu8Regi⁄
 =
DEICING_REGION_4
 )

202 
mu8F™OnOff
 = 
ON
;

204 if–
mu8Regi⁄
 =
DEICING_REGION_5
 )

206 
mu8F™OnOff
 = 
ON
;

208 if–
mu8Regi⁄
 =
DEICING_REGION_6
 )

210 
mu8F™OnOff
 = 
ON
;

214 
mu8F™OnOff
 = 
ON
;

217  
mu8F™OnOff
;

218 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\deicing_table.h

1 #i‚de‡
__DEICING_TABLE_H__


2 
	#__DEICING_TABLE_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#DEICING_REGION_1
 0

	)

8 
	#DEICING_REGION_2
 1

	)

9 
	#DEICING_REGION_3
 2

	)

10 
	#DEICING_REGION_4
 3

	)

11 
	#DEICING_REGION_5
 4

	)

12 
	#DEICING_REGION_6
 5

	)

13 
	#DEICING_REGION_7
 6

	)

14 
U8
 
GëDeIcögRegi⁄
–
TEMP_T
 
_tAmbi
 );

16 
U8
 
GëDeIcögRïótNum
(U8 
mu8Regi⁄
 );

18 
U8
 
GëDeIcögCmd
(U8 
mu8Index
);

20 
U16
 
GëDeIcögTime
(
U8
 
mu8Regi⁄
, U8 
mu8Index
);

22 
U8
 
GëDeIcögCompRps
(U8 
mu8Regi⁄
);

24 
U8
 
GëDeIcögF™OnOff
(U8 
mu8Regi⁄
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\dummy_deicing_table.c

1 
	~"dummy_deicög_èbÀ.h
"

4 
	#DUMMY_DEICING_REGION_1_COUNT
 14

	)

5 
	#DUMMY_DEICING_REGION_2_COUNT
 6

	)

6 
	#DUMMY_DEICING_REGION_3_COUNT
 6

	)

7 
	#DUMMY_DEICING_REGION_4_COUNT
 4

	)

8 
	#DUMMY_DEICING_REGION_5_COUNT
 4

	)

9 
	#DUMMY_DEICING_REGION_NUM
 5

	)

12 
	#DUMMY_DEICING_COMP_ON_TIME
 (3U*600UË

	)

15 c⁄° 
U8
 
	gOnOffCou¡Li°
[ 
DUMMY_DEICING_REGION_NUM
 ] =

17 
DUMMY_DEICING_REGION_1_COUNT
,

18 
DUMMY_DEICING_REGION_2_COUNT
,

19 
DUMMY_DEICING_REGION_3_COUNT
,

20 
DUMMY_DEICING_REGION_4_COUNT
,

21 
DUMMY_DEICING_REGION_5_COUNT


25 c⁄° 
U16
 
	gOnOffTimeLi°_Levñ_1
[ 
DUMMY_DEICING_REGION_1_COUNT
 ] =

39 c⁄° 
U16
 
	gOnOffTimeLi°_Levñ_2
[ 
DUMMY_DEICING_REGION_2_COUNT
 ] =

48 c⁄° 
U16
 
	gOnOffTimeLi°_Levñ_3
[ 
DUMMY_DEICING_REGION_3_COUNT
 ] =

57 c⁄° 
U16
 
	gOnOffTimeLi°_Levñ_4
[ 
DUMMY_DEICING_REGION_4_COUNT
 ] =

65 
U8
 
	$GëDummyDeIcögRegi⁄
–
TEMP_T
 
_tAmbi
 )

67 if–
_tAmbi
 >= 30 )

69  
DUMMY_DEICING_REGION_4
;

71 if–
_tAmbi
 >= 20 )

73  
DUMMY_DEICING_REGION_3
;

75 if–
_tAmbi
 >= 10 )

77  
DUMMY_DEICING_REGION_2
;

80  
DUMMY_DEICING_REGION_1
;

81 
	}
}

83 
U8
 
	$GëDummyDeIcögRïótNum
(
U8
 
mu8Regi⁄
 )

85  
OnOffCou¡Li°
[ 
mu8Regi⁄
 ];

86 
	}
}

88 
U8
 
	$GëDummyDeIcögCmd
(
U8
 
mu8Index
)

92 if––
mu8Index
 % 2 == 0 ) )

94  
ON
;

97  
OFF
;

98 
	}
}

100 
U16
 
	$GëDummyDeIcögTime
(
U8
 
mu8Regi⁄
, U8 
mu8Index
)

102 
U16
 
mu16Time
;

105 if–
mu8Regi⁄
 =
DUMMY_DEICING_REGION_1
 )

107 
mu16Time
 = 
OnOffTimeLi°_Levñ_1
[ 
mu8Index
 ];

109 if–
mu8Regi⁄
 =
DUMMY_DEICING_REGION_2
 )

111 
mu16Time
 = 
OnOffTimeLi°_Levñ_2
[ 
mu8Index
 ];

113 if–
mu8Regi⁄
 =
DUMMY_DEICING_REGION_3
 )

115 
mu16Time
 = 
OnOffTimeLi°_Levñ_3
[ 
mu8Index
 ];

119 
mu16Time
 = 
OnOffTimeLi°_Levñ_4
[ 
mu8Index
 ];

122  
mu16Time
;

123 
	}
}

126 
U16
 
	$GëDummyDeIcögCompOnTime
(
U8
 
mu8Regi⁄
)

128 ()
mu8Regi⁄
;

130  
DUMMY_DEICING_COMP_ON_TIME
;

131 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\dummy_deicing_table.h

1 #i‚de‡
__DUMMY_DEICING_TABLE_H__


2 
	#__DUMMY_DEICING_TABLE_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	#DUMMY_DEICING_REGION_1
 0

	)

9 
	#DUMMY_DEICING_REGION_2
 1

	)

10 
	#DUMMY_DEICING_REGION_3
 2

	)

11 
	#DUMMY_DEICING_REGION_4
 3

	)

12 
U8
 
GëDummyDeIcögRegi⁄
–
TEMP_T
 
_tAmbi
 );

14 
U8
 
GëDummyDeIcögRïótNum
(U8 
mu8Regi⁄
 );

16 
U8
 
GëDummyDeIcögCmd
(U8 
mu8Index
);

18 
U16
 
GëDummyDeIcögTime
(
U8
 
mu8Regi⁄
, U8 
mu8Index
);

26 
U16
 
GëDummyDeIcögCompOnTime
(
U8
 
mu8Regi⁄
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice.c

1 
	~"i˚.h
"

2 
	~"i˚_fuŒ.h
"

3 
	~"ì¥om.h
"

4 
	~"îr‹.h
"

5 
	~"powî_ßvög.h
"

6 
	~"cﬁd_w©î.h
"

7 
	~"comp.h
"

8 
	~"‰⁄t.h
"

9 
	~"ènk_˛ón.h
"

10 
	~"ãmp.h
"

11 
	~"Êush_w©î_out.h
"

12 
	~"fûãr.h
"

13 
	~"£rvi˚.h
"

14 
	~"Êow_mëî.h
"

15 
	~"i˚_åay.h
"

17 
	~<°rög.h
>

20 
	#ICE_CHECK_TIME
 900

21 

	)

22 
	#TEMP_ICE_STOP_SEASON
 25.0f

	)

23 
	#ICE_STOP_TIME_SUMMER
 18000U

24 
	#ICE_STOP_TIME_WINTER
 21600U

25 

	)

27 
	#MIN_DEICING_TIME
 180U

28 

	)

29 
I˚_T
 
	gI˚
;

31 
	$InôI˚
()

33 
I˚
.
Turbo
 = 
FALSE
;

34 
I˚
.
Size
 = 
ICE_LARGE
;

36 
I˚
.
C⁄figMake
 = 
TRUE
;

37 
I˚
.
Make
 = 
FALSE
;

41 
I˚
.
Mode
 = 
ICE_MODE_NONE
;

42 #i‡(
CONFIG_GAS_FILLING
Ë|| (
CONFIG_JIG_GAS_SWITCH
)

43 
I˚
.
Mode
 = 
ICE_MODE_NONE
;

46 
I˚
.
FuŒCheckTimî
 = 0;

47 
I˚
.
St›MakeTimî
 = 0;

49 
I˚
.
DummyDeIcög
 = 
FALSE
;

51 
I˚
.
DeIcögCompTime
 = 
MIN_DEICING_TIME
;

52 
	}
}

54 
	$GëI˚D©a
–
I˚_T
 *
pI˚
 )

56 
	`MEMCPY
–(
__FAR
 *)
pI˚
, (c⁄° __FAR *)&
I˚
, –
I˚_T
 ));

57 
	}
}

59 
	$SëI˚Turbo
(
U8
 
mu8VÆ
)

61 if–
mu8VÆ
 !
TRUE
 && mu8VÆ !
FALSE
 )

65 
I˚
.
Turbo
 = 
mu8VÆ
;

67 
	`SaveEïromId
–
EEP_ID_CONF_TURBO
 );

68 
	}
}

70 
U8
 
	$GëI˚Turbo
()

72  
I˚
.
Turbo
;

73 
	}
}

75 
	$SëI˚Size
(
U8
 
mu8VÆ
)

77 
I˚
.
Size
 = 
mu8VÆ
;

78 
	`SaveEïromId
–
EEP_ID_ICE_SIZE
 );

79 
	}
}

81 
U8
 
	$GëI˚Size
()

83  
I˚
.
Size
;

84 
	}
}

86 
	$SëI˚C⁄figMake
(
U8
 
mu8VÆ
)

88 if–
mu8VÆ
 !
TRUE
 && mu8VÆ !
FALSE
 )

93 
I˚
.
C⁄figMake
 = 
mu8VÆ
;

95 
	`SaveEïromId
–
EEP_ID_CONF_MAKE_ICE
 );

96 
	}
}

98 
U8
 
	$GëI˚C⁄figMake
()

100  
I˚
.
C⁄figMake
;

101 
	}
}

104 
	$SëI˚Make
(
U8
 
mu8VÆ
 )

106 
I˚
.
Make
 = 
mu8VÆ
;

107 
	}
}

109 
U8
 
	$GëI˚Make
()

111  
I˚
.
Make
;

112 
	}
}

116 
U8
 
	$IsVÆidDoIcögAmbiTempR™ge
()

118 
TEMP_T
 
tAmbi
;

120 
tAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

121 if–
tAmbi
 < 0.0f )

123  
FALSE
;

126  
TRUE
;

127 
	}
}

129 
U8
 
	$IsVÆidDoIcögRoomTempR™ge
()

131 
TEMP_T
 
tRoom
;

133 
tRoom
 = 
	`GëTemp
–
TEMP_ID_ROOM_WATER
 );

134 if–
tRoom
 < 0.0f )

136  
FALSE
;

139  
TRUE
;

140 
	}
}

142 
	$SëI˚MakeMode
(
U16
 
mu16Mode
 )

144 
I˚
.
Mode
 |
mu16Mode
;

145 
	}
}

147 
	$CÀ¨I˚MakeMode
(
U16
 
mu16Mode
 )

149 
I˚
.
Mode
 &~
mu16Mode
;

150 
	}
}

152 
U16
 
	$IsSëI˚MakeMode
(
U16
 
mu16Mode
 )

154 if–(
I˚
.
Mode
 & 
mu16Mode
 ) == mu16Mode )

156  
TRUE
;

159  
FALSE
;

160 
	}
}

162 
U16
 
	$GëI˚MakeMode
()

164  
I˚
.
Mode
;

165 
	}
}

167 
	$SëI˚FuŒCheckTimî
(
U16
 
mu16VÆ
 )

169 
I˚
.
FuŒCheckTimî
 = 
mu16VÆ
;

170 
	}
}

173 
U8
 
	$GëI˚DummyDeIcög
( )

175  
I˚
.
DummyDeIcög
;

176 
	}
}

178 
	$SëI˚DummyDeIcög
(
U8
 
mu8VÆ
 )

180 
I˚
.
DummyDeIcög
 = 
mu8VÆ
;

181 
	}
}

185 
U16
 
	$GëDeIcögCompOnTime
()

187  
I˚
.
DeIcögCompTime
;

188 
	}
}

190 
	$Re£tDeIcögCompOnTime
()

192 
I˚
.
DeIcögCompTime
 = 
MIN_DEICING_TIME
;

193 
	}
}

195 
	$Upd©eDeIcögCompOnTime
()

197 if–
I˚
.
DeIcögCompTime
 != 0 )

199 
I˚
.
DeIcögCompTime
--;

201 
	}
}

204 
	#ICE_OUTAGE_TIMER
 600U

205 
	`SèπI˚OuègeTimî
()

	)

207 
	gI˚
.
	gOuègeTimî
 = 
ICE_OUTAGE_TIMER
;

210 
	$CheckI˚Ouège
()

212 if–
I˚
.
OuègeTimî
 != 0 )

214 
I˚
.
OuègeTimî
--;

217 if–
	`GëFlowMëîLPM
() > 0 )

219 
I˚
.
OuègeTimî
 = 0;

221 
	}
}

224 
	$St›I˚MakeLﬂd
()

227 
	`CÀ¨I˚MakeMode
–
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 );

228 
	`SëI˚MakeMode
–
ICE_MODE_OFF_LOAD
 );

229 
	}
}

232 
	$SëDummyDeicög
()

236 
	`CÀ¨I˚MakeMode
–
ICE_STATUS_PREHAT
 );

239 
	`SëI˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 );

240 
	}
}

243 
	$SëTøyDeicög
()

246 
	`CÀ¨I˚MakeMode
(
ICE_STATUS_INIT_PREHEAT
);

249 
	`CÀ¨I˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 );

252 
	`SëI˚MakeMode
–
ICE_MODE_TRAY_DEICING
 );

254 
	}
}

256 
U8
 
	$IsSt›I˚Make
()

258 if–
	`IsSëI˚MakeMode
–
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


259 || 
	`IsSëI˚MakeMode
–
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

261  
TRUE
;

264  
FALSE
;

265 
	}
}

268 
U8
 
	$St›I˚Make
()

270 if–
	`IsSëI˚MakeMode
(
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


271 || 
	`IsSëI˚MakeMode
(
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


272 || 
	`IsSëI˚MakeMode
–
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


273 || 
	`IsSëI˚MakeMode
–
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

276 
	`CÀ¨I˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 );

277 
	`SëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_OFF_LOAD
 );

279  
TRUE
;

281 if–
	`IsSëI˚MakeMode
–
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

283 if–
	`GëDeIcögCompOnTime
() == 0 )

287 
	`CÀ¨I˚MakeMode
–
ICE_MODE_ICING
 );

292 
	`CÀ¨I˚MakeMode
–
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 );

293 
	`SëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_OFF_LOAD
 );

296  
TRUE
;

300  
FALSE
;

301 
	}
}

306 
U16
 
	$GëSt›MakeTimî
()

308 if–
	`GëTemp
–
TEMP_ID_AMBIENT
 ) >
TEMP_ICE_STOP_SEASON
 )

310  
ICE_STOP_TIME_SUMMER
;

313  
ICE_STOP_TIME_WINTER
;

314 
	}
}

318 
	$MakeI˚FuŒ
()

321 
U8
 
mu8PªvI˚FuŒ
 = 
FALSE
;

322 
U8
 
mu8I˚FuŒ
;

326 
mu8I˚FuŒ
 = 
	`GëI˚FuŒSètus
();

327 if–
mu8PªvI˚FuŒ
 !
mu8I˚FuŒ
 )

329 
mu8PªvI˚FuŒ
 = 
mu8I˚FuŒ
;

330 if–
mu8I˚FuŒ
 =
TRUE
 && 
	`GëSavögSètus
() == TRUE )

332 
I˚
.
St›MakeTimî
 = 
	`GëSt›MakeTimî
();

336 if–
	`GëSavögSètus
(Ë=
FALSE
 )

338 
I˚
.
St›MakeTimî
 = 0;

341 if–
I˚
.
St›MakeTimî
 != 0 )

343 
I˚
.
St›MakeTimî
--;

349 if–
	`IsD⁄eCheckI˚FuŒ
(Ë=
FALSE
 )

351 
	`SëI˚FuŒCheckTimî
–
ICE_CHECK_TIME
 );

355 if–
I˚
.
FuŒCheckTimî
 != 0 )

357 
I˚
.
FuŒCheckTimî
--;

363 
	`SèπCheckI˚FuŒ
();

364 
	}
}

367 
U8
 
	$IsVÆidMake
()

370 if–
I˚
.
C⁄figMake
 =
FALSE
 )

372  
FALSE
 ;

376 if–
	`IsVÆidDoIcögRoomTempR™ge
(Ë=
FALSE


377 || 
	`IsVÆidDoIcögAmbiTempR™ge
(Ë=
FALSE
 )

379  
FALSE
;

382 if–
	`IsD⁄eFlushSètus
(Ë=
FALSE
 )

384  
FALSE
;

394 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
FALSE
 )

396  
FALSE
;

400 if–
	`IsOvîCompPrŸe˘OnTime
(Ë=
TRUE
 )

402  
FALSE
;

406 if–
	`GëI˚FuŒPowîOnCheck
(Ë=
FALSE
 )

408  
FALSE
;

411 if–
	`IsCompBldcPrŸe˘Mode
(Ë=
TRUE
 )

413  
FALSE
;

418 if–
	`GëCﬁdW©îInôFuŒ
(Ë=
FALSE
 )

420  
FALSE
;

424 if–
	`GëRoomW©îLevñ
(Ë=
LEVEL_LOW
 )

426  
FALSE
;

432 if–
I˚
.
St›MakeTimî
 != 0 )

434  
FALSE
;

438 if–
	`GëSavögSètus
(Ë=
TRUE
 )

440  
FALSE
;

444 if–
	`GëSîvi˚CheckT™kO≥n
(Ë=
TRUE
 )

446  
FALSE
;

450 if–
	`IsO≥nFûãr
–
ID_FILTER_COVER
 ) =
TRUE


451 || 
	`IsO≥nFûãr
–
ID_FILTER
 ) =
TRUE
 )

453  
FALSE
;

457 if–
	`IsEº‹Ty≥
–
ERR_TYPE_ICE_MAKE
 ) =
TRUE
 )

459  
FALSE
;

463 if–
I˚
.
OuègeTimî
 != 0 )

465  
FALSE
;

468 if–
	`IsRëryI˚Tøy
(Ë=
TRUE
 )

470  
FALSE
;

475 if–
	`IsSèπHó…h
(Ë=
TRUE
 )

477  
FALSE
;

481 if–
	`GëT™kCÀ™OffLﬂd
(Ë=
TRUE
 )

483  
FALSE
;

486 if–
	`GëCodySîvi˚
(Ë=
TRUE
 )

488  
TRUE
;

492  
TRUE
;

493 
	}
}

495 
	$MakeI˚
()

497 
U8
 
mu8Make
 = 
FALSE
;

500 
	`CheckI˚Ouège
();

502 if–
	`GëI˚FuŒSètus
(Ë=
FALSE
 )

504 
mu8Make
 = 
TRUE
;

508 
mu8Make
 = 
FALSE
;

511 if–
	`IsVÆidMake
(Ë=
FALSE
 )

513 
mu8Make
 = 
FALSE
;

517 
	`SëI˚Make
–
mu8Make
 );

518 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice.h

1 #i‚de‡
__ICE_H__


2 
	#__ICE_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_i˚_


8 
U8
 
	mTurbo
;

10 
U8
 
	mSize
;

13 
U8
 
	mC⁄figMake
;

14 
U8
 
	mMake
;

17 
U16
 
	mMode
;

20 
U16
 
	mFuŒCheckTimî
;

21 
U16
 
	mSt›MakeTimî
;

23 
U16
 
	mOuègeTimî
;

25 
U8
 
	mDummyDeIcög
;

27 
U16
 
	mDeIcögCompTime
;

29 } 
	tI˚_T
;

31 
InôI˚
();

33 
GëI˚D©a
–
I˚_T
 *
pI˚
 );

35 
SëI˚Turbo
(
U8
 
mu8VÆ
);

36 
U8
 
GëI˚Turbo
();

38 
	#ICE_LARGE
 0

	)

39 
	#ICE_SMALL
 1

	)

40 
SëI˚Size
(
U8
 
mu8VÆ
);

41 
U8
 
GëI˚Size
();

43 
SëI˚C⁄figMake
(
U8
 
mu8VÆ
 );

44 
U8
 
GëI˚C⁄figMake
();

46 
SëI˚Make
(
U8
 
mu8VÆ
 );

47 
U8
 
GëI˚Make
();

50 
U8
 
IsVÆidDoIcögAmbiTempR™ge
();

51 
U8
 
IsVÆidDoIcögRoomTempR™ge
();

55 
	#ICE_MODE_NONE
 0x0000

	)

56 
	#ICE_MODE_INIT
 0x0001

	)

57 
	#ICE_MODE_PREHEAT
 0x0002

	)

58 
	#ICE_MODE_READY
 0x0004

	)

59 
	#ICE_MODE_ICING
 0x0008

	)

60 
	#ICE_MODE_DEICING
 0x0010

	)

61 
	#ICE_MODE_DUMMY_DEICING
 0x0020

	)

62 
	#ICE_MODE_OFF
 0x0040

	)

63 
	#ICE_MODE_OFF_LOAD
 0x0080

	)

64 
	#ICE_MODE_DEICING_OFF
 0x0100

	)

65 
	#ICE_MODE_TRAY_DEICING
 0x0200

	)

68 
	#ICE_STATUS_INIT_PREHEAT
 (
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
)

	)

69 
	#ICE_STATUS_INIT
 (
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
)

	)

70 
	#ICE_STATUS_PREHAT
 ( 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
)

	)

71 
	#ICE_STATUS_READY
 ( 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
)

	)

72 
	#ICE_STATUS_ICING
 ( 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
)

	)

73 
	#ICE_STATUS_DEICING
 ( 
ICE_MODE_DEICING
)

	)

76 
	#ICE_MODE_ALL
 \

77 –
ICE_MODE_INIT
 | \

78 
ICE_MODE_PREHEAT
 | \

79 
ICE_MODE_READY
 | \

80 
ICE_MODE_ICING
 | \

81 
ICE_MODE_DEICING
 )

	)

84 
SëI˚MakeMode
(
U16
 
mu16Mode
 );

85 
CÀ¨I˚MakeMode
(
U16
 
mu16Mode
 );

86 
U16
 
IsSëI˚MakeMode
(U16 
mu16Mode
 );

87 
U16
 
GëI˚MakeMode
();

90 
SëI˚FuŒCheckTimî
(
U16
 
mu16VÆ
 );

93 
U8
 
GëI˚DummyDeIcög
( );

94 
SëI˚DummyDeIcög
(
U8
 
mu8VÆ
 );

97 
U16
 
GëDeIcögCompOnTime
();

98 
Re£tDeIcögCompOnTime
();

99 
Upd©eDeIcögCompOnTime
();

102 
SèπI˚OuègeTimî
();

104 
St›I˚MakeLﬂd
();

107 
SëDummyDeicög
();

110 
SëTøyDeicög
();

112 
U8
 
IsSt›I˚Make
();

115 
U8
 
St›I˚Make
();

118 
MakeI˚FuŒ
();

119 
MakeI˚
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice_maker.c

1 
	~"i˚_makî.h
"

3 
	~"i˚.h
"

4 
	~"i˚_fuŒ.h
"

5 
	~"i˚_åay.h
"

6 
	~"icög_èbÀ.h
"

7 
	~"deicög_èbÀ.h
"

8 
	~"dummy_deicög_èbÀ.h
"

10 
	~"w©î_out.h
"

11 
	~"îr‹.h
"

12 
	~"døö_w©î.h
"

13 
	~"i˚_do‹.h
"

14 
	~"hŸ_w©î.h
"

16 
	~"ãmp.h
"

17 
	~"ªœy.h
"

18 
	~"vÆve.h
"

19 
	~"comp.h
"

20 
	~"gas_swôch_vÆve.h
"

21 
	~"swög_b¨.h
"

22 
	~"uv.h
"

23 
	~"Êow_mëî.h
"

24 
	~"Án_mŸ‹.h
"

25 
	~"w©î_out_comm⁄.h
"

28 
	#CONFIG_MAKE_ONE_MORE
 0

	)

32 
	#ROOM_OUT_TIME_OUT_TIME
 150

	)

33 
	#GAS_SWITCH_TIME_OUT
 300

	)

37 
	#ICE_SMALL_RATIO
 0.8f

38 

	)

40 
	#COMP_ICING_RPS
 65U

41 
	#COMP_ICING_RPS_OVER_TEMP_AMBI
 60U

42 

	)

44 
	#TIME_REDUCE_DEICING_NOISE
 300U

45 

	)

47 
DoInô_T
 
	gInô
;

48 
DoPªhót_T
 
	gPªhót
;

49 
DoRódy_T
 
	gRódy
;

50 
DoIcög_T
 
	gIcög
;

51 
DoDeIcög_T
 
	gDeIcög
;

52 
DoDummyDeIcög_T
 
	gDummyDeIcög
;

53 
DoDummyDeIcög_T
 
	gTøyDeIcög
;

55 
IcögTemp_T
 
	gIcögTemp
;

58 
U8
 
GëIcögRegi⁄
–
TEMP_T
 
_tAmbi
 );

59 
U8
 
GëIcögCompRps
(U8 
mu8Regi⁄
);

60 
SèπIcög
–
U8
 
mu8Regi⁄
 );

63 
	$GëI˚MakîInôD©a
–
DoInô_T
 *
pD©a
 )

65 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Inô
, –
DoInô_T
 ));

66 
	}
}

68 
	$GëI˚MakîPªhótD©a
–
DoPªhót_T
 *
pD©a
 )

70 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Pªhót
, –
DoPªhót_T
 ));

71 
	}
}

73 
	$GëI˚MakîRódyD©a
–
DoRódy_T
 *
pD©a
 )

75 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Ródy
, –
DoRódy_T
 ));

76 
	}
}

78 
RódySãp_T
 
	$GëI˚MakîRódySãp
()

80  
Ródy
.
Sãp
;

81 
	}
}

84 
	$GëI˚MakîIcögD©a
–
DoIcög_T
 *
pD©a
 )

86 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Icög
, –
DoIcög_T
 ));

87 
	}
}

89 
	$GëI˚MakîDeIcögD©a
–
DoDeIcög_T
 *
pD©a
 )

91 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
DeIcög
, –
DoDeIcög_T
 ));

92 
	}
}

99 
	$SëIcögTime
(
U16
 
mu16VÆ
 )

101 
Icög
.
IcögTime
 = 
mu16VÆ
;

102 
	}
}

104 
	$SëDeIcögTime
(
U16
 
mu16VÆ
 )

106 
DeIcög
.
OnOffTime
 = 
mu16VÆ
;

107 
	}
}

110 
	$St›DummyDeIcög
()

113 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 ) =
TRUE
 )

115 
DummyDeIcög
.
Sãp
 = 
STEP_DUMMY_DEICING_DONE_CONTROL
;

119 if–
	`IsSëI˚MakeMode
–
ICE_MODE_TRAY_DEICING
 ) =
TRUE
 )

121 
TøyDeIcög
.
Sãp
 = 
STEP_TRAY_DEICING_DONE_CONTROL
;

123 
	}
}

125 
	$TimeSh‹tI˚MakîFìdTime
()

127 
Ródy
.
TøyFìdAmou¡
 = 1UL;

128 
	}
}

130 
	$InôDoInô
()

132 
Inô
.
Sãp
 = 
STEP_INIT_TRAY_MOVE
;

133 
	}
}

135 
	$InôDoPªhót
()

137 
Pªhót
.
Sãp
 = 
STEP_PREHEAT_CHECK
;

138 
	}
}

140 
	$InôDoRódy
()

142 
Ródy
.
Sãp
 = 
STEP_READY_CHECK_CONDITION
;

143 
	}
}

145 
	$InôDoIcög
()

147 
Icög
.
Sãp
 = 
STEP_ICING_CHECK_COMP
;

148 
	}
}

150 
	$InôDoDeIcög
()

152 
DeIcög
.
Sãp
 = 
STEP_DEICING_TRAY_MOVE
;

153 
	}
}

155 
	$InôDoDummyDeIcög
()

157 
DummyDeIcög
.
Sãp
 = 
STEP_DUMMY_DEICING_GAS_SWITCH
;

158 
	}
}

159 
	$InôDoTøyDeIcög
()

161 
TøyDeIcög
.
Sãp
 = 
STEP_TRAY_DEICING_INIT
;

162 
	}
}

164 
U8
 
	$DoInô
()

166 
U8
 
mu8D⁄e
 = 
FALSE
;

169  
Inô
.
Sãp
 )

171 
STEP_INIT_TRAY_MOVE
:

173 
	`MoveI˚TøyDeIcög
();

175 
Inô
.
Sãp
++;

179 
STEP_INIT_TRAY_DEICING
:

180 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

182 
Inô
.
Sãp
++;

186 
STEP_INIT_CHECK_CONDITION
:

189 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
TRUE
 )

191 
Inô
.
Sãp
++;

195 
STEP_INIT_TRAY_DONE
:

196 
mu8D⁄e
 = 
TRUE
;

200 
Inô
.
Sãp
 = 
STEP_INIT_TRAY_MOVE
;

204  
mu8D⁄e
;

205 
	}
}

208 
	#PREHEAT_TIME_14
 6000U

209 
	#PREHEAT_TIME_20
 3600U

210 
	#PREHEAT_TIME_25
 3600U

211 
	#PREHEAT_COMP_RPS
 60U

212 
	#PREHEAT_BASE_TEMP
 25.0f

213 
U8
 
	`DoPªhót
()

	)

215 
U8
 
	gmu8D⁄e
 = 
FALSE
;

217 
TEMP_T
 
	gtAmbi
;

219  
	gPªhót
.
	gSãp
 )

221 
	gSTEP_PREHEAT_CHECK
:

223 if–
IsVÆidDoIcögAmbiTempR™ge
(Ë=
FALSE


224 || 
IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE
 )

226 
CÀ¨I˚MakeMode
–
ICE_MODE_ALL
 );

227 
SëI˚MakeMode
–
ICE_MODE_INIT
 );

229 
Tu∫OffComp
–
COMP_TYPE_ICE
 );

231 
	gPªhót
.
	gSãp
 = 
STEP_PREHEAT_DONE
;

235 
	gtAmbi
 = 
GëTemp
–
TEMP_ID_AMBIENT
 );

237 if–
	gtAmbi
 < 
	gPREHEAT_BASE_TEMP
 )

239 
	gPªhót
.
	gSãp
++;

243 
	gPªhót
.
	gSãp
 = 
STEP_PREHEAT_DONE
;

248 
	gSTEP_PREHEAT_CHECK_COMP
:

250 if–
IsExpúedCompPrŸe˘Time
(Ë=
TRUE


251 && 
IsExpúedHóãrOnTime
(Ë=
TRUE
 )

253 
Pªhót
.
Sãp
++;

257 
	gSTEP_PREHEAT_INIT
:

260 
Pªhót
.
CompRps
 = 
PREHEAT_COMP_RPS
;

262 
GasSwôchHŸGas
();

264 
	gPªhót
.
	gSãp
++;

267 
	gSTEP_PREHEAT_START
:

269 if–
GëGasSwôchSètus
(Ë=
GAS_SWITCH_HOTGAS
 )

271 
Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
Pªhót
.
CompRps
 );

273 
	gtAmbi
 = 
GëTemp
–
TEMP_ID_AMBIENT
 );

274 if–
	gtAmbi
 < 14.0f )

276 
	gPªhót
.
	gPªHótTime
 = 
PREHEAT_TIME_14
;

278 if–
	gtAmbi
 < 20.0f )

280 
	gPªhót
.
	gPªHótTime
 = 
PREHEAT_TIME_20
;

284 
	gPªhót
.
	gPªHótTime
 = 
PREHEAT_TIME_25
;

286 
	gPªhót
.
	gSãp
++;

290 
	gSTEP_PREHEAT_WAIT
:

292 if–
Pªhót
.
PªHótTime
 == 0)

294 
Pªhót
.
Sãp
++;

298 
	gSTEP_PREHEAT_DONE
:

300 
GasSwôchI˚
();

302 
	gmu8D⁄e
 = 
TRUE
;

306 
Pªhót
.
Sãp
 = 
STEP_PREHEAT_CHECK
;

310  
	gmu8D⁄e
;

314 
	$Upd©eI˚TøyCuºítAmou¡
()

316 if–
	`IsO≥nVÆve
–
VALVE_ICE_TRAY_IN
 ) =
TRUE


317 && 
Ródy
.
TøyFìdAmou¡
 != 0UL )

319 
Ródy
.
TøyFìdAmou¡
--;

321 if–
Ródy
.
TøyFìdAmou¡
 == 0UL )

323 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

325 
	}
}

327 
U8
 
	$IsUsögW©î
()

329 if–
	`GëW©îOut
(Ë=
TRUE
 )

331  
TRUE
;

334 if–
	`IsSèπDøöW©î
(Ë=
TRUE
 )

336  
TRUE
;

339  
FALSE
;

340 
	}
}

342 
	$SèπFìdI˚Tøy
()

344 
	`O≥nVÆve
–
VALVE_ICE_TRAY_IN
 );

346 
	`Regi°îFlowMëîId
–
FLOW_ID_ICE_TRAY
, 
Upd©eI˚TøyCuºítAmou¡
 );

348 
	}
}

350 
	$St›FìdI˚Tøy
()

352 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

354 
	`Regi°îFlowMëîId
–
FLOW_ID_ICE_TRAY
, 
NULL
 );

356 
	}
}

359 
U8
 
	$DoRódy
()

361 
U8
 
mu8D⁄e
 = 
FALSE
;

364  
Ródy
.
Sãp
 )

366 
STEP_READY_CHECK_CONDITION
:

368 
	`Re£tDeIcögCompOnTime
();

370 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
TRUE
 )

372 
Ródy
.
Sãp
++;

377 
STEP_READY_TRAY_MOVE
:

378 
	`MoveI˚TøyIcög
();

380 
Ródy
.
Sãp
++;

384 
STEP_READY_TRAY_DONE
:

385 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_ICING
 )

389 if–
	`IsTu∫OnCompBldc
(Ë=
TRUE
 )

392 
Ródy
.
Sãp
++;

397 
Ródy
.
Sãp
 = 
STEP_READY_TRAY_FEED_START
;

403 
STEP_READY_CHECK_CONTY_ICING
:

405 
	`GasSwôchI˚
();

406 
Ródy
.
TimeOut
 = 
GAS_SWITCH_TIME_OUT
;

407 
Ródy
.
Sãp
++;

410 
STEP_READY_CHECK_CONTY_ICING_DONE
:

411 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_ICE
 )

413 
U8
 
mu8Regi⁄
;

415 
mu8Regi⁄
 = 
	`GëIcögRegi⁄
–
	`GëTemp
–
TEMP_ID_AMBIENT
 ));

416 
	`SèπIcög
–
mu8Regi⁄
 );

418 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
Icög
.
CompRps
 );

419 
	`Tu∫OnF™
–
FAN_TYPE_ICE
 );

421 
Ródy
.
Sãp
++;

423 if–
Ródy
.
TimeOut
 == 0 )

426 
Ródy
.
Sãp
++;

431 
STEP_READY_TRAY_FEED_START
:

432 if–
	`IsUsögW©î
(Ë=
TRUE
 )

437 
Ródy
.
TøyFìdAmou¡
 = 
	`GëFödOutT¨gëTime
–
OUT_AMOUNT_ICE_TRAY
 );

438 
	`Tu∫OnTempSís‹
–
TEMP_ID_ROOM_WATER
, 
ROOM_OUT_TIME_OUT_TIME
 );

439 
Ródy
.
RoomOutTimeOut
 = 
ROOM_OUT_TIME_OUT_TIME
;

441 
	`SèπFìdI˚Tøy
();

443 
Ródy
.
Sãp
++;

447 
STEP_READY_TRAY_FEED_DONE
 :

451 if–
	`GëOuègeSètus
–
TYPE_ICE_TRAY
 ) =
FLOW_OUTAGE
 )

454 
	`St›I˚Make
();

455 
	`St›FìdI˚Tøy
();

460 if–
Ródy
.
RoomOutTimeOut
 != 0 )

462 
Ródy
.
RoomOutTimeOut
--;

466 if–
	`GëFlowMëîLPM
() < 0.1f )

468 
	`SèπI˚OuègeTimî
();

472 
	`St›I˚Make
();

473 
	`St›FìdI˚Tøy
();

479 if–
	`IsUsögW©î
(Ë=
TRUE


480 || 
	`IsO≥nVÆve
–
VALVE_HOT_IN
 ) =
TRUE


481 || 
	`IsO≥nVÆve
–
VALVE_COLD_DRAIN
 ) =
TRUE


482 || 
	`IsO≥nVÆve
–
VALVE_COLD_IN
 ) =
TRUE
 )

484 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

489 
	`O≥nVÆve
–
VALVE_ICE_TRAY_IN
 );

490 if–
Ródy
.
TøyFìdAmou¡
 == 0UL )

492 
	`St›FìdI˚Tøy
();

493 
Ródy
.
Sãp
++;

497 
STEP_READY_GAS_SWITCH
:

498 
	`GasSwôchI˚
();

499 
Ródy
.
TimeOut
 = 
GAS_SWITCH_TIME_OUT
;

501 
Ródy
.
Sãp
++;

504 
STEP_READY_COMP_ON
:

505 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_ICE
 )

507 
U8
 
mu8Regi⁄
;

509 
mu8Regi⁄
 = 
	`GëIcögRegi⁄
–
	`GëTemp
–
TEMP_ID_AMBIENT
 ));

510 
	`SèπIcög
–
mu8Regi⁄
 );

512 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
Icög
.
CompRps
 );

513 
	`Tu∫OnF™
–
FAN_TYPE_ICE
 );

515 
Ródy
.
Sãp
++;

517 if–
Ródy
.
TimeOut
 == 0 )

519 
Ródy
.
Sãp
++;

524 
STEP_READY_DONE
:

525 
mu8D⁄e
 = 
TRUE
;

529 
Ródy
.
Sãp
 = 
STEP_READY_CHECK_CONDITION
;

533  
mu8D⁄e
;

534 
	}
}

537 
U16
 
	$GëIcögTimeSize
(
TEMP_T
 
tRoom
, TEMP_T 
tAmbi
, 
U8
 
mu8Size
 )

539 
U16
 
mu16IcögTime
;

544 
mu16IcögTime
 = 
	`GëIcögTime
–
tRoom
, 
tAmbi
 );

545 if–
mu8Size
 =
ICE_SMALL
 )

547 
mu16IcögTime
 = (
U16
)((
F32
)mu16IcögTimê* 
ICE_SMALL_RATIO
 );

550  
mu16IcögTime
;

551 
	}
}

553 
U8
 
	$GëIcögRegi⁄
–
TEMP_T
 
_tAmbi
 )

555  
	`GëDeIcögRegi⁄
–
_tAmbi
 );

556 
	}
}

558 
U8
 
	$GëIcögCompRps
(
U8
 
mu8Regi⁄
)

560 if–
mu8Regi⁄
 =
DEICING_REGION_6
 )

562  
COMP_ICING_RPS_OVER_TEMP_AMBI
;

565  
COMP_ICING_RPS
;

566 
	}
}

568 
	$SèπIcög
–
U8
 
mu8Regi⁄
 )

570 
Icög
.
Regi⁄
 = 
mu8Regi⁄
;

572 
Icög
.
CompRps
 = 
	`GëIcögCompRps
–
mu8Regi⁄
 );

573 
	}
}

577 
U8
 
	$DoIcög
()

579 
U8
 
mu8D⁄e
 = 
FALSE
;

580 
U8
 
mu8Regi⁄
;

583  
Icög
.
Sãp
 )

585 
STEP_ICING_CHECK_COMP
:

586 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
TRUE


587 && 
	`IsExpúedHóãrOnTime
(Ë=
TRUE
 )

589 
Icög
.
Sãp
++;

593 
STEP_ICING_FIGUARE_OUT_TIME
:

595 if–
	`IsVÆidDoIcögRoomTempR™ge
(Ë=
FALSE


596 || 
	`IsVÆidDoIcögAmbiTempR™ge
(Ë=
FALSE


597 || 
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE


598 || 
	`IsEº‹
–
ERR_TEMP_ROOM_WATER
 ) =
TRUE
 )

601 
	`CÀ¨I˚MakeMode
–
ICE_MODE_ALL
 );

602 
	`SëI˚MakeMode
–
ICE_MODE_INIT
 );

604 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

605 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

606 
	`Tu∫OffSwögB¨
();

608 
Icög
.
Sãp
 = 
STEP_ICING_DONE
;

612 
U8
 
mu8Size
;

613 
TEMP_T
 
tAmbi
;

614 
TEMP_T
 
tRoom
;

616 
tAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

617 
tRoom
 = 
	`GëTemp
–
TEMP_ID_ROOM_WATER
 );

618 
mu8Size
 = 
	`GëI˚Size
();

620 
Icög
.
IcögTime
 = 
	`GëIcögTimeSize
–
tRoom
, 
tAmbi
, 
mu8Size
 );

621 
	`SëSwögB¨C⁄figOffTime
–
DEFAULT_SWING_BAR_TIME_OFF_1
 );

622 
Icög
.
IcögTimeSec⁄dPoöt
 = Icög.
IcögTime
 / 3;

623 
IcögTemp
.
tRoom
 =ÅRoom;

624 
IcögTemp
.
tAmbi
 =ÅAmbi;

625 
mu8Regi⁄
 = 
	`GëDeIcögRegi⁄
–
tAmbi
 );

627 
	`GasSwôchI˚
();

628 
Icög
.
Sãp
++;

632 
STEP_ICING
:

635 if–
Icög
.
IcögTimeSec⁄dPoöt
 == 0 )

637 
	`SëSwögB¨C⁄figOffTime
–
DEFAULT_SWING_BAR_TIME_OFF_2
 );

640 if–
Icög
.
IcögTime
 != 0 )

642 
RPS_T
 
mRps
 = 
Icög
.
CompRps
;

646 if–
Icög
.
IcögTime
 <
TIME_REDUCE_DEICING_NOISE
 )

648 
mRps
 = 
	`GëDeIcögCompRps
–
mu8Regi⁄
 );

651 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
mRps
 );

652 
	`Tu∫OnF™
–
FAN_TYPE_ICE
 );

653 
	`Tu∫OnSwögB¨
();

656 
	`Upd©eDeIcögCompOnTime
();

660 
Icög
.
Sãp
++;

661 
	`Tu∫OffSwögB¨
();

665 
STEP_ICING_DONE
:

666 
mu8D⁄e
 = 
TRUE
;

670 
Icög
.
Sãp
 = 
STEP_ICING_CHECK_COMP
;

674  
mu8D⁄e
;

675 
	}
}

678 
	$SèπDeIcög
–
U8
 
mu8Regi⁄
 )

680 
DeIcög
.
Regi⁄
 = 
mu8Regi⁄
;

682 
DeIcög
.
Cou¡
 = 0;

683 
DeIcög
.
RïótNum
 = 
	`GëDeIcögRïótNum
–
mu8Regi⁄
 );

684 
DeIcög
.
CompRps
 = 
	`GëDeIcögCompRps
–
mu8Regi⁄
 );

685 
DeIcög
.
F™OnOff
 = 
	`GëDeIcögF™OnOff
–
mu8Regi⁄
 );

686 
	}
}

688 
U8
 
	$MakeDeIcögOnOff
()

690 if–
DeIcög
.
Cou¡
 >DeIcög.
RïótNum
 )

692  
FALSE
;

695 
DeIcög
.
OnOffCmd
 = 
	`GëDeIcögCmd
–DeIcög.
Cou¡
 );

696 
DeIcög
.
OnOffTime
 = 
	`GëDeIcögTime
–DeIcög.
Regi⁄
, DeIcög.
Cou¡
 );

697 
DeIcög
.
CompRps
 = 
	`GëDeIcögCompRps
–DeIcög.
Regi⁄
 );

698 
DeIcög
.
F™OnOff
 = 
	`GëDeIcögF™OnOff
–DeIcög.
Regi⁄
 );

700 
DeIcög
.
Cou¡
++;

702  
TRUE
;

703 
	}
}

706 
U8
 
	$DoDeIcög
()

708 
U8
 
mu8CheckTøyEº‹
 = 
FALSE
;

709 
U8
 
mu8Regi⁄
;

710 
U8
 
mu8D⁄e
 = 
FALSE
;

711 
TEMP_T
 
tAmbi
;

713  
DeIcög
.
Sãp
 )

715 
STEP_DEICING_TRAY_MOVE
:

716 
mu8CheckTøyEº‹
 = 
FALSE
;

719 
	`Tu∫OffSwögB¨
();

720 
	`MoveI˚TøyDeIcög
();

721 
DeIcög
.
Sãp
++;

724 
STEP_DEICING_TRAY_DONE
:

726 if–
	`IsEº‹I˚TøyCoûFªzzög
(Ë=
TRUE
 )

730 
mu8CheckTøyEº‹
 = 
TRUE
;

731 
DeIcög
.
Sãp
++;

736 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

739 
DeIcög
.
Sãp
++;

744 
STEP_DEICING_FIGUARE_OUT_REGION
:

746 if–
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE


747 || 
	`IsVÆidDoIcögAmbiTempR™ge
(Ë=
FALSE
 )

749 
tAmbi
 = 
IcögTemp
.tAmbi;

753 
tAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

755 
mu8Regi⁄
 = 
	`GëDeIcögRegi⁄
–
tAmbi
 );

756 
	`SèπDeIcög
–
mu8Regi⁄
 );

757 
	`GasSwôchHŸGas
();

759 
	`Tu∫OnOffF™
–
FAN_TYPE_ICE
, 
DeIcög
.
F™OnOff
 );

760 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
DeIcög
.
CompRps
 );

762 
DeIcög
.
Sãp
++;

765 
STEP_DEICING_COMMAND
:

767 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_HOTGAS
 )

769 if–
	`MakeDeIcögOnOff
(Ë=
TRUE
 )

772 
DeIcög
.
Sãp
++;

777 
DeIcög
.
Sãp
 = 
STEP_DEICING_DONE_CONTROL
;

783 
STEP_DEICING_CONTROL
:

784 if–
DeIcög
.
OnOffTime
 == 0 )

787 if–
	`MakeDeIcögOnOff
(Ë=
FALSE
 )

790 
DeIcög
.
Sãp
 = 
STEP_DEICING_DONE_CONTROL
;

795 if–
DeIcög
.
OnOffTime
 != 0 )

797 if–
DeIcög
.
OnOffCmd
 =
ON
 )

799 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
DeIcög
.
CompRps
 );

800 
	`Tu∫OnOffF™
–
FAN_TYPE_ICE
, 
DeIcög
.
F™OnOff
 );

810 
STEP_DEICING_DONE_CONTROL
:

814 if–
mu8CheckTøyEº‹
 =
TRUE
 )

816 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

818 
	`Re£tEº‹I˚TøyAccumCou¡
();

821 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

822 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

824 
DeIcög
.
Sãp
++;

828 
DeIcög
.
Sãp
++;

833 #i‡
CONFIG_BACK_FEEDER


834 
STEP_DEICING_BACK_FEEDER_START
:

836 if–
	`IsO≥nI˚Do‹
(Ë!
TRUE
 )

838 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

839 
	`Tu∫OnRñay
–
RELAY_FEEDER_CCW
 );

840 
DeIcög
.
BackFìdîTime
 = 5;

842 
DeIcög
.
Sãp
++;

846 
DeIcög
.
BackFìdîTime
 = 0;

847 
DeIcög
.
Sãp
 = 
STEP_DEICING_CHECK_ICE_FULL
;

851 
STEP_DEICING_BACK_FEEDER_DONE
:

852 if–
DeIcög
.
BackFìdîTime
 != 0 )

858 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

859 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

860 
DeIcög
.
Sãp
++;

865 
STEP_DEICING_CHECK_ICE_FULL
:

871 
	`SèπCheckI˚FuŒ
();

873 
DeIcög
.
Sãp
++;

876 
STEP_DEICING_WAIT_CHECK_ICE_FULL
:

878 #i‡!
CONFIG_MAKE_ONE_MORE


879 if–
	`IsD⁄eCheckI˚FuŒ
(Ë=
TRUE
 )

882 
DeIcög
.
Sãp
++;

886 
STEP_DEICING_DONE
:

887 
mu8D⁄e
 = 
TRUE
;

891 
DeIcög
.
Sãp
 = 
STEP_DEICING_TRAY_MOVE
;

895  
mu8D⁄e
;

896 
	}
}

899 
	$SèπDummyDeIcög
–
DoDummyDeIcög_T
 *
pVÆ
, 
U8
 
mu8Regi⁄
 )

901 
pVÆ
->
Regi⁄
 = 
mu8Regi⁄
;

902 
pVÆ
->
Cou¡
 = 0;

903 
pVÆ
->
RïótNum
 = 
	`GëDeIcögRïótNum
–
mu8Regi⁄
 );

904 
pVÆ
->
F™OnOff
 = 
	`GëDeIcögF™OnOff
–
mu8Regi⁄
 );

905 
	}
}

907 
U8
 
	$MakeDummyDeIcögOnOff
(
DoDummyDeIcög_T
 *
pVÆ
)

909 if–
pVÆ
->
Cou¡
 >pVÆ->
RïótNum
 )

911  
FALSE
;

914 
pVÆ
->
OnOffCmd
 = 
	`GëDeIcögCmd
–pVÆ->
Cou¡
 );

915 
pVÆ
->
OnOffTime
 = 
	`GëDeIcögTime
–pVÆ->
Regi⁄
,ÖVÆ->
Cou¡
 );

916 
pVÆ
->
CompRps
 = 
	`GëDeIcögCompRps
–pVÆ->
Regi⁄
 );

917 
pVÆ
->
F™OnOff
 = 
	`GëDeIcögF™OnOff
–pVÆ->
Regi⁄
 );

918 
pVÆ
->
Cou¡
++;

920  
TRUE
;

921 
	}
}

924 
U8
 
	$DoOffLﬂd
()

928 
	`Tu∫OffSwögB¨
();

929 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

930 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

931 
	`St›FìdI˚Tøy
();

933  
TRUE
;

934 
	}
}

937 
U8
 
	$DoOff
()

941 
	`DoOffLﬂd
();

943 
	`CÀ¨I˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 );

944 
	`CÀ¨I˚MakeMode
–
ICE_MODE_TRAY_DEICING
 );

945 
	`CÀ¨I˚MakeMode
–
ICE_MODE_ALL
 );

947  
TRUE
;

948 
	}
}

952 
U8
 
	$DoDummyDeIcög
()

954 
U8
 
mu8CheckTøyEº‹
 = 
FALSE
;

955 
U8
 
mu8Regi⁄
 = 0;

956 
U8
 
mu8D⁄e
 = 
FALSE
;

957 
TEMP_T
 
tAmbi
;

960  
DummyDeIcög
.
Sãp
 )

962 
STEP_DUMMY_DEICING_GAS_SWITCH
:

966 
mu8CheckTøyEº‹
 = 
FALSE
;

969 
	`Tu∫OffSwögB¨
();

970 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

971 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

974 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

976 
DummyDeIcög
.
Sãp
++;

979 
STEP_DUMMY_DEICING_TRAY_MOVE
:

981 
	`MoveI˚TøyDeIcög
();

982 
DummyDeIcög
.
Sãp
++;

985 
STEP_DUMMY_DEICING_TRAY_DONE
:

987 if–
	`IsEº‹I˚TøyCoûFªzzög
(Ë=
TRUE
 )

989 
mu8CheckTøyEº‹
 = 
TRUE
;

993 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

996 if–
mu8CheckTøyEº‹
 =
FALSE
 )

998 
	`Re£tEº‹I˚TøyAccumCou¡
();

1001 
DummyDeIcög
.
Sãp
++;

1005 
STEP_DUMMY_DEICING_COMP_PROTECT_TIME
:

1007 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
TRUE


1008 && 
	`IsExpúedHóãrOnTime
(Ë=
TRUE
 )

1010 
DummyDeIcög
.
Sãp
++;

1014 
STEP_DUMMY_DEICING_FIGUARE_OUT_REGION
:

1016 if–
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE
 )

1019 
DummyDeIcög
.
Sãp
 = 
STEP_DUMMY_DEICING_DONE_CONTROL
;

1024 
tAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

1025 
mu8Regi⁄
 = 
	`GëDeIcögRegi⁄
–
tAmbi
 );

1026 
	`SèπDummyDeIcög
–&
DummyDeIcög
, 
mu8Regi⁄
 );

1028 
DummyDeIcög
.
CompOnTime
 = 
	`GëDummyDeIcögCompOnTime
–
mu8Regi⁄
 );

1030 
	`GasSwôchI˚
();

1032 
DummyDeIcög
.
Sãp
++;

1036 
STEP_DUMMY_DEICING_COMP_ON
:

1038 if–
DummyDeIcög
.
CompOnTime
 == 0 )

1040 
DummyDeIcög
.
Sãp
++;

1046 
mu8Regi⁄
 = 
	`GëIcögRegi⁄
–
	`GëTemp
–
TEMP_ID_AMBIENT
 ));

1047 
	`SèπIcög
–
mu8Regi⁄
 );

1048 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
Icög
.
CompRps
 );

1049 
	`Tu∫OnOffF™
–
FAN_TYPE_ICE
, 
DeIcög
.
F™OnOff
 );

1051 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1055 
STEP_DUMMY_DEICING_COMMAND
:

1057 if–
	`MakeDummyDeIcögOnOff
–&
DummyDeIcög
 ) =
TRUE
 )

1059 
	`GasSwôchHŸGas
();

1060 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
DummyDeIcög
.
CompRps
 );

1061 
	`Tu∫OnOffF™
–
FAN_TYPE_ICE
, 
DummyDeIcög
.
F™OnOff
 );

1062 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1064 
DummyDeIcög
.
Sãp
++;

1069 
DummyDeIcög
.
Sãp
 = 
STEP_DUMMY_DEICING_DONE_CONTROL
;

1074 
STEP_DUMMY_DEICING_CONTROL
:

1076 if–
DummyDeIcög
.
OnOffTime
 == 0 )

1078 if–
	`MakeDummyDeIcögOnOff
–&
DummyDeIcög
 ) =
FALSE
 )

1080 
DummyDeIcög
.
Sãp
 = 
STEP_DUMMY_DEICING_DONE_CONTROL
;

1085 if–
DummyDeIcög
.
OnOffTime
 != 0 )

1087 if–
DummyDeIcög
.
OnOffCmd
 =
ON
 )

1089 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
DummyDeIcög
.
CompRps
 );

1090 
	`Tu∫OnOffF™
–
FAN_TYPE_ICE
, 
DummyDeIcög
.
F™OnOff
 );

1091 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1100 
STEP_DUMMY_DEICING_DONE_CONTROL
:

1102 
DummyDeIcög
.
Sãp
++;

1105 
STEP_DUMMY_DEICING_DONE
:

1106 
mu8D⁄e
 = 
TRUE
;

1110 
DummyDeIcög
.
Sãp
 = 0;

1114  
mu8D⁄e
;

1115 
	}
}

1117 
U8
 
	$DoTøyDeIcög
()

1119 
U8
 
mu8Regi⁄
 = 0;

1120 
U8
 
mu8D⁄e
 = 
FALSE
;

1123  
TøyDeIcög
.
Sãp
 )

1125 
STEP_TRAY_DEICING_INIT
:

1127 
	`Tu∫OffSwögB¨
();

1128 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

1129 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1130 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

1133 
	`GasSwôchHŸGas
();

1135 
TøyDeIcög
.
Sãp
++;

1139 
STEP_TRAY_DEICING_TRAY_MOVE
:

1140 
	`MoveI˚TøyDeIcög
();

1141 
TøyDeIcög
.
Sãp
++;

1144 
STEP_TRAY_DEICING_TRAY_DONE
:

1145 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

1147 
TøyDeIcög
.
Sãp
++;

1152 
STEP_TRAY_DEICING_COMP_PROTECT_TIME
:

1154 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
TRUE


1155 && 
	`IsExpúedHóãrOnTime
(Ë=
TRUE
 )

1157 
TøyDeIcög
.
Sãp
++;

1161 
STEP_TRAY_DEICING_FIGUARE_OUT_REGION
:

1162 if–
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE
 )

1165 
TøyDeIcög
.
Sãp
 = 
STEP_TRAY_DEICING_DONE_CONTROL
;

1169 
TEMP_T
 
tAmbi
;

1172 
tAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

1173 
mu8Regi⁄
 = 
	`GëDeIcögRegi⁄
–
tAmbi
 );

1174 
	`SèπDummyDeIcög
–&
TøyDeIcög
, 
mu8Regi⁄
 );

1176 
TøyDeIcög
.
Sãp
++;

1180 
STEP_TRAY_DEICING_CHECK_HOTGAS
:

1181 
	`GasSwôchHŸGas
();

1182 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_HOTGAS
 )

1184 
TøyDeIcög
.
Sãp
++;

1188 
STEP_TRAY_DEICING_COMMAND
:

1190 if–
	`MakeDummyDeIcögOnOff
–&
TøyDeIcög
 ) =
TRUE
 )

1192 
	`GasSwôchHŸGas
();

1193 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
TøyDeIcög
.
CompRps
 );

1194 
	`Tu∫OnOffF™
–
FAN_TYPE_ICE
, 
TøyDeIcög
.
F™OnOff
 );

1195 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1197 
TøyDeIcög
.
Sãp
++;

1202 
TøyDeIcög
.
Sãp
 = 
STEP_TRAY_DEICING_DONE_CONTROL
;

1207 
STEP_TRAY_DEICING_CONTROL
:

1209 if–
TøyDeIcög
.
OnOffTime
 == 0 )

1211 if–
	`MakeDummyDeIcögOnOff
–&
TøyDeIcög
 ) =
FALSE
 )

1213 
TøyDeIcög
.
Sãp
 = 
STEP_TRAY_DEICING_DONE_CONTROL
;

1218 if–
TøyDeIcög
.
OnOffTime
 != 0 )

1220 if–
TøyDeIcög
.
OnOffCmd
 =
ON
 )

1222 
	`Tu∫OnCompRps
–
COMP_TYPE_ICE
, 
TøyDeIcög
.
CompRps
 );

1223 
	`Tu∫OnOffF™
–
FAN_TYPE_ICE
, 
TøyDeIcög
.
F™OnOff
 );

1224 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1233 
STEP_TRAY_DEICING_DONE_CONTROL
:

1235 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

1236 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1238 
TøyDeIcög
.
Sãp
++;

1241 
STEP_TRAY_DEICING_DONE
:

1242 
mu8D⁄e
 = 
TRUE
;

1246 
TøyDeIcög
.
Sãp
 = 0;

1250  
mu8D⁄e
;

1252 
	}
}

1255 (*
	tInôA˘i⁄_T
)();

1256 
	$U8
(*
	tDoA˘i⁄_T
)();

1257 
	s_i˚_makî_evít_


1259 
U16
 
Mode
;

1261 
InôA˘i⁄_T
 
DoInô
;

1262 
DoA˘i⁄_T
 
DoA˘i⁄
;

1263 } 
	tI˚MakîEvít_T
;

1265 
I˚MakîEvít_T
 
I˚MakîEvítLi°
[] =

1267 { 
ICE_MODE_OFF_LOAD
, 
NULL
, 
DoOffLﬂd
 },

1268 { 
ICE_MODE_OFF
, 
NULL
, 
DoOff
 },

1269 { 
ICE_MODE_DUMMY_DEICING
, 
InôDoDummyDeIcög
, 
DoDummyDeIcög
 },

1270 { 
ICE_MODE_TRAY_DEICING
, 
InôDoTøyDeIcög
, 
DoTøyDeIcög
 },

1272 { 
ICE_MODE_INIT
, 
InôDoInô
, 
DoInô
 },

1273 { 
ICE_MODE_PREHEAT
, 
InôDoPªhót
, 
DoPªhót
 },

1274 { 
ICE_MODE_READY
, 
InôDoRódy
, 
DoRódy
 },

1275 { 
ICE_MODE_ICING
, 
InôDoIcög
, 
DoIcög
 },

1276 { 
ICE_MODE_DEICING
, 
InôDoDeIcög
, 
DoDeIcög
 },

1277 { 
ICE_MODE_DEICING_OFF
, 
NULL
, 
DoOffLﬂd
 }

1278 
	}
};

1279 
	#SZ_ICE_MAKER_EVENT_LIST
 ((
I˚MakîEvítLi°
)/(
I˚MakîEvít_T
))

	)

1281 
	$Pro˚ssI˚Makî
()

1283 
U8
 
i
;

1284 
U8
 
mu8Rë
;

1285 
I˚MakîEvít_T
 *
pLi°
 = 
NULL
;

1286 
U8
 
mu8Inô
 = 
FALSE
;

1298  
i
 = 0; i < 
SZ_ICE_MAKER_EVENT_LIST
 ; i++ )

1300 
pLi°
 = &
I˚MakîEvítLi°
[ 
i
 ];

1302 if–
mu8Inô
 =
TRUE


1303 || 
	`IsSëI˚MakeMode
–
pLi°
->
Mode
 ) =
FALSE
 )

1305 if–
pLi°
->
DoInô
 !
NULL
 )

1307 
pLi°
->
	`DoInô
();

1312 
mu8Inô
 = 
TRUE
;

1313 
mu8Rë
 = 
FALSE
;

1314 if–
pLi°
->
DoA˘i⁄
 !
NULL
 )

1316 
mu8Rë
 = 
pLi°
->
	`DoA˘i⁄
();

1319 if–
mu8Rë
 =
TRUE
 )

1321 
	`CÀ¨I˚MakeMode
–
pLi°
->
Mode
 );

1322 if–
pLi°
->
DoInô
 !
NULL
 )

1324 
pLi°
->
	`DoInô
();

1332 if–
	`IsOvîCompPrŸe˘Sec⁄dOnTime
(Ë=
TRUE
 )

1334 
	`SëI˚MakeMode
–
ICE_MODE_OFF
 );

1336 
	}
}

1338 
	$Upd©eI˚MakîTimî
()

1340 if–
Pªhót
.
PªHótTime
 != 0 )

1342 
Pªhót
.
PªHótTime
--;

1345 if–
Ródy
.
TimeOut
 != 0 )

1347 
Ródy
.
TimeOut
--;

1351 if–
Icög
.
IcögTime
 != 0 )

1353 
Icög
.
IcögTime
--;

1357 if–
Icög
.
IcögTimeSec⁄dPoöt
 != 0 )

1359 
Icög
.
IcögTimeSec⁄dPoöt
--;

1363 if–
DeIcög
.
OnOffTime
 != 0 )

1365 
DeIcög
.
OnOffTime
--;

1368 #i‡
CONFIG_BACK_FEEDER


1369 if–
DeIcög
.
BackFìdîTime
 != 0 )

1371 
DeIcög
.
BackFìdîTime
--;

1376 if–
DummyDeIcög
.
OnOffTime
 != 0 )

1378 
DummyDeIcög
.
OnOffTime
--;

1381 if–
DummyDeIcög
.
CompOnTime
 != 0 )

1383 
DummyDeIcög
.
CompOnTime
--;

1385 if–
TøyDeIcög
.
OnOffTime
 != 0 )

1387 
TøyDeIcög
.
OnOffTime
--;

1389 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice_maker.h

1 #i‚de‡
__ICE_MAKER_H__


2 
	#__ICE_MAKER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_i˚_makî_ãmp_t


8 
TEMP_T
 
	mtRoom
;

9 
TEMP_T
 
	mtAmbi
;

10 } 
	tIcögTemp_T
;

15 
	mSTEP_INIT_TRAY_MOVE
,

16 
	mSTEP_INIT_TRAY_DEICING
,

17 
	mSTEP_INIT_CHECK_CONDITION
,

18 
	mSTEP_INIT_TRAY_DONE


19 } 
	tInôSãp_T
;

21 
	s_do_öô_


23 
InôSãp_T
 
	mSãp
;

24 } 
	tDoInô_T
;

27 
	mSTEP_PREHEAT_CHECK
,

28 
	mSTEP_PREHEAT_CHECK_COMP
,

29 
	mSTEP_PREHEAT_INIT
,

30 
	mSTEP_PREHEAT_START
,

31 
	mSTEP_PREHEAT_WAIT
,

32 
	mSTEP_PREHEAT_DONE


33 } 
	tPªhótSãp_T
;

34 
	s_do_¥ehót_


36 
PªhótSãp_T
 
	mSãp
;

37 
U16
 
	mPªHótTime
;

38 
U8
 
	mCompRps
;

39 } 
	tDoPªhót_T
;

44 
	mSTEP_READY_CHECK_CONDITION
,

46 
	mSTEP_READY_TRAY_MOVE
,

47 
	mSTEP_READY_TRAY_DONE
,

49 
	mSTEP_READY_CHECK_CONTY_ICING
,

50 
	mSTEP_READY_CHECK_CONTY_ICING_DONE
,

52 
	mSTEP_READY_TRAY_FEED_START
,

53 
	mSTEP_READY_TRAY_FEED_DONE
,

55 
	mSTEP_READY_GAS_SWITCH
,

58 
	mSTEP_READY_COMP_ON
,

60 
	mSTEP_READY_DONE


62 } 
	tRódySãp_T
;

64 
	s_do_ªady_


66 
RódySãp_T
 
	mSãp
;

68 
U32
 
	mRëryTimeOut
;

69 
U32
 
	mTøyFìdAmou¡
;

70 
U16
 
	mRoomOutTimeOut
;

71 
U16
 
	mTimeOut
;

72 } 
	tDoRódy_T
;

79 
	mSTEP_ICING_CHECK_COMP
,

80 
	mSTEP_ICING_FIGUARE_OUT_TIME
,

81 
	mSTEP_ICING
,

83 
	mSTEP_ICING_DONE


84 } 
	tIcögSãp_T
;

86 
	s_do_icög_


88 
IcögSãp_T
 
	mSãp
;

90 
U8
 
	mRegi⁄
;

91 
U8
 
	mCompRps
;

93 
U16
 
	mIcögTime
;

94 
U16
 
	mIcögTimeSec⁄dPoöt
;

95 } 
	tDoIcög_T
;

101 
	mSTEP_DEICING_TRAY_MOVE
,

102 
	mSTEP_DEICING_TRAY_DONE
,

104 
	mSTEP_DEICING_FIGUARE_OUT_REGION
,

105 
	mSTEP_DEICING_COMMAND
,

106 
	mSTEP_DEICING_CONTROL
,

107 
	mSTEP_DEICING_DONE_CONTROL
,

109 #i‡
CONFIG_BACK_FEEDER


110 
	mSTEP_DEICING_BACK_FEEDER_START
,

111 
	mSTEP_DEICING_BACK_FEEDER_DONE
,

114 
	mSTEP_DEICING_CHECK_ICE_FULL
,

115 
	mSTEP_DEICING_WAIT_CHECK_ICE_FULL
,

117 
	mSTEP_DEICING_DONE


118 } 
	tDeIcögSãp_T
;

120 
	s_do_deicög_


122 
DeIcögSãp_T
 
	mSãp
;

125 
U8
 
	mRegi⁄
;

126 
U8
 
	mCou¡
;

127 
U8
 
	mRïótNum
;

130 
U8
 
	mOnOffCmd
;

131 
U16
 
	mOnOffTime
;

132 
U8
 
	mCompRps
;

133 
U8
 
	mF™OnOff
;

135 #i‡
CONFIG_BACK_FEEDER


136 
U16
 
	mBackFìdîTime
;

138 } 
	tDoDeIcög_T
;

145 
	mSTEP_DUMMY_DEICING_GAS_SWITCH
,

146 
	mSTEP_DUMMY_DEICING_TRAY_MOVE
,

147 
	mSTEP_DUMMY_DEICING_TRAY_DONE
,

149 
	mSTEP_DUMMY_DEICING_COMP_PROTECT_TIME
,

150 
	mSTEP_DUMMY_DEICING_FIGUARE_OUT_REGION
,

151 
	mSTEP_DUMMY_DEICING_COMP_ON
,

153 
	mSTEP_DUMMY_DEICING_COMMAND
,

154 
	mSTEP_DUMMY_DEICING_CONTROL
,

155 
	mSTEP_DUMMY_DEICING_DONE_CONTROL
,

157 
	mSTEP_DUMMY_DEICING_DONE


158 } 
	tDummyDeIcögSãp_T
;

162 
	mSTEP_TRAY_DEICING_INIT
,

164 
	mSTEP_TRAY_DEICING_TRAY_MOVE
,

165 
	mSTEP_TRAY_DEICING_TRAY_DONE
,

167 
	mSTEP_TRAY_DEICING_COMP_PROTECT_TIME
,

168 
	mSTEP_TRAY_DEICING_FIGUARE_OUT_REGION
,

169 
	mSTEP_TRAY_DEICING_CHECK_HOTGAS
,

170 
	mSTEP_TRAY_DEICING_COMMAND
,

171 
	mSTEP_TRAY_DEICING_CONTROL
,

172 
	mSTEP_TRAY_DEICING_DONE_CONTROL
,

173 
	mSTEP_TRAY_DEICING_DONE


174 } 
	tTøyDeIcögSãp_T
;

176 
	s_do_öô_deicög_


178 
U16
 
	mSãp
;

181 
U8
 
	mRegi⁄
;

182 
U8
 
	mCou¡
;

183 
U8
 
	mRïótNum
;

186 
U16
 
	mCompOnTime
;

189 
U8
 
	mOnOffCmd
;

190 
U16
 
	mOnOffTime
;

191 
U8
 
	mCompRps
;

192 
U8
 
	mF™OnOff
;

193 } 
	tDoDummyDeIcög_T
;

196 
GëI˚MakîInôD©a
–
DoInô_T
 *
pD©a
 );

198 
GëI˚MakîPªhótD©a
–
DoPªhót_T
 *
pD©a
 );

199 
GëI˚MakîRódyD©a
–
DoRódy_T
 *
pD©a
 );

200 
RódySãp_T
 
GëI˚MakîRódySãp
();

202 
GëI˚MakîIcögD©a
–
DoIcög_T
 *
pD©a
 );

204 
GëI˚MakîDeIcögD©a
–
DoDeIcög_T
 *
pD©a
 );

206 
GëI˚MakîInôDeIcögD©a
–
DoDummyDeIcög_T
 *
pD©a
 );

208 
SëIcögTime
(
U16
 
mu16VÆ
 );

209 
SëDeIcögTime
(
U16
 
mu16VÆ
 );

212 
St›DummyDeIcög
();

215 
TimeSh‹tI˚MakîFìdTime
();

217 
Pro˚ssI˚Makî
();

220 
Upd©eI˚MakîTimî
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\icing_table.c

1 
	~"icög_èbÀ.h
"

4 
	#ICING_TABLE_V1
 0

5 
	#ICING_TABLE_V2
 0

6 
	#ICING_TABLE_V3
 0

7 
	#ICING_TABLE_V4
 1

8 

	)

20 #i‡
ICING_TABLE_V1


21 
	#MAX_INDEX_ROOM_TEMP
 46

	)

22 
	#MAX_INDEX_AMBI_TEMP
 46

	)

23 c⁄° 
U16
 
	gIcögTimeTabÀ
[
MAX_INDEX_ROOM_TEMP
][
MAX_INDEX_AMBI_TEMP
] =

395 #i‡
ICING_TABLE_V2


396 
	#MAX_INDEX_ROOM_TEMP
 46

	)

397 
	#MAX_INDEX_AMBI_TEMP
 46

	)

398 c⁄° 
U16
 
	gIcögTimeTabÀ
[
MAX_INDEX_ROOM_TEMP
][
MAX_INDEX_AMBI_TEMP
] =

726 #i‡
ICING_TABLE_V3


727 
	#MAX_INDEX_ROOM_TEMP
 46

	)

728 
	#MAX_INDEX_AMBI_TEMP
 46

	)

729 c⁄° 
U16
 
	gIcögTimeTabÀ
[
MAX_INDEX_ROOM_TEMP
][
MAX_INDEX_AMBI_TEMP
] =

1057 #i‡
ICING_TABLE_V4


1058 
	#MAX_INDEX_ROOM_TEMP
 46

	)

1059 
	#MAX_INDEX_AMBI_TEMP
 46

	)

1060 c⁄° 
U16
 
	gIcögTimeTabÀ
[
MAX_INDEX_ROOM_TEMP
][
MAX_INDEX_AMBI_TEMP
] =

1389 
U16
 
	$IsVÆidR™geTemp
(
TEMP_T
 
tRoom
, TEMP_T 
tAmbi
 )

1391 if–
tRoom
 < 1.0f ||ÅRoom > 45.0f )

1393  
FALSE
;

1396 if–
tAmbi
 < 0.0f ||ÅAmbi > 43.0f )

1398  
FALSE
;

1401  
TRUE
;

1402 
	}
}

1409 
U16
 
	$GëIcögTime
(
TEMP_T
 
tRoom
, TEMP_T 
tAmbi
 )

1411 
U16
 
mu16IdxRoom
;

1412 
U16
 
mu16IdxAmbi
;

1413 
U16
 
mu16IcögTime
 = 0;

1416 
tRoom
 =ÅRoom + 0.5f;

1417 if–
tRoom
 < 1.0f )

1419 
tRoom
 = 1.0f;

1422 
tAmbi
 =ÅAmbi + 0.5f;

1423 if–
tAmbi
 < 1.0f )

1425 
tAmbi
 = 0.0f;

1428 
mu16IdxRoom
 = (
U16
)
tRoom
;

1429 if–
mu16IdxRoom
 >
MAX_INDEX_ROOM_TEMP
 )

1431 
mu16IdxRoom
 = 
MAX_INDEX_ROOM_TEMP
 - 1 ;

1434 
mu16IdxAmbi
 = (
U16
)
tAmbi
;

1435 if–
mu16IdxAmbi
 >
MAX_INDEX_AMBI_TEMP
 )

1437 
mu16IdxAmbi
 = 
MAX_INDEX_AMBI_TEMP
 - 1 ;

1440 
mu16IcögTime
 = 
IcögTimeTabÀ
[ 
mu16IdxRoom
 ][ 
mu16IdxAmbi
 ] * 10U;

1441  
mu16IcögTime
;

1442 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\icing_table.h

1 #i‚de‡
__ICING_TABLE_H__


2 
	#__ICING_TABLE_H__


	)

4 
	~"¥j_ty≥.h
"

8 
U16
 
IsVÆidR™geTemp
(
TEMP_T
 
tRoom
, TEMP_T 
tAmbi
 );

11 
U16
 
GëIcögTime
(
TEMP_T
 
tRoom
, TEMP_T 
tAmbi
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp.c

1 
	~"comp.h
"

3 #i‡(
CONFIG_BLDC_COMP_TYPE
 =
COMP_TYPE_RELAY
)

4 
	~"ªœy.h
"

6 
	~"comp_bldc.h
"

9 
	~<°rög.h
>

13 
	#CONFIG_PROTECT_ON_TIME
 1

14 

	)

17 
	#PROTECT_OFF_TIME
 300UL

18 
	#PROTECT_ON_TIME
 9000UL

19 
	#PROTECT_SECOND_ON_TIME
 11400UL

20 

	)

22 
	#MAX_TIME
 60000UL

23 

	)

25 
Com¥ess‹_T
 
	gComp
;

28 
	$InôComp
()

30 
Comp
.
Mode
 = 
COMP_MODE_NONE
;

31 
Comp
.
Cﬁd_OnOff
 = 
OFF
;

32 
Comp
.
I˚_OnOff
 = 
OFF
;

33 
Comp
.
F‹˚dOnOff
 = 
OFF
;

35 
Comp
.
PrŸe˘OffTime
 = 
PROTECT_OFF_TIME
;

36 
Comp
.
OnTime
 = 0;

37 
Comp
.
OffTime
 = 5;

39 
	`InôCompBldc
();

40 
	}
}

42 
	$GëCompD©a
–
Com¥ess‹_T
 *
pD©a
 )

44 
	`MEMCPY
((
__FAR
 *Ë
pD©a
, (c⁄° __FAR *)&
Comp
, –
Com¥ess‹_T
 ));

45 
	}
}

47 
	$SëCompMode
(
U8
 
mu8Mode
)

49 
Comp
.
Mode
 = 
mu8Mode
;

50 
	}
}

52 
U8
 
	$GëCompMode
(
U8
 
mu8Mode
)

54  
Comp
.
Mode
;

55 
	}
}

57 
	$SëCompPrŸe˘OffTime
(
U16
 
mu16VÆ
)

59 
Comp
.
PrŸe˘OffTime
 = 
mu16VÆ
;

60 
	}
}

62 
U16
 
	$GëCompPrŸe˘OffTime
()

64  
Comp
.
PrŸe˘OffTime
;

65 
	}
}

67 
U8
 
	$IsOvîCompPrŸe˘OnTime
()

69 #i‡
CONFIG_PROTECT_ON_TIME


70 if–
Comp
.
OnTime
 > 
PROTECT_ON_TIME
 )

72  
TRUE
;

76  
FALSE
;

77 
	}
}

79 
U8
 
	$IsOvîCompPrŸe˘Sec⁄dOnTime
()

81 #i‡
CONFIG_PROTECT_ON_TIME


82 if–
Comp
.
OnTime
 > 
PROTECT_SECOND_ON_TIME
 )

84  
TRUE
;

88  
FALSE
;

89 
	}
}

92 
	$Tu∫OnCompRps
(
U8
 
mu8Ty≥
, 
RPS_T
 
mRps
 )

94 
	`Tu∫OnComp
–
mu8Ty≥
 );

95 #i‡(
CONFIG_BLDC_COMP_TYPE
 =
COMP_TYPE_BLDC
)

96 
	`SëCompBldcT¨gëRps
–
mRps
 );

98 
	}
}

100 
	$Tu∫OnComp
(
U8
 
mu8Ty≥
)

102 if–
mu8Ty≥
 =
COMP_TYPE_COLD
 )

104 
Comp
.
Cﬁd_OnOff
 = 
ON
;

108 
Comp
.
I˚_OnOff
 = 
ON
;

110 
	}
}

112 
	$Tu∫OffComp
(
U8
 
mu8Ty≥
)

114 if–
mu8Ty≥
 =
COMP_TYPE_COLD
 )

116 
Comp
.
Cﬁd_OnOff
 = 
OFF
;

120 
Comp
.
I˚_OnOff
 = 
OFF
;

122 
	}
}

124 
U8
 
	$GëCompOnOffTy≥
(
U8
 
mu8Ty≥
)

126 if–
mu8Ty≥
 =
COMP_TYPE_COLD
 )

128  
Comp
.
Cﬁd_OnOff
;

131  
Comp
.
I˚_OnOff
;

132 
	}
}

134 
	$Tu∫OnF‹˚dComp
()

136 
Comp
.
F‹˚dOnOff
 = 
ON
;

137 
	}
}

139 
	$Tu∫OffF‹˚dComp
()

141 
Comp
.
F‹˚dOnOff
 = 
OFF
;

142 
	}
}

144 
U32
 
	$GëCompOnTime
()

146  
Comp
.
OnTime
;

147 
	}
}

149 
U32
 
	$GëCompOffTime
()

151  
Comp
.
OffTime
;

152 
	}
}

153 
U8
 
	$IsTu∫OnComp
()

155 #i‡(
CONFIG_BLDC_COMP_TYPE
 =
COMP_TYPE_BLDC
)

156 if–
	`IsTu∫OnCompBldc
(Ë=
TRUE
 )

158  
TRUE
;

161 if–
	`IsTu∫OnRñay
–
RELAY_COMP
 ) =
TRUE
 )

163  
TRUE
;

167  
FALSE
;

168 
	}
}

170 
	$Tu∫OnCompTy≥
()

172 #i‡(
CONFIG_BLDC_COMP_TYPE
 =
COMP_TYPE_BLDC
)

173 if–
	`GëCompBldcT¨gëRps
(Ë< 
MIN_RPS
 )

175 
	`SëCompBldcT¨gëRps
–
MIN_RPS
 );

178 
	`Tu∫OnRñay
–
RELAY_COMP
 );

180 
	}
}

182 
	$Tu∫OffCompTy≥
()

184 #i‡(
CONFIG_BLDC_COMP_TYPE
 =
COMP_TYPE_BLDC
)

185 
	`SëCompBldcT¨gëRps
( 0 );

187 
	`Tu∫OffRñay
–
RELAY_COMP
 );

189 
	}
}

192 
U8
 
	$GëCompOnOff
()

194 if–
	`IsTu∫OnComp
(Ë=
TRUE
 )

196  
ON
;

199  
OFF
;

200 
	}
}

203 
U8
 
	$IsExpúedCompPrŸe˘Time
()

205 if–
	`IsTu∫OnComp
(Ë=
FALSE


206 && 
Comp
.
PrŸe˘OffTime
 != 0 )

208  
FALSE
;

211  
TRUE
;

212 
	}
}

214 
	$Upd©eCompTimî
()

218 if–
	`IsTu∫OnComp
(Ë=
FALSE
 )

220 if–
Comp
.
PrŸe˘OffTime
 != 0 )

222 
Comp
.
PrŸe˘OffTime
--;

227 
Comp
.
PrŸe˘OffTime
 = 
PROTECT_OFF_TIME
;

229 
	}
}

231 
	$C⁄åﬁComp
()

233 
U8
 
mu8OnOff
 = 
OFF
;

237 if–
Comp
.
Cﬁd_OnOff
 =
ON
 )

239 
mu8OnOff
 = 
ON
;

242 if–
Comp
.
I˚_OnOff
 =
ON
 )

244 
mu8OnOff
 = 
ON
;

249 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
FALSE
 )

251 
mu8OnOff
 = 
OFF
;

255 if–
Comp
.
Mode
 =
COMP_MODE_FORCED
 )

257 
mu8OnOff
 = 
Comp
.
F‹˚dOnOff
;

262 if–
mu8OnOff
 =
ON
 )

265 
	`Tu∫OnCompTy≥
();

268 
Comp
.
OffTime
 = 0;

269 if–
Comp
.
OnTime
 < 
MAX_TIME
 )

271 
Comp
.
OnTime
++;

275 
Comp
.
PrŸe˘OffTime
 = 
PROTECT_OFF_TIME
;

281 if–
	`IsTu∫OnComp
(Ë=
TRUE
 )

283 
Comp
.
PrŸe˘OffTime
 = 
PROTECT_OFF_TIME
;

287 
	`Tu∫OffCompTy≥
();

290 
Comp
.
OnTime
 = 0;

291 if–
Comp
.
OffTime
 < 
MAX_TIME
 )

293 
Comp
.
OffTime
++;

296 
	}
}

298 
	$Pro˚ssComp
()

300 
	`C⁄åﬁComp
();

301 #i‡(
CONFIG_BLDC_COMP_TYPE
 =
COMP_TYPE_BLDC
)

302 
	`C⁄åﬁCompBldc
();

304 
	`Upd©eCompTimî
();

305 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp.h

1 #i‚de‡
__COMP_H__


2 
	#__COMP_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comp_bldc.h
"

8 
	#COMP_TYPE_RELAY
 0

	)

9 
	#COMP_TYPE_BLDC
 1

	)

10 
	#CONFIG_BLDC_COMP_TYPE
 
COMP_TYPE_BLDC


	)

12 
	#MAX_COMP_RPS
 70U

	)

14 
	s_com¥ess‹_


17 
U8
 
	mMode
;

18 
U8
 
	mCﬁd_OnOff
;

19 
U8
 
	mI˚_OnOff
;

20 
U8
 
	mF‹˚dOnOff
;

22 
U16
 
	mPrŸe˘OffTime
;

24 
U32
 
	mOnTime
;

25 
U32
 
	mOffTime
;

26 } 
	tCom¥ess‹_T
;

28 
InôComp
();

30 
GëCompD©a
–
Com¥ess‹_T
 *
pD©a
 );

32 
	#COMP_MODE_NONE
 0

	)

33 
	#COMP_MODE_FORCED
 1

	)

34 
SëCompMode
(
U8
 
mu8Mode
);

35 
U8
 
GëCompMode
(U8 
mu8Mode
);

37 
SëCompPrŸe˘OffTime
(
U16
 
mu16VÆ
);

38 
U16
 
GëCompPrŸe˘OffTime
();

39 
U8
 
IsOvîCompPrŸe˘OnTime
();

40 
U8
 
IsOvîCompPrŸe˘Sec⁄dOnTime
();

43 
	#COMP_TYPE_COLD
 0

	)

44 
	#COMP_TYPE_ICE
 1

	)

45 
Tu∫OnCompRps
(
U8
 
mu8Ty≥
, 
RPS_T
 
mRps
);

46 
Tu∫OnComp
(
U8
 
mu8Ty≥
);

47 
Tu∫OffComp
(
U8
 
mu8Ty≥
);

48 
U8
 
GëCompOnOffTy≥
(U8 
mu8Ty≥
);

50 
Tu∫OnF‹˚dComp
();

51 
Tu∫OffF‹˚dComp
();

53 
U32
 
GëCompOnTime
();

54 
U32
 
GëCompOffTime
();

57 
U8
 
GëCompOnOff
();

59 
U8
 
IsExpúedCompPrŸe˘Time
();

60 
Pro˚ssComp
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp_bldc.c

1 
	~"comp_bldc.h
"

2 
	~"ªœy.h
"

3 
	~"timî.h
"

4 
	~"hŸ_w©î.h
"

6 
	~<°rög.h
>

10 
	#COMP_STABLE_TIME
 3U

11 
	#OFF_TIME_5SEC
 5U

12 
	#OFF_TIME_30SEC
 30U

13 

	)

14 
CompBldc_T
 
	gCompBldc
;

17 
	$InôCompBldc
()

19 
CompBldc
.
T¨gë
 = 0U;

20 
CompBldc
.
Cuºít
 = 0U;

21 
CompBldc
.
Max
 = 
MAX_RPS
;

22 
CompBldc
.
Mö
 = 
MIN_RPS
;

23 
CompBldc
.
Eº‹Code
 = 
ERR_BLDC_NONE
;

24 
CompBldc
.
La°edEº‹Code
 = 
ERR_BLDC_NONE
;

25 
CompBldc
.
Eº‹Comm
 = 
FALSE
;

26 
CompBldc
.
Te°Comm
 = 
FALSE
;

29 
CompBldc
.
PrŸe˘
 = 
FALSE
;

30 
CompBldc
.
OnSèbÀTime
 = 0U;

31 
CompBldc
.
OffMaxTime
 = 0U;

32 
	}
}

34 
	$GëCompBldcD©a
–
CompBldc_T
 *
pD©a
 )

36 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
CompBldc
, –
CompBldc_T
 ));

37 
	}
}

39 
	$SëCompBldcCommTe°
(
U8
 
mu8Te°
)

41 
CompBldc
.
Te°Comm
 = 
mu8Te°
;

42 
	}
}

44 
U8
 
	$GëCompBldcCommTe°
()

46  
CompBldc
.
Te°Comm
;

47 
	}
}

50 
	$SëCompBldcT¨gëRps
(
RPS_T
 
mRps
)

52 
CompBldc
.
T¨gë
 = 
mRps
;

53 
	}
}

55 
RPS_T
 
	$GëCompBldcT¨gëRps
()

57  
CompBldc
.
T¨gë
;

58 
	}
}

62 
	$SëCompBldcCuºítRps
(
RPS_T
 
mRps
)

64 
CompBldc
.
Cuºít
 = 
mRps
;

65 
	}
}

67 
RPS_T
 
	$GëCompBldcCuºítRps
()

69  
CompBldc
.
Cuºít
;

70 
	}
}

73 
	$SëCompBldcEº‹Code
(
BldcEº‹Id_T
 
mEº‹Id
)

75 if–
mEº‹Id
 >
ERR_BLDC_OUT_OF_RANGE
 )

77 
mEº‹Id
 = 
ERR_BLDC_OUT_OF_RANGE
;

79 if–
mEº‹Id
 !
ERR_BLDC_NONE
 )

81 if–
CompBldc
.
La°edEº‹Code
 !
mEº‹Id
 )

83 
CompBldc
.
La°edEº‹Code
 = 
mEº‹Id
;

86 
CompBldc
.
Eº‹Code
 = 
mEº‹Id
;

87 
	}
}

89 
BldcEº‹Id_T
 
	$GëCompBldcEº‹Code
()

91  
CompBldc
.
Eº‹Code
;

92 
	}
}

94 
	$SëCompBldcLa°edEº‹Code
(
BldcEº‹Id_T
 
mEº‹Id
)

96 
CompBldc
.
La°edEº‹Code
 = 
mEº‹Id
;

97 
	}
}

99 
BldcEº‹Id_T
 
	$GëCompBldcLa°edEº‹Code
()

101  
CompBldc
.
La°edEº‹Code
;

102 
	}
}

106 
	$SëCompBldcPrŸe˘
(
U8
 
mu8PrŸe˘
)

108 
CompBldc
.
PrŸe˘
 = 
mu8PrŸe˘
;

109 
	}
}

111 
U8
 
	$GëCompBldcPrŸe˘
()

113  
CompBldc
.
PrŸe˘
;

114 
	}
}

118 
	$SëCompBldcEº‹Comm
(
U8
 
mu8Eº‹
)

120 
CompBldc
.
Eº‹Comm
 = 
mu8Eº‹
;

121 
	}
}

123 
U8
 
	$GëCompBldcEº‹Comm
()

125  
CompBldc
.
Eº‹Comm
;

126 
	}
}

128 
U8
 
	$IsCompBldcPrŸe˘Mode
()

130 if–
CompBldc
.
Eº‹Code
 !
ERR_BLDC_NONE
 )

132  
TRUE
;

135 if–
CompBldc
.
Eº‹Comm
 =
TRUE
 )

137  
TRUE
;

140  
FALSE
;

141 
	}
}

144 
U8
 
	$IsTu∫OnCompBldc
()

146 if–
CompBldc
.
T¨gë
 > 0 )

149  
TRUE
;

152  
FALSE
;

153 
	}
}

158 
	mON_CHECK_HOT_HEATER
,

159 
	mON_INIT
,

160 
	mON_WAIT
,

161 
	mON_CONTROL_COMP_BLDC
,

162 
	mON_RUNNING
,

165 
U8
 
	$Tu∫On
(
U8
 
mu8Sãp
)

167  
mu8Sãp
 )

169 
ON_CHECK_HOT_HEATER
:

170 if–
	`IsExpúedHóãrOnTime
(Ë=
TRUE
 )

172 
mu8Sãp
++;

176 
ON_INIT
:

177 
	`Tu∫OnRñay
–
RELAY_COMP
 );

178 
CompBldc
.
OnSèbÀTime
 = 
COMP_STABLE_TIME
;

180 
mu8Sãp
++;

183 
ON_WAIT
:

184 if–
CompBldc
.
OnSèbÀTime
 != 0 )

186 
CompBldc
.
OnSèbÀTime
--;

190 
mu8Sãp
++;

195 
ON_CONTROL_COMP_BLDC
:

196 
	`SèπTimî
–
TIMER_ID_COMP
, 0 );

197 
	`SèπTimî
–
TIMER_ID_COMM_COMP_RX_ERR
, 
	`TIMER_SEC
–
ERROR_COMP_COMM_TIMEOUT
 ) );

199 
mu8Sãp
++;

202 
ON_RUNNING
:

210  
mu8Sãp
;

211 
	}
}

216 
U8
 
	$GëCompOffMaxTime
()

218 if–
CompBldc
.
PrŸe˘
 =
TRUE
 )

220  
OFF_TIME_5SEC
;

223  
OFF_TIME_30SEC
;

224 
	}
}

228 
	mOFF_INIT
,

229 
	mOFF_WAIT_CURRENT_RPS
,

230 
	mOFF_WAIT
,

231 
	mOFF_WAIT_BEFORE_OFF_RELAY
,

234 
U8
 
	$Tu∫Off
(
U8
 
mu8Sãp
)

236  
mu8Sãp
 )

238 
OFF_INIT
:

239 
CompBldc
.
OffMaxTime
 = 
	`GëCompOffMaxTime
();

240 
mu8Sãp
++;

243 
OFF_WAIT_CURRENT_RPS
:

244 if–
CompBldc
.
OffMaxTime
 != 0 )

246 
CompBldc
.
OffMaxTime
--;

250 
CompBldc
.
OnSèbÀTime
 = 
COMP_STABLE_TIME
;

251 
mu8Sãp
++;

255 if–
	`GëCompBldcCuºítRps
() == 0 )

257 
CompBldc
.
OnSèbÀTime
 = 
COMP_STABLE_TIME
;

258 
mu8Sãp
++;

262 
ON_WAIT
:

263 if–
CompBldc
.
OnSèbÀTime
 != 0 )

265 
CompBldc
.
OnSèbÀTime
--;

269 
mu8Sãp
++;

273 
OFF_WAIT_BEFORE_OFF_RELAY
:

274 
	`Tu∫OffRñay
–
RELAY_COMP
 );

276 
	`SëCompBldcCuºítRps
( 0 );

277 
	`SëCompBldcPrŸe˘
–
FALSE
 );

279 
	`St›Timî
–
TIMER_ID_COMP
 );

280 
	`St›Timî
–
TIMER_ID_COMM_COMP_RX_ERR
 );

287  
mu8Sãp
;

288 
	}
}

291 
	$C⁄åﬁCompBldc
()

293 
U8
 
mu8Sãp
 = 0U;

294 
RPS_T
 
¥evRps
 = 0U;

295 
RPS_T
 
èrgëRps
 = 0U;

298 
èrgëRps
 = 
	`GëCompBldcT¨gëRps
();

299 if–
èrgëRps
 !
¥evRps
 )

301 if–
¥evRps
 =0 && 
èrgëRps
 > 0 )

304 
mu8Sãp
 = 0;

306 if–
¥evRps
 > 0 && 
èrgëRps
 == 0 )

309 
mu8Sãp
 = 0;

311 
¥evRps
 = 
èrgëRps
;

314 if–
èrgëRps
 > 0 )

316 
mu8Sãp
 = 
	`Tu∫On
( mu8Step );

320 
mu8Sãp
 = 
	`Tu∫Off
( mu8Step );

322 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp_bldc.h

1 #i‚de‡
__COMP_BLDC_H__


2 
	#__COMP_BLDC_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#CONFIG_BLDC_COMP_LG
 0

	)

7 
	#CONFIG_BLDC_COMP_SAMSUNG
 1

	)

10 #i‡
CONFIG_BLDC_COMP_LG


13 
	mERR_BLDC_NONE
,

15 
	mERR_BLDC_SENSING
,

16 
	mERR_BLDC_LOW_VOLATE
,

17 
	mERR_BLDC_SENSORLESS
,

19 
	mERR_BLDC_COMP_CONNECT
,

20 
	mERR_BLDC_OVER_CURRENT
,

21 
	mERR_BLDC_IPM_FAULT
,

23 
	mERR_BLDC_OUT_OF_RANGE
,

25 
	mERR_BLDC_NUM
,

26 } 
	tBldcEº‹Id_T
;

29 #i‡
CONFIG_BLDC_COMP_SAMSUNG


32 
	mERR_BLDC_NONE
,

34 
	mERR_BLDC_STARTING_FAIL
,

35 
	mERR_BLDC_CURRENT_SENSING_ERROR
,

36 
	mERR_BLDC_OVER_CURRENT
,

38 
	mERR_BLDC_ABNORMAL_VOLTAGE
,

39 
	mERR_BLDC_OVERHEAT_CONTROLLER
,

40 
	mERR_BLDC_DISCONNECTION_COMM
,

42 
	mERR_BLDC_OUT_OF_RANGE
,

44 
	mERR_BLDC_NUM


45 } 
	tBldcEº‹Id_T
;

49 
	#MIN_RPS
 37

	)

50 
	#MAX_RPS
 50

	)

51 
	tRPS_T
;

54 
	s_comp_bldc_


56 
RPS_T
 
	mT¨gë
;

57 
RPS_T
 
	mCuºít
;

58 
RPS_T
 
	mMö
;

59 
RPS_T
 
	mMax
;

61 
BldcEº‹Id_T
 
	mEº‹Code
;

62 
BldcEº‹Id_T
 
	mLa°edEº‹Code
;

63 
U8
 
	mEº‹Comm
;

64 
U8
 
	mPrŸe˘
;

65 
U8
 
	mTe°Comm
;

67 
U8
 
	mOnSèbÀTime
;

68 
U8
 
	mOffMaxTime
;

69 } 
	tCompBldc_T
;

72 
InôCompBldc
();

73 
GëCompBldcD©a
–
CompBldc_T
 *
pD©a
 );

75 
SëCompBldcCommTe°
(
U8
 
mu8Te°
);

76 
U8
 
GëCompBldcCommTe°
();

78 
SëCompBldcT¨gëRps
(
RPS_T
 
mRps
);

79 
RPS_T
 
GëCompBldcT¨gëRps
();

81 
SëCompBldcCuºítRps
(
RPS_T
 
mRps
);

82 
RPS_T
 
GëCompBldcCuºítRps
();

84 
	#ERROR_COMP_COMM_TIMEOUT
 10

85 
	`SëCompBldcEº‹Code
(
BldcEº‹Id_T
 
mEº‹Id
);

	)

86 
BldcEº‹Id_T
 
GëCompBldcEº‹Code
();

88 
SëCompBldcLa°edEº‹Code
(
BldcEº‹Id_T
 
mEº‹Id
);

89 
BldcEº‹Id_T
 
GëCompBldcLa°edEº‹Code
();

91 
SëCompBldcEº‹Comm
(
U8
 
mu8Eº‹
);

92 
U8
 
GëCompBldcEº‹Comm
();

95 
SëCompBldcPrŸe˘
(
U8
 
mu8PrŸe˘
);

96 
U8
 
GëCompBldcPrŸe˘
();

98 
U8
 
IsCompBldcPrŸe˘Mode
();

100 
U8
 
IsTu∫OnCompBldc
();

102 
C⁄åﬁCompBldc
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\drain_pump.c

1 
	~"hÆ_pump.h
"

2 
	~"døö_pump.h
"

3 
	~"hÆ_adc.h
"

5 
	~<°rög.h
>

7 
	#RETRY_COUNT
 25

8 
	#DEFAULT_LOAD_TIME
 5

	)

9 
	#DEFAULT_DEAD_TIME
 5

	)

24 
	#PROTECT_DEAD_ADC
 40

	)

25 
	#NO_LOAD_ADC
 175

	)

27 
DøöPump_T
 
	gDøöPump
;

29 
	$InôDøöPump
()

31 
DøöPump
.
Cmd
 = 
OFF
;

32 
DøöPump
.
RëryCmd
 = 
OFF
;

33 
DøöPump
.
RëryCou¡
 = 0;

34 
DøöPump
.
OnOffTime
 = 0;

35 
DøöPump
.
Eº‹
 = 
FALSE
;

38 
DøöPump
.
LﬂdTime
 = 
DEFAULT_LOAD_TIME
;

39 
DøöPump
.
Lﬂd
 = 
FALSE
;

40 
	}
}

42 
	$GëDøöD©a
(
DøöPump_T
 *
pD©a
)

44 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
DøöPump
, –
DøöPump_T
 ) );

45 
	}
}

47 
U8
 
	$GëDøöPumpSètus
()

49  
DøöPump
.
Cmd
;

50 
	}
}

52 
U8
 
	$GëDøöPumpEº‹
()

54  
DøöPump
.
Eº‹
;

55 
	}
}

57 
	$Tu∫OnDøöPump
()

59 
DøöPump
.
Cmd
 = 
ON
;

60 
	}
}

62 
U8
 
	$IsTu∫OnDøöPump
()

64 if–
DøöPump
.
RëryCmd
 != 0 )

66  
TRUE
;

69  
FALSE
;

70 
	}
}

73 
	$Tu∫OffDøöPump
()

75 
DøöPump
.
Cmd
 = 
OFF
;

77 
DøöPump
.
RëryCmd
 = 0;

78 
DøöPump
.
RëryCou¡
 = 0;

79 
DøöPump
.
OnOffTime
 = 0;

80 
	}
}

82 
	$Tu∫OffDøöPumpEx
()

84 
	`Tu∫OffDøöPump
();

85 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

86 
	}
}

90 c⁄° 
U8
 
	gOnOffCmdLi°
[] =

110 c⁄° 
U16
 
	gOnOffTimeLi°
[] =

133 
U8
 
	$GëDøöPumpLﬂdSètus
()

135  
DøöPump
.
Lﬂd
;

136 
	}
}

138 
	$InôDøöPumpLﬂd
()

140 
DøöPump
.
Lﬂd
 = 
TRUE
;

141 
DøöPump
.
LﬂdTime
 = 
DEFAULT_LOAD_TIME
;

143 
DøöPump
.
Dód
 = 
TRUE
;

144 
DøöPump
.
DódTime
 = 
DEFAULT_DEAD_TIME
;

145 
	}
}

147 
	$CheckDøöPumpLﬂd
()

149 
U16
 
mu16Adc
;

151 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_PUMP_DRAIN_FB
 );

154 if–
mu16Adc
 < 
PROTECT_DEAD_ADC
 )

156 if–
DøöPump
.
DódTime
 != 0 )

158 
DøöPump
.
DódTime
--;

162 
DøöPump
.
Dód
 = 
TRUE
;

167 
DøöPump
.
Dód
 = 
FALSE
;

168 
DøöPump
.
DódTime
 = 
DEFAULT_DEAD_TIME
;

171 if–
mu16Adc
 < 
NO_LOAD_ADC
 )

173 if–
DøöPump
.
LﬂdTime
 != 0 )

175 
DøöPump
.
LﬂdTime
--;

178 if–
DøöPump
.
LﬂdTime
 == 0 )

180 
DøöPump
.
Lﬂd
 = 
FALSE
;

187 
DøöPump
.
Lﬂd
 = 
TRUE
;

188 
DøöPump
.
LﬂdTime
 = 
DEFAULT_LOAD_TIME
;

189 
	}
}

194 
	$C⁄åﬁDøöPump
()

196 if–
DøöPump
.
Cmd
 =
OFF


197 || 
DøöPump
.
Eº‹
 =
TRUE
 )

199 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

200 
	`InôDøöPumpLﬂd
();

205 if–
DøöPump
.
OnOffTime
 == 0 )

207 
DøöPump
.
RëryCmd
 = 
OnOffCmdLi°
[ DøöPump.
RëryCou¡
 ];

208 
DøöPump
.
OnOffTime
 = 
OnOffTimeLi°
[ DøöPump.
RëryCou¡
 ];

210 
DøöPump
.
RëryCou¡
++;

211 if–
DøöPump
.
RëryCou¡
 > 
RETRY_COUNT
 )

213 
DøöPump
.
Eº‹
 = 
TRUE
;

220 if–
DøöPump
.
OnOffTime
 != 0 )

222 
DøöPump
.
OnOffTime
--;

225 if–
DøöPump
.
RëryCmd
 != 0 )

227 if–
DøöPump
.
Dód
 =
TRUE
 )

230 
DøöPump
.
Dód
 = 
FALSE
;

231 
DøöPump
.
DódTime
 = 
DEFAULT_DEAD_TIME
;

232 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

236 
	`HAL_Tu∫OnPump
–
HAL_PUMP_DRAIN
, (
F32
)
DøöPump
.
RëryCmd
 );

239 
	`CheckDøöPumpLﬂd
();

243 
	`HAL_Tu∫OffPump
–
HAL_PUMP_DRAIN
 );

245 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\drain_pump.h

1 #i‚de‡
__DRAIN_PUMP_H__


2 
	#__DRAIN_PUMP_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	s_døö_pump_


9 
U8
 
	mCmd
;

11 
U8
 
	mRëryCmd
;

12 
U8
 
	mRëryCou¡
;

13 
U16
 
	mOnOffTime
;

14 
U8
 
	mEº‹
;

16 
U16
 
	mLﬂdTime
;

17 
U8
 
	mLﬂd
;

19 
U16
 
	mDódTime
;

20 
U8
 
	mDód
;

21 } 
	tDøöPump_T
;

23 
InôDøöPump
();

25 
U8
 
GëDøöPumpSètus
();

27 
U8
 
GëDøöPumpEº‹
();

30 
Tu∫OnDøöPump
();

32 
U8
 
IsTu∫OnDøöPump
();

34 
Tu∫OffDøöPump
();

35 
Tu∫OffDøöPumpEx
();

37 
U8
 
GëDøöPumpLﬂdSètus
();

39 
C⁄åﬁDøöPump
();

41 
GëDøöD©a
(
DøöPump_T
 *
pD©a
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\fan_motor.c

1 
	~"Án_mŸ‹.h
"

2 
	~"hÆ_Án_mŸ‹.h
"

3 
	~"comp.h
"

5 
	#FAN_OFF_TIME
 300

6 

	)

7 
	s_dc_Án_


9 
U16
 
	mOnTime
;

10 
U8
 
	mOnOff
[
FAN_TYPE_NUM
];

11 } 
	tF™_T
;

13 
F™_T
 
	gF™
;

16 
	$InôF™MŸ‹
()

18 
F™
.
OnOff
[
FAN_TYPE_COLD
] = 
OFF
;

19 
F™
.
OnOff
[
FAN_TYPE_ICE
] = 
OFF
;

20 
F™
.
OnTime
 = 0;

22 
	`HAL_Tu∫OffF™MŸ‹
();

23 
	}
}

25 
	$Tu∫OnF™
(
U8
 
mTy≥
)

27 
F™
.
OnOff
[
mTy≥
] = 
ON
;

28 
	}
}

30 
	$Tu∫OffF™
(
U8
 
mTy≥
)

32 
F™
.
OnOff
[
mTy≥
] = 
OFF
;

33 
	}
}

35 
	$Tu∫OnOffF™
(
U8
 
mTy≥
, U8 
mu8OnOff
)

37 
F™
.
OnOff
[
mTy≥
] = 
mu8OnOff
;

38 
	}
}

41 
	$C⁄åﬁF™MŸ‹
()

45 if–
F™
.
OnOff
[ 
FAN_TYPE_COLD
 ] =
OFF


46 && 
F™
.
OnOff
[ 
FAN_TYPE_ICE
 ] =
OFF


47 && 
	`GëCompOffTime
() < 3

50 
F™
.
OnTime
 = 
FAN_OFF_TIME
;

54 if–
F™
.
OnOff
[ 
FAN_TYPE_COLD
 ] =
ON


55 || 
F™
.
OnOff
[ 
FAN_TYPE_ICE
 ] =
ON


56 || (
F™
.
OnTime
 !0 && 
	`IsTu∫OnCompBldc
(Ë=
FALSE
 )

59 
	`HAL_Tu∫OnF™MŸ‹
();

63 
	`HAL_Tu∫OffF™MŸ‹
();

68 if–
F™
.
OnTime
 != 0 )

70 
F™
.
OnTime
--;

72 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\fan_motor.h

1 #i‚de‡
__FAN_MOTOR_H__


2 
	#__FAN_MOTOR_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#FAN_TYPE_ICE
 0

	)

8 
	#FAN_TYPE_COLD
 1

	)

9 
	#FAN_TYPE_NUM
 2

	)

11 
InôF™MŸ‹
();

13 
Tu∫OnF™
(
U8
 
mTy≥
);

15 
Tu∫OffF™
(
U8
 
mTy≥
);

17 
Tu∫OnOffF™
(
U8
 
mTy≥
, U8 
mu8OnOff
);

19 
C⁄åﬁF™MŸ‹
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_meter.c

1 
	~"hw.h
"

2 
	~"Êow_mëî.h
"

3 
	~"w©î_out.h
"

4 
	~"timî.h
"

5 
	~<°rög.h
>

7 #¥agm®
öãºu±
 
r_ötc11_öãºu±
(
ve˘
=
INTP11
)

12 
	#OUTAGE_WATER_HZ
 5

	)

21 
	#INTS_BYTE_FLOW_METER
(Ë
_öts_Êow_byã


	)

22 
	#MASK_FLOW_METER
 
PMK11


	)

23 
	#DISABLE_INT_MASK_INTP
(Ëdÿ{ 
MASK_FLOW_METER
 = 1; }0)

	)

24 
	#ENABLE_INT_MASK_INTP
(Ëdÿ{ 
MASK_FLOW_METER
 = 0; }0)

	)

26 
	#ENTER_CRITICAL_SECTION_INTP
() \

28 
_öts_Êow_byã
 = 
MASK_FLOW_METER
; \

29 
	`DISABLE_INT_MASK_INTP
(); \

30 }0)

	)

32 
	#EXIT_CRITICAL_SECTION_INTP
() \

34 
MASK_FLOW_METER
 = 
_öts_Êow_byã
; \

35 } 0)

	)

38 
SèπFlowMëî
();

39 
St›FlowMëî
();

42 
FlowMëî_T
 
	gFlow
;

44 
	$InôFlowMëî
()

46 
U8
 
i
;

48 
	`MEMSET
–(
__FAR
 *)&
Flow
, 0, –
FlowMëî_T
 ));

50  
i
 = 0; i < 
NUM_FLOW_ID
; i++ )

52 
Flow
.
FlowMëîFun
[ 
i
 ] = 
NULL
;

55 
Flow
.
CheckOuège
 = 
FALSE
;

56 
Flow
.
Ouège
[ 
TYPE_WATER
 ] = 
FLOW_SUPPLY
;

57 
Flow
.
Ouège
[ 
TYPE_HOT_WATER
 ] = 
FLOW_SUPPLY
;

58 
Flow
.
C⁄fOuègeTime
 = 
OUTAGE_CHECK_TIME_10SEC
;

59 
Flow
.
CheckOuègeTime
 = 
OUTAGE_CHECK_TIME_10SEC
;

61 
	`SèπFlowMëî
();

62 
	}
}

64 
	$GëFlowMëîD©a
–
FlowMëî_T
 *
pD©a
 )

66 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° __Á∏*)&
Flow
, –
FlowMëî_T
 ));

67 
	}
}

70 
	$SèπCheckOuège
(
U16
 
mu16WaôTime
, U16 
mu16CheckTime
, 
OuègeTy≥_T
 
mTy≥
 )

72 
Flow
.
CheckOuège
 = 
TRUE
;

74 
Flow
.
WaôTime
 = 
mu16WaôTime
;

75 
Flow
.
C⁄fOuègeTime
 = 
mu16CheckTime
;

76 
Flow
.
Ty≥
 = 
mTy≥
;

78 
Flow
.
CheckOuègeTime
 = 
mu16CheckTime
;

79 
	}
}

82 
	$St›CheckOuège
()

84 
Flow
.
CheckOuège
 = 
FALSE
;

85 
	}
}

89 
OuègeSètus_T
 
	$GëOuègeSètus
(
OuègeTy≥_T
 
mTy≥
)

91  
Flow
.
Ouège
[
mTy≥
];

92 
	}
}

94 
	$SëOuègeSètus
(
OuègeTy≥_T
 
mTy≥
, 
OuègeSètus_T
 
mu8Sètus
 )

96 
Flow
.
Ouège
[
mTy≥
] = 
mu8Sètus
;

97 
	}
}

101 
OuègeTy≥_T
 
	$GëOuègeTy≥
()

103  
Flow
.
Ty≥
;

104 
	}
}

106 
	$SëOuègeTy≥
(
OuègeTy≥_T
 
mu8Ty≥
 )

108 
Flow
.
Ty≥
 = 
mu8Ty≥
;

109 
	}
}

114 
U16
 
	$GëFlowMëîHz
()

116  
Flow
.
Hz
;

117 
	}
}

120 
F32
 
	$GëFlowMëîLPM
()

122  
Flow
.
LPM
;

123 
	}
}

126 
U16
 
	$GëFlowMëîCc
()

128 
U16
 
mu16cc
;

130 
mu16cc
 = (
U16
)(
Flow
.
LPM
 * 1000.0f);

131  
mu16cc
;

132 
	}
}

134 
F32
 
	$GëFlowMëîLa°edLPM
()

136  
Flow
.
La°edLPM
;

137 
	}
}

139 
Regi°îFlowMëîId
(
FlowId_T
 
id
, (*
pCÆl
)() )

141 
	`INTS_BYTE_BASE_TIMER
();

142 
	`INTS_BYTE_FLOW_METER
();

144 
	`ENTER_CRITICAL_SECTION_TIMER
();

146 
	`ENTER_CRITICAL_SECTION_INTP
();

147 
Flow
.
FlowMëîFun
[ 
id
 ] = 
pCÆl
;

148 
	`EXIT_CRITICAL_SECTION_INTP
();

150 
	`EXIT_CRITICAL_SECTION_TIMER
();

151 
	}
}

154 
F32
 
	$C⁄vHz2LPM
–
U16
 
mu16Hz
 )

156 
F32
 
mf32LPM
 = 0.0f;

159 
mf32LPM
 = ((
F32
)
mu16Hz
 * 60.0fË/ ((F32)
AMOUNT_10
 * 100.0f );

161  
mf32LPM
;

162 
	}
}

165 
U16
 
	$C⁄vLPM2Hz
–
F32
 
mf32LPM
 )

167 
U16
 
mu16Hz
;

170 
mu16Hz
 = (
U16
)(((
mf32LPM
 * 100.0‡Ë/ 60.0fË* (
F32
)
AMOUNT_10
);

172  
mu16Hz
;

173 
	}
}

177 #i‡
CONFIG_TEST_FLOW_METER


178 
U16
 
	gdbg_Êow_hz
 = 0;

180 
	$CÆcFlowMëîHz
()

182 
U8
 
i
;

183 
U16
 
mu16Sum
;

184 
U16
 
mu16TickHz
;

185 
	`INTS_BYTE_FLOW_METER
();

186 
	`INTS_BYTE_BASE_TIMER
();

189 
	`ENTER_CRITICAL_SECTION_TIMER
();

191 
	`ENTER_CRITICAL_SECTION_INTP
();

192 
mu16TickHz
 = 
Flow
.
TickHz
;

193 
Flow
.
TickHz
 = 0;

194 
	`EXIT_CRITICAL_SECTION_INTP
();

196 
	`EXIT_CRITICAL_SECTION_TIMER
();

198 
Flow
.
TickHzLi°
[ Flow.
IndexLi°
 ] = 
mu16TickHz
;

199 
Flow
.
IndexLi°
++;

200 if–
Flow
.
IndexLi°
 >
TICK_HZ_NUM
 )

202 
Flow
.
IndexLi°
 = 0;

205 
mu16Sum
 = 0;

206  
i
 = 0; i < 
TICK_HZ_NUM
 ; i++ )

208 
mu16Sum
 +
Flow
.
TickHzLi°
[ 
i
 ];

212 
Flow
.
Hz
 = 
mu16Sum
;

213 #i‡
CONFIG_TEST_FLOW_METER


214 
Flow
.
Hz
 +
dbg_Êow_hz
;

216 
Flow
.
LPM
 = 
	`C⁄vHz2LPM
–Flow.
Hz
 );

218 if–
Flow
.
LPM
 != 0 )

220 
Flow
.
La°edLPM
 = Flow.
LPM
;

222 
	}
}

225 
	$SèπFlowMëî
()

228 
	`R_C⁄fig_INTC_INTP11_Sèπ
();

229 
	}
}

231 
	$St›FlowMëî
()

234 
	`R_C⁄fig_INTC_INTP11_St›
();

235 
	}
}

240 
	$FûãrFlowMëîNoi£
()

242 if–
Flow
.
Sync
 =
TRUE
 )

244 
Flow
.
Sync
 = 
FALSE
;

246 
	`SèπFlowMëî
();

248 
	}
}

252 
	$CheckFlowMëîI§
()

254 
U8
 
i
;

256 
Flow
.
Sync
 = 
TRUE
;

258 
Flow
.
TickHz
++;

260  
i
 = 0; i < 
NUM_FLOW_ID
; i++ )

262 if–
Flow
.
FlowMëîFun
[
i
] !
NULL
 )

264 
Flow
.
FlowMëîFun
[
i
]();

268 
	`St›FlowMëî
();

269 
	}
}

272 
__√¨
 
	$r_ötc11_öãºu±
()

274 
	`CheckFlowMëîI§
();

275 
	}
}

279 
	$CheckOuègeSètus
()

281 if–
Flow
.
CheckOuège
 =
FALSE
 )

284 
Flow
.
CheckOuègeTime
 = Flow.
C⁄fOuègeTime
;

290 if–
Flow
.
WaôTime
 != 0 )

292 
Flow
.
WaôTime
--;

298 if–
Flow
.
Hz
 <
OUTAGE_WATER_HZ
 )

300 if–
Flow
.
CheckOuègeTime
 != 0 )

302 
Flow
.
CheckOuègeTime
--;

307 
Flow
.
Ouège
[ Flow.
Ty≥
 ] = 
FLOW_OUTAGE
;

313 
Flow
.
CheckOuègeTime
 = Flow.
C⁄fOuègeTime
;

315 
	}
}

319 
	$Pro˚ssFlowMëî
()

321 
	`CÆcFlowMëîHz
();

323 
	`CheckOuègeSètus
();

324 
	}
}

327 #i‡
CONFIG_TEST_FLOW_METER


328 
	~"døö_w©î.h
"

329 
	~"vÆve.h
"

330 
U8
 
	gdbg_the_Êow_ã°
 = 0;

332 
	$Te°AutoCou¡ögFlowMëî
()

334 #i‡
CONFIG_TEST_FLOW_METER


335 if–
dbg_the_Êow_ã°
 != 0 )

340 if–(
	`GëW©îOut
(Ë=
TRUE
 &&

342 
	`IsO≥nVÆve
–
VALVE_HOT_IN
 ) =
TRUE


343 || 
	`IsO≥nVÆve
–
VALVE_ROOM_OUT
 ) =
TRUE


344 || 
	`IsO≥nVÆve
–
VALVE_COLD_IN
 ) =
TRUE


345 || 
	`IsO≥nVÆve
–
VALVE_COLD_FLUSH
 ) =
TRUE


349 
	`IsO≥nVÆve
–
VALVE_ICE_TRAY_IN
 ) =
TRUE


350 || 
	`IsSèπDøöW©î
(Ë=
TRUE


355 
	`CheckFlowMëîI§
();

360 
	}
}

362 
	$R_C⁄fig_INTC_Cª©e_U£rInô
()

364 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_meter.h

1 #i‚de‡
__FLOW_METER_H__


2 
	#__FLOW_METER_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	#AMOUNT_5
 17UL

	)

9 
	#AMOUNT_10
 35UL

	)

10 
	#AMOUNT_20
 70UL

	)

11 
	#AMOUNT_15
 52UL

	)

12 
	#AMOUNT_30
 105UL

	)

13 
	#AMOUNT_50
 175UL

	)

14 
	#AMOUNT_60
 210UL

	)

15 
	#AMOUNT_120
 420UL

	)

16 
	#AMOUNT_130
 455UL

	)

17 
	#AMOUNT_190
 665UL

	)

18 
	#AMOUNT_210
 735UL

	)

19 
	#AMOUNT_250
 875UL

	)

20 
	#AMOUNT_500
 1750UL

	)

21 
	#AMOUNT_750
 2625UL

	)

22 
	#AMOUNT_1000
 3500UL

	)

23 
	#AMOUNT_1500
 5250UL

	)

24 
	#AMOUNT_2000
 7000UL

	)

25 
	#AMOUNT_3000
 10500UL

	)

26 
	#AMOUNT_4000
 14000UL

	)

27 
	#AMOUNT_5000
 17500UL

	)

28 
	#AMOUNT_6000
 21000UL

	)

29 
	#AMOUNT_7000
 24500UL

	)

30 
	#AMOUNT_8000
 28000UL

	)

31 
	#AMOUNT_9000
 31500UL

	)

32 
	#AMOUNT_10000
 35000UL

33 
	#AMOUNT_11000
 38500UL

34 
	#AMOUNT_12000
 42000UL

35 
	#AMOUNT_20000
 70000UL

36 
	#AMOUNT_30000
 105000UL

37 
	#AMOUNT_60000
 210000UL

38 

	)

42 
	mFLOW_SUPPLY
,

43 
	mFLOW_OUTAGE


44 } 
	tOuègeSètus_T
;

45 
	#OUTAGE_HOT_OUT_DELAY_TIME
 1U

46 
	#OUTAGE_DELAY_TIME
 1U

47 
	#OUTAGE_FLUSHING_DELAY_TIME
 1U

48 

	)

52 
	mTYPE_WATER
,

53 
	mTYPE_HOT_WATER
,

54 
	mTYPE_ICE_TRAY
,

55 
	mTYPE_NUM


56 } 
	tOuègeTy≥_T
;

61 
	mFLOW_ID_WATER
,

62 
	mFLOW_ID_ICE_TRAY
,

63 
	mFLOW_ID_DRAIN
,

64 
	mNUM_FLOW_ID


65 }
	tFlowId_T
;

68 
	#TICK_HZ_NUM
 10

	)

69 
	s_Êow_mëî_


72 
U8
 
	mSync
;

73 
U8
 
	mIndexLi°
;

74 
U16
 
	mTickHzLi°
[ 
TICK_HZ_NUM
 ];

75 
U16
 
	mTickHz
;

77 
U16
 
	mHz
;

78 
F32
 
	mLPM
;

79 
F32
 
	mLa°edLPM
;

82 
U8
 
	mCheckOuège
;

83 
OuègeSètus_T
 
	mOuège
[ 
TYPE_NUM
 ];

84 
OuègeTy≥_T
 
	mTy≥
;

85 
U16
 
	mWaôTime
;

87 
U16
 
	mC⁄fOuègeTime
;

88 
U16
 
	mCheckOuègeTime
;

91 (*
	mFlowMëîFun
[
NUM_FLOW_ID
])();

92 } 
	tFlowMëî_T
;

95 
InôFlowMëî
();

97 
GëFlowMëîD©a
–
FlowMëî_T
 *
pD©a
 );

102 
	#OUTAGE_CHECK_TIME_1SEC
 10UL

103 
	#OUTAGE_CHECK_TIME_2SEC
 20UL

104 
	#OUTAGE_CHECK_TIME_3SEC
 30UL

105 
	#OUTAGE_CHECK_TIME_10SEC
 100UL

106 
	#OUTAGE_CHECK_TIME_60SEC
 600UL

107 
	#OUTAGE_CHECK_TIME_FLUSHING
 600UL

108 
	`SèπCheckOuège
(
U16
 
mu16WaôTime
, U16 
mu16CheckTime
, 
OuègeTy≥_T
 
mTy≥
 );

	)

110 
SèπCheckOuège
(
U16
 
mu16WaôTime
, 
OuègeTy≥_T
 
mTy≥
 );

112 
SëC⁄figOuègeTime
(
U16
 
mu16CheckTime
);

115 
St›CheckOuège
();

118 
OuègeSètus_T
 
GëOuègeSètus
(
OuègeTy≥_T
 
mTy≥
);

120 
SëOuègeSètus
(
OuègeTy≥_T
 
mTy≥
, 
OuègeSètus_T
 
mu8Sètus
 );

123 
OuègeTy≥_T
 
GëOuègeTy≥
();

125 
SëOuègeTy≥
(
OuègeTy≥_T
 
mu8Ty≥
 );

129 
U16
 
GëFlowMëîHz
();

132 
F32
 
GëFlowMëîLPM
();

134 
U16
 
GëFlowMëîCc
();

137 
F32
 
GëFlowMëîLa°edLPM
();

140 
Regi°îFlowMëîId
(
FlowId_T
 
id
, (*
pCÆl
)() );

142 
F32
 
	`C⁄vHz2LPM
–
U16
 
mu16Hz
 );

144 
U16
 
	`C⁄vLPM2Hz
–
F32
 
mf32LPM
 );

149 
	`CheckFlowMëîI§
();

152 
	`FûãrFlowMëîNoi£
();

154 
	`Te°AutoCou¡ögFlowMëî
();

156 
	`Pro˚ssFlowMëî
();

158 
	`R_C⁄fig_INTC_Cª©e_U£rInô
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_valve.c

1 
	~"Êow_vÆve.h
"

6 
	#CLOSE_TYPE
 0

	)

7 
	#OPEN_TYPE
 1

	)

8 
	#FLOW_INIT_TYPE
 
OPEN_TYPE


9 

	)

11 #i‡(
FLOW_INIT_TYPE
 =
CLOSE_TYPE
)

15 
	mINIT_MOVE_ZERO
,

16 
	mINIT_WAIT_ZERO
,

18 
	mINIT_MOVE_FULL_OPEN
,

19 
	mINIT_WAIT_FULL_OPEN
,

21 
	mINIT_DONE


27 
	mINIT_MOVE_FULL_OPEN
,

28 
	mINIT_WAIT_FULL_OPEN
,

30 
	mINIT_MOVE_TARGET
,

31 
	mINIT_WAIT_TARGET
,

33 
	mINIT_DONE


40 
	mOPEN_CHECK_POSITION
,

42 
	mOPEN_MOVE
,

43 
	mOPEN_WAIT
,

45 
	mOPEN_DONE


51 
	mTARGET_MOVE
,

52 
	mTARGET_WAIT
,

54 
	mTARGET_DONE


60 
	mOFFSET_MOVE_TARGET
,

61 
	mOFFSET_WAIT_TARGET
,

63 
	mOFFSET_DONE


76 
	#FLOW_VALVE_ID
 
SM_ID_2


	)

77 
	#FLOW_VALVE_SPEED
 
SM_SPEED_0


78 

	)

80 
	#FLOW_VALVE_OPEN_STEP_VAL
 (
MAX_FLOW_VALVE_TARGET
)

	)

81 
	#FLOW_VALVE_CLOSE_STEP_VAL
 (-1800)

	)

85 
	#FLOW_VALVE_MODE_NONE
 0x00

	)

86 
	#FLOW_VALVE_MODE_INIT
 0x01

87 
	#FLOW_VALVE_MODE_OPEN
 0x02

88 
	#FLOW_VALVE_MODE_TARGET
 0x04

89 
	#FLOW_VALVE_MODE_OFFSET
 0x08

90 
	#FLOW_VALVE_MODE_TEST
 0x10

	)

93 
FlowVÆve_T
 
	gFlowVÆve
;

96 
SëMode
(
U8
 
mu8Mode
 );

97 
CÀ¨Mode
(
U8
 
mu8Mode
 );

99 
	$InôFlowVÆve
()

101 
FlowVÆve
.
Sètus
 = 
FLOW_VALVE_STOP
;

103 
FlowVÆve
.
Mode
 = 
FLOW_VALVE_MODE_INIT
;

104 
FlowVÆve
.
InôSãp
 = 0;

105 
FlowVÆve
.
O≥nSãp
 = 0;

106 
FlowVÆve
.
T¨gëSãp
 = 0;

107 
FlowVÆve
.
Off£tSãp
 = 0;

108 
FlowVÆve
.
Te°Sãp
 = 0;

110 
FlowVÆve
.
Off£t
 = 0;

111 
FlowVÆve
.
T¨gë
 = 0;

113 
	`HAL_InôSãpVÆ
–
FLOW_VALVE_ID
 );

115 #i‡(
FLOW_INIT_TYPE
 =
CLOSE_TYPE
)

116 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 1800 );

117 
	`HAL_SëCuºítSãp
–
FLOW_VALVE_ID
, 1800 );

119 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 0 );

120 
	`HAL_SëCuºítSãp
–
FLOW_VALVE_ID
, 0 );

122 
	`HAL_SëSãpS≥ed
–
FLOW_VALVE_ID
, 
FLOW_VALVE_SPEED
 );

123 
	}
}

125 
	$GëFlowVÆveD©a
(
FlowVÆve_T
 *
pD©a
)

127 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° __Á∏*)&
FlowVÆve
, –
FlowVÆve_T
 ));

128 
	}
}

130 
U8
 
	$GëFlowVÆveSètus
()

132  
FlowVÆve
.
Sètus
;

133 
	}
}

136 
	$FlowVÆveInô
()

138 
	`SëMode
–
FLOW_VALVE_MODE_INIT
 );

139 
	}
}

142 
	$FlowVÆveFuŒO≥n
()

144 
	`SëMode
–
FLOW_VALVE_MODE_OPEN
 );

145 
	}
}

148 
	$FlowVÆveT¨gë
(
I16
 
èrgë
)

150 
FlowVÆve
.
T¨gë
 = (
sm_°ï_t
)
èrgë
;

151 
	`SëMode
–
FLOW_VALVE_MODE_TARGET
 );

152 
	}
}

154 
I16
 
	$GëFlowVÆveT¨gë
()

156  
FlowVÆve
.
T¨gë
;

157 
	}
}

160 
	$FlowVÆveOff£t
(
I16
 
off£t
)

162 
FlowVÆve
.
Off£t
 = (
sm_°ï_t
)
off£t
;

163 
	`SëMode
–
FLOW_VALVE_MODE_OFFSET
 );

164 
	}
}

167 
	$SëMode
(
U8
 
mu8Mode
 )

169 
FlowVÆve
.
Mode
 |
mu8Mode
;

170 if–
mu8Mode
 =
FLOW_VALVE_MODE_INIT
 )

172 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_OFFSET
 );

173 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_OPEN
 );

174 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_TARGET
 );

176 if–
mu8Mode
 =
FLOW_VALVE_MODE_OPEN
 )

178 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_TARGET
 );

179 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_OFFSET
 );

181 if–
mu8Mode
 =
FLOW_VALVE_MODE_TEST
 )

183 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_INIT
 );

184 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_OPEN
 );

185 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_TARGET
 );

186 
	`CÀ¨Mode
–
FLOW_VALVE_MODE_OFFSET
 );

188 
	}
}

190 
	$CÀ¨Mode
(
U8
 
mu8Mode
 )

192 
FlowVÆve
.
Mode
 &~
mu8Mode
;

194 if–
mu8Mode
 =
FLOW_VALVE_MODE_INIT
 )

196 
FlowVÆve
.
InôSãp
 = 0;

198 if–
mu8Mode
 =
FLOW_VALVE_MODE_OPEN
 )

200 
FlowVÆve
.
O≥nSãp
 = 0;

202 if–
mu8Mode
 =
FLOW_VALVE_MODE_OFFSET
 )

204 
FlowVÆve
.
Off£tSãp
 = 0;

206 if–
mu8Mode
 =
FLOW_VALVE_MODE_TARGET
 )

208 
FlowVÆve
.
T¨gëSãp
 = 0;

210 if–
mu8Mode
 =
FLOW_VALVE_MODE_TEST
 )

212 
FlowVÆve
.
Te°Sãp
 = 0;

214 
	}
}

216 
	$SëFlowVÆveSètus
(
U8
 
mu8Sètus
)

218 
FlowVÆve
.
Sètus
 = 
mu8Sètus
;

219 
	}
}

222 
U8
 
DoInô
();

223 
U8
 
DoO≥n
();

224 
U8
 
DoT¨gë
();

225 
U8
 
DoOff£t
();

229 
	$U8
 (*
	tpVÆve_T
)();

230 
	s_Êow_vÆve_li°_


232 
U8
 
mId
;

233 
pVÆve_T
 
pVÆve
;

234 } 
	tFlowVÆveEvít_T
;

236 c⁄° 
FlowVÆveEvít_T
 
FlowVÆveEvítLi°
[] =

238 { 
FLOW_VALVE_MODE_INIT
, 
DoInô
 },

239 { 
FLOW_VALVE_MODE_OPEN
, 
DoO≥n
 },

240 { 
FLOW_VALVE_MODE_TARGET
, 
DoT¨gë
 },

241 { 
FLOW_VALVE_MODE_OFFSET
, 
DoOff£t
 }

242 
	}
};

243 
	#SZ_FLOW_VALVE_LIST
 ((
FlowVÆveEvítLi°
)/(
FlowVÆveEvít_T
))

	)

245 
	$C⁄åﬁFlowVÆve
()

247 
U8
 
i
;

248 
U8
 
mu8Rë
;

249 
U8
 
mId
;

250 
pVÆve_T
 
pFun
;

253  
i
 = 0; i < 
SZ_FLOW_VALVE_LIST
 ; i++ )

255 
mId
 = 
FlowVÆveEvítLi°
[ 
i
 ].mId;

256 
pFun
 = 
FlowVÆveEvítLi°
[ 
i
 ].
pVÆve
;

257 if–(
FlowVÆve
.
Mode
 & 
mId
 ) == mId )

259 if–
pFun
 !
NULL
 )

261 
mu8Rë
 = 
	`pFun
();

262 if–
mu8Rë
 =
TRUE
 )

264 
	`CÀ¨Mode
–
mId
 );

265 
	`SëFlowVÆveSètus
–
FLOW_VALVE_STOP
 );

269 
	`SëFlowVÆveSètus
–
FLOW_VALVE_MOVING
 );

277 
	}
}

280 
	$CheckMöMax
()

283 if–
FlowVÆve
.
T¨gë
 <
MIN_FLOW_VALVE_TARGET
 )

285 
FlowVÆve
.
T¨gë
 = 
MIN_FLOW_VALVE_TARGET
;

287 if–
FlowVÆve
.
T¨gë
 >
MAX_FLOW_VALVE_TARGET
 )

289 
FlowVÆve
.
T¨gë
 = 
MAX_FLOW_VALVE_TARGET
;

291 
	}
}

296 #i‡(
FLOW_INIT_TYPE
 =
CLOSE_TYPE
)

297 
U8
 
	$DoInô
()

299  
FlowVÆve
.
InôSãp
 )

301 
INIT_MOVE_ZERO
:

302 
	`HAL_SëHﬁdSãp
–
FLOW_VALVE_ID
, 0 );

303 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, -20 );

304 
FlowVÆve
.
InôSãp
++;

307 
INIT_WAIT_ZERO
:

308 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

310 
FlowVÆve
.
InôSãp
++;

313 
	`HAL_InôSãpVÆ
–
FLOW_VALVE_ID
 );

314 
FlowVÆve
.
T¨gë
 = 0;

318 
INIT_MOVE_FULL_OPEN
:

319 
	`HAL_SëHﬁdSãp
–
FLOW_VALVE_ID
, 0 );

320 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 
FLOW_VALVE_OPEN_STEP_VAL
 );

321 
FlowVÆve
.
InôSãp
++;

324 
INIT_WAIT_FULL_OPEN
:

325 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

327 
FlowVÆve
.
T¨gë
 = 
FLOW_VALVE_OPEN_STEP_VAL
;

328 
FlowVÆve
.
InôSãp
++;

332 
INIT_DONE
 :

333  
TRUE
;

336 
FlowVÆve
.
InôSãp
 = 
INIT_MOVE_ZERO
;

340  
FALSE
;

341 
	}
}

343 
U8
 
	$DoInô
()

345  
FlowVÆve
.
InôSãp
 )

347 
INIT_MOVE_FULL_OPEN
:

348 
	`HAL_InôSãpVÆ
–
FLOW_VALVE_ID
 );

349 
	`HAL_SëHﬁdSãp
–
FLOW_VALVE_ID
, 0 );

350 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 2000 );

351 
FlowVÆve
.
InôSãp
++;

354 
INIT_WAIT_FULL_OPEN
:

355 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

357 
FlowVÆve
.
InôSãp
++;

358 
FlowVÆve
.
T¨gë
 = 2000;

362 
INIT_MOVE_TARGET
:

363 
	`HAL_SëHﬁdSãp
–
FLOW_VALVE_ID
, 0 );

364 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 
FLOW_VALVE_OPEN_STEP_VAL
 );

365 
FlowVÆve
.
InôSãp
++;

368 
INIT_WAIT_TARGET
:

369 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

371 
FlowVÆve
.
T¨gë
 = 
FLOW_VALVE_OPEN_STEP_VAL
;

372 
FlowVÆve
.
InôSãp
++;

376 
INIT_DONE
 :

377  
TRUE
;

380 
FlowVÆve
.
InôSãp
 = 
INIT_MOVE_FULL_OPEN
;

384  
FALSE
;

385 
	}
}

390 
U8
 
	$DoO≥n
()

392  
FlowVÆve
.
O≥nSãp
 )

394 
OPEN_CHECK_POSITION
:

395 if–
	`HAL_GëT¨gëSãp
–
FLOW_VALVE_ID
 ) =
FLOW_VALVE_OPEN_STEP_VAL
 )

397 
FlowVÆve
.
O≥nSãp
 = 
OPEN_WAIT
;

401 
FlowVÆve
.
O≥nSãp
++;

405 
OPEN_MOVE
:

406 
	`HAL_SëHﬁdSãp
–
FLOW_VALVE_ID
, 0 );

407 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 
FLOW_VALVE_OPEN_STEP_VAL
 );

408 
FlowVÆve
.
O≥nSãp
++;

411 
OPEN_WAIT
:

412 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

414 
FlowVÆve
.
T¨gë
 = 
FLOW_VALVE_OPEN_STEP_VAL
;

415 
FlowVÆve
.
O≥nSãp
++;

419 
OPEN_DONE
:

420  
TRUE
;

423 
FlowVÆve
.
O≥nSãp
 = 
OPEN_CHECK_POSITION
;

427  
FALSE
;

429 
	}
}

432 
U8
 
	$DoOff£t
()

434 
sm_°ï_t
 
mT¨gë
 = 0;

436  
FlowVÆve
.
Off£tSãp
 )

438 
OFFSET_MOVE_TARGET
:

439 
mT¨gë
 = 
	`HAL_GëT¨gëSãp
–
FLOW_VALVE_ID
 );

440 
FlowVÆve
.
T¨gë
 = 
mT¨gë
 + FlowVÆve.
Off£t
;

441 
FlowVÆve
.
Off£t
 = 0;

443 
	`CheckMöMax
();

444 
	`HAL_SëHﬁdSãp
–
FLOW_VALVE_ID
, 0 );

445 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 
FlowVÆve
.
T¨gë
 );

447 
FlowVÆve
.
Off£tSãp
++;

450 
OFFSET_WAIT_TARGET
:

451 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

453 
FlowVÆve
.
Off£tSãp
++;

457 
OFFSET_DONE
:

458  
TRUE
;

461 
FlowVÆve
.
Off£tSãp
 = 
OFFSET_MOVE_TARGET
;

465  
FALSE
;

466 
	}
}

468 
U8
 
	$DoT¨gë
()

470  
FlowVÆve
.
T¨gëSãp
 )

472 
TARGET_MOVE
:

474 
	`CheckMöMax
();

475 
	`HAL_SëHﬁdSãp
–
FLOW_VALVE_ID
, 0 );

476 
	`HAL_SëT¨gëSãp
–
FLOW_VALVE_ID
, 
FlowVÆve
.
T¨gë
 );

478 
FlowVÆve
.
T¨gëSãp
++;

481 
TARGET_WAIT
:

482 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

484 
FlowVÆve
.
T¨gëSãp
++;

488 
TARGET_DONE
:

489  
TRUE
;

492 
FlowVÆve
.
T¨gëSãp
 = 
TARGET_MOVE
;

496  
FALSE
;

497 
	}
}

503 
	s_i˚_do‹_ª≥©_ã°_


505 
U8
 
	mRun
;

506 
U8
 
	mDñay
;

507 
U32
 
	mRïótCou¡
;

508 } 
	tFlowVÆveTe°_T
;

510 
FlowVÆveTe°_T
 
	gFlowTe°
;

511 
	$TEST_SèπFlowVÆve
()

513 
FlowTe°
.
Run
 = 
TRUE
;

514 
FlowTe°
.
Dñay
 = 0;

515 
FlowTe°
.
RïótCou¡
 = 0;

516 
	}
}

518 
	$TEST_St›FlowVÆve
()

520 
FlowTe°
.
Run
 = 
FALSE
;

521 
	}
}

523 
	#TEST_DELAY
 0

	)

525 
	$TEST_RïótFlowVÆve
()

527 
U8
 
mu8ToggÀ
 = 0;

530 if–
FlowTe°
.
Run
 =
FALSE
 )

535 if–
mu8ToggÀ
 != 0 )

537 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

539 
mu8ToggÀ
 = 0;

541 
FlowTe°
.
RïótCou¡
++;

543 if–
FlowTe°
.
Dñay
 != 0 )

545 
FlowTe°
.
Dñay
--;

549 
	`FlowVÆveInô
();

553 
FlowTe°
.
Dñay
 = 
TEST_DELAY
;

554 
	`FlowVÆveFuŒO≥n
();

559 if–
	`HAL_IsD⁄eMoveSãp
–
FLOW_VALVE_ID
 ) =
TRUE
 )

561 
mu8ToggÀ
 = 1;

563 if–
FlowTe°
.
Dñay
 != 0 )

565 
FlowTe°
.
Dñay
--;

568 
	`FlowVÆveFuŒO≥n
();

572 
FlowTe°
.
Dñay
 = 
TEST_DELAY
;

573 
	`FlowVÆveInô
();

576 
	}
}

579 
	$TEST_RïótFlowVÆve
()

581 
U8
 
mu8ToggÀ
 = 0;

584 if–
FlowTe°
.
Run
 =
FALSE
 )

590 if–
mu8ToggÀ
 != 0 )

592 if–
FlowVÆve
.
Mode
 == 0 )

594 
mu8ToggÀ
 = 0;

596 
FlowTe°
.
RïótCou¡
++;

598 if–
FlowTe°
.
Dñay
 != 0 )

600 
FlowTe°
.
Dñay
--;

604 
	`FlowVÆveT¨gë
( 1000 );

608 
FlowTe°
.
Dñay
 = 
TEST_DELAY
;

614 if–
FlowVÆve
.
Mode
 == 0 )

616 
mu8ToggÀ
 = 1;

618 if–
FlowTe°
.
Dñay
 != 0 )

620 
FlowTe°
.
Dñay
--;

623 
	`FlowVÆveT¨gë
( 1700 );

627 
FlowTe°
.
Dñay
 = 
TEST_DELAY
;

631 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_valve.h

1 #i‚de‡
__FLOW_VALVE_H__


2 
	#__FLOW_VALVE_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_°ï_mŸ‹.h
"

8 
	s_Êow_vÆve_


11 
U8
 
	mSètus
;

14 
U8
 
	mMode
;

15 
U8
 
	mInôSãp
;

16 
U8
 
	mO≥nSãp
;

17 
U8
 
	mT¨gëSãp
;

18 
U8
 
	mOff£tSãp
;

19 
U8
 
	mTe°Sãp
;

21 
sm_°ï_t
 
	mOff£t
;

22 
sm_°ï_t
 
	mT¨gë
;

24 } 
	tFlowVÆve_T
;

26 
InôFlowVÆve
();

28 
GëFlowVÆveD©a
(
FlowVÆve_T
 *
pD©a
);

30 
	#FLOW_VALVE_MOVING
 0

	)

31 
	#FLOW_VALVE_STOP
 1

	)

32 
U8
 
GëFlowVÆveSètus
();

35 
FlowVÆveInô
();

38 
FlowVÆveFuŒO≥n
();

41 
	#MIN_FLOW_VALVE_TARGET
 700

42 
	#MAX_FLOW_VALVE_TARGET
 1700

43 
	#DEFAULT_FLOW_TARGET
 1600

44 
	`FlowVÆveT¨gë
(
I16
 
èrgë
);

	)

46 
I16
 
GëFlowVÆveT¨gë
();

49 
FlowVÆveOff£t
(
I16
 
off£t
);

52 
C⁄åﬁFlowVÆve
();

55 
TEST_SèπFlowVÆve
();

56 
TEST_St›FlowVÆve
();

57 
TEST_RïótFlowVÆve
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\gas_switch_valve.c

1 
	~"hw.h
"

2 
	~"hÆ_°ï_mŸ‹.h
"

4 
	~"gas_swôch_vÆve.h
"

5 
	~"comp.h
"

10 
	mINIT_POWER_ON
,

11 
	mINIT_WAIT_POWER_ON
,

13 
	mINIT_MOVE_ZERO
,

14 
	mINIT_WAIT_ZERO
,

16 
	mINIT_MOVE_COLD
,

17 
	mINIT_WAIT_COLD
,

19 
	mINIT_DONE


24 
	mCOLD_POWER_ON
,

25 
	mCOLD_WAIT_POWER_ON
,

27 
	mCOLD_CHECK_POSITION
,

29 
	mCOLD_MOVE
,

30 
	mCOLD_WAIT
,

32 
	mCOLD_DONE


38 
	mICE_POWER_ON
,

39 
	mICE_WAIT_POWER_ON
,

41 
	mICE_CHECK_POSITION
,

43 
	mICE_MOVE
,

44 
	mICE_WAIT
,

46 
	mICE_DONE


52 
	mHOTGAS_POWER_ON
,

53 
	mHOTGAS_WAIT_POWER_ON
,

55 
	mHOTGAS_CHECK_POSITION
,

57 
	mHOTGAS_MOVE
,

58 
	mHOTGAS_WAIT
,

60 
	mHOTGAS_DONE


63 
	#GAS_SWITCH_ID
 
SM_ID_0


	)

64 
	#GAS_SWITCH_SPEED
 
SM_SPEED_1


	)

67 
	#GAS_SWITCH_COLD_STEP_VAL
 (24)

	)

68 
	#GAS_SWITCH_ICE_STEP_VAL
 (64)

	)

69 
	#GAS_SWITCH_HOTGAS_STEP_VAL
 (104)

	)

70 
	#GAS_SWITCH_END_STEP_VAL
 (200)

	)

71 
	#GAS_SWITCH_INIT_STEP_VAL
 (-15)

	)

73 
	#POWER_ON_TIME
 10U

74 
	#COMP_OFF_INIT_TIME
 60U

	)

75 
GasSwôchVÆve_T
 
	gGasSwôch
;

77 
	$InôGasSwôch
()

79 
GasSwôch
.
Sètus
 = 
GAS_SWITCH_ICE
;

81 
GasSwôch
.
Mode
 = 0;

82 
GasSwôch
.
InôSãp
 = 0;

83 
GasSwôch
.
CﬁdSãp
 = 0;

84 
GasSwôch
.
I˚Sãp
 = 0;

85 
GasSwôch
.
PowîOnTime
 = 
POWER_ON_TIME
;

88 
	`HAL_InôSãpVÆ
–
GAS_SWITCH_ID
 );

89 
	`HAL_SëCuºítSãp
–
GAS_SWITCH_ID
, 
GAS_SWITCH_END_STEP_VAL
 );

90 
	`HAL_SëT¨gëSãp
–
GAS_SWITCH_ID
, 
GAS_SWITCH_END_STEP_VAL
 );

91 
	`HAL_SëSãpS≥ed
–
GAS_SWITCH_ID
, 
GAS_SWITCH_SPEED
 );

92 
	}
}

94 
	$GëGasSwôchD©a
(
GasSwôchVÆve_T
 *
pD©a
)

96 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° __Á∏*)&
GasSwôch
, ( GasSwitch ));

97 
	}
}

100 
SëMode
(
U8
 
mu8Mode
 );

101 
CÀ¨Mode
(
U8
 
mu8Mode
 );

102 
U8
 
	$GëGasSwôchSètus
()

104  
GasSwôch
.
Sètus
;

105 
	}
}

107 
	$SëGasSwôchSètus
(
U8
 
mu8Sètus
)

109 
GasSwôch
.
Sètus
 = 
mu8Sètus
;

110 
	}
}

112 
U8
 
	$GëGasSwôchMode
()

114  
GasSwôch
.
Mode
;

115 
	}
}

117 
	$GasSwôchInô
()

119 
	`SëMode
–
GAS_SWITCH_MODE_INIT
 );

120 
	}
}

121 
	$GasSwôchCﬁd
()

123 
	`SëMode
–
GAS_SWITCH_MODE_COLD
 );

124 
	}
}

126 
	$GasSwôchI˚
()

128 
	`SëMode
–
GAS_SWITCH_MODE_ICE
 );

129 
	}
}

131 
	$GasSwôchHŸGas
()

133 
	`SëMode
–
GAS_SWITCH_MODE_HOTGAS
 );

134 
	}
}

137 
	$SëMode
(
U8
 
mu8Mode
 )

140 
GasSwôch
.
Mode
 |
mu8Mode
;

142 if–
mu8Mode
 =
GAS_SWITCH_MODE_COLD
 )

144 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_ICE
 );

145 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_HOTGAS
 );

147 if–
mu8Mode
 =
GAS_SWITCH_MODE_ICE
 )

149 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_COLD
 );

150 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_HOTGAS
 );

152 if–
mu8Mode
 =
GAS_SWITCH_MODE_HOTGAS
 )

154 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_ICE
 );

155 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_COLD
 );

159 
	}
}

161 
	$CÀ¨Mode
(
U8
 
mu8Mode
 )

163 
GasSwôch
.
Mode
 &~
mu8Mode
;

170 if–
mu8Mode
 =
GAS_SWITCH_MODE_INIT
 )

172 
GasSwôch
.
InôSãp
 = 0;

174 if–
mu8Mode
 =
GAS_SWITCH_MODE_COLD
 )

176 
GasSwôch
.
CﬁdSãp
 = 0;

178 if–
mu8Mode
 =
GAS_SWITCH_MODE_ICE
 )

180 
GasSwôch
.
I˚Sãp
 = 0;

182 if–
mu8Mode
 =
GAS_SWITCH_MODE_HOTGAS
 )

184 
GasSwôch
.
HŸGasSãp
 = 0;

186 
	}
}

188 
CÀ¨Mode
(
U8
 
mu8Mode
 );

189 
U8
 
InôSwôch
();

190 
U8
 
CﬁdSwôch
();

191 
U8
 
I˚Swôch
();

192 
U8
 
HŸGasSwôch
();

194 
	$C⁄åﬁGasSwôch
()

196 
U8
 
mu8Rë
 = 
FALSE
;

203 if–(
GasSwôch
.
Mode
 & 
GAS_SWITCH_MODE_POWER_INIT
 ) == GAS_SWITCH_MODE_POWER_INIT )

205 
mu8Rë
 = 
	`InôSwôch
();

206 if–
mu8Rë
 =
TRUE
 )

208 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_POWER_INIT
 );

209 
	`SëGasSwôchSètus
–
GAS_SWITCH_COLD
 );

218 if–(
GasSwôch
.
Mode
 & 
GAS_SWITCH_MODE_INIT
 ) == GAS_SWITCH_MODE_INIT )

220 
mu8Rë
 = 
	`InôSwôch
();

221 if–
mu8Rë
 =
TRUE
 )

223 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_INIT
 );

224 
	`SëGasSwôchSètus
–
GAS_SWITCH_COLD
 );

231 if–(
GasSwôch
.
Mode
 & 
GAS_SWITCH_MODE_COLD
 ) == GAS_SWITCH_MODE_COLD )

233 
mu8Rë
 = 
	`CﬁdSwôch
();

234 if–
mu8Rë
 =
TRUE
 )

236 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_COLD
 );

237 
	`SëGasSwôchSètus
–
GAS_SWITCH_COLD
 );

243 if–(
GasSwôch
.
Mode
 & 
GAS_SWITCH_MODE_ICE
 ) == GAS_SWITCH_MODE_ICE )

245 
mu8Rë
 = 
	`I˚Swôch
();

246 if–
mu8Rë
 =
TRUE
 )

248 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_ICE
 );

249 
	`SëGasSwôchSètus
–
GAS_SWITCH_ICE
 );

255 if–(
GasSwôch
.
Mode
 & 
GAS_SWITCH_MODE_HOTGAS
 ) == GAS_SWITCH_MODE_HOTGAS )

257 
mu8Rë
 = 
	`HŸGasSwôch
();

258 if–
mu8Rë
 =
TRUE
 )

260 
	`CÀ¨Mode
–
GAS_SWITCH_MODE_HOTGAS
 );

261 
	`SëGasSwôchSètus
–
GAS_SWITCH_HOTGAS
 );

265 
	}
}

268 
U8
 
	$InôSwôch
()

270  
GasSwôch
.
InôSãp
 )

272 
INIT_POWER_ON
:

273 
GasSwôch
.
PowîOnTime
 = 
POWER_ON_TIME
;

274 
GasSwôch
.
InôSãp
++;

277 
INIT_WAIT_POWER_ON
:

278 if–
GasSwôch
.
PowîOnTime
 != 0 )

280 
GasSwôch
.
PowîOnTime
--;

284 
GasSwôch
.
InôSãp
++;

288 
INIT_MOVE_ZERO
:

289 
	`HAL_SëHﬁdSãp
–
GAS_SWITCH_ID
, 0 );

290 
	`HAL_SëT¨gëSãp
–
GAS_SWITCH_ID
, 
GAS_SWITCH_INIT_STEP_VAL
 );

291 
GasSwôch
.
InôSãp
++;

294 
INIT_WAIT_ZERO
:

295 if–
	`HAL_IsD⁄eMoveSãp
–
GAS_SWITCH_ID
 ) =
TRUE
 )

297 
GasSwôch
.
InôSãp
++;

299 
	`HAL_InôSãpVÆ
–
GAS_SWITCH_ID
 );

303 
INIT_MOVE_COLD
:

304 
	`HAL_SëHﬁdSãp
–
GAS_SWITCH_ID
, 0 );

305 
	`HAL_SëT¨gëSãp
–
GAS_SWITCH_ID
, 
GAS_SWITCH_COLD_STEP_VAL
 );

306 
GasSwôch
.
InôSãp
++;

309 
INIT_WAIT_COLD
:

310 if–
	`HAL_IsD⁄eMoveSãp
–
GAS_SWITCH_ID
 ) =
TRUE
 )

312 
GasSwôch
.
InôSãp
++;

316 
INIT_DONE
 :

317  
TRUE
;

320 
GasSwôch
.
InôSãp
 = 
INIT_POWER_ON
;

324  
FALSE
;

325 
	}
}

327 
U8
 
	$CﬁdSwôch
()

329  
GasSwôch
.
CﬁdSãp
 )

332 
COLD_POWER_ON
:

333 
GasSwôch
.
PowîOnTime
 = 
POWER_ON_TIME
;

334 
GasSwôch
.
CﬁdSãp
++;

337 
COLD_WAIT_POWER_ON
:

338 if–
GasSwôch
.
PowîOnTime
 != 0 )

340 
GasSwôch
.
PowîOnTime
--;

344 
GasSwôch
.
CﬁdSãp
++;

350 
COLD_CHECK_POSITION
:

351 if–
	`HAL_GëT¨gëSãp
–
GAS_SWITCH_ID
 ) =
GAS_SWITCH_COLD_STEP_VAL
 )

353 
GasSwôch
.
CﬁdSãp
 = 
COLD_WAIT
;

357 
GasSwôch
.
CﬁdSãp
++;

361 
COLD_MOVE
:

362 
	`HAL_SëHﬁdSãp
–
GAS_SWITCH_ID
, 0 );

363 
	`HAL_SëT¨gëSãp
–
GAS_SWITCH_ID
, 
GAS_SWITCH_COLD_STEP_VAL
 );

364 
GasSwôch
.
CﬁdSãp
++;

367 
COLD_WAIT
:

368 if–
	`HAL_IsD⁄eMoveSãp
–
GAS_SWITCH_ID
 ) =
TRUE
 )

370 
GasSwôch
.
CﬁdSãp
++;

374 
COLD_DONE
:

375  
TRUE
;

378 
GasSwôch
.
CﬁdSãp
 = 
COLD_POWER_ON
;

381  
FALSE
;

382 
	}
}

385 
U8
 
	$I˚Swôch
()

387  
GasSwôch
.
I˚Sãp
 )

389 
ICE_POWER_ON
:

390 
GasSwôch
.
PowîOnTime
 = 
POWER_ON_TIME
;

391 
GasSwôch
.
I˚Sãp
++;

394 
ICE_WAIT_POWER_ON
:

395 if–
GasSwôch
.
PowîOnTime
 != 0 )

397 
GasSwôch
.
PowîOnTime
--;

401 
GasSwôch
.
I˚Sãp
++;

406 
ICE_CHECK_POSITION
:

407 if–
	`HAL_GëT¨gëSãp
–
GAS_SWITCH_ID
 ) =
GAS_SWITCH_ICE_STEP_VAL
 )

409 
GasSwôch
.
I˚Sãp
 = 
ICE_WAIT
;

413 
GasSwôch
.
I˚Sãp
++;

417 
ICE_MOVE
:

418 
	`HAL_SëHﬁdSãp
–
GAS_SWITCH_ID
, 0 );

419 
	`HAL_SëT¨gëSãp
–
GAS_SWITCH_ID
, 
GAS_SWITCH_ICE_STEP_VAL
 );

420 
GasSwôch
.
I˚Sãp
++;

423 
ICE_WAIT
:

424 if–
	`HAL_IsD⁄eMoveSãp
–
GAS_SWITCH_ID
 ) =
TRUE
 )

426 
GasSwôch
.
I˚Sãp
++;

430 
ICE_DONE
:

431  
TRUE
;

434 
GasSwôch
.
I˚Sãp
 = 
ICE_POWER_ON
;

439  
FALSE
;

440 
	}
}

442 
U8
 
	$HŸGasSwôch
()

444  
GasSwôch
.
HŸGasSãp
 )

446 
HOTGAS_POWER_ON
:

447 
GasSwôch
.
PowîOnTime
 = 
POWER_ON_TIME
;

448 
GasSwôch
.
HŸGasSãp
++;

451 
HOTGAS_WAIT_POWER_ON
:

452 if–
GasSwôch
.
PowîOnTime
 != 0 )

454 
GasSwôch
.
PowîOnTime
--;

458 
GasSwôch
.
HŸGasSãp
++;

463 
HOTGAS_CHECK_POSITION
:

464 if–
	`HAL_GëT¨gëSãp
–
GAS_SWITCH_ID
 ) =
GAS_SWITCH_HOTGAS_STEP_VAL
 )

466 
GasSwôch
.
HŸGasSãp
 = 
ICE_WAIT
;

470 
GasSwôch
.
HŸGasSãp
++;

474 
HOTGAS_MOVE
:

475 
	`HAL_SëHﬁdSãp
–
GAS_SWITCH_ID
, 0 );

476 
	`HAL_SëT¨gëSãp
–
GAS_SWITCH_ID
, 
GAS_SWITCH_HOTGAS_STEP_VAL
 );

477 
GasSwôch
.
HŸGasSãp
++;

480 
HOTGAS_WAIT
:

481 if–
	`HAL_IsD⁄eMoveSãp
–
GAS_SWITCH_ID
 ) =
TRUE
 )

483 
GasSwôch
.
HŸGasSãp
++;

487 
HOTGAS_DONE
:

488  
TRUE
;

491 
GasSwôch
.
HŸGasSãp
 = 
HOTGAS_POWER_ON
;

496  
FALSE
;

497 
	}
}

555 
	$Pro˚ssGasSwôch
()

557 
U8
 
mu8PªvCmd
 = 
OFF
;

558 
U8
 
mu8RunInô
 = 
TRUE
;

559 
U8
 
mu8CurCmd
 = 
OFF
;

562 
mu8CurCmd
 = 
	`GëCompOnOff
();

563 if–
mu8PªvCmd
 !
mu8CurCmd
 )

565 
mu8PªvCmd
 = 
mu8CurCmd
;

566 if–
mu8CurCmd
 =
OFF
 )

568 
mu8RunInô
 = 
TRUE
;

574 if–
mu8RunInô
 =
TRUE
 )

576 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
FALSE
 )

579 if–
	`GëCompPrŸe˘OffTime
(Ë< 
COMP_OFF_INIT_TIME
 )

581 
mu8RunInô
 = 
FALSE
;

582 
	`GasSwôchInô
();

588 #i‡
CONFIG_TEST_GAS_SWITCH


589 
	`TEST_RïótGasVÆve
();

591 
	}
}

598 
	#TEST_DELAY
 0

	)

599 
GasSwôchVÆveTe°_T
 
	gGasTe°
;

601 
	$TEST_GëGasVÆveD©a
(
GasSwôchVÆveTe°_T
 *
pD©a
)

603 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° __Á∏*)&
GasTe°
, ( GasTest ));

604 
	}
}

606 
	$TEST_SèπGasVÆve
()

608 
GasTe°
.
Run
 = 
TRUE
;

609 
GasTe°
.
Dñay
 = 0;

610 
GasTe°
.
RïótCou¡
 = 0;

611 
	}
}

613 
	$TEST_St›GasVÆve
()

615 
GasTe°
.
Run
 = 
FALSE
;

616 
	}
}

618 
	$TEST_RïótGasVÆve
()

620 
U8
 
mu8ToggÀ
 = 0;

623 if–
GasTe°
.
Run
 =
FALSE
 )

628 if–
mu8ToggÀ
 != 0 )

630 if–
GasSwôch
.
Mode
 == 0 )

632 
mu8ToggÀ
 = 0;

634 
GasTe°
.
RïótCou¡
++;

636 if–
GasTe°
.
Dñay
 != 0 )

638 
GasTe°
.
Dñay
--;

642 
	`GasSwôchCﬁd
();

646 
GasTe°
.
Dñay
 = 
TEST_DELAY
;

651 if–
GasSwôch
.
Mode
 == 0 )

653 
mu8ToggÀ
 = 1;

655 if–
GasTe°
.
Dñay
 != 0 )

657 
GasTe°
.
Dñay
--;

660 
	`GasSwôchI˚
();

664 
GasTe°
.
Dñay
 = 
TEST_DELAY
;

667 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\gas_switch_valve.h

1 #i‚de‡
__GAS_SWITCH_VALVE_H__


2 
	#__GAS_SWITCH_VALVE_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_gas_swôch_vÆve_


9 
U8
 
	mSètus
;

10 
U8
 
	mOnInô
;

13 
U8
 
	mMode
;

14 
U8
 
	mInôSãp
;

15 
U8
 
	mCﬁdSãp
;

16 
U8
 
	mI˚Sãp
;

17 
U8
 
	mHŸGasSãp
;

19 
U8
 
	mPowîOnTime
;

20 } 
	tGasSwôchVÆve_T
;

22 
InôGasSwôch
();

24 
GëGasSwôchD©a
(
GasSwôchVÆve_T
 *
pD©a
);

26 
	#GAS_SWITCH_COLD
 0

	)

27 
	#GAS_SWITCH_ICE
 1

	)

28 
	#GAS_SWITCH_HOTGAS
 2

	)

29 
U8
 
GëGasSwôchSètus
();

32 
	#GAS_SWITCH_MODE_NONE
 0x00

	)

33 
	#GAS_SWITCH_MODE_INIT
 0x01

	)

34 
	#GAS_SWITCH_MODE_COLD
 0x02

	)

35 
	#GAS_SWITCH_MODE_ICE
 0x04

	)

36 
	#GAS_SWITCH_MODE_HOTGAS
 0x08

	)

38 
U8
 
GëGasSwôchMode
();

40 
GasSwôchInô
();

41 
GasSwôchCﬁd
();

42 
GasSwôchI˚
();

43 
GasSwôchHŸGas
();

45 
C⁄åﬁGasSwôch
();

46 
Pro˚ssGasSwôch
();

50 
	s_gas_swôch_ª≥©_ã°_


52 
U8
 
	mRun
;

53 
U8
 
	mDñay
;

54 
U32
 
	mRïótCou¡
;

55 } 
	tGasSwôchVÆveTe°_T
;

57 
TEST_GëGasVÆveD©a
(
GasSwôchVÆveTe°_T
 *
pD©a
);

58 
TEST_SèπGasVÆve
();

59 
TEST_St›GasVÆve
();

60 
TEST_RïótGasVÆve
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_out.c

18 
	~"hw.h
"

19 
	~"hóãr_out.h
"

20 
	~"hŸ_w©î_hóãr.h
"

21 
	~"utû.h
"

22 
	~<°rög.h
>

24 #¥agm®
öãºu±
 
HóãrOutI¡îru±
(
ve˘
=
INTTM02
)

27 
	#TRIAC_LARGE
 0

	)

28 
	#TRIAC_SMALL
 1

	)

29 
	#CONFIG_HEATER_TYPE
 
TRIAC_SMALL


	)

37 
	#INTS_BYTE
(Ë
_öts_byã


	)

38 
	#MASK_TIMER
 
TMMK02


	)

39 
	#DISABLE_INT_MASK_TIMER
(Ëdÿ{ 
MASK_TIMER
 = 1; }0)

	)

40 
	#ENABLE_INT_MASK_TIMER
(Ëdÿ{ 
MASK_TIMER
 = 0; }0)

	)

42 
	#ENTER_CRITICAL_SECTION
() \

44 
_öts_byã
 = 
MASK_TIMER
; \

45 
	`DISABLE_INT_MASK_TIMER
(); \

46 }0)

	)

48 
	#EXIT_CRITICAL_SECTION
() \

50 
MASK_TIMER
 = 
_öts_byã
; \

51 } 0)

	)

56 #i‡(
CONFIG_HEATER_TYPE
 =
TRIAC_LARGE
)

57 
	#RELAY_HEATER_OUT
 45U

58 
	#TRIAC_HEATER_OUT
 55U

59 
	#MAX_TRIAC_TICK
 2UL

60 #ñ£

	)

63 
	#RELAY_HEATER_OUT
 55U

64 
	#TRIAC_HEATER_OUT
 45U

66 
	#MAX_TRIAC_TICK
 20UL

	)

78 
HóãrOut_T
 
	gHóãrOut
;

81 
	$InôHóãrOut
()

83 
HóãrOut
.
Ouçut
 = 
MIN_HEATER_OUT
;

85 
HóãrOut
.
Regi⁄
 = 
REGION_SINGLE
;

86 
HóãrOut
.
MaxTick
 = 0;

87 
HóãrOut
.
CuºítTick
 = 0;

88 
HóãrOut
.
T¨gëTick
 = 0;

89 
HóãrOut
.
NextT¨gëTick
 = 0;

92 
	`R_C⁄fig_TAU0_2_Sèπ
();

93 
	}
}

96 
	$GëHóãrOutD©a
(
HóãrOut_T
 *
pD©a
)

98 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° __Á∏*)&
HóãrOut
, –
HóãrOut_T
 ));

99 
	}
}

101 
U8
 
	$GëHóãrOutRegi⁄
()

103  
HóãrOut
.
Regi⁄
;

104 
	}
}

107 
U16
 
	$CÆcHóãrAdc2W©t
(
U16
 
mu16Adc
)

109 
U32
 
a
 = 0UL;

110 
U32
 
b
 = 0UL;

111 
U32
 
c
 = 0UL;

112 
U16
 
w©t
 = 0;

114 if–
mu16Adc
 >= 194UL )

116 
a
 = (
U32
)
mu16Adc
;

117 
b
 = (
U32
)((780UL * 
a
) / 100UL);

118 
c
 = (
U32
)–
b
 - 1341UL);

121 
w©t
 = (
U16
)
c
;

122  
w©t
;

123 
	}
}

125 
	s_åüc_w©t_


127 
U32
 
	mHóãr
;

128 
U32
 
	mTrüc
;

129 
U32
 
	mT¨gë
;

130 
U32
 
	mTick
;

131 
U16
 
	mTickNum
;

132 } 
	tTøic_T
;

134 
Tøic_T
 
	gTrücW©t
;

135 
	$SëTrücOuçut
(
U16
 
mu16Ouçut
)

137 
	`INTS_BYTE
();

140 
TrücW©t
.
Hóãr
 = (
U32
)
	`GëHóãrBa£W©t
();

143 
TrücW©t
.
Trüc
 = (TrücW©t.
Hóãr
 * 
TRIAC_HEATER_OUT
) / 100UL;

144 
TrücW©t
.
T¨gë
 = (TrücW©t.
Hóãr
 * 
mu16Ouçut
 ) / 100UL;

147 
TrücW©t
.
Tick
 = (TrücW©t.
Trüc
 * 100ULË/ 
MAX_TRIAC_TICK
;

150 
TrücW©t
.
TickNum
 = (
U16
)(–((TrücW©t.
T¨gë
 * 1000ULË/ TrücW©t.
Tick
 ) + 5UL ) / 10UL);

156 
	`ENTER_CRITICAL_SECTION
();

157 
HóãrOut
.
MaxTick
 = 
MAX_TRIAC_TICK
;

158 
HóãrOut
.
NextT¨gëTick
 = 
TrücW©t
.
TickNum
;

159 if–
HóãrOut
.
NextT¨gëTick
 > 
MAX_TRIAC_TICK
 )

161 
HóãrOut
.
NextT¨gëTick
 = 
MAX_TRIAC_TICK
;

163 
	`EXIT_CRITICAL_SECTION
();

164 
	}
}

167 
	$CÀ¨TrücOuçut
()

169 
	`INTS_BYTE
();

171 
	`ENTER_CRITICAL_SECTION
();

173 
HóãrOut
.
MaxTick
 = 0U;

174 
HóãrOut
.
CuºítTick
 = 0U;

175 
HóãrOut
.
T¨gëTick
 = 0U;

177 
	`EXIT_CRITICAL_SECTION
();

178 
	}
}

180 
	$Re£tRegi⁄
()

182 
	`INTS_BYTE
();

184 
	`ENTER_CRITICAL_SECTION
();

185 
HóãrOut
.
Regi⁄
 = 
REGION_SINGLE
;

186 
	`EXIT_CRITICAL_SECTION
();

187 
	}
}

190 
	#SINGLE_POWER
 ( 
TRIAC_HEATER_OUT
 )

	)

191 
	#DOUBLE_POWER
 ( 
RELAY_HEATER_OUT
 )

	)

192 
	$CheckRegi⁄
(
U16
 
mu16Ouçut
)

194 
	`INTS_BYTE
();

195 
U16
 
mu16PªvOuçut
 = 0;

199 if–
mu16PªvOuçut
 !
mu16Ouçut
 )

201 if–
mu16PªvOuçut
 == 0 )

203 if–
mu16Ouçut
 <
SINGLE_POWER
 )

205 
	`ENTER_CRITICAL_SECTION
();

206 
HóãrOut
.
Regi⁄
 = 
REGION_SINGLE
;

207 
	`EXIT_CRITICAL_SECTION
();

211 
	`ENTER_CRITICAL_SECTION
();

212 
HóãrOut
.
Regi⁄
 = 
REGION_DOUBLE
;

213 
	`EXIT_CRITICAL_SECTION
();

216 
mu16PªvOuçut
 = 
mu16Ouçut
;

220 
mu16PªvOuçut
 = 
mu16Ouçut
;

224 if–
HóãrOut
.
Regi⁄
 =
REGION_SINGLE
 )

226 if–
mu16Ouçut
 > 
SINGLE_POWER
 )

228 
	`ENTER_CRITICAL_SECTION
();

229 
HóãrOut
.
Regi⁄
 = 
REGION_DOUBLE
;

230 
	`EXIT_CRITICAL_SECTION
();

235 if–
mu16Ouçut
 <
SINGLE_POWER
 )

237 
	`ENTER_CRITICAL_SECTION
();

238 
HóãrOut
.
Regi⁄
 = 
REGION_SINGLE
;

239 
	`EXIT_CRITICAL_SECTION
();

242 
	}
}

246 
U8
 
	gdbg_Êag_hóãr
 = 0;

247 
U16
 
	gdbg_hóãr_ouput
 = 0;

248 
	$SëHóãrOuçut
(
U16
 
mu16Ouçut
)

251 
HóãrOut
.
Ouçut
 = 
mu16Ouçut
;

255 if–
dbg_Êag_hóãr
 != 0 )

257 
HóãrOut
.
Ouçut
 = 
dbg_hóãr_ouput
;

261 
	`CheckRegi⁄
–
HóãrOut
.
Ouçut
 );

263 if–
HóãrOut
.
Ouçut
 =
MIN_HEATER_OUT
 )

266 
	`CÀ¨TrücOuçut
();

267 
	`Re£tRegi⁄
();

269 if–
HóãrOut
.
Regi⁄
 =
REGION_DOUBLE
 )

272 if–
HóãrOut
.
Ouçut
 <
RELAY_HEATER_OUT
 )

274 
	`SëTrücOuçut
( 0 );

278 
U16
 
mu16TrücOuçut
 = 0;

280 
mu16TrücOuçut
 = 
HóãrOut
.
Ouçut
 - 
RELAY_HEATER_OUT
;

281 if–
mu16TrücOuçut
 >
TRIAC_HEATER_OUT
 )

283 
	`SëTrücOuçut
–
TRIAC_HEATER_OUT
 );

287 
	`SëTrücOuçut
–
mu16TrücOuçut
 );

295 if–
HóãrOut
.
Ouçut
 >
TRIAC_HEATER_OUT
 )

297 
	`SëTrücOuçut
–
TRIAC_HEATER_OUT
 );

301 
	`SëTrücOuçut
–
HóãrOut
.
Ouçut
 );

304 
	}
}

308 
U16
 
	$GëHóãrOuçut
()

310  
HóãrOut
.
Ouçut
;

311 
	}
}

315 
U8
 
	$GëOnOffTrüc
()

317 
U8
 
mu8OnOff
 = 
OFF
;

320 
HóãrOut
.
CuºítTick
++;

321 if(
HóãrOut
.
CuºítTick
 <HóãrOut.
T¨gëTick
)

323 
mu8OnOff
 = 
ON
;

327 
mu8OnOff
 = 
OFF
;

330 if(
HóãrOut
.
CuºítTick
 >HóãrOut.
MaxTick
)

332 
HóãrOut
.
CuºítTick
 = 0;

333 
HóãrOut
.
T¨gëTick
 = HóãrOut.
NextT¨gëTick
;

336  
mu8OnOff
;

337 
	}
}

341 
	$Tu∫OnOffTrüc
(
U8
 
mu8OnOff
 )

343 if–
mu8OnOff
 =
ON
 )

345 if–
	`GëOnOffTrüc
(Ë=
ON
 )

347 
	`TURN_ON_HEATER_TRIAC
();

351 
	`TURN_OFF_HEATER_TRIAC
();

356 
	`TURN_OFF_HEATER_TRIAC
();

358 
	}
}

360 
U16
 
	gdbg_ªœy_Êag
 = 0;

361 
U16
 
	gdbg_ªœy_cou¡
 = 0;

364 
	$Tu∫OnOffRñay
(
U8
 
mu8OnOff
 )

367 if–
dbg_ªœy_Êag
 !
mu8OnOff
 )

369 if–
mu8OnOff
 =
ON
 )

371 
dbg_ªœy_cou¡
++;

376 if–
mu8OnOff
 =
ON
 )

378 
	`TURN_ON_HEATER_RELAY
();

379 
dbg_ªœy_Êag
 = 1;

383 
	`TURN_OFF_HEATER_RELAY
();

384 
dbg_ªœy_Êag
 = 0;

386 
	}
}

388 #i‡
CONFIG_TEST_HEATER


389 
	$Pro˚ssHóãrOut
()

391 
	`Tu∫OnOffTrüc
–
OFF
 );

392 
	`Tu∫OnOffRñay
–
OFF
 );

393 
	}
}

396 
	#HEATER_DELAY_TIME
 121U

397 
U16
 
mu16OnDñay
 = 0;

398 
U16
 
mu16OffDñay
 = 0;

399 
	`Pro˚ssHóãrOut
()

	)

404 
U16
 
	gmu16Ouçut
;

407 
	gmu16Ouçut
 = 
GëHóãrOuçut
();

410 if–
	gmu16Ouçut
 =
MIN_HEATER_OUT
 )

412 
mu16OnDñay
 = 0;

413 
	gmu16OffDñay
 = 0;

415 
Tu∫OnOffTrüc
–
OFF
 );

416 
Tu∫OnOffRñay
–
OFF
 );

419 if–
	gHóãrOut
.
	gRegi⁄
 =
REGION_DOUBLE
 )

421 
mu16OffDñay
 = 
HEATER_DELAY_TIME
;

423 
Tu∫OnOffTrüc
–
ON
 );

425 if–
	gmu16OnDñay
 != 0 )

427 
mu16OnDñay
--;

428 
Tu∫OnOffRñay
–
OFF
 );

432 
Tu∫OnOffRñay
–
ON
 );

438 
	gmu16OnDñay
 = 
HEATER_DELAY_TIME
;

440 if–
	gmu16OffDñay
 != 0 )

442 
mu16OffDñay
--;

443 
Tu∫OnOffRñay
–
ON
 );

444 
Tu∫OnOffTrüc
–
OFF
 );

448 
Tu∫OnOffRñay
–
OFF
 );

449 
Tu∫OnOffTrüc
–
ON
 );

456 
	$R_C⁄fig_TAU0_2_Cª©e_U£rInô
()

458 
	}
}

461 
__√¨
 
	$HóãrOutI¡îru±
()

463 
	`EI
();

464 
	`Pro˚ssHóãrOut
();

465 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_out.h

1 #i‚de‡
__HEATER_OUT_H__


2 
	#__HEATER_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	#HEATER_EFFICIENCY
 0.95‡

	)

13 
	#MAX_HEATER_OUT
 100U

14 
	#MIN_HEATER_OUT
 0U

	)

17 
	s_hóãr_ouçut_


19 
U16
 
	mOuçut
;

21 
U8
 
	mRegi⁄
;

24 
U16
 
	mMaxTick
;

25 
U16
 
	mT¨gëTick
;

26 
U16
 
	mNextT¨gëTick
;

27 
U16
 
	mCuºítTick
;

28 } 
	tHóãrOut_T
;

31 
InôHóãrOut
();

32 
GëHóãrOutD©a
(
HóãrOut_T
 *
pD©a
);

34 
	#REGION_SINGLE
 0

	)

35 
	#REGION_DOUBLE
 1

	)

36 
U8
 
GëHóãrOutRegi⁄
();

37 
U16
 
CÆcHóãrAdc2W©t
(U16 
mu16Adc
);

39 
SëHóãrOuçut
(
U16
 
mu16Ouçut
);

40 
U16
 
GëHóãrOuçut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_table.c

7 
	~"hóãr_èbÀ.h
"

10 
WATT_T
 
	$GëW©tByLPM
(
F32
 
mLPM
)

12 if–
mLPM
 >= 1.2f ) {  84; }

13 if–
mLPM
 >= 1.1f ) {  77; }

14 if–
mLPM
 >= 1.0f ) {  70; }

15 if–
mLPM
 >= 0.9f ) {  63; }

16 if–
mLPM
 >= 0.8f ) {  56; }

17 if–
mLPM
 >= 0.7f ) {  49; }

18 if–
mLPM
 >= 0.6f ) {  42; }

19 if–
mLPM
 >= 0.5f ) {  35; }

20 if–
mLPM
 >= 0.4f ) {  28; }

21 if–
mLPM
 >= 0.3f ) {  21; }

22 if–
mLPM
 >= 0.2f ) {  14; }

25 
	}
}

30 
	#AMOUNT_ML
 0.095f

31 
U16
 
dbg_off£t_time
 = 300;

	)

32 
U16
 
	$GëHótTime
(
U16
 
mW©t
, 
TEMP_T
 
tT¨gë
, TEMP_T 
tIn
)

34 
F32
 
mTime
;

35 
U16
 
mRëVÆ
 = 0;

37 
mTime
 = 
AMOUNT_ML
 * 4.2‡* ( 
tT¨gë
 - 
tIn
 ) / ( (
F32
)
mW©t
 / 1000.0f) ;

38 
mTime
 = mTime + 0.005;

39 if–
mTime
 > 0.0f )

41 
mRëVÆ
 = (
U16
)(
mTime
 * 100.0f );

45 if–
mRëVÆ
 < 
dbg_off£t_time
 )

47 
mRëVÆ
 = 
dbg_off£t_time
;

50  
mRëVÆ
;

51 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_table.h

1 #i‚de‡
__HEATER_TABLE_H__


2 
	#__HEATER_TABLE_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hŸ_w©î_hóãr.h
"

8 
WATT_T
 
GëW©tByLPM
(
F32
 
mLPM
);

12 
U16
 
GëHótTime
(U16 
mW©t
, 
TEMP_T
 
tT¨gë
, TEMP_T 
tIn
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_flow.c

9 
	~"hŸ_w©î_Êow.h
"

10 
	~"hŸ_w©î_hóãr.h
"

11 
	~"hÆ_adc.h
"

12 
	~"ãmp.h
"

13 
	~"utû.h
"

14 
	~"Êow_mëî.h
"

15 
	~"Êow_vÆve.h
"

16 
	~"hóãr_out.h
"

17 
	~"hŸ_w©î_out.h
"

18 
	~"hŸ_w©î.h
"

22 
	s_ˇlc_Êow_vÆve_


25 
U8
 
	mIsSam∂ed
;

28 
I16
 
	mSãp
;

29 
F32
 
	mLPM
;

30 } 
	tCÆcFlowVÆve_T
;

31 
CÆcFlowVÆve_T
 
	gCÆcFlow
;

34 
HŸW©îFlow_T
 
	gHóãrFlow
;

36 
	s_Êow_vÆve_°ï_


38 
F32
 
	mLPM
;

39 
I16
 
	mSãp
;

40 }
	tFlowVÆveSãp_T
;

44 c⁄° 
FlowVÆveSãp_T
 
	gFlowVÆveSãpLi°
[] =

55 
	#SZ_FLOW_VALVE_POSITION
 ((
FlowVÆveSãpLi°
Ë/ (
FlowVÆveSãp_T
Ë)

	)

56 
I16
 
	$FödT¨gëVÆveSãp
(
F32
 
mLPM
)

58 
U8
 
i
;

59 
U8
 
mu8Li°Size
;

60 
I16
 
mi16Sãp
;

63 
mu8Li°Size
 = 
SZ_FLOW_VALVE_POSITION
;

64 
mi16Sãp
 = 
FlowVÆveSãpLi°
[ 
mu8Li°Size
 - 1 ].
Sãp
;

65  
i
 = 0; i < 
mu8Li°Size
; i++ )

67 if–
FlowVÆveSãpLi°
[ 
i
 ].
LPM
 <
mLPM
 )

69 
mi16Sãp
 = 
FlowVÆveSãpLi°
[ 
i
 ].
Sãp
;

74  
mi16Sãp
;

75 
	}
}

77 
	$InôHŸW©îFlow
()

79 
HóãrFlow
.
T¨gëLPM
 = 0.0f;

80 
HóãrFlow
.
T¨gëHz
 = 0U;

81 
HóãrFlow
.
MöHz
 = 
	`C⁄vLPM2Hz
–
MIN_LPM
 );

82 
HóãrFlow
.
MaxHz
 = 
	`C⁄vLPM2Hz
–
MAX_LPM
 );

85 
CÆcFlow
.
IsSam∂ed
 = 
FALSE
;

86 
	}
}

88 
	$GëHŸW©îFlowD©a
(
HŸW©îFlow_T
 *
pD©a
)

90 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° __Á∏*)&
HóãrFlow
, –
HŸW©îFlow_T
 ));

91 
	}
}

94 
F32
 
	$GëHŸW©îT¨gëLPM
()

96  
HóãrFlow
.
T¨gëLPM
;

97 
	}
}

99 
U16
 
	$GëHŸW©îT¨gëHz
()

101  
HóãrFlow
.
T¨gëHz
;

102 
	}
}

106 
F32
 
	$CÆcT¨gëHz
(
TEMP_T
 
mTempT¨gë
, TEMP_T 
mTempIn
, 
WATT_T
 
mHóãrW©t
)

108 
F32
 
a
 = 0.0f;

109 
F32
 
b
 = 0.0f;

110 
F32
 
c
 = 0.0f;

111 
F32
 
d
 = 0.0f;

112 
F32
 
mT¨gëLPM
 = 
MAX_LPM
;

116 if–
mTempT¨gë
 > 
mTempIn
 )

121 
a
 = (
HEATER_EFFICIENCY
 * 860.0‡* (
F32
)
mHóãrW©t
) / 1000.0f ;

122 
b
 = 
mTempT¨gë
 - 
mTempIn
;

123 
c
 = 
a
/
b
;

124 
d
 = (
c
/60.0f);

125 
mT¨gëLPM
 = 
d
;

129 
HóãrFlow
.
RawT¨gëLPM
 = 
mT¨gëLPM
;

131  
HóãrFlow
.
RawT¨gëLPM
;

132 
	}
}

136 
	s_Êow_off£t_


138 
F32
 
	mOff£tLPM
;

140 
U16
 
	mDownCou¡
;

141 
U16
 
	mUpCou¡
;

142 
U16
 
	mSëCou¡
;

143 } 
	tFlowOff£t_T
;

145 
FlowOff£t_T
 
	gFlowOff£t
;

148 
	$InôOff£tLPM
()

150 
FlowOff£t
.
Off£tLPM
 = 0.0f;

152 
FlowOff£t
.
DownCou¡
 = 0;

153 
FlowOff£t
.
UpCou¡
 = 0;

154 
	}
}

156 
F32
 
	$GëFlowOff£tLPM
()

158  
FlowOff£t
.
Off£tLPM
;

159 
	}
}

161 
	$SëFlowOff£tLPM
(
F32
 
mLPM
)

163 
FlowOff£t
.
Off£tLPM
 = 
mLPM
;

164 
	}
}

166 
	#TEMP_HEATER_OVER_HEAT
 102.0f

	)

167 
	#OFFSET_TEMP
 1.0f

	)

169 
	#MAX_OFFSET_LPM
 0.10f

	)

170 
	#MIN_OFFSET_LPM
 -0.10f

	)

171 
	#ADJUST_LPM
 0.01f

	)

172 
F32
 
	$CÆcOff£tLPM
(
F32
 
mT¨gëLPM
, 
TEMP_T
 
tT¨gëOut
, TEMP_T 
tCuºítOut
 )

175 if–
tT¨gëOut
 > 
tCuºítOut
 - 
OFFSET_TEMP
 )

177 
FlowOff£t
.
UpCou¡
++;

178 
FlowOff£t
.
DownCou¡
 = 0;

181 if–
tT¨gëOut
 >
tCuºítOut
 - 5.0f )

183 if–
FlowOff£t
.
Off£tLPM
 < 0 )

185 
FlowOff£t
.
SëCou¡
 = 350;

189 
FlowOff£t
.
SëCou¡
 = 470;

194 
FlowOff£t
.
SëCou¡
 = 400;

197 if–
FlowOff£t
.
UpCou¡
 >FlowOff£t.
SëCou¡
 )

199 
FlowOff£t
.
UpCou¡
 = 0;

201 
FlowOff£t
.
Off£tLPM
 = FlowOff£t.Off£tLPM - 
ADJUST_LPM
;

204 if–
FlowOff£t
.
Off£tLPM
 <
MIN_OFFSET_LPM
 )

206 
FlowOff£t
.
Off£tLPM
 = 
MIN_OFFSET_LPM
;

211 if–
tT¨gëOut
 < 
tCuºítOut
 + 
OFFSET_TEMP
 )

213 
FlowOff£t
.
DownCou¡
++;

214 
FlowOff£t
.
UpCou¡
 = 0;

216 if–
FlowOff£t
.
DownCou¡
 >= 400 )

218 
FlowOff£t
.
DownCou¡
 = 0;

220 
FlowOff£t
.
Off£tLPM
 = FlowOff£t.Off£tLPM + 
ADJUST_LPM
;

223 if–
FlowOff£t
.
Off£tLPM
 >
MAX_OFFSET_LPM
 )

225 
FlowOff£t
.
Off£tLPM
 = 
MAX_OFFSET_LPM
;

232 
FlowOff£t
.
DownCou¡
 = 0;

233 
FlowOff£t
.
UpCou¡
 = 0;

236 if–
tCuºítOut
 >= 102.0f

237 || 
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 102.0f )

239 
FlowOff£t
.
Off£tLPM
 = 
MAX_OFFSET_LPM
;

242  
FlowOff£t
.
Off£tLPM
;

243 
	}
}

247 
	#ADJUST_FLOW_TIME
 10

249 
U16
 
mu16Adju°Time
 = 
ADJUST_FLOW_TIME
;

	)

250 
	$InôAdju°FlowVÆve
()

252 
mu16Adju°Time
 = 
ADJUST_FLOW_TIME
;

253 
	}
}

256 
F32
 
	gMöLPM
;

257 
U8
 
	$IsMöFlowVÆve
()

260 
MöLPM
 = 
	`GëHŸW©îT¨gëLPM
() - 0.2f;

261 if–
MöLPM
 <
MIN_LPM
 )

263 
MöLPM
 = 
MIN_LPM
;

266 if–
	`GëFlowMëîLPM
(Ë<
MöLPM
 )

268  
TRUE
;

271  
FALSE
;

272 
	}
}

275 
F32
 
	gMaxLPM
;

276 
U8
 
	$IsMaxFlowVÆve
()

279 
MaxLPM
 = 
	`GëHŸW©îT¨gëLPM
() + 0.2f;

280 if–
MaxLPM
 >
MAX_LPM
 )

282 
MaxLPM
 = 
MAX_LPM
;

289 if–
	`GëFlowMëîLPM
(Ë< 
MaxLPM
 )

291  
FALSE
;

294  
TRUE
;

295 
	}
}

299 
	#ADJUST_INTERVAL
 10

300 
	`Adju°FlowVÆveByTemp
(
TEMP_T
 
tT¨gë
, TEMP_T 
tCuºít
)

	)

302 
I16
 
	goff£t
 = 0;

303 
TEMP_T
 
	gtDñè
 = 0.0f;

306 if–
	gmu16Adju°Time
 != 0 )

308 
mu16Adju°Time
--;

312 
	gmu16Adju°Time
 = 
ADJUST_INTERVAL
;

314 
	gtDñè
 = 
tT¨gë
 - 
tCuºít
;

315 if–
	gtDñè
 > 2.0‡Ë{ 
	goff£t
 = 50; }

316 if–
	gtDñè
 > 1.5‡Ë{ 
	goff£t
 = 40; }

317 if–
	gtDñè
 > 1.0‡Ë{ 
	goff£t
 = 30; }

318 if–
	gtDñè
 > 0.5‡Ë{ 
	goff£t
 = 20; }

319 if–
	gtDñè
 < -0.5‡Ë{ 
	goff£t
 = -20; }

320 if–
	gtDñè
 < -1.0‡Ë{ 
	goff£t
 = -30; }

321 if–
	gtDñè
 < -1.5‡Ë{ 
	goff£t
 = -40; }

322 if–
	gtDñè
 < -2.0‡Ë{ 
	goff£t
 = -50; }

327 
U16
 
	gthe_adju°_Êow
 = 15;

329 
	#ADJUST_INTERVAL_FLOW
 
the_adju°_Êow


	)

331 
U8
 
	gthe_Êow_auto
 = 1;

332 
F32
 
	gdbg_t_dñè
 = 0;

333 
U8
 
	gdbg_Êow_˙t
 = 0;

334 
	$Adju°FlowVÆveByFlow
(
F32
 
mT¨gëLPM
, F32 
mCuºítLPM
)

336 
I16
 
off£t
 = 0;

337 
F32
 
tDñè
 = 0.0f;

340 if–
mu16Adju°Time
 != 0 )

342 if–
the_Êow_auto
)

343 
mu16Adju°Time
--;

347 
mu16Adju°Time
 = 
ADJUST_INTERVAL_FLOW
;

349 
tDñè
 = 
mT¨gëLPM
 - 
mCuºítLPM
;

350 
dbg_t_dñè
 = 
tDñè
;

357 if–
tDñè
 > 0.05‡Ë{ 
off£t
 = 50; }

358 if–
tDñè
 > 0.04‡Ë{ 
off£t
 = 40; }

359 if–
tDñè
 > 0.03‡Ë{ 
off£t
 = 30; }

360 if–
tDñè
 > 0.02‡Ë{ 
off£t
 = 20; }

362 if–
tDñè
 < -0.03‡Ë{ 
off£t
 = -30; }

363 if–
tDñè
 < -0.04‡Ë{ 
off£t
 = -40; }

364 if–
tDñè
 < -0.05‡Ë{ 
off£t
 = -50; }

367 if–
mT¨gëLPM
 > 
mCuºítLPM
 )

369 
off£t
 = 20;

373 
dbg_Êow_˙t
++;

374 if–
off£t
 > 0 )

376 if–
	`IsMaxFlowVÆve
(Ë!
TRUE
 )

378 
dbg_hŸ
.
adju°_up
++;

379 
	`FlowVÆveOff£t
–
off£t
 );

382 if–
off£t
 < 0 )

384 if–
	`IsMöFlowVÆve
(Ë!
TRUE
 )

386 
dbg_hŸ
.
adju°_down
++;

387 
	`FlowVÆveOff£t
–
off£t
 );

391 
	}
}

397 
	#PREHEAT_HIGH_LPM
 0.45f

	)

398 
	#PREHEAT_LOW_LPM
 0.35f

	)

400 
	#OFFSET_HIGH_LPM
 0.1f

	)

401 
	#OFFSET_LOW_LPM
 0.05f

	)

402 
F32
 
	$CÆcPªHótT¨gëLPM
(
F32
 
mLPM
)

404 
F32
 
mOff£tLPM
 = 0.0f;

407 if–
mLPM
 >
PREHEAT_HIGH_LPM
 )

409 
mOff£tLPM
 = 
OFFSET_HIGH_LPM
;

411 if–
mLPM
 >
PREHEAT_HIGH_LPM
 )

413 
mOff£tLPM
 = 
OFFSET_LOW_LPM
;

416  (
mLPM
 - 
mOff£tLPM
 );

417 
	}
}

421 
	$InôFlowVÆveSam∂eLPM
()

423 
CÆcFlow
.
IsSam∂ed
 = 
FALSE
;

424 
CÆcFlow
.
LPM
 = 0;

425 
CÆcFlow
.
Sãp
 = 0;

427 
	`FlowVÆveInô
();

428 
	}
}

430 
U8
 
	$IsCÆSam∂eLPM
()

432  
CÆcFlow
.
IsSam∂ed
;

433 
	}
}

436 
	$SëFlowVÆveSam∂eLPM
–
F32
 
mLPM
, 
I16
 
mSãp
)

438 
CÆcFlow
.
IsSam∂ed
 = 
TRUE
;

439 
CÆcFlow
.
LPM
 = 
mLPM
;

440 
CÆcFlow
.
Sãp
 = 
mSãp
;

441 
	}
}

443 
I16
 
	$FödOff£tVÆveSãp
(
F32
 
mLPM
)

445 
I16
 
mSãp
 = 0;

446 
F32
 
mDñèLPM
;

448 if–
CÆcFlow
.
LPM
 > 
mLPM
 )

450 
mDñèLPM
 = 
CÆcFlow
.
LPM
 - 
mLPM
;

451 
mDñèLPM
 += 0.005f;

452 
mDñèLPM
 *= 100.0f;

453 
mSãp
 = (
I16
)
mDñèLPM
;

454 
mSãp
 *= 10;

455 
mSãp
 = -mStep;

457 if–
CÆcFlow
.
LPM
 < 
mLPM
 )

459 
mDñèLPM
 = 
mLPM
 - 
CÆcFlow
.
LPM
;

460 
mDñèLPM
 += 0.005f;

461 
mDñèLPM
 *= 100.0f;

462 
mSãp
 = (
I16
)
mDñèLPM
;

463 
mSãp
 *= 10;

466  
mSãp
;

467 
	}
}

470 
I16
 
	$GëFlowVÆveSãp
(
F32
 
mLPM
)

472 if–
	`IsCÆSam∂eLPM
(Ë=
TRUE
 )

474  
	`FödOff£tVÆveSãp
–
mLPM
 );

477  
	`FödT¨gëVÆveSãp
–
mLPM
 );

478 
	}
}

493 
F32
 
	gdbg_ˇlc_off£t_Õm
 = 0.02f;

494 
	$CÆcHóãrT¨gëLPM
()

496 
TEMP_T
 
tIn
 = 0.0f;

497 
TEMP_T
 
tT¨gëOut
 = 0.0f;

498 
WATT_T
 
mHóãrW©t
 = 0;

499 
F32
 
mT¨gëLPM
;

503 
mHóãrW©t
 = 
	`GëHóãrW©t
();

504 
tT¨gëOut
 = 
	`GëHóãrTempT¨gëOut
();

505 
tIn
 = 
	`GëTemp
–
TEMP_ID_HOT_IN
 );

508 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_MILK
 )

510 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW
 )

512 
mHóãrW©t
 = (
WATT_T
)((
F32
)mHeaterWatt * 0.40f);

516 
mHóãrW©t
 = (
WATT_T
)((
F32
)mHeaterWatt * 0.42f);

520 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_TEA
 )

522 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) > 28.0f )

524 
mHóãrW©t
 = (
WATT_T
)((
F32
)mHeaterWatt * 0.40f);

531 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_HIGH


532 || 
	`GëHóãrCœss
(Ë=
HEATER_CLASS_MID
 )

534 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_MILK
 )

536 
mHóãrW©t
 = (
WATT_T
)((
F32
)mHeaterWatt * 0.40f);

538 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_TEA


539 && 
	`GëHŸOutRegi⁄TempIn
(Ë=
REGION_TEMP_HIGH
 )

541 
mHóãrW©t
 = (
WATT_T
)((
F32
)mHeaterWatt * 0.40f);

547 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_MILK


548 || 
	`GëHŸSñe˘
(Ë=
SEL_HOT_TEA
 )

550 
mHóãrW©t
 = (
WATT_T
)((
F32
)mHeaterWatt * 0.42f);

556 
mT¨gëLPM
 = 
	`CÆcT¨gëHz
–
tT¨gëOut
, 
tIn
, 
mHóãrW©t
 );

568 
mT¨gëLPM
 -= 0.02;

571 
HóãrFlow
.
T¨gëLPM
 = 
	`SëMöMaxF32
–
mT¨gëLPM
, 
MIN_LPM
, 
MAX_LPM
 );

572 
HóãrFlow
.
T¨gëHz
 = 
	`C⁄vLPM2Hz
–HóãrFlow.
T¨gëLPM
 );

576 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_flow.h

1 #i‚de‡
__HOT_WATER_FLOW_H__


2 
	#__HOT_WATER_FLOW_H__


	)

4 
	~"¥j_ty≥.h
"

12 
	#MIN_LPM
 0.3f

13 
	#MAX_LPM
 1.0f

14 

	)

16 
	s_hŸ_w©î_Êow_


19 
F32
 
	mRawT¨gëLPM
;

21 
F32
 
	mT¨gëLPM
;

22 
U16
 
	mT¨gëHz
;

23 
U16
 
	mT¨gëSãp
;

25 
U16
 
	mMaxHz
;

26 
U16
 
	mMöHz
;

27 } 
	tHŸW©îFlow_T
;

31 
InôHŸW©îFlow
();

33 
GëHŸW©îFlowD©a
(
HŸW©îFlow_T
 *
pD©a
);

36 
F32
 
GëHŸW©îT¨gëLPM
();

39 
U16
 
GëHŸW©îT¨gëHz
();

41 
InôOff£tLPM
();

42 
F32
 
GëFlowOff£tLPM
();

43 
SëFlowOff£tLPM
(
F32
 
mLPM
);

44 
F32
 
CÆcOff£tLPM
(F32 
mT¨gëLPM
, 
TEMP_T
 
tT¨gëOut
, TEMP_T 
tCuºítOut
 );

46 
InôAdju°FlowVÆve
();

47 
Adju°FlowVÆveByTemp
(
TEMP_T
 
tT¨gë
, TEMP_T 
tCuºít
);

48 
Adju°FlowVÆveByFlow
(
F32
 
mT¨gëLPM
, F32 
mCuºítLPM
);

52 
InôFlowVÆveSam∂eLPM
();

55 
U8
 
IsCÆSam∂eLPM
();

58 
SëFlowVÆveSam∂eLPM
(
F32
 
mLPM
, 
I16
 
mSãp
);

61 
I16
 
GëFlowVÆveSãp
(
F32
 
mLPM
);

65 
CÆcHóãrT¨gëLPM
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_heater.c

8 
	~"hŸ_w©î_hóãr.h
"

9 
	~"hÆ_adc.h
"

10 
	~"ãmp.h
"

11 
	~"utû.h
"

12 
	~"hóãr_out.h
"

13 
	~"hóãr_èbÀ.h
"

14 
	~"Êow_mëî.h
"

15 
	~"hŸ_w©î.h
"

17 
	~"hŸ_w©î_out.h
"

20 
	#CONFIG_HEATER_OFFSET
 1

21 

	)

30 
	#WATT_HIGH_IN
 3100U

31 
	#WATT_HIGH_OUT
 3003U

32 
	#WATT_MID_IN
 2717U

33 
	#WATT_MID_OUT
 2600U

34 #ñ£

	)

39 
	#WATT_HIGH_IN
 2905U

	)

40 
	#WATT_HIGH_OUT
 2870U

	)

41 
	#WATT_MID_IN
 2800U

	)

42 
	#WATT_MID_OUT
 2750U

	)

47 
	#STABLE_HEATER_WATT_TIME
 50U

49 
	#CHECK_HEATER_WATT_TIME
 50U

50 
	#MAX_HEATER_ADC_COUNT
 48U

	)

52 
	#TRANS_NORMAL
 0

	)

53 
	#TRANS_UP
 1

	)

54 
	#TRANS_DOWN
 2

	)

59 
AvîageAdc_T
 
	gHóãrAdc
;

60 
HŸW©îHóãr_T
 
	gHóãr
;

61 
HóãrOff£t_T
 
	gHóãrOff£t
;

63 
	$InôHŸW©îHóãr
()

65 
Hóãr
.
Cœss
 = 
HEATER_CLASS_MID
;

67 
Hóãr
.
Ba£W©t
 = 
MID_HEATER_WATT
;

68 
Hóãr
.
Off£tW©t
 = 0;

69 
Hóãr
.
W©t
 = 
MID_HEATER_WATT
;

71 
Hóãr
.
RawT¨gëW©t
 = 0;

72 
Hóãr
.
T¨gëW©t
 = 0;

73 
	}
}

76 
	$SëHŸW©îHóãrOff£tW©t
(
WATT_T
 
mW©t
)

78 
Hóãr
.
Off£tW©t
 = 
mW©t
;

79 
	}
}

81 
	$GëHŸW©îHóãrD©a
(
HŸW©îHóãr_T
 *
pD©a
)

83 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° __Á∏*)&
Hóãr
, –
HŸW©îHóãr_T
 ));

84 
	}
}

86 
	$SëHóãrTempT¨gëOut
(
TEMP_T
 
mT¨gëTemp
)

88 
Hóãr
.
T¨gëOut
 = 
mT¨gëTemp
;

89 
	}
}

91 
TEMP_T
 
	$GëHóãrTempT¨gëOut
()

93  
Hóãr
.
T¨gëOut
;

94 
	}
}

97 
WATT_T
 
	$SëMöMaxW©t
(
WATT_T
 
mW©t
, WATT_T 
mMö
, WATT_T 
mMax
 )

99 if–
mW©t
 <
mMö
 )

101 
mW©t
 = 
mMö
;

103 if–
mW©t
 >
mMax
 )

105 
mW©t
 = 
mMax
;

108  
mW©t
;

109 
	}
}

113 
	$CÆcW©t
()

115 
Hóãr
.
W©t
 = Hóãr.
Ba£W©t
 ;

116 
Hóãr
.
W©t
 = 
	`SëMöMaxW©t
–Hóãr.W©t, 
MIN_HEATER_WATT
, 
MAX_HEATER_WATT
 );

117 
	}
}

119 
HóãrCœss_T
 
	$GëHóãrCœss
()

121  
Hóãr
.
Cœss
;

123 
	}
}

125 
WATT_T
 
	$GëHóãrBa£W©t
()

127  
Hóãr
.
Ba£W©t
;

128 
	}
}

130 
WATT_T
 
	$GëHóãrW©t
()

132  
Hóãr
.
W©t
;

133 
	}
}

136 
	$Upd©eHóãrCœss
()

138 if–
Hóãr
.
Cœss
 =
HEATER_CLASS_MID
 )

140 if–
Hóãr
.
Ba£W©t
 <
WATT_MID_OUT
 )

142 
Hóãr
.
Cœss
 = 
HEATER_CLASS_LOW
;

144 if–
Hóãr
.
Ba£W©t
 >
WATT_HIGH_IN
 )

146 
Hóãr
.
Cœss
 = 
HEATER_CLASS_HIGH
;

150 if–
Hóãr
.
Cœss
 =
HEATER_CLASS_HIGH
 )

152 if–
Hóãr
.
Ba£W©t
 <
WATT_MID_OUT
 )

154 
Hóãr
.
Cœss
 = 
HEATER_CLASS_LOW
;

156 if–
Hóãr
.
Ba£W©t
 <
WATT_HIGH_OUT
 )

158 
Hóãr
.
Cœss
 = 
HEATER_CLASS_MID
;

164 if–
Hóãr
.
Ba£W©t
 >
WATT_HIGH_IN
 )

166 
Hóãr
.
Cœss
 = 
HEATER_CLASS_HIGH
;

168 if–
Hóãr
.
Ba£W©t
 >
WATT_MID_IN
 )

170 
Hóãr
.
Cœss
 = 
HEATER_CLASS_MID
;

174 
	}
}

177 
	$InôCheckHóãrW©t
()

179 
HóãrAdc
.
Sum
 = 0UL;

180 
HóãrAdc
.
Cou¡
 = 0U;

181 
HóãrAdc
.
Avîage
 = 0U;

183 
HóãrAdc
.
SèbÀTime
 = 
STABLE_HEATER_WATT_TIME
;

184 
HóãrAdc
.
CheckTime
 = 
CHECK_HEATER_WATT_TIME
;

185 
	}
}

188 
	$SumHóãrW©t
()

190 if–
HóãrAdc
.
Cou¡
 < 
MAX_HEATER_ADC_COUNT
 )

192 
HóãrAdc
.
Sum
 +
	`HAL_GëAdcVÆue
–
ANI_HEATER_FB
 );

193 
HóãrAdc
.
Cou¡
++;

195 
	}
}

197 
	$AvîageHóãrW©t
()

199 
HóãrAdc
.
Avîage
 = (
U16
)(HóãrAdc.
Sum
 / (
U32
)HóãrAdc.
Cou¡
);

200 
	}
}

205 
	$CÆcHóãrW©t
()

207 
Hóãr
.
RawW©t
 = 
	`CÆcHóãrAdc2W©t
–
HóãrAdc
.
Avîage
 );

209 
Hóãr
.
Ba£W©t
 = Hóãr.
RawW©t
;

210 
Hóãr
.
W©t
 = Hóãr.
RawW©t
;

211 
	`CÆcW©t
();

214 if–
Hóãr
.
W©t
 <
MIN_HEATER_WATT
 )

216 
Hóãr
.
Ba£W©t
 = 
MIN_HEATER_WATT
;

217 
Hóãr
.
W©t
 = 
MIN_HEATER_WATT
;

219 if–
Hóãr
.
W©t
 >
MAX_HEATER_WATT
 )

221 
Hóãr
.
Ba£W©t
 = 
MAX_HEATER_WATT
;

222 
Hóãr
.
W©t
 = 
MAX_HEATER_WATT
;

226 
	`Upd©eHóãrCœss
();

227 
	}
}

231 
	$CheckHóãrW©t
(
U16
 
mu16Ouçut
)

233 if–
mu16Ouçut
 < 100 )

236 
	`InôCheckHóãrW©t
();

241 if–
HóãrAdc
.
SèbÀTime
 != 0 )

243 
HóãrAdc
.
SèbÀTime
--;

248 if–
HóãrAdc
.
CheckTime
 != 0 )

250 
HóãrAdc
.
CheckTime
--;

252 
	`SumHóãrW©t
();

253 
	`AvîageHóãrW©t
();

254 
	`CÆcHóãrW©t
();

259 
	`InôCheckHóãrW©t
();

261 
	}
}

266 
	#TEMP_OVER_DANGER_DELAY
 5

	)

267 
	#TEMP_OVER_DANGER
 105.0f

	)

270 
	#HIGH_TEMP_OVER_OUT
 97.5f

	)

271 
	#HIGH_TEMP_OVER_HEATER
 96.0f

	)

276 
	#TEMP_OVER_OUT
 98.5f

	)

277 
	#TEMP_OVER_HEATER
 98.0f

	)

279 
	#TEMP_OVER_OUT
 97.5

	)

280 
	#TEMP_OVER_HEATER
 96.0

	)

283 
U16
 
	$CheckOvîHótög
(
I16
 
mi16Ouçut
)

285 
U16
 
mu16Dñay
 = 
TEMP_OVER_DANGER_DELAY
;

286 
TEMP_T
 
tOut
;

287 
TEMP_T
 
tHóãr
;

288 
I16
 
mi16NewOuçut
 = 100;

289 
TEMP_T
 
tOvîOut
 = 
TEMP_OVER_OUT
;

290 
TEMP_T
 
tOvîHót
 = 
TEMP_OVER_HEATER
;

293 if–
	`GëHóãrBa£W©t
(Ë>
HIGH_HEATER_WATT
 )

295 
tOvîOut
 = 
HIGH_TEMP_OVER_OUT
;

296 
tOvîHót
 = 
HIGH_TEMP_OVER_HEATER
;

299 if–
mi16Ouçut
 < 0 )

301 
mi16Ouçut
 = 0;

304 
tOut
 = 
	`GëTemp
–
TEMP_ID_HOT_OUT
 );

305 
tHóãr
 = 
	`GëTemp
–
TEMP_ID_HEATER
 );

306 if–
tOut
 >
TEMP_OVER_DANGER
 || 
tHóãr
 >= TEMP_OVER_DANGER )

308 if–
mu16Dñay
 != 0 )

310 
mu16Dñay
--;

314 
mi16NewOuçut
 = 20;

317 if–
tOut
 >
tOvîOut
 || 
tHóãr
 >
tOvîHót
 )

319 if–
	`GëHóãrBa£W©t
(Ë>
HIGH_HEATER_WATT
 )

321 
mi16NewOuçut
 = 55;

326 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) <= 13.0f )

328 
mi16NewOuçut
 = 80;

332 
mi16NewOuçut
 = 70;

335 
mi16NewOuçut
 = 80;

341 
mu16Dñay
 = 
TEMP_OVER_DANGER_DELAY
;

344 if–
mi16NewOuçut
 < 
mi16Ouçut
 )

346 
mi16Ouçut
 = 
mi16NewOuçut
;

349  
mi16Ouçut
;

350 
	}
}

354 
	$Re£tHóãrOff£t
()

356 
HóãrOff£t
.
Off£tW©t
 = 0;

358 
HóãrOff£t
.
PªvTøns
 = 0;

359 
HóãrOff£t
.
Tøns
 = 0;

361 
HóãrOff£t
.
UpCou¡
 = 0;

362 
HóãrOff£t
.
DownCou¡
 = 0;

363 
HóãrOff£t
.
SëCou¡
 = 10;

364 
	}
}

366 
	#OVER_OFFSET_TEMP
 1.0f

	)

367 
	#UNDER_OFFSET_TEMP
 0.5f

	)

368 
	#MAX_TEMP
 50

	)

369 
	#MIN_TEMP
 50

	)

371 
U16
 
	$GëUpCou¡
(
TEMP_T
 
tT¨gë
, TEMP_T 
tHŸOut
)

373 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

375 if–
tHŸOut
 < 95.0f )

385 if–
tT¨gë
 >
tHŸOut
 - 3.0f )

387 if–
HóãrOff£t
.
Off£tW©t
 < 0 )

398 
	}
}

399 
U16
 
	$GëDownCou¡
()

401 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) > 99.0f )

412 
	}
}

414 
	$CÆcOuçutOff£t
(
F32
 
mLPM
, 
TEMP_T
 
tT¨gë
, TEMP_T 
tHŸOut
)

416 
WATT_T
 
mW©t
;

421 
mW©t
 = 
	`GëW©tByLPM
–
mLPM
 );

423 
HóãrOff£t
.
Adju°W©t
 = 
mW©t
 / 2;

424 
HóãrOff£t
.
MaxW©t
 = 
mW©t
 * 
MAX_TEMP
;

425 
HóãrOff£t
.
MöW©t
 = -(
mW©t
 * 
MIN_TEMP
);

428 if–
tT¨gë
 > 
tHŸOut
 - 
UNDER_OFFSET_TEMP
 )

430 if–
HóãrOff£t
.
PªvTøns
 !HóãrOff£t.
Tøns
 )

432 
HóãrOff£t
.
PªvTøns
 = HóãrOff£t.
Tøns
;

434 
HóãrOff£t
.
Tøns
 = 
TRANS_UP
;

435 
HóãrOff£t
.
UpCou¡
++;

436 
HóãrOff£t
.
DownCou¡
 = 0;

439 
HóãrOff£t
.
SëCou¡
 = 
	`GëUpCou¡
–
tT¨gë
, 
tHŸOut
);

441 if–
HóãrOff£t
.
UpCou¡
 >HóãrOff£t.
SëCou¡
 )

443 
HóãrOff£t
.
UpCou¡
 = 0;

445 
HóãrOff£t
.
Off£tW©t
 +HóãrOff£t.
Adju°W©t
;

448 if–
HóãrOff£t
.
Off£tW©t
 >HóãrOff£t.
MaxW©t
 )

450 
HóãrOff£t
.
Off£tW©t
 = HóãrOff£t.
MaxW©t
;

455 if–
tT¨gë
 < 
tHŸOut
 + 
OVER_OFFSET_TEMP
 )

457 if–
HóãrOff£t
.
PªvTøns
 !HóãrOff£t.
Tøns
 )

459 
HóãrOff£t
.
PªvTøns
 = HóãrOff£t.
Tøns
;

461 
HóãrOff£t
.
Tøns
 = 
TRANS_DOWN
;

462 
HóãrOff£t
.
DownCou¡
++;

463 
HóãrOff£t
.
UpCou¡
 = 0;

466 if–
HóãrOff£t
.
DownCou¡
 >
	`GëDownCou¡
() )

468 
HóãrOff£t
.
DownCou¡
 = 0;

470 
HóãrOff£t
.
Off£tW©t
 -HóãrOff£t.
Adju°W©t
;

473 if–
HóãrOff£t
.
Off£tW©t
 <HóãrOff£t.
MöW©t
 )

475 
HóãrOff£t
.
Off£tW©t
 = HóãrOff£t.
MöW©t
;

481 if–
HóãrOff£t
.
PªvTøns
 !HóãrOff£t.
Tøns
 )

483 
HóãrOff£t
.
PªvTøns
 = HóãrOff£t.
Tøns
;

485 
HóãrOff£t
.
Tøns
 = 
TRANS_NORMAL
;

488 
HóãrOff£t
.
DownCou¡
 = 0;

489 
HóãrOff£t
.
UpCou¡
 = 0;

492 if–
HóãrOff£t
.
Tøns
 !
TRANS_NORMAL


493 && 
HóãrOff£t
.
PªvTøns
 !HóãrOff£t.
Tøns
 )

495 
HóãrOff£t
.
Off£tW©t
 = 0;

498 if–
tHŸOut
 >= 99.8f

499 || 
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 101.0f )

501 
HóãrOff£t
.
Off£tW©t
 = HóãrOff£t.
MöW©t
;

504 
	`SëHŸW©îHóãrOff£tW©t
–
HóãrOff£t
.
Off£tW©t
 );

505 
	}
}

510 
U16
 
	$CÆcOuçutR©e
(
WATT_T
 
mT¨gëW©t
, WATT_T 
mHóãrW©t
)

512 
U16
 
mu16Ouçut
;

513 
F32
 
VÆ
;

515 
VÆ
 = (((
F32
)
mT¨gëW©t
 / (F32)
mHóãrW©t
 ) * 100.0f );

516 if–
VÆ
 <= 0.0f )

518 
mu16Ouçut
 = 0;

522 
mu16Ouçut
 = (
U16
)
VÆ
;

525  
mu16Ouçut
;

526 
	}
}

529 
U16
 
	$CÆcHóãrOuçut
()

531  
	`CÆcOuçutR©e
–
Hóãr
.
T¨gëW©t
, Hóãr.
W©t
 );

532 
	}
}

540 
WATT_T
 
	$CÆcT¨gëW©t
–
F32
 
mf32CuºítLPM
, 
TEMP_T
 
tT¨gë
, TEMP_T 
tI≈ut
)

542 
F32
 
a
 = 0.0f;

543 
F32
 
b
 = 0.0f;

544 
F32
 
c
 = 0.0f;

545 
F32
 
d
 = 0.0f;

546 
F32
 
e
 = 0.0f;

550 if–
tT¨gë
 <
tI≈ut
 )

555 
a
 = 
mf32CuºítLPM
 * 60.0f;

556 
b
 = 
tT¨gë
 - 
tI≈ut
;

557 
c
 = 
a
 * 
b
;

558 
d
 = (
c
 / 860.0f);

559 
e
 = (
d
 / 
HEATER_EFFICIENCY
 ) * 1000.0f;

562 
Hóãr
.
RawT¨gëW©t
 = (
WATT_T
)(
e
);

565  
Hóãr
.
RawT¨gëW©t
;

567 
	}
}

572 
	$CÆcHóãrT¨gëW©t
(
F32
 
mf32LPM
)

574 
TEMP_T
 
tHŸIn
 = 0.0f;

576 
TEMP_T
 
tHŸT¨gëOut
 = 0.0f;

580 
tHŸT¨gëOut
 = 
	`GëHóãrTempT¨gëOut
();

581 
tHŸIn
 = 
	`GëTemp
–
TEMP_ID_HOT_IN
 );

583 
Hóãr
.
T¨gëW©t
 = 
	`CÆcT¨gëW©t
–
mf32LPM
, 
tHŸT¨gëOut
, 
tHŸIn
 );

585 #i‡
CONFIG_HEATER_OFFSET


587 
Hóãr
.
T¨gëW©t
 +Hóãr.
Off£tW©t
;

592 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_heater.h

5 #i‚de‡
__HOT_WATER_HEATER_H__


6 
	#__HOT_WATER_HEATER_H__


	)

8 
	~"¥j_ty≥.h
"

11 
	#MAX_HEATER_WATT
 3400U

	)

12 
	#MID_HEATER_WATT
 2900U

	)

13 
	#MIN_HEATER_WATT
 2300U

	)

15 
	#HIGH_HEATER_WATT
 3200U

	)

17 sig√d 
	tWATT_T
;

22 
	mHEATER_CLASS_LOW
,

23 
	mHEATER_CLASS_MID
,

24 
	mHEATER_CLASS_HIGH
,

25 
	mHEATER_CLASS_NUM


26 }
	tHóãrCœss_T
;

28 
	s_ba£_w©t_£nsög_


30 
U32
 
	mSum
;

31 
U16
 
	mCou¡
;

32 
U16
 
	mAvîage
;

34 
U16
 
	mSèbÀTime
;

35 
U16
 
	mCheckTime
;

36 } 
	tAvîageAdc_T
;

38 
	s_hŸ_w©î_hóãr_


41 
TEMP_T
 
	mT¨gëOut
;

43 
HóãrCœss_T
 
	mCœss
;

46 
WATT_T
 
	mRawW©t
;

47 
WATT_T
 
	mBa£W©t
;

49 
WATT_T
 
	mW©t
;

52 
WATT_T
 
	mRawT¨gëW©t
;

53 
WATT_T
 
	mT¨gëW©t
;

54 
WATT_T
 
	mOff£tW©t
;

55 } 
	tHŸW©îHóãr_T
;

57 
	s_hóãr_off£t_öfo_


59 
TEMP_T
 
	mtDñè
;

61 
U8
 
	mPªvTøns
;

62 
U8
 
	mTøns
;

64 
U16
 
	mUpCou¡
;

65 
U16
 
	mDownCou¡
;

66 
U16
 
	mSëCou¡
;

68 
WATT_T
 
	mOff£tW©t
;

69 
WATT_T
 
	mAdju°W©t
;

70 
WATT_T
 
	mMaxW©t
;

71 
WATT_T
 
	mMöW©t
;

73 } 
	tHóãrOff£t_T
;

76 
InôHŸW©îHóãr
();

78 
SëHŸW©îHóãrOff£tW©t
(
WATT_T
 
mW©t
);

80 
GëHŸW©îHóãrD©a
(
HŸW©îHóãr_T
 *
pD©a
);

82 
SëHóãrTempT¨gëOut
(
TEMP_T
 
mT¨gëTemp
);

84 
TEMP_T
 
GëHóãrTempT¨gëOut
();

86 
HóãrCœss_T
 
GëHóãrCœss
();

88 
WATT_T
 
GëHóãrBa£W©t
();

90 
WATT_T
 
GëHóãrW©t
();

93 
InôCheckHóãrW©t
();

94 
CheckHóãrW©t
(
U16
 
mu16Ouçut
);

97 
CÆcHóãrT¨gëW©t
(
F32
 
mf32LPM
);

99 
CÆcOuçutOff£t
(
F32
 
mLPM
, 
TEMP_T
 
tT¨gë
, TEMP_T 
tHŸOut
);

101 
U16
 
CheckOvîHótög
(
I16
 
mi16Ouçut
);

104 
Re£tHóãrOff£t
();

107 
U16
 
CÆcHóãrOuçut
();

109 
PªhótHóãrOuçut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_door.c

1 
	~"i˚_do‹.h
"

2 
	~"hÆ_°ï_mŸ‹.h
"

3 
	~"ªœy.h
"

4 
	~"i˚_fuŒ.h
"

5 
	~"i˚.h
"

8 
	#ICE_DOOR_ID
 
SM_ID_1


	)

9 
	#ICE_DOOR_SPEED
 
SM_SPEED_0


10 

	)

13 
	#ICE_DOOR_OPEN_STEP_VAL
 (-400)

14 
	#ICE_DOOR_CLOSE_STEP_VAL
 (400)

	)

17 
	#ICE_DOOR_MODE_NONE
 0x00

	)

18 
	#ICE_DOOR_MODE_INIT
 0x01

	)

19 
	#ICE_DOOR_MODE_CLOSE
 0x02

	)

20 
	#ICE_DOOR_MODE_OPEN
 0x04

	)

24 
	s_i˚_do‹_


27 
U8
 
	mSètus
;

30 
U8
 
	mMode
;

31 
U8
 
	mInôSãp
;

32 
U8
 
	mO≥nSãp
;

33 
U8
 
	mClo£Sãp
;

37 
U32
 
	mClo£Time
;

39 
U16
 
	mO≥nögTimeIŸ
;

40 
U16
 
	mO≥nögTime
;

41 } 
	tI˚Do‹_T
;

43 
I˚Do‹_T
 
	gDo‹
;

45 
	$InôI˚Do‹
()

47 
Do‹
.
Sètus
 = 
ICE_DOOR_CLOSE
;

49 
Do‹
.
Mode
 = 
ICE_DOOR_MODE_INIT
;

50 
Do‹
.
InôSãp
 = 0;

51 
Do‹
.
O≥nSãp
 = 0;

52 
Do‹
.
Clo£Sãp
 = 0;

55 
Do‹
.
Clo£Time
 = 
ICE_CLOSE_TIME
;

56 
Do‹
.
O≥nögTimeIŸ
 = 0;

57 
Do‹
.
O≥nögTime
 = 0;

59 
	`HAL_InôSãpVÆ
–
ICE_DOOR_ID
 );

60 
	`HAL_SëSãpS≥ed
–
ICE_DOOR_ID
, 
ICE_DOOR_SPEED
 );

61 
	}
}

63 
U16
 
	$GëI˚Do‹O≥nögTime
()

65  
Do‹
.
O≥nögTime
;

66 
	}
}

68 
	$SëI˚Do‹O≥nögTime
(
U16
 
mu16Time
)

70 
Do‹
.
O≥nögTime
 = 
mu16Time
;

71 
	}
}

73 
U16
 
	$GëI˚Do‹O≥nögTimeIŸ
()

75  
Do‹
.
O≥nögTimeIŸ
;

76 
	}
}

78 
	$SëI˚Do‹O≥nögTimeIŸ
(
U16
 
mu16Time
)

80 
Do‹
.
O≥nögTimeIŸ
 = 
mu16Time
;

81 
	}
}

83 
	$Cou¡ögI˚Do‹O≥nögTime
()

85 if–
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

87 if–
Do‹
.
O≥nögTime
< 65535U )

89 
Do‹
.
O≥nögTime
++;

92 if–
Do‹
.
O≥nögTimeIŸ
< 65535U )

94 
Do‹
.
O≥nögTimeIŸ
++;

98 
	}
}

100 
	$SëI˚Do‹C⁄fClo£dTime
(
U32
 
mu16Time
)

102 
Do‹
.
Clo£Time
 = 
mu16Time
;

103 
	}
}

105 
U32
 
	$GëI˚Do‹C⁄fClo£dTime
()

107  
Do‹
.
Clo£Time
;

108 
	}
}

111 
SëMode
(
U8
 
mu8Mode
 );

112 
CÀ¨Mode
(
U8
 
mu8Mode
 );

114 
U8
 
	$GëI˚Do‹Sètus
()

116  
Do‹
.
Sètus
;

117 
	}
}

123 
U8
 
	$IsO≥nI˚Do‹
()

125 if–
Do‹
.
Sètus
 =
ICE_DOOR_OPEN


126 || 
Do‹
.
Sètus
 =
ICE_DOOR_OPENING
 )

128  
TRUE
;

131  
FALSE
;

132 
	}
}

134 
	$SëI˚Do‹Sètus
(
U8
 
mu8Sètus
)

136 
Do‹
.
Sètus
 = 
mu8Sètus
;

137 if–
mu8Sètus
 =
ICE_DOOR_CLOSE
 )

139 
Do‹
.
Clo£Time
 = 
ICE_CLOSE_TIME
;

141 
	}
}

143 
	$O≥nI˚Do‹
()

145 
	`SëMode
–
ICE_DOOR_MODE_OPEN
 );

146 
	}
}

148 
	$Clo£I˚Do‹
()

150 
	`SëMode
–
ICE_DOOR_MODE_CLOSE
 );

151 
	}
}

155 
	$F‹˚dClo£I˚Do‹
()

160 if–
	`IsO≥nI˚Do‹
(Ë=
FALSE
 )

162 
	`SëMode
–
ICE_DOOR_MODE_INIT
 );

164 
	}
}

166 
	$SëMode
(
U8
 
mu8Mode
 )

168 
Do‹
.
Mode
 |
mu8Mode
;

169 if–
mu8Mode
 =
ICE_DOOR_MODE_OPEN
 )

171 
	`CÀ¨Mode
–
ICE_DOOR_MODE_CLOSE
 );

173 if–
mu8Mode
 =
ICE_DOOR_MODE_CLOSE
 )

175 
	`CÀ¨Mode
–
ICE_DOOR_MODE_OPEN
 );

182 
	}
}

184 
	$CÀ¨Mode
(
U8
 
mu8Mode
 )

186 
Do‹
.
Mode
 &~
mu8Mode
;

188 if–
mu8Mode
 =
ICE_DOOR_MODE_INIT
 )

190 
Do‹
.
InôSãp
 = 0;

192 if–
mu8Mode
 =
ICE_DOOR_MODE_OPEN
 )

194 
Do‹
.
Clo£Sãp
 = 0;

196 if–
mu8Mode
 =
ICE_DOOR_MODE_CLOSE
 )

198 
Do‹
.
O≥nSãp
 = 0;

204 
	}
}

208 
	$C⁄åﬁF‹˚dClo£I˚Do‹
()

211 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

213 
Do‹
.
Clo£Time
 = 
ICE_CLOSE_TIME
;

218 if–
Do‹
.
Clo£Time
 > 0 )

220 
Do‹
.
Clo£Time
--;

224 
	`F‹˚dClo£I˚Do‹
();

225 
Do‹
.
Clo£Time
 = 
ICE_CLOSE_TIME
;

226 
	}
}

229 
CÀ¨Mode
(
U8
 
mu8Mode
 );

230 
U8
 
InôDo‹
();

231 
U8
 
O≥nDo‹
();

232 
U8
 
Clo£Do‹
();

234 
U8
 
Te°Do‹
();

237 
U8
 
	gthe_ã°
 = 0;

238 
I16
 
	gdbg_vÆ
 = 10;

239 
U8
 
	gsm_id
 = 2;

241 
	$C⁄åﬁI˚Do‹
()

243 
U8
 
mu8Rë
 = 
FALSE
;

247 if–
the_ã°
 )

249 if–
	`HAL_IsD⁄eMoveSãp
–
sm_id
 ) =
TRUE
 )

251 
	`HAL_SëT¨gëSãp
–
sm_id
, 
	`HAL_GëT¨gëSãp
–sm_id ) + 
dbg_vÆ
 );

262 if–(
Do‹
.
Mode
 & 
ICE_DOOR_MODE_TEST
 ) == ICE_DOOR_MODE_TEST )

264 
mu8Rë
 = 
	`Te°Do‹
();

265 if–
mu8Rë
 =
TRUE
 )

267 
	`CÀ¨Mode
–
ICE_DOOR_MODE_TEST
 );

268 
	`SëI˚Do‹Sètus
–
ICE_DOOR_CLOSE
 );

272 
	`SëI˚Do‹Sètus
–
ICE_DOOR_CLOSING
 );

279 if–(
Do‹
.
Mode
 & 
ICE_DOOR_MODE_INIT
 ) == ICE_DOOR_MODE_INIT )

281 
mu8Rë
 = 
	`InôDo‹
();

282 if–
mu8Rë
 =
TRUE
 )

284 
	`CÀ¨Mode
–
ICE_DOOR_MODE_INIT
 );

285 
	`SëI˚Do‹Sètus
–
ICE_DOOR_CLOSE
 );

289 
	`SëI˚Do‹Sètus
–
ICE_DOOR_CLOSING
 );

295 if–(
Do‹
.
Mode
 & 
ICE_DOOR_MODE_OPEN
 ) == ICE_DOOR_MODE_OPEN )

297 
mu8Rë
 = 
	`O≥nDo‹
();

298 if–
mu8Rë
 =
TRUE
 )

300 
	`CÀ¨Mode
–
ICE_DOOR_MODE_OPEN
 );

301 
	`SëI˚Do‹Sètus
–
ICE_DOOR_OPEN
 );

305 
	`SëI˚Do‹Sètus
–
ICE_DOOR_OPENING
 );

311 if–(
Do‹
.
Mode
 & 
ICE_DOOR_MODE_CLOSE
 ) == ICE_DOOR_MODE_CLOSE )

313 
mu8Rë
 = 
	`Clo£Do‹
();

314 if–
mu8Rë
 =
TRUE
 )

316 
	`CÀ¨Mode
–
ICE_DOOR_MODE_CLOSE
 );

317 
	`SëI˚Do‹Sètus
–
ICE_DOOR_CLOSE
 );

319 
	`SèπCheckI˚FuŒ
();

323 
	`SëI˚Do‹Sètus
–
ICE_DOOR_CLOSING
 );

328 
	}
}

334 
	$Clo£SãpMŸ‹
()

337 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 
ICE_DOOR_CLOSE_STEP_VAL
 );

338 
	}
}

342 
	$O≥nSãpMŸ‹
()

345 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 
ICE_DOOR_OPEN_STEP_VAL
 );

346 
	}
}

351 
U8
 
	$InôDo‹
()

353  
Do‹
.
InôSãp
 )

356 
	`HAL_InôSãpVÆ
–
ICE_DOOR_ID
 );

357 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 
ICE_DOOR_CLOSE_STEP_VAL
 );

358 
Do‹
.
InôSãp
++;

362 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

364 
	`HAL_InôSãpVÆ
–
ICE_DOOR_ID
 );

365 
Do‹
.
InôSãp
++;

370  
TRUE
;

374  
FALSE
;

375 
	}
}

378 
U8
 
	$O≥nDo‹
()

380 
U16
 
mu16DñayTime
 = 0;

383  
Do‹
.
O≥nSãp
 )

386 
mu16DñayTime
 = 5;

388 
	`HAL_St›Move
–
ICE_DOOR_ID
 );

389 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 
ICE_DOOR_OPEN_STEP_VAL
 );

390 
Do‹
.
O≥nSãp
++;

394 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

396 
Do‹
.
O≥nSãp
++;

401 if–
mu16DñayTime
 == 0 )

403 
Do‹
.
O≥nSãp
++;

407 
mu16DñayTime
--;

412 
	`Tu∫OnRñay
–
RELAY_FEEDER_CW
 );

413 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

414 
Do‹
.
O≥nSãp
++;

418  
TRUE
;

422  
FALSE
;

424 
	}
}

428 
U8
 
	$Clo£Do‹
()

430 
U16
 
mu16DñayTime
 = 0;

433  
Do‹
.
Clo£Sãp
 )

436 
mu16DñayTime
 = 10;

437 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

438 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

439 
	`HAL_St›Move
–
ICE_DOOR_ID
 );

441 
Do‹
.
Clo£Sãp
++;

445 if–
mu16DñayTime
 == 0 )

447 
Do‹
.
Clo£Sãp
++;

451 
mu16DñayTime
--;

456 
	`HAL_St›Move
–
ICE_DOOR_ID
 );

457 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 0 );

458 
Do‹
.
Clo£Sãp
++;

462 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

464 
Do‹
.
Clo£Sãp
++;

469  
TRUE
;

473  
FALSE
;

474 
	}
}

476 
	#FEEDER_BACK_TIME
 20

477 
U8
 
	`Clo£Do‹
()

	)

479 
U16
 
	gmu16DñayTime
 = 0;

480 
U8
 
	gCÀ¨FìdîSètus
 = 
FALSE
;

483  
	gDo‹
.
	gClo£Sãp
 )

486 
mu16DñayTime
 = 10;

487 
	gCÀ¨FìdîSètus
 = 
FALSE
;

488 
Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

489 
Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

490 
HAL_St›Move
–
ICE_DOOR_ID
 );

492 
	gDo‹
.
	gClo£Sãp
++;

496 if–
mu16DñayTime
 == 0 )

498 
Do‹
.
Clo£Sãp
++;

502 
	gmu16DñayTime
--;

508 if–
GëI˚FuŒOutSètus
(Ë=
TRUE
 )

511 if–
Do‹
.
O≥nögTime
 >
ICE_DOOR_CLEAR_BACK_FEEDER_TIME
 )

514 
CÀ¨I˚FuŒOutSètus
();

515 
	gDo‹
.
	gO≥nögTime
 = 0;

519 if–
	gDo‹
.
	gO≥nögTime
 >
ICE_DOOR_OPEN_BACK_FEEDER_TIME
 )

522 
CÀ¨FìdîSètus
 = 
TRUE
;

523 
Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

524 
Tu∫OnRñay
–
RELAY_FEEDER_CCW
 );

526 
	gDo‹
.
	gO≥nögTime
 = 0;

527 
	gmu16DñayTime
 = 
FEEDER_BACK_TIME
;

532 
	gmu16DñayTime
 = 0;

535 
	gDo‹
.
	gO≥nögTime
 = 0;

538 
HAL_St›Move
–
ICE_DOOR_ID
 );

539 
HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 0 );

540 
	gDo‹
.
	gClo£Sãp
++;

544 if–
mu16DñayTime
 != 0 )

546 
mu16DñayTime
--;

549 if–
HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE


550 && 
mu16DñayTime
 == 0)

553 if–
CÀ¨FìdîSètus
 =
TRUE
 )

555 
CÀ¨I˚FuŒOutSètus
();

557 
Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

558 
Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

560 
	gDo‹
.
	gClo£Sãp
++;

565  
TRUE
;

569  
	gFALSE
;

575 
U8
 
	$Te°Do‹
()

577  
Do‹
.
Te°Sãp
 )

580 
	`Tu∫OffRñay
–
RELAY_FEEDER_CW
 );

581 
	`Tu∫OffRñay
–
RELAY_FEEDER_CCW
 );

582 
	`HAL_St›Move
–
ICE_DOOR_ID
 );

584 
Do‹
.
Te°Sãp
++;

588 
	`HAL_St›Move
–
ICE_DOOR_ID
 );

589 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 0 );

590 
Do‹
.
Te°Sãp
++;

594 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

596 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 
ICE_DOOR_OPEN_STEP_VAL
 );

597 
Do‹
.
Te°Sãp
++;

602 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

604 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 0 );

605 
Do‹
.
Te°Sãp
++;

611 
	`HAL_St›Move
–
ICE_DOOR_ID
 );

612 
	`HAL_SëT¨gëSãp
–
ICE_DOOR_ID
, 0 );

613 
Do‹
.
Te°Sãp
++;

617 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

619 
Do‹
.
Te°Sãp
++;

624  
TRUE
;

628  
FALSE
;

629 
	}
}

637 
	s_i˚_do‹_ª≥©_ã°_


639 
U8
 
	mRun
;

640 
U8
 
	mDñay
;

641 
U32
 
	mRïótCou¡
;

642 } 
	tI˚Do‹Te°_T
;

644 
I˚Do‹Te°_T
 
	gDo‹Te°
;

645 
	$TEST_SèπI˚Do‹
()

647 
Do‹Te°
.
Run
 = 
TRUE
;

648 
Do‹Te°
.
Dñay
 = 0;

649 
Do‹Te°
.
RïótCou¡
 = 0;

650 
	}
}

652 
	$TEST_St›I˚Do‹
()

654 
Do‹Te°
.
Run
 = 
FALSE
;

655 
	}
}

657 
	#TEST_DELAY
 0

	)

658 
	$TEST_RïótI˚Do‹
()

660 
U8
 
mu8ToggÀ
 = 0;

663 if–
Do‹Te°
.
Run
 =
FALSE
 )

668 if–
mu8ToggÀ
 != 0 )

670 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

672 
mu8ToggÀ
 = 0;

674 
Do‹Te°
.
RïótCou¡
++;

676 if–
Do‹Te°
.
Dñay
 != 0 )

678 
Do‹Te°
.
Dñay
--;

682 
	`Clo£I˚Do‹
();

686 
Do‹Te°
.
Dñay
 = 
TEST_DELAY
;

687 
	`O≥nI˚Do‹
();

692 if–
	`HAL_IsD⁄eMoveSãp
–
ICE_DOOR_ID
 ) =
TRUE
 )

694 
mu8ToggÀ
 = 1;

696 if–
Do‹Te°
.
Dñay
 != 0 )

698 
Do‹Te°
.
Dñay
--;

701 
	`O≥nI˚Do‹
();

705 
Do‹Te°
.
Dñay
 = 
TEST_DELAY
;

706 
	`Clo£I˚Do‹
();

709 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_door.h

1 #i‚de‡
__ICE_DOOR_H__


2 
	#__ICE_DOOR_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#ICE_DOOR_OPEN_ALARAM_TIME
 3

8 
	#ICE_DOOR_OPEN_BACK_FEEDER_TIME
 8

9 
	#ICE_DOOR_CLEAR_BACK_FEEDER_TIME
 20

10 

	)

11 
InôI˚Do‹
();

15 
U16
 
GëI˚Do‹O≥nögTime
();

16 
SëI˚Do‹O≥nögTime
(
U16
 
mu16Time
);

19 
U16
 
GëI˚Do‹O≥nögTimeIŸ
();

20 
SëI˚Do‹O≥nögTimeIŸ
(
U16
 
mu16Time
);

22 
Cou¡ögI˚Do‹O≥nögTime
();

25 
	#ICE_CLOSE_TIME
 86400UL

	)

26 
SëI˚Do‹C⁄fClo£dTime
(
U32
 
mu16Time
);

27 
U32
 
GëI˚Do‹C⁄fClo£dTime
();

30 
	#ICE_DOOR_OPEN
 0

31 
	#ICE_DOOR_OPENING
 1

32 
	#ICE_DOOR_CLOSE
 2

33 
	#ICE_DOOR_CLOSING
 3

34 
U8
 
	`GëI˚Do‹Sètus
();

	)

39 
U8
 
IsO≥nI˚Do‹
();

41 
O≥nI˚Do‹
();

42 
Clo£I˚Do‹
();

43 
F‹˚dClo£I˚Do‹
();

45 
C⁄åﬁF‹˚dClo£I˚Do‹
();

46 
C⁄åﬁI˚Do‹
();

48 
TEST_SèπI˚Do‹
();

49 
TEST_St›I˚Do‹
();

50 
TEST_RïótI˚Do‹
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_full.c

1 
	~"hw.h
"

2 
	~"hÆ_adc.h
"

3 
	~"i˚_fuŒ.h
"

6 
	#ICE_FULL_ADC_LEVEL
 300

	)

8 
	#CHECK_TIME
 100

	)

9 
	#CHECK_CONDITION
 50

	)

11 
I˚FuŒ_T
 
	gI˚FuŒ
;

14 
	$InôI˚FuŒ
()

16 
I˚FuŒ
.
FuŒ
 = 
FALSE
;

17 
I˚FuŒ
.
Out
 = 
FALSE
;

19 
I˚FuŒ
.
Sèπ
 = 
TRUE
;

20 
I˚FuŒ
.
CheckTime
 = 
CHECK_TIME
;

21 
I˚FuŒ
.
CheckCou¡
 = 0;

23 
I˚FuŒ
.
PowîOnCheck
 = 
FALSE
;

24 
	}
}

26 
	$GëI˚FuŒD©a
–
I˚FuŒ_T
 *
pI˚FuŒ
 )

28 
	`MEMCPY
–(
__Ár
 *)
pI˚FuŒ
, (c⁄° __Á∏*)&
I˚FuŒ
, –
I˚FuŒ_T
 ));

29 
	}
}

31 
U8
 
	$GëI˚FuŒSètus
()

33  
I˚FuŒ
.
FuŒ
;

34 
	}
}

36 
U8
 
	$GëI˚FuŒOutSètus
()

38  
I˚FuŒ
.
Out
;

39 
	}
}

41 
	$CÀ¨I˚FuŒOutSètus
()

43 
I˚FuŒ
.
Out
 = 
FALSE
;

44 
	}
}

46 
U8
 
	$GëI˚FuŒPowîOnCheck
()

48  
I˚FuŒ
.
PowîOnCheck
;

49 
	}
}

51 
	$SèπCheckI˚FuŒ
()

53 
I˚FuŒ
.
Sèπ
 = 
TRUE
;

54 
	}
}

64 
U8
 
	$IsD⁄eCheckI˚FuŒ
()

66 if–
I˚FuŒ
.
Sèπ
 =
TRUE
 )

68  
FALSE
;

71  
TRUE
;

72 
	}
}

74 
	$CheckI˚FuŒ
()

76 if–
I˚FuŒ
.
Sèπ
 =
FALSE
 )

83 if–
	`GET_STATUS_ICE_INFRARED
() == 0 )

85 
	`TURN_ON_ICE_INFRARED
();

87 
I˚FuŒ
.
CheckTime
 = 
CHECK_TIME
;

88 
I˚FuŒ
.
CheckCou¡
 = 0;

94 if–
	`HAL_GëAdcVÆue
–
ANI_SENSOR_INFRARED
 ) >
ICE_FULL_ADC_LEVEL
 )

96 
I˚FuŒ
.
CheckCou¡
++;

99 
I˚FuŒ
.
CheckTime
--;

100 if–
I˚FuŒ
.
CheckTime
 != 0 )

106 
I˚FuŒ
.
Sèπ
 = 
FALSE
;

107 
	`TURN_OFF_ICE_INFRARED
();

109 if–
I˚FuŒ
.
CheckCou¡
 >
CHECK_CONDITION
 )

111 
I˚FuŒ
.
FuŒ
 = 
FALSE
;

115 
I˚FuŒ
.
FuŒ
 = 
TRUE
;

116 
I˚FuŒ
.
Out
 = 
TRUE
;

120 
I˚FuŒ
.
PowîOnCheck
 = 
TRUE
;

121 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_full.h

1 #i‚de‡
__ICE_FULL_H__


2 
	#__ICE_FULL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_i˚_fuŒ_


9 
U8
 
	mFuŒ
;

10 
U8
 
	mOut
;

13 
U8
 
	mSèπ
;

14 
U8
 
	mCheckCou¡
;

15 
U16
 
	mCheckTime
;

17 
U8
 
	mPowîOnCheck
;

18 } 
	tI˚FuŒ_T
;

20 
InôI˚FuŒ
();

22 
GëI˚FuŒD©a
–
I˚FuŒ_T
 *
pI˚FuŒ
 );

24 
U8
 
GëI˚FuŒSètus
();

26 
U8
 
GëI˚FuŒOutSètus
();

27 
CÀ¨I˚FuŒOutSètus
();

29 
U8
 
GëI˚FuŒPowîOnCheck
();

31 
SèπCheckI˚FuŒ
();

32 
U8
 
IsD⁄eCheckI˚FuŒ
();

34 
CheckI˚FuŒ
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_tray.c

1 
	~"hw.h
"

2 
	~"i˚_åay.h
"

3 
	~"vÆve.h
"

4 
	~"ªœy.h
"

5 
	~"i˚.h
"

6 
	~"utû.h
"

7 
	~"w©î_out.h
"

8 
	~"døö_w©î.h
"

12 
	#STARTING_TIME
 500

13 
	#MOVING_TIME
 2000

14 
	#DEICING_DETECT_WAIT_TIME
 70

15 
	#ICING_DETECT_WAIT_TIME
 30

16 

	)

18 
	#ERR_ICING_COUNT
 (10U)

19 
	#ERR_DEICING_COUNT
 (3U)

20 
	#ERR_DEICING_ACCUM_COUNT
 (10U)

21 

	)

23 
	#ICE_TRAY_MODE_NONE
 0x00

	)

24 
	#ICE_TRAY_MODE_INIT
 0x01

	)

25 
	#ICE_TRAY_MODE_DEICING
 0x02

	)

26 
	#ICE_TRAY_MODE_ICING
 0x04

	)

29 
	#DETECT
 
LOW


	)

30 
	#UNDETECTED
 
HIGH


	)

33 
	#DEFAULT_CHECK_TIMER
 1000U

34 

	)

38 
	mSTEP_START
 = 0,

39 
	mSTEP_CHECK_STARTING
,

40 
	mSTEP_CHECK_MOVING
,

41 
	mSTEP_DONE
,

44 
	mSTEP_RR
 = 10,

45 
	mSTEP_RR_CTRL
,

48 
	mSTEP_RFD_START
 = 20,

49 
	mSTEP_RFD_CTRL
,

52 
	mSTEP_RCF_START
 = 30,

53 
	mSTEP_RCF
,

54 
	mSTEP_RCF_CTRL
,

55 
	mSTEP_RCF_REPEAT
,

57 
	mSTEP_ERROR
 = 40,

63 
	mRCF_WAIT
,

64 
	mRCF_TRAY
,

65 
	mRCF_FEEDER


72 c⁄° 
U32
 
	gRR_WaôTimeLi°
[] =

76 
	#SZ_RR_WAIT_TIME_LIST
 ((
RR_WaôTimeLi°
)/(
U32
))

	)

80 
	s_rcf_cmd_li°_


82 
U8
 
	mCmd
;

83 
U32
 
	mTime
;

84 } 
	tRCF_Li°_T
;

87 c⁄° 
RCF_Li°_T
 
	gRCF_Comm™dLi°
[] =

89 { 
RCF_WAIT
, 60000UL },

90 { 
RCF_TRAY
, 1000UL },

93 { 
RCF_TRAY
, 500UL },

94 { 
RCF_WAIT
, 60000UL },

97 { 
RCF_TRAY
, 500UL },

98 { 
RCF_WAIT
, 60000UL },

101 { 
RCF_TRAY
, 500UL },

102 { 
RCF_WAIT
, 60000UL },

105 { 
RCF_TRAY
, 500UL },

106 { 
RCF_WAIT
, 60000UL },

109 { 
RCF_TRAY
, 500UL },

110 { 
RCF_WAIT
, 60000UL },

113 { 
RCF_TRAY
, 500UL },

114 { 
RCF_WAIT
, 60000UL },

117 { 
RCF_TRAY
, 500UL },

118 { 
RCF_WAIT
, 60000UL },

121 { 
RCF_TRAY
, 500UL },

122 { 
RCF_WAIT
, 60000UL },

125 { 
RCF_TRAY
, 500UL },

126 { 
RCF_WAIT
, 60000UL },

129 { 
RCF_TRAY
, 500UL },

130 { 
RCF_WAIT
, 60000UL },

132 
	#SZ_RCF_CMD_LIST
 ((
RCF_Comm™dLi°
)/(
RCF_Li°_T
))

	)

135 
I˚Tøy_T
 
	gI˚Tøy
;

137 
	$InôI˚Tøy
()

139 
I˚Tøy
.
Sètus
 = 
ICE_TRAY_MOVING
;

140 
I˚Tøy
.
Mode
 = 
ICE_TRAY_MODE_INIT
;

141 
I˚Tøy
.
Eº‹Movög
 = 
FALSE
;

142 
I˚Tøy
.
Eº‹Mi¸oSwôch
 = 
FALSE
;

143 
I˚Tøy
.
Eº‹IcögCou¡
 = 0;

144 
I˚Tøy
.
Eº‹DeIcögCou¡
 = 0;

145 
I˚Tøy
.
Eº‹DeIcögAccumCou¡
 = 0;

147 
I˚Tøy
.
IcögSãp
 = 0;

148 
I˚Tøy
.
DeIcögSãp
 = 0;

149 
I˚Tøy
.
DeIcögDëe˘WaôTime
 = 0;

150 
I˚Tøy
.
IcögDëe˘WaôTime
 = 0;

153 
I˚Tøy
.
SèπTime
 = 0UL;

154 
I˚Tøy
.
MovögTime
 = 0UL;

157 
I˚Tøy
.
Posi_Icög
 = 
UNDETECTED
;

158 
I˚Tøy
.
Posi_DeIcög
 = 
UNDETECTED
;

159 
I˚Tøy
.
CheckTimî
 = 
DEFAULT_CHECK_TIMER
;

162 
I˚Tøy
.
RR_Cou¡
 = 0;

163 
I˚Tøy
.
RR_WaôTime
 = 0UL;

166 
I˚Tøy
.
RCF_Cmd
 = 
RCF_WAIT
;

167 
I˚Tøy
.
RCF_Time
 = 0;

168 
I˚Tøy
.
RCF_CmdCou¡
 = 0;

171 
I˚Tøy
.
RFD_WaôTime
 = 0;

174 
	}
}

176 
	$GëI˚TøyD©a
–
I˚Tøy_T
 *
pD©a
 )

178 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
I˚Tøy
, –
I˚Tøy_T
 ) );

179 
	}
}

182 
U8
 
	$IsRëryI˚Tøy
()

185 if–
I˚Tøy
.
IcögSãp
 =
STEP_RFD_CTRL
 )

187  
TRUE
;

190 if–
I˚Tøy
.
DeIcögSãp
 >
STEP_RCF
 )

196  
TRUE
;

199  
FALSE
;

201 if–
I˚Tøy
.
RCF_Time
 != 0 )

203  
TRUE
;

206 if–
I˚Tøy
.
RFD_WaôTime
 != 0 )

208  
TRUE
;

211  
FALSE
;

213 
	}
}

216 
U8
 
	$IsEº‹I˚TøyCoûFªzzög
()

218 if–
I˚Tøy
.
DeIcögSãp
 >
STEP_RCF_START
 )

220  
TRUE
;

223  
FALSE
;

224 
	}
}

226 
	$Re£tEº‹I˚TøyAccumCou¡
()

228 
I˚Tøy
.
Eº‹DeIcögAccumCou¡
 = 0;

229 
	}
}

231 
U8
 
	$GëI˚TøySètus
()

233  
I˚Tøy
.
Sètus
;

234 
	}
}

236 
	$SëI˚TøySètus
(
U8
 
mu8Sètus
)

238 
I˚Tøy
.
Sètus
 = 
mu8Sètus
;

239 
	}
}

241 
	$SëMode
(
U8
 
mu8Mode
 )

243 
I˚Tøy
.
Mode
 |
mu8Mode
;

244 
	}
}

246 
	$CÀ¨Mode
(
U8
 
mu8Mode
 )

248 
I˚Tøy
.
Mode
 &~
mu8Mode
;

249 
	}
}

252 
U8
 
	$GëI˚TøyEº‹Movög
()

254  
I˚Tøy
.
Eº‹Movög
;

255 
	}
}

257 
U8
 
	$GëI˚TøyEº‹Mi¸oSwôch
()

259  
I˚Tøy
.
Eº‹Mi¸oSwôch
;

260 
	}
}

262 
	$CÀ¨I˚TøyMode
()

264 
I˚Tøy
.
SèπTime
 = 0UL;

265 
I˚Tøy
.
MovögTime
 = 0UL;

268 
I˚Tøy
.
RR_Cou¡
 = 0;

269 
I˚Tøy
.
RR_WaôTime
 = 0UL;

272 
I˚Tøy
.
RCF_Cmd
 = 
RCF_WAIT
;

273 
I˚Tøy
.
RCF_Time
 = 0;

274 
I˚Tøy
.
RCF_CmdCou¡
 = 0;

277 
I˚Tøy
.
RFD_WaôTime
 = 0;

279 
I˚Tøy
.
DeIcögDëe˘WaôTime
 = 0;

280 
I˚Tøy
.
IcögDëe˘WaôTime
 = 0;

281 
	}
}

283 
	$MoveI˚TøyIcögEﬁ
()

285 
	`CÀ¨Mode
–
ICE_TRAY_MODE_INIT
 );

286 
	`MoveI˚TøyIcög
();

287 
	}
}

290 
U8
 
IsSëMode
(U8 
mu8Mode
);

291 
	$MoveI˚TøyIcög
()

293 
	`SëMode
–
ICE_TRAY_MODE_ICING
 );

294 
I˚Tøy
.
IcögSãp
 = 0;

296 if–
	`IsSëMode
–
ICE_TRAY_MODE_DEICING
 ) =
TRUE
 )

298 
	`CÀ¨I˚TøyMode
();

299 
	`CÀ¨Mode
–
ICE_TRAY_MODE_DEICING
 );

301 
	}
}

303 
	$MoveI˚TøyDeIcög
()

305 
	`SëMode
–
ICE_TRAY_MODE_DEICING
 );

306 
I˚Tøy
.
DeIcögSãp
 = 0;

308 if–
	`IsSëMode
–
ICE_TRAY_MODE_ICING
 ) =
TRUE
 )

310 
	`CÀ¨I˚TøyMode
();

311 
	`CÀ¨Mode
–
ICE_TRAY_MODE_ICING
 );

313 
	}
}

316 
	$Dëe˘Posôi⁄
()

318 
U8
 
mu8VÆ_1
;

319 
U8
 
mu8VÆ_2
;

324 
mu8VÆ_1
 = 
	`GET_MICRO_SW_ICE_TRAY_2
();

325 
	`Dñay_US
(3);

326 
mu8VÆ_2
 = 
	`GET_MICRO_SW_ICE_TRAY_2
();

327 } 
mu8VÆ_1
 !
mu8VÆ_2
 );

329 
I˚Tøy
.
Posi_Icög
 = 
mu8VÆ_1
;

334 
mu8VÆ_1
 = 
	`GET_MICRO_SW_ICE_TRAY_1
();

335 
	`Dñay_US
(3);

336 
mu8VÆ_2
 = 
	`GET_MICRO_SW_ICE_TRAY_1
();

337 } 
mu8VÆ_1
 !
mu8VÆ_2
 );

339 
I˚Tøy
.
Posi_DeIcög
 = 
mu8VÆ_1
;

340 
	}
}

342 
	$MoveTøyIcög
()

344 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

345 
	`Tu∫OnRñay
–
RELAY_ICE_TRAY_CW
 );

346 
	}
}

348 
	$MoveTøyDeIcög
()

350 
	`Tu∫OnRñay
–
RELAY_ICE_TRAY_CCW
 );

351 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

352 
	}
}

354 
	$St›Tøy
()

356 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

357 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

358 
	}
}

364 
U8
 
	$CheckEº‹I˚TøyPosôi⁄
()

366 
U16
 
mu16WaôTimî
 = 0;

367 
U8
 
mu8Cou¡
 = 3;

370 if–
mu16WaôTimî
 != 0 )

372 
mu16WaôTimî
--;

374 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

375 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

376  
FALSE
;

379 if–
I˚Tøy
.
Posi_DeIcög
 =
DETECT


380 && 
I˚Tøy
.
Posi_Icög
 =
DETECT
 )

382 
mu8Cou¡
--;

383 if–
mu8Cou¡
 == 0 )

385 
I˚Tøy
.
Eº‹Mi¸oSwôch
 = 
TRUE
;

389 
mu16WaôTimî
 = 6000U;

392  
FALSE
;

395 
mu8Cou¡
 = 3;

397  
TRUE
;

398 
	}
}

401 
	$Upd©eTimî
()

403 if–
I˚Tøy
.
SèπTime
 != 0UL )

405 
I˚Tøy
.
SèπTime
--;

408 if–
I˚Tøy
.
MovögTime
 != 0UL )

410 
I˚Tøy
.
MovögTime
--;

413 if–
I˚Tøy
.
RR_WaôTime
 != 0UL )

415 
I˚Tøy
.
RR_WaôTime
--;

418 if–
I˚Tøy
.
RCF_Time
 != 0UL )

420 
I˚Tøy
.
RCF_Time
--;

424 if–
I˚Tøy
.
RFD_WaôTime
 != 0UL )

426 
I˚Tøy
.
RFD_WaôTime
--;

430 if–
I˚Tøy
.
DeIcögDëe˘WaôTime
 != 0UL )

432 
I˚Tøy
.
DeIcögDëe˘WaôTime
--;

436 if–
I˚Tøy
.
IcögDëe˘WaôTime
 != 0UL )

438 
I˚Tøy
.
IcögDëe˘WaôTime
--;

440 
	}
}

444 
U8
 
	$MoveIcögRëry
()

446  
I˚Tøy
.
IcögSãp
 )

448 
STEP_START
:

450 if–
I˚Tøy
.
Posi_Icög
 =
UNDETECTED
 )

452 
	`MoveTøyIcög
();

453 
	`SëI˚TøySètus
–
ICE_TRAY_MOVING
 );

455 
I˚Tøy
.
MovögTime
 = 
MOVING_TIME
;

458 
I˚Tøy
.
SèπTime
 = 
STARTING_TIME
;

459 
I˚Tøy
.
IcögSãp
++;

463 
STEP_CHECK_STARTING
:

464 if–
I˚Tøy
.
Posi_DeIcög
 =
UNDETECTED
 )

467 
I˚Tøy
.
SèπTime
 = 0;

468 
I˚Tøy
.
IcögSãp
++;

473 if–
I˚Tøy
.
SèπTime
 == 0 )

475 
I˚Tøy
.
IcögSãp
 = 
STEP_RR
;

479 
STEP_CHECK_MOVING
:

480 if–
I˚Tøy
.
Posi_Icög
 =
DETECT
 )

482 if–
I˚Tøy
.
IcögDëe˘WaôTime
 == 0 )

484 
	`St›Tøy
();

486 
I˚Tøy
.
MovögTime
 = 0;

487 
I˚Tøy
.
IcögSãp
++;

493 
I˚Tøy
.
IcögDëe˘WaôTime
 = 
ICING_DETECT_WAIT_TIME
;

497 if–
I˚Tøy
.
MovögTime
 == 0 )

499 
I˚Tøy
.
IcögSãp
 = 
STEP_RFD_START
;

503 
STEP_DONE
:

504 
I˚Tøy
.
IcögSãp
 = 0;

505 
I˚Tøy
.
RR_Cou¡
 = 0;

506 
I˚Tøy
.
RCF_Cmd
 = 
RCF_WAIT
;

507 
I˚Tøy
.
RCF_Time
 = 0;

508 
I˚Tøy
.
RCF_CmdCou¡
 = 0;

509 
I˚Tøy
.
Eº‹IcögCou¡
 = 0;

511  
TRUE
;

514 
STEP_RR
:

515 
	`St›Tøy
();

516 
I˚Tøy
.
RR_WaôTime
 = 
RR_WaôTimeLi°
 [ I˚Tøy.
RR_Cou¡
 ];

517 
I˚Tøy
.
RR_Cou¡
++;

519 
I˚Tøy
.
IcögSãp
++;

522 
STEP_RR_CTRL
:

523 if–
I˚Tøy
.
RR_Cou¡
 >
SZ_RR_WAIT_TIME_LIST
 )

525 
I˚Tøy
.
RR_Cou¡
 = 0;

526 
I˚Tøy
.
IcögSãp
 = 
STEP_RFD_START
;

528 if–
I˚Tøy
.
RR_WaôTime
 == 0 )

530 
I˚Tøy
.
IcögSãp
 = 
STEP_START
;

535 
STEP_RFD_START
:

537 
	`St›I˚MakeLﬂd
();

538 
	`St›Tøy
();

539 
I˚Tøy
.
Eº‹IcögCou¡
++;

540 if–
I˚Tøy
.
Eº‹IcögCou¡
 > 
ERR_ICING_COUNT
 )

542 
I˚Tøy
.
IcögSãp
 = 
STEP_ERROR
;

546 
	`SëTøyDeicög
();

548 
I˚Tøy
.
RFD_WaôTime
 = (540000UL);

549 
I˚Tøy
.
IcögSãp
++;

552 
STEP_RFD_CTRL
:

553 if–
I˚Tøy
.
RFD_WaôTime
 == 0 )

556 
	`SëDummyDeicög
();

559 
I˚Tøy
.
IcögSãp
 = 0;

560 
I˚Tøy
.
RR_Cou¡
 = 0;

561 
I˚Tøy
.
RCF_Cmd
 = 
RCF_WAIT
;

562 
I˚Tøy
.
RCF_Time
 = 0;

563 
I˚Tøy
.
RCF_CmdCou¡
 = 0;

565  
TRUE
;

570 
STEP_ERROR
:

571 
I˚Tøy
.
Eº‹Movög
 = 
TRUE
;

576  
FALSE
;

577 
	}
}

580 
U8
 
	$IsUsögW©î
()

582 if–
	`GëW©îOut
(Ë=
TRUE


583 || 
	`IsSèπDøöW©î
(Ë=
TRUE


584 || 
	`IsO≥nVÆve
–
VALVE_HOT_IN
 ) =
TRUE


585 || 
	`IsO≥nVÆve
–
VALVE_COLD_DRAIN
 ) =
TRUE


586 || 
	`IsO≥nVÆve
–
VALVE_COLD_IN
 ) =
TRUE
 )

588  
TRUE
;

591  
FALSE
;

592 
	}
}

594 
U8
 
the_fûãr_›í
;

595 
U8
 
	$MoveDeIcögRëry
()

597  
I˚Tøy
.
DeIcögSãp
 )

599 
STEP_START
:

600 if–
I˚Tøy
.
Posi_DeIcög
 =
UNDETECTED
 )

602 
	`MoveTøyDeIcög
();

603 
	`SëI˚TøySètus
–
ICE_TRAY_MOVING
 );

605 
I˚Tøy
.
MovögTime
 = 
MOVING_TIME
;

608 
I˚Tøy
.
SèπTime
 = 
STARTING_TIME
;

609 
I˚Tøy
.
DeIcögSãp
++;

612 
STEP_CHECK_STARTING
:

613 if–
I˚Tøy
.
Posi_Icög
 =
UNDETECTED
 )

616 
I˚Tøy
.
SèπTime
 = 0;

617 
I˚Tøy
.
DeIcögSãp
++;

622 if–
I˚Tøy
.
SèπTime
 == 0 )

624 
I˚Tøy
.
DeIcögSãp
 = 
STEP_RR
;

628 
STEP_CHECK_MOVING
:

629 if–
I˚Tøy
.
Posi_DeIcög
 =
DETECT
 )

631 if–
I˚Tøy
.
DeIcögDëe˘WaôTime
 == 0 )

633 
	`St›Tøy
();

635 
I˚Tøy
.
MovögTime
 = 0;

636 
I˚Tøy
.
DeIcögSãp
++;

642 
I˚Tøy
.
DeIcögDëe˘WaôTime
 = 
DEICING_DETECT_WAIT_TIME
;

646 if–
I˚Tøy
.
MovögTime
 == 0 )

648 
I˚Tøy
.
DeIcögSãp
 = 
STEP_RCF_START
;

653 
STEP_DONE
:

654 
I˚Tøy
.
DeIcögSãp
 = 0;

655 
I˚Tøy
.
RR_Cou¡
 = 0;

656 
I˚Tøy
.
RCF_Cmd
 = 
RCF_WAIT
;

657 
I˚Tøy
.
RCF_Time
 = 0;

658 
I˚Tøy
.
RCF_CmdCou¡
 = 0;

664 
I˚Tøy
.
Eº‹DeIcögCou¡
 = 0;

666  
TRUE
;

669 
STEP_RR
:

670 
	`St›Tøy
();

671 
I˚Tøy
.
RR_WaôTime
 = 
RR_WaôTimeLi°
[ I˚Tøy.
RR_Cou¡
 ];

672 
I˚Tøy
.
RR_Cou¡
++;

674 
I˚Tøy
.
DeIcögSãp
++;

677 
STEP_RR_CTRL
:

678 if–
I˚Tøy
.
RR_Cou¡
 >
SZ_RR_WAIT_TIME_LIST
 )

680 
I˚Tøy
.
RR_Cou¡
 = 0;

681 
I˚Tøy
.
DeIcögSãp
 = 
STEP_RCF_START
;

683 if–
I˚Tøy
.
RR_WaôTime
 == 0 )

685 
I˚Tøy
.
DeIcögSãp
 = 
STEP_START
;

689 
STEP_RCF_START
:

691 
I˚Tøy
.
Eº‹DeIcögCou¡
++;

694 
I˚Tøy
.
Eº‹DeIcögAccumCou¡
++;

696 if–
I˚Tøy
.
Eº‹DeIcögCou¡
 > 
ERR_DEICING_COUNT


697 || 
I˚Tøy
.
Eº‹DeIcögAccumCou¡
 > 
ERR_DEICING_ACCUM_COUNT
 )

699 
I˚Tøy
.
DeIcögSãp
 = 
STEP_ERROR
;

704 
I˚Tøy
.
RCF_CmdCou¡
 = 0;

705 
I˚Tøy
.
DeIcögSãp
++;

708 
STEP_RCF
:

709 
	`St›Tøy
();

711 
I˚Tøy
.
RCF_Cmd
 = 
RCF_Comm™dLi°
[ I˚Tøy.
RCF_CmdCou¡
 ].
Cmd
;

712 
I˚Tøy
.
RCF_Time
 = 
RCF_Comm™dLi°
[ I˚Tøy.
RCF_CmdCou¡
 ].
Time
;

713 
I˚Tøy
.
RCF_CmdCou¡
++;

715 
I˚Tøy
.
DeIcögSãp
++;

718 
STEP_RCF_CTRL
:

720 if–
the_fûãr_›í
 =
TRUE
 )

726 if–
I˚Tøy
.
RCF_Time
 == 0 )

728 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

729 
I˚Tøy
.
DeIcögSãp
++;

733 if–
I˚Tøy
.
RCF_Cmd
 =
RCF_TRAY
 )

735 if–
	`IsUsögW©î
(Ë=
TRUE
 )

737 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

741 
	`O≥nVÆve
–
VALVE_ICE_TRAY_IN
 );

746 
	`Clo£VÆve
–
VALVE_ICE_TRAY_IN
 );

752 
STEP_RCF_REPEAT
:

754 if–
I˚Tøy
.
RCF_CmdCou¡
 >
SZ_RCF_CMD_LIST
 )

756 
I˚Tøy
.
RCF_CmdCou¡
 = 0;

757 
I˚Tøy
.
DeIcögSãp
 = 
STEP_START
;

761 
I˚Tøy
.
DeIcögSãp
 = 
STEP_RCF
;

765 
STEP_ERROR
:

767 
	`SëI˚MakeMode
–
ICE_MODE_OFF
 );

768 
I˚Tøy
.
Eº‹Movög
 = 
TRUE
;

773  
FALSE
;

774 
	}
}

779 
U16
 
	$CheckPosôi⁄Icög
()

782 if–
I˚Tøy
.
Mode
 !
ICE_TRAY_MODE_NONE
 )

784  
DEFAULT_CHECK_TIMER
;

788 if–
	`GëI˚TøySètus
(Ë!
ICE_TRAY_ICING
 )

790  
DEFAULT_CHECK_TIMER
;

794 if(
I˚Tøy
.
Posi_Icög
 =
DETECT
 )

796  
DEFAULT_CHECK_TIMER
;

800 if–
I˚Tøy
.
CheckTimî
 != 0 )

802 
I˚Tøy
.
CheckTimî
--;

803  
I˚Tøy
.
CheckTimî
;

806 
	`MoveI˚TøyIcög
();

807  
DEFAULT_CHECK_TIMER
;

808 
	}
}

811 
U8
 
	$IsSëMode
(
U8
 
mu8Mode
)

813 if–(
I˚Tøy
.
Mode
 & 
mu8Mode
 ) == mu8Mode )

815  
TRUE
;

818  
FALSE
;

819 
	}
}

822 
	$C⁄åﬁI˚Tøy
()

824 
U8
 
mu8Rë
 = 
FALSE
;

828 
	`Upd©eTimî
();

831 
	`Dëe˘Posôi⁄
();

835 if–
I˚Tøy
.
Eº‹Movög
 =
TRUE


836 || 
I˚Tøy
.
Eº‹Mi¸oSwôch
 =
TRUE
)

838 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CCW
 );

839 
	`Tu∫OffRñay
–
RELAY_ICE_TRAY_CW
 );

846 if–
	`CheckEº‹I˚TøyPosôi⁄
(Ë=
FALSE
 )

848 if–
I˚Tøy
.
Eº‹Mi¸oSwôch
 =
TRUE
 )

850 
	`SëI˚MakeMode
–
ICE_MODE_OFF
 );

856 if–
	`IsSëMode
–
ICE_TRAY_MODE_INIT
 ) =
TRUE
 )

858 
mu8Rë
 = 
	`MoveDeIcögRëry
();

859 if–
mu8Rë
 =
TRUE
 )

861 
	`CÀ¨Mode
–
ICE_TRAY_MODE_INIT
 );

862 
	`SëI˚TøySètus
–
ICE_TRAY_DEICING
 );

868 if–
	`IsSëMode
–
ICE_TRAY_MODE_DEICING
 ) =
TRUE
 )

870 
mu8Rë
 = 
	`MoveDeIcögRëry
();

871 if–
mu8Rë
 =
TRUE
 )

873 
	`CÀ¨Mode
–
ICE_TRAY_MODE_DEICING
 );

874 
	`SëI˚TøySètus
–
ICE_TRAY_DEICING
 );

880 if–
	`IsSëMode
–
ICE_TRAY_MODE_ICING
 ) =
TRUE
 )

882 
mu8Rë
 = 
	`MoveIcögRëry
();

883 if–
mu8Rë
 =
TRUE
 )

885 
	`CÀ¨Mode
–
ICE_TRAY_MODE_ICING
 );

886 
	`SëI˚TøySètus
–
ICE_TRAY_ICING
 );

894 
I˚Tøy
.
CheckTimî
 = 
	`CheckPosôi⁄Icög
();

895 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_tray.h

1 #i‚de‡
__ICE_TRAY_H__


2 
	#__ICE_TRAY_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_i˚_åay_


8 
U8
 
	mSètus
;

9 
U8
 
	mMode
;

10 
U8
 
	mEº‹Movög
;

11 
U8
 
	mEº‹Mi¸oSwôch
;

12 
U8
 
	mEº‹IcögCou¡
;

13 
U8
 
	mEº‹DeIcögCou¡
;

14 
U8
 
	mEº‹DeIcögAccumCou¡
;

17 
U8
 
	mIcögSãp
;

18 
U8
 
	mDeIcögSãp
;

21 
U32
 
	mSèπTime
;

22 
U32
 
	mMovögTime
;

25 
U8
 
	mPosi_Icög
;

26 
U8
 
	mPosi_DeIcög
;

27 
U16
 
	mDeIcögDëe˘WaôTime
;

28 
U16
 
	mIcögDëe˘WaôTime
;

29 
U16
 
	mCheckTimî
;

32 
U8
 
	mRR_Cou¡
;

33 
U32
 
	mRR_WaôTime
;

36 
U8
 
	mRCF_Cmd
;

37 
U32
 
	mRCF_Time
;

38 
U8
 
	mRCF_CmdCou¡
;

41 
U32
 
	mRFD_WaôTime
;

43 } 
	tI˚Tøy_T
;

45 
InôI˚Tøy
();

46 
GëI˚TøyD©a
–
I˚Tøy_T
 *
pD©a
 );

50 
U8
 
IsRëryI˚Tøy
();

55 
U8
 
IsEº‹I˚TøyCoûFªzzög
();

58 
Re£tEº‹I˚TøyAccumCou¡
();

60 
	#ICE_TRAY_MOVING
 0

	)

61 
	#ICE_TRAY_ICING
 1

	)

62 
	#ICE_TRAY_DEICING
 2

	)

63 
U8
 
GëI˚TøySètus
();

65 
U8
 
GëI˚TøyEº‹Movög
();

66 
U8
 
GëI˚TøyEº‹Mi¸oSwôch
();

68 
MoveI˚TøyIcögEﬁ
();

69 
MoveI˚TøyIcög
();

70 
MoveI˚TøyDeIcög
();

72 
C⁄åﬁI˚Tøy
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\leak.c

1 
	~"hw.h
"

2 
	~"hÆ_adc.h
"

3 
	~"Àak.h
"

6 
	#LEAK_ERROR_COUNT
 30

	)

8 
	#DEFAULT_WAIT_TIME
 50

	)

9 
	#DEFAULT_CHECK_TIME
 90

	)

10 
	#DEFAULT_CHECK_WAIT_TIME
 ( 
DEFAULT_CHECK_TIME
 - 10 )

	)

12 
Lókage_T
 
	gLók
;

15 
	$InôLók
()

17 
Lók
.
Sètus
 = 
FALSE
;

19 
Lók
.
WaôTime
 = 0;

20 
Lók
.
CheckTime
 = 
DEFAULT_CHECK_TIME
;

21 
Lók
.
CheckCou¡
 = 0;

23 
	`TURN_ON_LEAK_ONOFF
();

24 
	}
}

26 
	$GëLókD©a
–
Lókage_T
 *
pD©a
 )

28 
	`MEMCPY
–(
__Ár
 *)
pD©a
, (c⁄° 
__FAR
 *)&
Lók
, –
Lókage_T
 ));

29 
	}
}

31 
U8
 
	$GëLókSètus
()

33  
Lók
.
Sètus
;

34 
	}
}

36 
U8
 
	$IsLókSemi
()

38 
U16
 
mu16Adc
 = 0;

40 
	`TURN_ON_LEAK_ONOFF
();

42 
	`HAL_InôAdc
();

43 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_LEAK
 );

44 if–
mu16Adc
 > 50 )

46  
TRUE
;

49  
FALSE
;

50 
	}
}

52 
	$Pro˚ssLók
()

55 if–
Lók
.
WaôTime
 != 0 )

57 
Lók
.
WaôTime
--;

59 
Lók
.
CheckTime
 = 
DEFAULT_CHECK_TIME
;

60 
Lók
.
CheckCou¡
 = 0;

61 
	`TURN_OFF_LEAK_ONOFF
();

67 if–
Lók
.
CheckTime
 == 0 )

69 
Lók
.
WaôTime
 = 
DEFAULT_WAIT_TIME
;

72 if–
Lók
.
CheckCou¡
 >
LEAK_ERROR_COUNT
 )

74 
Lók
.
Sètus
 = 
TRUE
;

78 
Lók
.
Sètus
 = 
FALSE
;

85 
Lók
.
CheckTime
--;

90 
	`TURN_ON_LEAK_ONOFF
();

91 if–
Lók
.
CheckTime
 < 
DEFAULT_CHECK_WAIT_TIME
 )

93 
U16
 
mu16Adc
;

95 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_LEAK
 );

96 if–
mu16Adc
 >
LEAK_ADC_LEVEL
 )

98 
Lók
.
CheckCou¡
++;

102 
Lók
.
CheckCou¡
 = 0;

105 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\leak.h

1 #i‚de‡
__LEAK_H__


2 
	#__LEAK_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	#LEAK_ADC_LEVEL
 612

9 

	)

10 
	s_w©î_Àakage_


13 
U8
 
	mSètus
;

16 
U16
 
	mWaôTime
;

17 
U16
 
	mCheckTime
;

18 
U16
 
	mCheckCou¡
;

19 } 
	tLókage_T
;

21 
InôLók
();

23 
GëLókD©a
–
Lókage_T
 *
pD©a
 );

25 
U8
 
GëLókSètus
();

27 
U8
 
IsLókSemi
();

29 
Pro˚ssLók
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\process_make.c

1 
	~"¥o˚ss_make.h
"

2 
	~"comp.h
"

3 
	~"Án_mŸ‹.h
"

5 
	~"cﬁd_w©î.h
"

6 
	~"i˚.h
"

7 
	~"i˚_makî.h
"

8 
	~"gas_swôch_vÆve.h
"

9 
	~"ãmp.h
"

10 
	~"hŸ_w©î.h
"

12 
	$InôPro˚ssMake
()

14 
	`InôComp
();

15 
	`InôF™MŸ‹
();

16 
	}
}

21 
	$C⁄åﬁMakeCﬁdCúcuœãPump
()

23 
U16
 
mu16PumpOnTime
 = 0;

24 
U8
 
mu8PumpOn
 = 
FALSE
;

25 
U8
 
mu8PªvCmd
 = 
OFF
;

26 
U8
 
mu8Cmd
 = 
OFF
;

30 if–
	`GëTemp
–
TEMP_ID_COLD_WATER
 ) >= 10.0f )

32 
mu8Cmd
 = 
OFF
;

36 
mu8Cmd
 = 
ON
;

40 if–
	`GëTemp
–
TEMP_ID_AMBIENT
 ) >= 30.0f )

42 
mu8Cmd
 = 
OFF
;

45 if–
mu8PªvCmd
 !
mu8Cmd
 )

47 if–
mu8Cmd
 =
ON
 && 
mu8PumpOn
 =
FALSE
 )

49 
mu16PumpOnTime
 = 30;

51 
mu8PªvCmd
 = 
mu8Cmd
;

54 if–
mu16PumpOnTime
 != 0 )

56 
mu16PumpOnTime
--;

59 if–
mu16PumpOnTime
 !0 || 
mu8Cmd
 =
ON
 )

61 
mu8PumpOn
 = 
TRUE
;

62 
	`Tu∫OnCúcuœãPumpMakeCﬁd
();

66 
mu8PumpOn
 = 
FALSE
;

67 
	`Tu∫OffCúcuœãPumpMakeCﬁd
();

69 
	}
}

73 
	$Pro˚ssMakeCﬁdW©î
()

80 if–
	`IsSëCﬁdW©îMakeMode
–
COLD_MODE_INIT
 ) =
TRUE
 )

84 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
TRUE


85 && 
	`IsExpúedHóãrOnTime
(Ë=
TRUE
 )

87 
	`GasSwôchCﬁd
();

88 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_INIT
 );

89 
	`Re£tCﬁdAmou¡
();

92 if–
	`IsSëCﬁdW©îMakeMode
–
COLD_MODE_DONE
 ) =
TRUE
 )

94 
	`Tu∫OffComp
(
COMP_TYPE_COLD
);

95 
	`Tu∫OffF™
(
FAN_TYPE_COLD
);

97 
	`Cou¡CﬁdW©îRe°¨tögCou¡
();

98 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_COOLING
 );

99 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_DONE
 );

101 if–
	`IsSëCﬁdW©îMakeMode
–
COLD_MODE_COOLING
 ) =
TRUE
 )

103 
RPS_T
 
mRps
;

105 
mRps
 = 
	`GëCﬁdW©îMakeCompRps
();

106 
	`Tu∫OnCompRps
(
COMP_TYPE_COLD
, 
mRps
 );

107 
	`Tu∫OnF™
(
FAN_TYPE_COLD
);

112 
	`Tu∫OffComp
(
COMP_TYPE_COLD
);

113 
	`Tu∫OffF™
(
FAN_TYPE_COLD
);

115 
	}
}

117 
	$Pro˚ssMakeI˚
()

120 
	`Pro˚ssI˚Makî
();

121 
	}
}

125 
	$MakeCﬁdW©îMode
()

127 
U8
 
mu8PªvMake
 = 
FALSE
;

128 
U8
 
mu8Make
;

129 
U8
 
mu8Mode
;

132 
mu8Make
 = 
	`GëCﬁdW©îMake
();

133 
mu8Mode
 = 
	`GëCﬁdW©îMakeMode
();

137 if–
mu8PªvMake
 !
mu8Make
 )

140 if–
mu8Make
 =
TRUE
 )

142 if–
mu8Mode
 =
COLD_MODE_NONE
 )

144 
	`SëCﬁdW©îMakeMode
–
COLD_MODE_INIT
 | 
COLD_MODE_COOLING
 );

150 if–
mu8Mode
 !
COLD_MODE_NONE
 )

152 
	`SëCﬁdW©îMakeMode
–
COLD_MODE_DONE
 );

156 
mu8PªvMake
 = 
mu8Make
;

158 if–
mu8Make
 =
TRUE
 )

161 if–
mu8Mode
 =
COLD_MODE_NONE
 )

163 
	`SëCﬁdW©îMakeMode
–
COLD_MODE_INIT
 | 
COLD_MODE_COOLING
 );

166 
	}
}

168 
	#PREHEAT_DETECT_TIME
 1800UL

169 
	#PREHEAT_RELEASE_TIME
 180UL

170 

	)

171 
U8
 
	gDebugPªhót
 = 
OFF
;

172 
U8
 
	$GëPªhótSètus
()

174 
U8
 
mu8Pªhót
 = 
OFF
;

175 if–
	`GëCompOnOff
(Ë=
TRUE
 )

177 if–
	`GëCompOnTime
(Ë>
PREHEAT_RELEASE_TIME
 )

179 
mu8Pªhót
 = 
OFF
;

184 if–
	`GëCompOffTime
(Ë>
PREHEAT_DETECT_TIME
 )

186 
mu8Pªhót
 = 
ON
;

189 
DebugPªhót
 = 
mu8Pªhót
;

190  
mu8Pªhót
;

191 
	}
}

193 
	$MakeI˚MakeMode
()

195 
U8
 
mu8PªvMake
 = 
FALSE
;

196 
U8
 
mu8Make
;

197 
U16
 
mu16Mode
;

198 
U8
 
mu8Pªhót
;

202 
mu8Make
 = 
	`GëI˚Make
();

203 
mu16Mode
 = 
	`GëI˚MakeMode
();

204 
mu8Pªhót
 = 
	`GëPªhótSètus
();

205 if–
mu8PªvMake
 !
mu8Make
 )

208 if–
mu8Make
 =
TRUE
 )

210 if–
mu16Mode
 =
ICE_MODE_NONE
 )

212 if–
mu8Pªhót
 =
ON
 )

214 
	`SëI˚MakeMode
–
ICE_MODE_PREHEAT
 );

216 
	`SëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
);

217 
	`CÀ¨I˚MakeMode
–
ICE_MODE_DEICING_OFF
 );

224 if–
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


225 || 
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


226 || 
	`IsSëI˚MakeMode
–
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


227 || 
	`IsSëI˚MakeMode
–
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

229 
	`CÀ¨I˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 );

230 
	`SëI˚MakeMode
–
ICE_MODE_INIT
 );

234 
	`SëI˚MakeMode
–
ICE_MODE_DEICING_OFF
 );

237 
mu8PªvMake
 = 
mu8Make
;

239 if–
mu8Make
 =
TRUE
 )

242 if–
mu16Mode
 =
ICE_MODE_NONE
 )

244 if–
mu8Pªhót
 =
ON
 )

246 
	`SëI˚MakeMode
–
ICE_MODE_PREHEAT
 );

248 
	`SëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
);

249 
	`CÀ¨I˚MakeMode
–
ICE_MODE_DEICING_OFF
 );

254 if–
mu8Make
 =
FALSE
 )

256 if–
mu16Mode
 =
ICE_MODE_DUMMY_DEICING


257 || 
mu16Mode
 =
ICE_MODE_TRAY_DEICING
 )

259 
	`SëI˚MakeMode
–
ICE_MODE_DEICING_OFF
 );

263 
	}
}

266 #i‡
CONFIG_ENABLE_DEICING_COOLING


272 
	#DEFAULT_AMBI_TIMER
 10

273 
U8
 
	`IsUndîTempAmbi
(
TEMP_T
 
tAmbi
 )

	)

275 
U16
 
	gmu16AmbiTimî
 = 
DEFAULT_AMBI_TIMER
;

278 if–(
GëTemp
(
TEMP_ID_AMBIENT
Ë< 
	gtAmbi
 ) )

280 if–
	gmu16AmbiTimî
 != 0 )

282 
mu16AmbiTimî
--;

286  
	gTRUE
;

291 
	gmu16AmbiTimî
 = 
DEFAULT_AMBI_TIMER
;

294  
	gFALSE
;

302 
	$M™agîI˚CﬁdMode
()

304 
U8
 
mu8CﬁdMode
;

305 
U16
 
mu16I˚Mode
;

308 
mu8CﬁdMode
 = 
	`GëCﬁdW©îMakeMode
();

309 
mu16I˚Mode
 = 
	`GëI˚MakeMode
();

313 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 ) =
TRUE


314 || 
	`IsSëI˚MakeMode
–
ICE_MODE_TRAY_DEICING
 ) =
TRUE
 )

316 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

329 if–
mu8CﬁdMode
 !
COLD_MODE_NONE


330 && 
mu16I˚Mode
 !
ICE_MODE_NONE
 )

332 if–
	`GëI˚Turbo
(Ë=
TRUE
 )

335 if–
mu16I˚Mode
 !
ICE_MODE_DEICING


336 && 
mu16I˚Mode
 !–
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 )

337 && 
mu16I˚Mode
 !–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 )

338 && 
mu16I˚Mode
 !–
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 )

339 && 
mu16I˚Mode
 !–
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) )

341 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

347 if–
	`IsUndîTempAmbi
–20.0‡Ë=
TRUE
 )

349 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

354 if–
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


355 || 
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

358 
	`CÀ¨I˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 );

360 if–
	`IsSëI˚MakeMode
–
ICE_MODE_PREHEAT
 ) =
TRUE


361 || 
	`IsSëI˚MakeMode
–
ICE_MODE_READY
 ) =
TRUE


362 || 
	`IsSëI˚MakeMode
–
ICE_MODE_ICING
 ) =
TRUE
 )

365 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

367 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DEICING
 ) =
TRUE
 )

370 if–
	`IsUndîTempAmbi
–20.0‡Ë=
TRUE
 )

372 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

377 
	}
}

379 
	$M™agîI˚CﬁdMode
()

381 
U8
 
mu8CﬁdMode
;

382 
U16
 
mu16I˚Mode
;

385 
mu8CﬁdMode
 = 
	`GëCﬁdW©îMakeMode
();

386 
mu16I˚Mode
 = 
	`GëI˚MakeMode
();

390 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 ) =
TRUE


391 || 
	`IsSëI˚MakeMode
–
ICE_MODE_TRAY_DEICING
 ) =
TRUE
 )

393 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

406 if–
mu8CﬁdMode
 !
COLD_MODE_NONE


407 && 
mu16I˚Mode
 !
ICE_MODE_NONE
 )

409 if–
	`GëI˚Turbo
(Ë=
TRUE
 )

411 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

415 if–
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE


416 || 
	`IsSëI˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 ) =
TRUE
 )

419 
	`CÀ¨I˚MakeMode
–
ICE_MODE_INIT
 | 
ICE_MODE_PREHEAT
 | 
ICE_MODE_READY
 | 
ICE_MODE_ICING
 | 
ICE_MODE_DEICING
 );

421 if–
	`IsSëI˚MakeMode
–
ICE_MODE_PREHEAT
 ) =
TRUE


422 || 
	`IsSëI˚MakeMode
–
ICE_MODE_READY
 ) =
TRUE


423 || 
	`IsSëI˚MakeMode
–
ICE_MODE_ICING
 ) =
TRUE
 )

426 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

428 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DEICING
 ) =
TRUE


429 || 
	`IsSëI˚MakeMode
–
ICE_MODE_DEICING_OFF
 ) =
TRUE
 )

432 
	`CÀ¨CﬁdW©îMakeMode
–
COLD_MODE_ALL
 );

436 
	}
}

440 
	$Pro˚ssMake
()

442 #i‡!
CONFIG_JIG_GAS_SWITCH


444 
	`MakeI˚MakeMode
();

445 
	`MakeCﬁdW©îMode
();

446 
	`M™agîI˚CﬁdMode
();

449 
	`Pro˚ssMakeCﬁdW©î
();

452 
	`Pro˚ssMakeI˚
();

456 
	`Pro˚ssComp
();

457 
	`C⁄åﬁF™MŸ‹
();

459 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\process_make.h

1 #i‚de‡
__PROCESS_MAKE_H__


2 
	#__PROCESS_MAKE_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôPro˚ssMake
();

8 
Pro˚ssMake
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\relay.c

1 
	~"hÆ_ªœy.h
"

2 
	~"ªœy.h
"

5 
	#MK_EX_TYPE
 ( 
RELAY_COMP
 )

	)

7 
	#MK_CON_TYPE
 ( ~
MK_EX_TYPE
 )

	)

19 
	s_io_ªœy_


21 
U16
 
	mCmd
;

22 
U16
 
	mCur
;

25 
U16
 
	mCmdEx
;

26 
U16
 
	mCurEx
;

29 
U16
 
	mCmdC⁄
;

30 
U16
 
	mCurC⁄
;

32 
U8
 
	mTEST_Cou¡
;

33 } 
	tIO_Rñay_T
;

35 
IO_Rñay_T
 
	gªœy
;

38 
	$InôRñay
()

40 
ªœy
.
Cmd
 = 0;

41 
ªœy
.
Cur
 = 0;

43 
ªœy
.
CmdEx
 = 0;

44 
ªœy
.
CurEx
 = 0;

46 
ªœy
.
CmdC⁄
 = 0;

47 
ªœy
.
CurC⁄
 = 0;

48 
ªœy
.
TEST_Cou¡
 = 0;

49 
	}
}

52 
	$Tu∫OnRñay
(
U16
 
mu16Rñay
)

54 if–(
mu16Rñay
 & 
MK_EX_TYPE
 ) != 0 )

56 
ªœy
.
CmdEx
 |(
mu16Rñay
 & 
MK_EX_TYPE
);

60 
ªœy
.
CmdC⁄
 |(
mu16Rñay
 & 
MK_CON_TYPE
);

62 
	}
}

64 
	$Tu∫OffRñay
(
U16
 
mu16Rñay
)

66 
ªœy
.
Cmd
 &~
mu16Rñay
;

68 if–(
mu16Rñay
 & 
MK_EX_TYPE
 ) != 0 )

70 
ªœy
.
CmdEx
 &~(
mu16Rñay
 & 
MK_EX_TYPE
);

74 
ªœy
.
CmdC⁄
 &~(
mu16Rñay
 & 
MK_CON_TYPE
);

76 
	}
}

78 
	$Tu∫OffRñayAŒ
()

80 
ªœy
.
Cmd
 = 0;

81 
ªœy
.
CmdEx
 = 0;

82 
ªœy
.
CmdC⁄
 = 0;

83 
	}
}

85 
U8
 
	$IsTu∫OnRñay
(
U16
 
mu16Rñay
)

87 
U16
 
mu16Cmd
;

89 
mu16Cmd
 = 
ªœy
.
CmdEx
 |Ññay.
CmdC⁄
;

90 if–(
mu16Cmd
 & 
mu16Rñay
) == mu16Relay )

92  
TRUE
;

95  
FALSE
;

96 
	}
}

98 
U16
 
	$GëRñaySètus
()

100 
U16
 
mu16Cmd
;

102 
mu16Cmd
 = 
ªœy
.
CurEx
 |Ññay.
CurC⁄
;

103  
mu16Cmd
;

104 
	}
}

106 
U16
 
	$OnOffRñay
(
U8
 
mu8Ex
, 
U16
 
mu16Cur
, U16 
mu16Cmd
)

108 
U8
 
i
;

109 
U16
 
mu16VÆ
;

110 
U16
 
mu16Diff
;

114 
mu16Diff
 = 
mu16Cur
 ^ 
mu16Cmd
;

115 if–
mu16Diff
 == 0 )

118  
mu16Cur
;

122  
i
 = 0; i < 16 ; i++ )

125 
mu16VÆ
 = 1 << 
i
;

126 if–
mu16Diff
 & 
mu16VÆ
 )

129 if––
mu16Cmd
 & 
mu16VÆ
 ) == 0 )

131 
	`HAL_Tu∫OffRñay
–
i
 );

132 
mu16Cur
 &~
mu16VÆ
;

138 
mu16Diff
 = 
mu16Cur
 ^ 
mu16Cmd
;

139 if–
mu16Diff
 == 0 )

142  
mu16Cur
;

145  
i
 = 0 ; i < 16 ; i++ )

148 
mu16VÆ
 = 1 << 
i
;

149 if–
mu16Diff
 & 
mu16VÆ
 )

152 if––
mu16Cmd
 & 
mu16VÆ
) != 0 )

154 
	`HAL_Tu∫OnRñay
–
i
 );

155 
mu16Cur
 |
mu16VÆ
;

158 if–
mu8Ex
 =
TRUE
 )

160  
mu16Cur
;

166  
mu16Cur
;

167 
	}
}

169 
	$C⁄åﬁRñayEx˛usive
()

171 
ªœy
.
CurEx
 = 
	`OnOffRñay
–
TRUE
,Ññay.CurEx,Ññay.
CmdEx
 ) ;

172 
	}
}

174 
	$C⁄åﬁRñayC⁄cuºít
()

176 
ªœy
.
CurC⁄
 = 
	`OnOffRñay
–
FALSE
,Ññay.CurC⁄,Ññay.
CmdC⁄
 ) ;

177 
	}
}

180 
	$TEST_C⁄åﬁRñay
()

182 
U16
 
cmd
;

184 
cmd
 = 1 << 
ªœy
.
TEST_Cou¡
;

185 
	`Tu∫OffRñay
( 0xFFFF );

186 
	`Tu∫OnRñay
–
cmd
 );

187 if–
ªœy
.
TEST_Cou¡
++ >
MAX_RELAY_NUM
 )

189 
ªœy
.
TEST_Cou¡
 = 0;

192 
	`C⁄åﬁRñayEx˛usive
();

193 
	`C⁄åﬁRñayC⁄cuºít
();

194 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\relay.h

1 #i‚de‡
__RELAY_H__


2 
	#__RELAY_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôRñay
();

8 
	#RELAY_COMP
 0x0001U

	)

9 
	#RELAY_FEEDER_CW
 0x0002U

	)

10 
	#RELAY_FEEDER_CCW
 0x0004U

	)

11 
	#RELAY_ICE_TRAY_CW
 0x0008U

	)

12 
	#RELAY_ICE_TRAY_CCW
 0x0010U

	)

13 
	#MAX_RELAY_NUM
 5

	)

17 
Tu∫OnRñay
(
U16
 
mu16Rñay
);

18 
Tu∫OffRñay
(
U16
 
mu16Rñay
);

19 
Tu∫OffRñayAŒ
();

21 
U8
 
IsTu∫OnRñay
(
U16
 
mu16Rñay
);

23 
U16
 
GëRñaySètus
();

25 
C⁄åﬁRñayEx˛usive
();

26 
C⁄åﬁRñayC⁄cuºít
();

29 
TEST_C⁄åﬁRñay
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\smps.c

1 
	~"hw.h
"

2 
	~"smps.h
"

4 
	~"hÆ_uv.h
"

5 
	~"gas_swôch_vÆve.h
"

9 
U8
 
	$IsTu∫OnUvOnBﬂrd
()

11 if–
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TANK
 ) != 0 )

13  
TRUE
;

16 if–
	`HAL_GëUvOnOffSètus
–
HAL_UV_ICE_TRAY
 ) != 0 )

18  
TRUE
;

21 if–
	`HAL_GëUvOnOffSètus
–
HAL_UV_WATER_OUT
 ) != 0 )

23  
TRUE
;

26  
FALSE
;

27 
	}
}

29 
	$C⁄åﬁSmps
()

31 
U8
 
mu8OnOff
 = 
OFF
;

35 if–
	`GëGasSwôchMode
(Ë!
GAS_SWITCH_MODE_NONE
 )

37 
mu8OnOff
 = 
ON
;

41 if–
	`IsTu∫OnUvOnBﬂrd
(Ë=
ON
 )

43 
mu8OnOff
 = 
ON
;

47 #i‡
CONFIG_UV_MANUAL


48 
	`TURN_ON_SMPS_12V
();

50 if–
mu8OnOff
 =
ON
 )

52 
	`TURN_ON_SMPS_12V
();

56 
	`TURN_OFF_SMPS_12V
();

60 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\smps.h

1 #i‚de‡
__SMPS_H__


2 
	#__SMPS_H__


	)

4 
	~"¥j_ty≥.h
"

6 
C⁄åﬁSmps
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\swing_bar.c

1 
	~"hw.h
"

2 
	~"swög_b¨.h
"

5 
SwögB¨_T
 
	gSwög
;

8 
	$InôSwögB¨
()

10 
Swög
.
OnOff
 = 
OFF
;

11 
Swög
.
OnTime
 = 0;

12 
Swög
.
OffTime
 = 0;

14 
Swög
.
C⁄fOnTime
 = 
DEFAULT_SWING_BAR_TIME_ON
;

15 
Swög
.
C⁄fOffTime
 = 
DEFAULT_SWING_BAR_TIME_OFF_1
;

16 
	}
}

18 
	$GëSwögB¨D©a
–
SwögB¨_T
 *
pD©a
 )

20 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (__FAR *)&
Swög
, –
SwögB¨_T
 ) );

21 
	}
}

23 
	$SëSwögB¨C⁄figOffTime
(
U16
 
mu16C⁄fTime
)

25 
Swög
.
C⁄fOffTime
 = 
mu16C⁄fTime
;

26 
	}
}

28 
	$Tu∫OnSwögB¨
()

31 if–
Swög
.
OnOff
 =
OFF
 )

33 
Swög
.
OnTime
 = Swög.
C⁄fOnTime
;

34 
Swög
.
OffTime
 = Swög.
C⁄fOffTime
;

37 
Swög
.
OnOff
 = 
ON
;;

38 
	}
}

40 
	$Tu∫OffSwögB¨
()

42 
Swög
.
OnOff
 = 
OFF
;

43 
	}
}

46 
	$C⁄åﬁSwögB¨
()

49 if–
Swög
.
OnOff
 =
OFF
 )

51 
	`TURN_OFF_SWING_BAR
();

57 if–
Swög
.
OnTime
 != 0 )

59 
Swög
.
OnTime
--;

61 
	`TURN_ON_SWING_BAR
();

63 if–
Swög
.
OffTime
 != 0 )

65 
Swög
.
OffTime
--;

67 
	`TURN_OFF_SWING_BAR
();

71 
Swög
.
OnTime
 = Swög.
C⁄fOnTime
;

72 
Swög
.
OffTime
 = Swög.
C⁄fOffTime
;

74 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\swing_bar.h

1 #i‚de‡
__SWING_BAR_H__


2 
	#__SWING_BAR_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#TEST_SWING_BAR
 0

	)

9 #i‡
TEST_SWING_BAR


15 
U16
 
	gthe_swög_off
 = 180;

16 
U16
 
	gthe_swög_⁄
 = 20;

17 
	#DEFAULT_SWING_BAR_TIME_OFF
 
the_swög_off


	)

18 
	#DEFAULT_SWING_BAR_TIME_ON
 
the_swög_⁄


	)

20 
	#DEFAULT_SWING_BAR_TIME_OFF_1
 500U

	)

21 
	#DEFAULT_SWING_BAR_TIME_OFF_2
 1000U

	)

22 
	#DEFAULT_SWING_BAR_TIME_ON
 20U

	)

25 
	s_swög_b¨_h_


27 
U8
 
	mOnOff
;

28 
U16
 
	mOnTime
;

29 
U16
 
	mOffTime
;

31 
U16
 
	mC⁄fOnTime
;

32 
U16
 
	mC⁄fOffTime
;

33 }
	tSwögB¨_T
;

35 
InôSwögB¨
();

37 
GëSwögB¨D©a
–
SwögB¨_T
 *
pD©a
 );

39 
SëSwögB¨C⁄figOffTime
(
U16
 
mu16C⁄fTime
);

41 
Tu∫OffSwögB¨
();

43 
Tu∫OnSwögB¨
();

45 
C⁄åﬁSwögB¨
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\valve.c

1 
	~"hÆ_vÆve.h
"

2 
	~"vÆve.h
"

4 
	#TEST_VALVE_ONOFF
 0

	)

6 
	s_io_vÆve_


8 
U16
 
	mCmd
;

9 
U16
 
	mCur
;

10 
U16
 
	mBoŸTime
;

12 
U8
 
	mTEST_Cou¡
;

13 } 
	tIO_VÆve_T
;

15 
IO_VÆve_T
 
	gvÆve
;

18 
	$InôVÆve
()

21 
vÆve
.
Cmd
 = 
NORMAL_OPEN_VALVES
;

22 
vÆve
.
Cur
 = 
NORMAL_OPEN_VALVES
;

23 
vÆve
.
BoŸTime
 = 100;

25 
vÆve
.
TEST_Cou¡
 = 0;

26 
	}
}

28 
	$O≥nVÆve
–
U16
 
mu16VÆve
)

30 
vÆve
.
Cmd
 |
mu16VÆve
;

31 
	}
}

33 
	$Clo£VÆve
–
U16
 
mu16VÆve
)

35 
vÆve
.
Cmd
 &~
mu16VÆve
;

36 
	}
}

38 
U16
 
	$GëVÆveSètus
()

40  
vÆve
.
Cur
;

41 
	}
}

43 #i‡
TEST_VALVE_ONOFF


44 
U16
 
	gthe_vÆve_cmd
 = 0x0000;

46 
U16
 
	$GëVÆveCmd
()

49 #i‡
TEST_VALVE_ONOFF


50  
the_vÆve_cmd
;

52  
vÆve
.
Cmd
;

54 
	}
}

56 
U8
 
	$IsO≥nVÆve
(
U16
 
mu16VÆve
 )

58 if–(
vÆve
.
Cur
 & 
mu16VÆve
 ) == mu16Valve )

60  
TRUE
;

63  
FALSE
;

64 
	}
}

66 
	$C⁄åﬁVÆve
()

68 
U8
 
i
;

69 
U16
 
mu16VÆ
;

70 
U16
 
mu16Diff
;

71 
U16
 
mu16Cmd
;

74 if–
vÆve
.
BoŸTime
 != 0 )

76 
vÆve
.
BoŸTime
--;

80 
mu16Cmd
 = 
	`GëVÆveCmd
();

83 
mu16Diff
 = 
vÆve
.
Cur
 ^ 
mu16Cmd
;

84 if–
mu16Diff
 == 0 )

90  
i
 = 0; i < 16 ; i++ )

92 
mu16VÆ
 = 1 << 
i
;

93 if–
mu16Diff
 & 
mu16VÆ
 )

95 if––
mu16Cmd
 & 
mu16VÆ
 ) == 0 )

97 
	`HAL_Clo£VÆve
–
i
 );

98 
vÆve
.
Cur
 &~
mu16VÆ
;

104 
mu16Diff
 = 
vÆve
.
Cur
 ^ 
mu16Cmd
;

105 if–
mu16Diff
 == 0 )

109  
i
 = 0 ; i < 16 ; i++ )

111 
mu16VÆ
 = 1 << 
i
;

112 if–
mu16Diff
 & 
mu16VÆ
 )

114 if––
mu16Cmd
 & 
mu16VÆ
) != 0 )

116 
	`HAL_O≥nVÆve
–
i
 );

117 
vÆve
.
Cur
 |
mu16VÆ
;

121 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\valve.h

1 #i‚de‡
__VALVE_H__


2 
	#__VALVE_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#VALVE_NOS
 0x0001

	)

8 
	#VALVE_ROOM_OUT
 0x0002

	)

9 
	#VALVE_HOT_IN
 0x0004

	)

10 
	#VALVE_HOT_OUT
 0x0008

	)

11 
	#VALVE_HOT_DRAIN
 0x0010

	)

12 
	#VALVE_COLD_AIR
 0x0020

	)

13 
	#VALVE_COLD_OUT
 0x0040

	)

14 
	#VALVE_COLD_IN
 0x0080

	)

15 
	#VALVE_COLD_DRAIN
 0x0100

	)

16 
	#VALVE_COLD_FLUSH
 0x0200

	)

17 
	#VALVE_ICE_TRAY_IN
 0x0400

	)

20 
	#VALVE_ALL
 ( \

21 
VALVE_NOS
 \

22 | 
VALVE_COLD_AIR
 \

23 | 
VALVE_COLD_DRAIN
 \

24 | 
VALVE_HOT_IN
 \

25 | 
VALVE_ROOM_OUT
 \

26 | 
VALVE_HOT_OUT
 \

27 | 
VALVE_COLD_OUT
 \

28 | 
VALVE_ICE_TRAY_IN
 \

29 | 
VALVE_COLD_IN
 \

30 | 
VALVE_COLD_FLUSH
 \

31 | 
VALVE_HOT_DRAIN
 \

32 )

	)

34 
	#NORMAL_OPEN_VALVES
 ( \

35 
VALVE_NOS
 \

36 | 
VALVE_HOT_DRAIN
 \

37 | 
VALVE_COLD_AIR
 )

	)

39 
InôVÆve
();

41 
O≥nVÆve
(
U16
 
mu16VÆve
);

43 
Clo£VÆve
(
U16
 
mu16VÆve
);

45 
U16
 
GëVÆveSètus
();

47 
U8
 
IsO≥nVÆve
(
U16
 
mu16VÆve
 );

49 
C⁄åﬁVÆve
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\energy.c

1 
	~"hw.h
"

2 
	~"hÆ_adc.h
"

4 
	~"íîgy.h
"

5 
	~"πc.h
"

6 
	~"ì¥om.h
"

7 
	~"comp_bldc.h
"

8 
	~"hóãr_out.h
"

9 
	~"vÆve.h
"

10 
	~"døö_pump.h
"

12 
	#CONFIG_USE_EEPROM_ENERGY
 0

13 

	)

42 
	#STAND_BY_WH
 31UL

43 
	#DC_FAN_WH
 21UL

44 

	)

45 
	#DRAIN_PUMP_WH
 1UL

46 
	#VALVE_WH
 2UL

47 
	#COMP_WH
 17UL

48 
	#HEATER_WH
 805UL

49 

	)

50 
	#MAX_WATT
 0xFF000000UL

	)

52 
	#RATE_1KWH
 1879UL

	)

53 
	#MAX_RATE
 9999UL

	)

55 
	#MONTHS
 12

	)

56 
	s_íîgy_


58 
U8
 
	mu8M⁄th
;

59 
U32
 
	mu32W©tHour
[ 
MONTHS
 ];

60 } 
	tE√rgy_T
;

63 
E√rgy_T
 
	gE√rgy
;

65 
	$InôE√rgy
()

67 
	`MEMSET
–(
__FAR
 *)&
E√rgy
, 0, –
E√rgy_T
 ) );

68 
E√rgy
.
u8M⁄th
 = 1;

69 
	}
}

72 
U8
 
	$GëE√rgyM⁄th
()

74  
E√rgy
.
u8M⁄th
;

75 
	}
}

77 
	$SëE√rgyM⁄th
(
U8
 
mu8M⁄th
)

79 if–
mu8M⁄th
 >= 1 && mu8Month <=12 )

81 
E√rgy
.
u8M⁄th
 = 
mu8M⁄th
;

83 
	}
}

87 
U32
 
	$GëE√rgyR©eM⁄th
(
U8
 
mu8M⁄th
)

89 
U32
 
mu32W©t
 = 0UL;

90 
U32
 
mu32R©e
 = 0UL;

93 if–
mu8M⁄th
 >= 1 && mu8Month <= 12 )

95 
mu32W©t
 = 
E√rgy
.
u32W©tHour
[ 
mu8M⁄th
 - 1 ];

97 
mu32W©t
 /= 1000;

99 
mu32R©e
 = 
mu32W©t
 * 
RATE_1KWH
;

100 
mu32R©e
 /= 10000UL;

103 if–
mu32R©e
 > 
MAX_RATE
 )

105 
mu32R©e
 = 
MAX_RATE
;

108  
mu32R©e
;

109 
	}
}

111 
U32
 
	$GëE√rgyW©tAŒ
()

113 
U8
 
i
;

114 
U32
 
mu32W©t
;

116 
mu32W©t
 = 
E√rgy
.
u32W©tHour
[ 0 ];

117  
i
 = 1; i < 12 ; i++ )

119 
mu32W©t
 +
E√rgy
.
u32W©tHour
[ 
i
 ];

122  
mu32W©t
;

124 
	}
}

127 
U32
 
	$GëE√rgyW©tM⁄th
(
U8
 
mu8M⁄th
)

129 if–
mu8M⁄th
 >= 1 && mu8Month <= 12 )

131  
E√rgy
.
u32W©tHour
[ 
mu8M⁄th
 - 1 ];

135 
	}
}

137 
	$SëE√rgyW©tM⁄th
(
U8
 
mu8M⁄th
, 
U32
 
mu32W©t
)

139 if–
mu8M⁄th
 >= 1 && mu8Month <= 12 )

141 
E√rgy
.
u32W©tHour
[ 
mu8M⁄th
 - 1 ] = 
mu32W©t
;

143 
	}
}

148 
U16
 
	$CÆcSèndBy
()

150 
U8
 
mu8Mö
 = 59;

152 if–--
mu8Mö
 == 0 )

154 
mu8Mö
 = 59;

156  
STAND_BY_WH
;

160 
	}
}

164 
U16
 
	$CÆcDcF™
()

166 
U8
 
mu8Mö
 = 59;

169 if–
	`GET_STATUS_FAN_MOTOR_1_ONOFF
() != 0 )

171 if–--
mu8Mö
 == 0 )

173 
mu8Mö
 = 59;

174  
DC_FAN_WH
;

179 
	}
}

182 
U16
 
	$CÆcVÆves
()

184 
U16
 
mu16Sum
 = 0;

186 if–
	`IsO≥nVÆve
–
VALVE_NOS
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

187 if–
	`IsO≥nVÆve
–
VALVE_ROOM_OUT
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

188 if–
	`IsO≥nVÆve
–
VALVE_HOT_IN
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

189 if–
	`IsO≥nVÆve
–
VALVE_HOT_OUT
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

190 if–
	`IsO≥nVÆve
–
VALVE_HOT_DRAIN
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

191 if–
	`IsO≥nVÆve
–
VALVE_COLD_AIR
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

192 if–
	`IsO≥nVÆve
–
VALVE_COLD_OUT
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

193 if–
	`IsO≥nVÆve
–
VALVE_COLD_IN
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

194 if–
	`IsO≥nVÆve
–
VALVE_COLD_DRAIN
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

195 if–
	`IsO≥nVÆve
–
VALVE_COLD_FLUSH
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

196 if–
	`IsO≥nVÆve
–
VALVE_ICE_TRAY_IN
 ) =
TRUE
 ) { 
mu16Sum
 +
VALVE_WH
; }

198  
mu16Sum
;

199 
	}
}

201 
U16
 
	$CÆcDøöPump
()

203 if–
	`IsTu∫OnDøöPump
(Ë=
TRUE
 )

205  
DRAIN_PUMP_WH
;

209 
	}
}

212 
U16
 
	$CÆcComp
()

214 if–
	`IsTu∫OnCompBldc
(Ë=
TRUE


215 && 
	`GëCompBldcCuºítRps
() > 0 )

217  
COMP_WH
;

221 
	}
}

223 
U16
 
	$CÆcHŸHóãr
()

225 
U16
 
Ouçut
;

227 
Ouçut
 = 
	`GëHóãrOuçut
();

228 if–
Ouçut
 > 0 )

230  ( 
HEATER_WH
 * 
Ouçut
 ) / 100UL;

234 
	}
}

237 
	$CÀ¨E√rgyW©t
()

239 
U8
 
mu8Index
;

241  
mu8Index
 = 0 ; mu8Index < 
MONTHS
 ; mu8Index++ )

243 
E√rgy
.
u32W©tHour
[ 
mu8Index
 ] = 0UL;

245 
	}
}

247 
	$CÀ¨AŒE√rgyW©t
()

249 
	`CÀ¨E√rgyW©t
();

250 #i‡
CONFIG_USE_EEPROM_ENERGY


251 
	`SaveEïromId
–
EEP_ID_ENERGY
 );

253 
	}
}

255 
	#ENERGY_SAVE_TIME_SEC
 180U

256 
	`Pro˚ssE√rgy
()

	)

258 
U8
 
	gmu8Inô
 = 
FALSE
;

260 
U8
 
	gmu8PªvYór
 = 0;

261 
U16
 
	gmu16SaveTime
 = 
ENERGY_SAVE_TIME_SEC
;

262 
U32
 
	gu32W©t
 = 0UL;

263 
TimeD©a_T
 
	gmTime
;

267 
GëRtcTime
–&
mTime
 );

268 if–
	gmu8Inô
 =
FALSE
 )

270 
mu8Inô
 = 
TRUE
;

273 
	gmu8PªvYór
 = 
mTime
.
Yór
;

278 if–
	gmu8PªvYór
 !
mTime
.
Yór
 )

280 
mu8PªvYór
 = 
mTime
.
Yór
;

282 
CÀ¨E√rgyW©t
();

283 #i‡
CONFIG_USE_EEPROM_ENERGY


284 
SaveEïromId
–
EEP_ID_ENERGY
 );

290 if–
	gmTime
.
	gM⁄th
 !
E√rgy
.
u8M⁄th
 )

292 
E√rgy
.
u32W©tHour
[ 
mTime
.
M⁄th
 - 1 ] = 0UL;

293 
	gE√rgy
.
	gu8M⁄th
 = 
mTime
.
M⁄th
;

295 #i‡
CONFIG_USE_EEPROM_ENERGY


296 
SaveEïromId
–
EEP_ID_ENERGY
 );

301 
	gu32W©t
 = (
U32
)
CÆcSèndBy
();

303 
	gu32W©t
 +(
U32
)
CÆcDcF™
();

304 
	gu32W©t
 +(
U32
)
CÆcVÆves
();

305 
	gu32W©t
 +(
U32
)
CÆcDøöPump
();

307 
	gu32W©t
 +(
U32
)
CÆcComp
();

308 
	gu32W©t
 +(
U32
)
CÆcHŸHóãr
();

311 
	gE√rgy
.
	gu32W©tHour
[ 
mTime
.
M⁄th
 - 1 ] +
u32W©t
;

312 if–
	gE√rgy
.
	gu32W©tHour
[ 
mTime
.
M⁄th
 - 1] > 
	gMAX_WATT
 )

314 
	gE√rgy
.
	gu32W©tHour
[ 
mTime
.
M⁄th
 - 1] = 
MAX_WATT
;

318 if–--
	gmu16SaveTime
 == 0 )

320 
mu16SaveTime
 = 
ENERGY_SAVE_TIME_SEC
;

321 #i‡
CONFIG_USE_EEPROM_ENERGY


322 
SaveEïromId
–
EEP_ID_ENERGY
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\energy.h

1 #i‚de‡
__ENERGY_H__


2 
	#__ENERGY_H__


	)

4 
	~"¥j_ty≥.h
"

7 
InôE√rgy
();

11 
U8
 
GëE√rgyM⁄th
();

12 
SëE√rgyM⁄th
(
U8
 
mu8M⁄th
);

16 
U32
 
GëE√rgyR©eM⁄th
(
U8
 
mu8M⁄th
);

19 
U32
 
GëE√rgyW©tAŒ
();

21 
U32
 
GëE√rgyW©tM⁄th
(
U8
 
mu8M⁄th
);

22 
SëE√rgyW©tM⁄th
(
U8
 
mu8M⁄th
, 
U32
 
mu32W©t
);

26 
CÀ¨AŒE√rgyW©t
();

28 
Pro˚ssE√rgy
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\smart_check.c

1 
	~"sm¨t_check.h
"

3 
	~"hÆ_öput.h
"

4 
	~"Àvñ.h
"

5 
	~"ãmp.h
"

6 
	~"îr‹.h
"

7 
	~"w©î_out.h
"

9 
	~"m⁄ô‹ög.h
"

10 
	~"hÆ_adc.h
"

11 
	~"hŸ_w©î.h
"

12 
	~"døö_w©î.h
"

13 
	~"Àak.h
"

14 
	~"fûãr.h
"

15 
	~"comp_bldc.h
"

16 
	~"Êow_mëî.h
"

17 
	~"i˚_do‹.h
"

18 
	~"eﬁ.h
"

19 
	~"f˘.h
"

20 
	~"sound.h
"

21 
	~"îr_ãmp.h
"

23 
	~"dügnosis.h
"

24 
	~"WIFI_C⁄åﬁ.h
"

28 
	#LEVEL_UNDETECT
 0U

	)

29 
	#LEVEL_DETECT
 1U

	)

31 
	#DIAG_STATUS_NORMAL
 0U

	)

32 
	#DIAG_STATUS_ERROR
 1U

	)

35 
	#TIME_FOR_REQUEST
 (60)

	)

37 
	s_sm¨t_check_öfo_


39 
U8
 
	mSèπ
;

40 
SC_STATUS_T
 
	mSètus
;

42 
U16
 
	mC⁄töueCheckTime
;

43 } 
	tSm¨tInfo_T
;

45 
Sm¨tInfo_T
 
	gSm¨tCheck
;

48 
	$InôSm¨tCheck
()

50 
Sm¨tCheck
.
Sèπ
 = 
FALSE
;

51 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_NORMAL
;

53 
Sm¨tCheck
.
C⁄töueCheckTime
 = 
TIME_FOR_REQUEST
;

54 
	}
}

57 
U8
 
	$IsVÆidSèπSm¨tCheck
()

59 if–
	`IsSèπDøöW©î
(Ë=
TRUE
 )

61  
FALSE
;

64 if–
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

66  
FALSE
;

69 if–
	`GëW©îOut
(Ë=
TRUE
 )

71  
FALSE
;

74 if–
	`GëEﬁSètus
(Ë=
TRUE


75 || 
	`GëF˘Sètus
(Ë=
TRUE
 )

77  
FALSE
;

80  
TRUE
;

81 
	}
}

83 
I8
 
	$GëIsVÆidSèπSm¨tCheck
()

85 
I8
 
m8IsVÆid
 = -1;

86 
U16
 
PªIsVÆidSèπCheck
 = 
FALSE
;

87 
U8
 
CuºítIsVÆidSèπCheck
 = 
FALSE
;

89 
CuºítIsVÆidSèπCheck
 = 
	`IsVÆidSèπSm¨tCheck
();

91 if–
PªIsVÆidSèπCheck
 !
CuºítIsVÆidSèπCheck
 )

93 
PªIsVÆidSèπCheck
 = 
CuºítIsVÆidSèπCheck
;

95 if–
CuºítIsVÆidSèπCheck
 =
TRUE
 )

97 
m8IsVÆid
 = 
TRUE
;

101 
m8IsVÆid
 = 
FALSE
;

105  
m8IsVÆid
;

106 
	}
}

108 
	$SèπSm¨tCheck
()

110 
Sm¨tCheck
.
Sèπ
 = 
TRUE
;

111 
	}
}

113 
	$St›Sm¨tCheck
()

115 
Sm¨tCheck
.
Sèπ
 = 
FALSE
;

116 
	}
}

118 
U8
 
	$GëSm¨tCheck
()

120  
Sm¨tCheck
.
Sèπ
;

121 
	}
}

123 
	$SëSm¨tCheckSètus
(
SC_STATUS_T
 
mu8Sètus
)

125 
Sm¨tCheck
.
Sètus
 = 
mu8Sètus
;

126 
	}
}

128 
U8
 
	$GëSm¨tCheckSètus
()

130  
Sm¨tCheck
.
Sètus
;

131 
	}
}

133 
I8
 
	$IsSèπSm¨tCheck
()

135 
I8
 
m8IsSèπ
 = -1;

136 
U16
 
PªSm¨tCheckSèπ
 = 
FALSE
;

138 if–
PªSm¨tCheckSèπ
 !
Sm¨tCheck
.
Sèπ
 )

140 
PªSm¨tCheckSèπ
 = 
Sm¨tCheck
.
Sèπ
;

142 if–
Sm¨tCheck
.
Sèπ
 =
TRUE
 )

144 
m8IsSèπ
 = 
TRUE
;

148 
m8IsSèπ
 = 
FALSE
;

153  
m8IsSèπ
;

154 
	}
}

156 
I8
 
	$GëCom∂ëeSm¨tCheck
()

158 
I8
 
m8IsCom∂ëe
 = -1;

159 
U16
 
PªCom∂ëeSèπCheck
 = 
FALSE
;

160 
U8
 
CuºítCom∂ëeSèπCheck
 = 
FALSE
;

162 
CuºítCom∂ëeSèπCheck
 = 
	`GëCom∂ëeDügnosis
();

164 if–
PªCom∂ëeSèπCheck
 !
CuºítCom∂ëeSèπCheck
 )

166 
PªCom∂ëeSèπCheck
 = 
CuºítCom∂ëeSèπCheck
;

168 if–
CuºítCom∂ëeSèπCheck
 =
TRUE
 )

170 
m8IsCom∂ëe
 = 
TRUE
;

174 
m8IsCom∂ëe
 = 
FALSE
;

178  
m8IsCom∂ëe
;

179 
	}
}

181 
	$C⁄åﬁSm¨tCheck
()

183 
U8
 
IsVÆid
 = 
FALSE
;

184 
U8
 
IsCom∂ëe
 = 
FALSE
;

185 
U8
 
IsSèπ
 = 
FALSE
;

187 
IsVÆid
 = 
	`GëIsVÆidSèπSm¨tCheck
();

188 
IsCom∂ëe
 = 
	`GëCom∂ëeSm¨tCheck
();

189 
IsSèπ
 = 
	`IsSèπSm¨tCheck
();

191 if–
IsVÆid
 =
TRUE
 )

193 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_NORMAL
;

195 if–
IsVÆid
 =
FALSE
 )

197 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_INVALID
;

200 if–
IsCom∂ëe
 =
TRUE
 )

202 
	`WifiSídD©a
(
WIFI_DATA_EXAMINE
);

203 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_COMPLETE
;

206 if–
IsSèπ
 =
TRUE
 )

209 
	`SèπDügnosis
();

210 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_START
;

212 if–
IsSèπ
 =
FALSE
 )

215 
	`St›Dügnosis
();

217 
	`SëDügnosisProgªss
(0, 0);

219 if–
Sm¨tCheck
.
Sètus
 =
SC_STATUS_START


220 || 
Sm¨tCheck
.
Sètus
 =
SC_STATUS_GOING
 )

222 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_STOP
;

223 
	`Sound
–
SOUND_CANCEL
 );

227 if–
Sm¨tCheck
.
Sètus
 =
SC_STATUS_NORMAL
)

229 if–
Sm¨tCheck
.
Sèπ
 =
TRUE
 )

231 
Sm¨tCheck
.
Sèπ
 = 
FALSE
;

232 
	`SëDügnosisProgªss
(0, 0);

235 if–
	`GëCom∂ëeDügnosis
(Ë=
TRUE
 )

237 
	`CÀ¨Com∂ëeDügnosis
();

240 
	}
}

244 
	$C⁄åﬁC⁄töueSm¨tCheck
()

247 if–
	`IsSèπDügnosis
(Ë=
TRUE
 )

249 
Sm¨tCheck
.
C⁄töueCheckTime
 = 
TIME_FOR_REQUEST
;

253 if–
Sm¨tCheck
.
C⁄töueCheckTime
 != 0)

255 
Sm¨tCheck
.
C⁄töueCheckTime
--;

260 
Sm¨tCheck
.
C⁄töueCheckTime
 = 
TIME_FOR_REQUEST
;

263 
	`WifiSídD©a
(
WIFI_DATA_PART
);

264 
	}
}

268 
U16
 
Sm¨tCheckRq°
();

269 
U16
 
Sm¨tCheckSètus
();

270 
U16
 
Sm¨tCheckProgªss
();

271 
	s_sm¨t_check_°©us_


273 
E_API_A1010_T
 
	mId
;

274 
U16
 
	mD©a
;

275 
U16
 (*
pFun
)();

276 } 
	tCheckSètusLi°_T
;

277 
CheckSètusLi°_T
 
	gSètusLi°
[] =

279 { 
WIFI_FUNC_0040_SMART_CHECK_RQST
, 0, 
Sm¨tCheckRq°
 },

280 { 
WIFI_FUNC_0041_SMART_CHECK_STATUS
, 0, 
Sm¨tCheckSètus
 },

281 { 
WIFI_FUNC_0042_SMART_CHECK_PROGRESS
, 0, 
Sm¨tCheckProgªss
 },

284 
	#SZ_SMART_CHECK_STATUS_LIST
 ( (
SètusLi°
Ë/ (
CheckSètusLi°_T
))

	)

286 
U8
 
	$FödIndexSètusId
–
E_API_A1010_T
 
id
, 
U8
 *
pIndex
 )

288 
U8
 
i
 = 0;

290  
i
 = 0; i < 
SZ_SMART_CHECK_STATUS_LIST
; i++ )

292 if–
SètusLi°
[ 
i
 ].
Id
 =
id
 )

294 if–
pIndex
 !
NULL
 )

296 *
pIndex
 = 
i
;

299  
TRUE
;

303  
FALSE
;

304 
	}
}

306 
U16
 
	$GëSm¨tCheckSètusId
–
E_API_A1010_T
 
id
 )

308 
U8
 
ödex
 = 0;

309 
U16
 
mu16D©a
 = 0;

311 if–
	`FödIndexSètusId
–
id
, &
ödex
 ) =
TRUE
 )

313 if–
SètusLi°
[ 
ödex
 ].
pFun
 !
NULL
 )

315 
SètusLi°
[ 
ödex
 ].
D©a
 = SètusLi°[ index ].
	`pFun
();

317 
mu16D©a
 = 
SètusLi°
[ 
ödex
 ].
D©a
;

320  
mu16D©a
;

321 
	}
}

323 
U16
 
	$Sm¨tCheckRq°
()

325 
U16
 
mu16D©a
 = 0;

327 if–
Sm¨tCheck
.
Sèπ
 =
TRUE
 )

329 
mu16D©a
 = 1;

332  
mu16D©a
;

333 
	}
}

335 
U16
 
	$Sm¨tCheckSètus
()

337 
U16
 
mu16D©a
 = 0;

339 
mu16D©a
 = 
Sm¨tCheck
.
Sètus
;

341 if–
Sm¨tCheck
.
Sètus
 =
SC_STATUS_START
 )

343 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_GOING
;

345 if–
Sm¨tCheck
.
Sètus
 =
SC_STATUS_COMPLETE


346 || 
Sm¨tCheck
.
Sètus
 =
SC_STATUS_STOP
 )

348 
Sm¨tCheck
.
Sètus
 = 
SC_STATUS_NORMAL
;

351  
mu16D©a
;

352 
	}
}

354 
U16
 
	$Sm¨tCheckProgªss
()

356 
U16
 
mu16D©a
 = 0;

358 
mu16D©a
 = 
	`GëDügnosisProgªss
();

360  
mu16D©a
;

361 
	}
}

367 
	#D_TYPE_DATA
 0

	)

368 
	#D_TYPE_STATUS
 1

	)

369 
	$U16
(*
	tA˘i⁄_T
)(
	tE_API_A1080_T
 
	tId
);

370 
	s_sm¨t_check_ôem_


372 
E_API_A1080_T
 
Id
;

373 
U16
 
D©a
;

374 
U16
 
SëD©a
;

375 
A˘i⁄_T
 
pFun
;

376 } 
	tCheckIãmLi°_T
;

378 
U16
 
	`GëM⁄ô‹ögLﬂd
(
E_API_A1080_T
 
Id
);

379 
U16
 
	`DøöHigh
(
E_API_A1080_T
 
Id
);

380 
U16
 
	`DøöLow
(
E_API_A1080_T
 
Id
);

381 
U16
 
	`CﬁdBldc
(
E_API_A1080_T
 
Id
);

382 
U16
 
	`CﬁdTemp_1
(
E_API_A1080_T
 
Id
);

383 
U16
 
	`AmbiTemp
(
E_API_A1080_T
 
Id
);

384 
U16
 
	`HŸTempIn
(
E_API_A1080_T
 
Id
);

385 
U16
 
	`HŸTempOut
(
E_API_A1080_T
 
Id
);

386 
U16
 
	`HŸTempHóãr
(
E_API_A1080_T
 
Id
);

387 
U16
 
	`Sís‹Lók
(
E_API_A1080_T
 
Id
);

389 
U16
 
	`Sís‹FûãrCovî
(
E_API_A1080_T
 
Id
);

390 
U16
 
	`Sís‹FûãrLevî
(
E_API_A1080_T
 
Id
);

391 
U16
 
	`Sís‹T™kRìd
(
E_API_A1080_T
 
Id
);

392 
U16
 
	`I˚PuªTemp
(
E_API_A1080_T
 
Id
);

393 
U16
 
	`Sís‹TøyIcögSw
(
E_API_A1080_T
 
Id
);

395 
CheckIãmLi°_T
 
IãmLi°
[] =

397 { 
WIFI_PART_0001_VALVE_NOS
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

398 { 
WIFI_PART_0002_VALVE_HOT_OUT
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

399 { 
WIFI_PART_0003_VALVE_PURE_OUT
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

400 { 
WIFI_PART_0004_VALVE_COLD_OUT
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

402 { 
WIFI_PART_0009_VALVE_HOT_IN
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

403 { 
WIFI_PART_000A_VALVE_HOT_DRAIN
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

404 { 
WIFI_PART_000B_VALVE_COLD_AIR
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

405 { 
WIFI_PART_000C_VALVE_COLD_IN
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

407 { 
WIFI_PART_000D_VALVE_COLD_DRAIN
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

408 { 
WIFI_PART_0015_VALVE_ICE_TRAY_IN
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

409 { 
WIFI_PART_0018_VALVE_FLUSHING
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

412 { 
WIFI_PART_010B_LEVEL_DRAIN_HIGH
, 
INIT_DATA
, INIT_DATA, 
DøöHigh
 },

413 { 
WIFI_PART_010D_LEVEL_DRAIN_LOW
, 
INIT_DATA
, INIT_DATA, 
DøöLow
 },

415 { 
WIFI_PART_0201_COLD_BLDC
, 
INIT_DATA
, INIT_DATA, 
CﬁdBldc
 },

416 { 
WIFI_PART_0204_COLD_FAN
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

417 { 
WIFI_PART_0206_COLD_TEMP_1
, 0, 0, 
CﬁdTemp_1
 },

418 { 
WIFI_PART_0208_COLD_ROOM_TEMP
, 0, 0, 
AmbiTemp
 },

420 { 
WIFI_PART_0302_HOT_INSTANT_HEATER_1
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

421 { 
WIFI_PART_0303_HOT_INSTANT_HEATER_2
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

423 { 
WIFI_PART_0304_HOT_FLOW_MOTOR
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

424 { 
WIFI_PART_0305_HOT_TEMP_IN
, 0, 0, 
HŸTempIn
 },

425 { 
WIFI_PART_0306_HOT_TEMP_OUT
, 0, 0, 
HŸTempOut
 },

426 { 
WIFI_PART_0307_HOT_HEATER_TEMP
, 0, 0, 
HŸTempHóãr
 },

428 { 
WIFI_PART_0402_SENSOR_LEAK
, 
INIT_DATA
, INIT_DATA, 
Sís‹Lók
 },

430 { 
WIFI_PART_0403_SENSOR_FLOW
, 
INIT_DATA
, INIT_DATA, 
NULL
 },

431 { 
WIFI_PART_0405_SENSOR_FILTER_REED
, 
INIT_DATA
, INIT_DATA, 
Sís‹FûãrCovî
 },

432 { 
WIFI_PART_0406_SENSOR_FILTER_SW_1
, 
INIT_DATA
, INIT_DATA, 
Sís‹FûãrLevî
 },

433 { 
WIFI_PART_0409_SENSOR_TANK_REED
, 
INIT_DATA
, INIT_DATA, 
Sís‹T™kRìd
 },

435 { 
WIFI_PART_0501_STER_UV_FAUCET
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

436 { 
WIFI_PART_0502_STER_UV_FAUCET_ICE
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

437 { 
WIFI_PART_0503_STER_UV_ICE_TANK
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

438 { 
WIFI_PART_0504_STER_UV_ICE_TRAY
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

440 { 
WIFI_PART_0800_ICE_PURE_TEMP
, 0, 0, 
I˚PuªTemp
 },

441 { 
WIFI_PART_0801_ICE_FULL_SENSOR
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

442 { 
WIFI_PART_0802_ICE_SWING_BAR
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

443 { 
WIFI_PART_0805_ICE_TRAY_SENSING_SW
, 
INIT_DATA
, INIT_DATA, 
Sís‹TøyIcögSw
 },

444 { 
WIFI_PART_0807_ICE_DOOR_STEPMOTOR
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

445 { 
WIFI_PART_0808_ICE_COURSE_CHANGE_VV
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 },

446 { 
WIFI_PART_080A_ICE_DRAIN_PUMP
, 
INIT_DATA
, INIT_DATA, 
GëM⁄ô‹ögLﬂd
 }

447 
	}
};

449 
	#SZ_SMART_CHECK_LIST
 ( (
IãmLi°
Ë/ (
CheckIãmLi°_T
))

	)

452 
U8
 
	$FödIndexId
–
E_API_A1080_T
 
id
, 
U8
 *
pIndex
 )

454 
U8
 
i
 = 0;

456  
i
 = 0; i < 
SZ_SMART_CHECK_LIST
; i++ )

458 if–
IãmLi°
[ 
i
 ].
Id
 =
id
 )

460 if–
pIndex
 !
NULL
 )

462 *
pIndex
 = 
i
;

465  
TRUE
;

469  
FALSE
;

470 
	}
}

473 
U8
 
	$IsVÆidP¨tID
–
E_API_A1080_T
 
id
 )

475  
	`FödIndexId
–
id
, 
NULL
 );

476 
	}
}

478 
U16
 
	$GëSm¨tCheckD©aId
–
E_API_A1080_T
 
id
 )

480 
U8
 
ödex
 = 0;

481 
U16
 
mu16D©a
 = 0;

482 
E_API_A1080_T
 
Id
;

484 if–
	`FödIndexId
–
id
, &
ödex
 ) =
TRUE
 )

486 if–
IãmLi°
[ 
ödex
 ].
D©a
 !IãmLi°[ index ].
SëD©a
)

488 
mu16D©a
 = 
IãmLi°
[ 
ödex
 ].
D©a
;

489 
IãmLi°
[ 
ödex
 ].
D©a
 = IãmLi°[ index ].
SëD©a
;

493 
Id
 = 
IãmLi°
[ 
ödex
 ].Id;

494 if–
IãmLi°
[ 
ödex
 ].
pFun
 !
NULL
 )

496 
IãmLi°
[ 
ödex
 ].
D©a
 = IãmLi°[ index ].
	`pFun
–
Id
 );

498 
mu16D©a
 = 
IãmLi°
[ 
ödex
 ].
D©a
;

499 
IãmLi°
[ 
ödex
 ].
D©a
 = IãmLi°[ index ].
SëD©a
;

503  
mu16D©a
;

504 
	}
}

506 
	$SëSm¨tCheckD©aId
–
E_API_A1080_T
 
id
, 
U16
 
mu16D©a
 )

508 
U8
 
ödex
 = 0;

510 if–
	`FödIndexId
–
id
, &
ödex
 ) =
TRUE
 )

512 
IãmLi°
[ 
ödex
 ].
D©a
 = 
mu16D©a
;

514 
	}
}

516 
U16
 
	$GëM⁄ô‹ögLﬂd
–
E_API_A1080_T
 
Id
)

518 
U16
 
mD©a
;

520 
mD©a
 = 
	`GëLﬂdCuºít
–
Id
 );

521 
	`SëLﬂdAdc
–
Id
, 0 );

522 
	`SëLﬂdCuºít
–
Id
, 
INIT_DATA
 );

523  
mD©a
;

524 
	}
}

527 
U16
 
	$DøöHigh
(
E_API_A1080_T
 
Id
)

529 if–
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) =
LEVEL_HIGH


530 || 
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) =
LEVEL_ERR_LOW
 )

532  
LEVEL_DETECT
;

535  
LEVEL_UNDETECT
;

536 
	}
}

538 
U16
 
	$DøöLow
(
E_API_A1080_T
 
Id
)

540 if–
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) =
LEVEL_MID


541 || 
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) =
LEVEL_HIGH
 )

543  
LEVEL_DETECT
;

546  
LEVEL_UNDETECT
;

547 
	}
}

550 
	#TEMP_OPEN_SHORT
 255

	)

551 
U16
 
	$GëTempDüg
(
U8
 
adcId
, U8 
ãmpId
)

553 
U16
 
mu16Adc
;

555 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
adcId
 );

556 if–
	`GëTempEº‹Ty≥
–
mu16Adc
 ) !
STATUS_NORMAL
 )

558  
TEMP_OPEN_SHORT
;

561  
	`GëTemp
–
ãmpId
 );

562 
	}
}

565 
U16
 
	$HŸTempIn
(
E_API_A1080_T
 
Id
)

567  
	`GëTempDüg
–
ANI_TEMP_HOT_IN
, 
TEMP_ID_HOT_IN
 );

568 
	}
}

570 
U16
 
	$HŸTempOut
(
E_API_A1080_T
 
Id
)

572  
	`GëTempDüg
–
ANI_TEMP_HOT_OUT
, 
TEMP_ID_HOT_OUT
 );

573 
	}
}

575 
U16
 
	$HŸTempHóãr
(
E_API_A1080_T
 
Id
)

577  
	`GëTempDüg
–
ANI_TEMP_HEATER
, 
TEMP_ID_HEATER
 );

578 
	}
}

580 
U16
 
	$Sís‹Lók
(
E_API_A1080_T
 
Id
)

582  
	`GëLókSètus
();

583 
	}
}

590 
U16
 
	$Sís‹FûãrCovî
(
E_API_A1080_T
 
Id
)

592 if–
	`GëFûãrSètus
–
ID_FILTER_COVER
 ) =
FILTER_CLOSE
 )

594  
DIAG_STATUS_NORMAL
;

597  
DIAG_STATUS_ERROR
;

598 
	}
}

600 
U16
 
	$Sís‹FûãrLevî
(
E_API_A1080_T
 
Id
)

602 if–
	`GëFûãrSètus
–
ID_FILTER
 ) =
FILTER_CLOSE
 )

604  
DIAG_STATUS_NORMAL
;

607  
DIAG_STATUS_ERROR
;

608 
	}
}

610 
U16
 
	$Sís‹T™kRìd
(
E_API_A1080_T
 
Id
)

612 if–
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN
 ) =
FALSE
 )

614  
DIAG_STATUS_NORMAL
;

617  
DIAG_STATUS_ERROR
;

618 
	}
}

621 
U16
 
	$CﬁdBldc
(
E_API_A1080_T
 
Id
)

623  
	`GëCompBldcEº‹Code
();

624 
	}
}

626 
U16
 
	$CﬁdTemp_1
(
E_API_A1080_T
 
Id
)

628  
	`GëTempDüg
–
ANI_TEMP_COLD_WATER
, 
TEMP_ID_COLD_WATER
 );

629 
	}
}

631 
U16
 
	$AmbiTemp
(
E_API_A1080_T
 
Id
)

633  
	`GëTempDüg
–
ANI_TEMP_AMBIENT
, 
TEMP_ID_AMBIENT
 );

634 
	}
}

637 
U16
 
	$I˚PuªTemp
(
E_API_A1080_T
 
Id
)

639  
	`GëTempDüg
–
ANI_TEMP_ROOM_WATER
, 
TEMP_ID_ROOM_WATER
 );

640 
	}
}

642 
U16
 
	$Sís‹TøyIcögSw
(
E_API_A1080_T
 
Id
)

645 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\smart_check.h

1 #i‚de‡
__SMART_CHECK_H__


2 
	#__SMART_CHECK_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"WIFI_SëP¨tD©a.h
"

6 
	~"WIFI_SëFun˘i⁄D©a.h
"

9 
	e_sc_°©us_


11 
	mSC_STATUS_NORMAL
,

12 
	mSC_STATUS_START
,

13 
	mSC_STATUS_GOING
,

14 
	mSC_STATUS_COMPLETE
,

15 
	mSC_STATUS_STOP
,

16 
	mSC_STATUS_INVALID
,

17 } 
	tSC_STATUS_T
;

20 
InôSm¨tCheck
();

23 
U8
 
IsVÆidSèπSm¨tCheck
();

25 
SèπSm¨tCheck
();

26 
St›Sm¨tCheck
();

27 
U8
 
GëSm¨tCheck
();

29 
SëSm¨tCheckSètus
(
SC_STATUS_T
 
mu8Sètus
);

30 
U8
 
GëSm¨tCheckSètus
();

32 
U16
 
GëSm¨tCheckSètusId
–
E_API_A1010_T
 
id
 );

34 
C⁄åﬁSm¨tCheck
();

35 
C⁄åﬁC⁄töueSm¨tCheck
();

37 
	#SMART_CHECK_PROGRESS_LEVEL_0
 0

	)

38 
	#SMART_CHECK_PROGRESS_LEVEL_1
 1

	)

39 
	#SMART_CHECK_PROGRESS_LEVEL_2
 2

	)

40 
	#SMART_CHECK_PROGRESS_LEVEL_3
 3

	)

41 
	#SMART_CHECK_PROGRESS_LEVEL_4
 4

	)

42 
	#SMART_CHECK_PROGRESS_LEVEL_5
 5

	)

43 
GëSm¨tCheckProgªss
();

44 
SëSm¨tCheckD©aId
–
E_API_A1080_T
 
id
, 
U16
 
mu16D©a
 );

47 
U8
 
IsVÆidP¨tID
–
E_API_A1080_T
 
id
 );

48 
U16
 
GëSm¨tCheckD©aId
–
E_API_A1080_T
 
id
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\user.c

1 
	~"u£r.h
"

2 
	~"ì¥om.h
"

3 
	~"πc.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

11 
	#LITER_UNIT
 10

13 

	)

15 
U£rInfo_T
 
	gU£r
;

19 
	$InôU£r
()

21 
	`MEMSET
–(
__FAR
 *)&
U£r
, 0, –
U£rInfo_T
 ) );

22 
	}
}

24 
	$GëU£rD©a
(
U£rInfo_T
 *
pD©a
)

26 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
U£r
, (
U£rInfo_T
));

27 
	}
}

30 
	$SëU£r
–
U£rId_T
 
mU£rId
 )

32 
U£r
.
SñU£r
 = 
mU£rId
;

33 
	}
}

35 
U£rId_T
 
	$GëU£r
( )

37  
U£r
.
SñU£r
;

38 
	}
}

42 
Lôî_T
 
	$GëU£rUßgeW©î
(
U£rId_T
 
mId
, 
UßgeTy≥_T
 
mUßgeTy≥
, 
U8
 
mu8M⁄th
 )

44 
Lôî_T
 
mAmou¡
 = 0;

46 if–
mUßgeTy≥
 =
USAGE_DAILY
 )

49 
mAmou¡
 = 
U£r
.
Ußge
[ 
mId
 ].
Daûy
;

54 
mAmou¡
 = 
U£r
.
Ußge
[ 
mId
 ].
M⁄thly
[
mu8M⁄th
];

57  
mAmou¡
;

58 
	}
}

61 
	$SaveEïromU£rUßge
(
U£rId_T
 
mId
 )

64 if–
mId
 =
USER_A
 || mId =
USER_B
 )

66 
	`SaveEïromId
–
EEP_ID_USER_A
 );

67 
	`SaveEïromId
–
EEP_ID_USER_B
 );

71 
	`SaveEïromId
–
EEP_ID_USER_C
 );

72 
	`SaveEïromId
–
EEP_ID_USER_NONE
 );

75 
	}
}

79 
Lôî_T
 
	$GëU£rUßgeDaûyW©î
(
U£rId_T
 
mId
)

81  
U£r
.
Ußge
[ 
mId
 ].
Daûy
;

82 
	}
}

85 
Lôî_T
 
	$GëU£rUßgeM⁄thlyW©î
(
U£rId_T
 
mId
)

87  
U£r
.
Ußge
[ 
mId
 ].
M⁄thly
[ 0 ];

88 
	}
}

91 
	$SëU£rUßgeW©î
(
U£rId_T
 
mId
, 
UßgeTy≥_T
 
mUßgeTy≥
, 
U8
 
mu8M⁄th
, 
Lôî_T
 
mAmou¡
 )

93 if–
mUßgeTy≥
 =
USAGE_DAILY
 )

96 
U£r
.
Ußge
[ 
mId
 ].
Daûy
 = 
mAmou¡
;

101 
U£r
.
Ußge
[ 
mId
 ].
M⁄thly
[
mu8M⁄th
] = 
mAmou¡
;

104 
	`SaveEïromU£rUßge
–
mId
 );

105 
	}
}

115 
	$AddU£rUßgeW©î
(
U32
 
mu32Amou¡
)

117 
U£rId_T
 
mU£rId
;

118 
Lôî_T
 
mLôî
;

120 
mU£rId
 = 
U£r
.
SñU£r
;

123 
mLôî
 = (
Lôî_T
)(
mu32Amou¡
 / 
LITER_UNIT
 );

125 if–
U£r
.
Ußge
[ 
mU£rId
 ].
Daûy
 < 
MAX_LITER_VAL
 )

127 
U£r
.
Ußge
[ 
mU£rId
 ].
Daûy
 +
mLôî
;

129 if–
U£r
.
Ußge
[ 
mU£rId
 ].
M⁄thly
[0] < 
MAX_LITER_VAL
 )

131 
U£r
.
Ußge
[ 
mU£rId
 ].
M⁄thly
[0] +
mLôî
;

135 
	`SaveEïromU£rUßge
–
mU£rId
 );

136 
	}
}

143 #i‡
CONFIG_USER_SODA


144 
SodaInfo_T
 
	gSodaInfo
;

146 
	$InôSodaUßge
()

148 
	`MEMSET
((
__FAR
 *)&
SodaInfo
, 0, –
SodaInfo_T
 ));

149 
SodaInfo
.
Index
 = 0;

150 
SodaInfo
.
Sèπ
 = 0;

151 
	}
}

155 
U8
 
	$CheckSodaUßgeD©e
()

157 
TimeD©a_T
 
mTime
;

158 
SodaUßge_T
 *
pUßge
 = 
NULL
;

161 
	`GëRtcTime
–&
mTime
 );

162 
pUßge
 = &
SodaInfo
.
Day
[ SodaInfo.
Index
 ];

165 if–
pUßge
->
Yór
 == 0

166 && 
pUßge
->
M⁄th
 == 0

167 && 
pUßge
->
D©e
 == 0 )

169 
pUßge
->
Yór
 = 
mTime
.Year;

170 
pUßge
->
M⁄th
 = 
mTime
.Month;

171 
pUßge
->
D©e
 = 
mTime
.Date;

172 
pUßge
->
Ußge
 = 0;

174  
FALSE
;

178 if–
mTime
.
Yór
 !
pUßge
->Year

179 || 
mTime
.
M⁄th
 !
pUßge
->Month

180 || 
mTime
.
D©e
 !
pUßge
->Date )

183 
SodaInfo
.
Index
++;

184 if–
SodaInfo
.
Index
 >
SODA_USAGE_NUM
 )

186 
SodaInfo
.
Index
 = 0;

189 if–
SodaInfo
.
Index
 =SodaInfo.
Sèπ
 )

191 
SodaInfo
.
Sèπ
++;

192 if–
SodaInfo
.
Sèπ
 >
SODA_USAGE_NUM
 )

194 
SodaInfo
.
Sèπ
 = 0;

198 
SodaInfo
.
Num
++;

199 if–
SodaInfo
.
Num
 >
SODA_USAGE_NUM
 )

201 
SodaInfo
.
Num
 = 
SODA_USAGE_NUM
 - 1;

205 
pUßge
 = &
SodaInfo
.
Day
[ SodaInfo.
Index
 ];

206 
pUßge
->
Yór
 = 
mTime
.Year;

207 
pUßge
->
M⁄th
 = 
mTime
.Month;

208 
pUßge
->
D©e
 = 
mTime
.Date;

209 
pUßge
->
Ußge
 = 0;

211  
TRUE
;

214  
FALSE
;

215 
	}
}

217 
	$SaveEïromSodaUßge
()

219 
EïromId_T
 
mBlockId
;

221 
mBlockId
 = 
EEP_ID_SODA_USAGE_0
 + 
SodaInfo
.
Index
;

222 
	`SaveEïromId
–
mBlockId
 );

223 
	}
}

226 
	$AddSodaUßgeW©î
(
U32
 
mu32Amou¡
)

228 
U8
 
mu8Rë
 = 
FALSE
;

229 
Lôî_T
 
mLôî
;

233 
mu8Rë
 = 
	`CheckSodaUßgeD©e
();

234 if–
mu8Rë
 =
TRUE
 )

236 
	`SaveEïromId
–
EEP_ID_SODA_INFO
 );

239 
mLôî
 = (
Lôî_T
)(
mu32Amou¡
 / 
LITER_UNIT
 );

240 if–
SodaInfo
.
Day
[ SodaInfo.
Index
 ].
Ußge
 < 
MAX_LITER_VAL
 )

242 
SodaInfo
.
Day
[ SodaInfo.
Index
 ].
Ußge
 +
mLôî
;

244 
	`SaveEïromSodaUßge
();

245 
	}
}

247 
	$GëSodaUßgeD©a
(
SodaInfo_T
 *
pD©a
)

249 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
SodaInfo
, (
SodaInfo_T
));

250 
	}
}

252 
U8
 
	$GëSodaUßgeDayD©a
(
U8
 
mu8Index
, 
SodaUßge_T
 *
pDay
)

254 if–
mu8Index
 < 
SODA_USAGE_NUM
 )

256 
	`MEMCPY
–(
__FAR
 *)
pDay
, (c⁄° __FAR *)&
SodaInfo
.
Day
[ 
mu8Index
 ], –
SodaUßge_T
 ));

258  
TRUE
;

261  
FALSE
;

262 
	}
}

264 
	$SëSodaUßgeW©î
(
U8
 
mu8Index
, U8 
mu8Yór
, U8 
mu8M⁄th
, U8 
mu8D©e
, 
Lôî_T
 
mLôî
 )

266 
SodaUßge_T
 *
pUßge
 = 
NULL
;

268 if–
mu8Index
 < 
SODA_USAGE_NUM
 )

270 
pUßge
 = &
SodaInfo
.
Day
[ 
mu8Index
 ];

271 
pUßge
->
Yór
 = 
mu8Yór
;

272 
pUßge
->
M⁄th
 = 
mu8M⁄th
;

273 
pUßge
->
D©e
 = 
mu8D©e
;

274 
pUßge
->
Ußge
 = 
mLôî
;

276 
	}
}

278 
	$SëSodaUßgeInfoIndex
(
U8
 
mu8Index
)

280 if–
mu8Index
 < 
SODA_USAGE_NUM
 )

282 
SodaInfo
.
Index
 = 
mu8Index
;

284 
	}
}

286 
U8
 
	$GëSodaUßgeInfoIndex
()

288  
SodaInfo
.
Index
;

289 
	}
}

291 
	$SëSodaUßgeInfoSèπ
(
U8
 
mu8Sèπ
)

293 if–
mu8Sèπ
 < 
SODA_USAGE_NUM
 )

295 
SodaInfo
.
Sèπ
 = 
mu8Sèπ
;

297 
	}
}

299 
U8
 
	$GëSodaUßgeInfoSèπ
()

301  
SodaInfo
.
Sèπ
;

302 
	}
}

304 
	$SëSodaUßgeInfoNum
(
U8
 
mu8Num
)

306 
SodaInfo
.
Num
 = 
mu8Num
;

307 
	}
}

309 
U8
 
	$GëSodaUßgeInfoNum
()

311  
SodaInfo
.
Num
;

312 
	}
}

317 
	$CÀ¨AŒDaûyUßge
()

319 
U£rId_T
 
i
;

321  
i
 = 
USER_NONE
; i < 
USER_NUM
 ; i++ )

323 
	`SëU£rUßgeW©î
–
i
, 
USAGE_DAILY
, 0, 0 );

325 
	}
}

327 
	$CÀ¨AŒM⁄thlyUßge
()

329 
U£rId_T
 
mu8U£r
;

330 
U8
 
mu8M⁄th
;

333  
mu8U£r
 = 
USER_NONE
; mu8U£∏< 
USER_NUM
 ; mu8User++ )

336  
mu8M⁄th
 = 0; mu8M⁄th < 
MAX_USER_MONTH
; mu8Month++ )

338 
	`SëU£rUßgeW©î
–
mu8U£r
, 
USAGE_MONTHLY
, 
mu8M⁄th
, 0 );

341 
	}
}

346 
	$Ch™geM⁄thly
()

348 
U8
 
i
;

349 
Lôî_T
 
mLôî
;

352  
i
 = 0 ; i < 
USER_NUM
 ; i++ )

354 
mLôî
 = 
	`GëU£rUßgeW©î
–
i
, 
USAGE_MONTHLY
, 0 );

355 
	`SëU£rUßgeW©î
–
i
, 
USAGE_MONTHLY
, 1, 
mLôî
 );

356 
	`SëU£rUßgeW©î
–
i
, 
USAGE_MONTHLY
, 0, 0 );

358 
	}
}

362 
	$CÀ¨AŒUßgeW©î
()

364 
	`CÀ¨AŒM⁄thlyUßge
();

365 
	`CÀ¨AŒDaûyUßge
();

366 
	}
}

369 
	$Pro˚ssU£r
()

371 
U8
 
mu8Inô
 = 
FALSE
;

372 
U8
 
mu8PªvDay
 = 0;

373 
U8
 
mu8PªvM⁄th
 = 0;

374 
U8
 
mu8PªvYór
 = 0;

375 
U8
 
mu8M⁄th
;

376 
TimeD©a_T
 
mTime
;

379 
	`GëRtcTime
–&
mTime
 );

380 if–
mu8Inô
 =
FALSE
 )

382 
mu8Inô
 = 
TRUE
;

384 
mu8PªvDay
 = 
mTime
.
D©e
;

385 
mu8PªvM⁄th
 = 
mTime
.
M⁄th
;

386 
mu8PªvYór
 = 
mTime
.
Yór
;

392 if–
mu8PªvDay
 !
mTime
.
D©e
 )

394 
mu8PªvDay
 = 
mTime
.
D©e
;

396 
	`CÀ¨AŒDaûyUßge
();

399 if–
mTime
.
D©e
 == 1 )

401 
	`Ch™geM⁄thly
();

407 if–
mu8PªvM⁄th
 !
mTime
.
M⁄th
 )

409 
mu8PªvM⁄th
 = 
mTime
.
M⁄th
;

411 
	`CÀ¨AŒM⁄thlyUßge
();

412 
	`CÀ¨AŒDaûyUßge
();

414 if–
mu8PªvYór
 !
mTime
.
Yór
 )

417 
mu8PªvYór
 = 
mTime
.
Yór
;

419 
	`CÀ¨AŒM⁄thlyUßge
();

420 
	`CÀ¨AŒDaûyUßge
();

422 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\user.h

1 #i‚de‡
__USER_H__


2 
	#__USER_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out.h
"

7 
	#CONFIG_USER_SODA
 0

	)

12 
	mUSER_NONE
,

13 
	mUSER_A
,

14 
	mUSER_B
,

15 
	mUSER_C
,

16 
	mUSER_NUM


17 } 
	tU£rId_T
;

22 
	mUSAGE_DAILY
,

23 
	mUSAGE_MONTHLY
,

24 
	mUSAGE_NUM


25 } 
	tUßgeTy≥_T
;

29 
	#MAX_LITER_VAL
 60000U

	)

30 
U16
 
	tLôî_T
;

32 
	#MAX_USER_MONTH
 1

	)

33 
	s_ußge_


35 
Lôî_T
 
	mDaûy
;

36 
Lôî_T
 
	mM⁄thly
[1];

37 } 
	tUßge_T
;

40 
	s_u£r_


42 
U£rId_T
 
	mSñU£r
;

43 
Ußge_T
 
	mUßge
[ 
USER_NUM
 ];

44 } 
	tU£rInfo_T
;

49 #i‡
CONFIG_USER_SODA


52 
	#SODA_USAGE_NUM
 30

	)

53 
	s_soda_ußge_


55 
U8
 
	mYór
;

56 
U8
 
	mM⁄th
;

57 
U8
 
	mD©e
;

58 
Lôî_T
 
	mUßge
;

59 } 
	tSodaUßge_T
;

60 
	s_soda_öfo_


62 
U8
 
	mSèπ
;

63 
U8
 
	mIndex
;

64 
U8
 
	mNum
;

65 
SodaUßge_T
 
	mDay
[ 
SODA_USAGE_NUM
 ];

66 } 
	tSodaInfo_T
;

68 
InôSodaUßge
();

69 
AddSodaUßgeW©î
(
U32
 
mu32Amou¡
);

70 
GëSodaUßgeD©a
(
SodaInfo_T
 *
pD©a
);

71 
U8
 
GëSodaUßgeDayD©a
(U8 
mu8Index
, 
SodaUßge_T
 *
pDay
);

72 
SëSodaUßgeW©î
(
U8
 
mu8Index
, U8 
mu8Yór
, U8 
mu8M⁄th
, U8 
mu8D©e
, 
Lôî_T
 
mLôî
 );

74 
SëSodaUßgeInfoIndex
(
U8
 
mu8Index
);

75 
U8
 
GëSodaUßgeInfoIndex
();

77 
SëSodaUßgeInfoSèπ
(
U8
 
mu8Sèπ
);

78 
U8
 
GëSodaUßgeInfoSèπ
();

80 
SëSodaUßgeInfoNum
(
U8
 
mu8Num
);

81 
U8
 
GëSodaUßgeInfoNum
();

85 
InôU£r
();

86 
GëU£rD©a
(
U£rInfo_T
 *
pD©a
);

89 
SëU£r
(
U£rId_T
 
mU£rId
 );

90 
U£rId_T
 
GëU£r
();

98 
Lôî_T
 
GëU£rUßgeW©î
(
U£rId_T
 
mId
, 
UßgeTy≥_T
 
mUßgeTy≥
, 
U8
 
mu8M⁄th
 );

101 
Lôî_T
 
GëU£rUßgeDaûyW©î
(
U£rId_T
 
mId
);

104 
Lôî_T
 
GëU£rUßgeM⁄thlyW©î
(
U£rId_T
 
mId
);

112 
SëU£rUßgeW©î
(
U£rId_T
 
mId
, 
UßgeTy≥_T
 
mUßgeTy≥
, 
U8
 
mu8M⁄th
, 
Lôî_T
 
mAmou¡
 );

116 
AddU£rUßgeW©î
(
U32
 
mu32Amou¡
);

119 
CÀ¨AŒUßgeW©î
();

122 
Pro˚ssU£r
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key.c

1 
	~"hw.h
"

2 
	~"key.h
"

4 
	~<°rög.h
>

10 
	mKEY_STATUS_NONE
,

11 
	mKEY_STATUS_PUSHED
,

12 
	mKEY_STATUS_POP
,

13 
	mKEY_STATUS_TIME_OUT


14 }
	tKeySètus_T
;

18 
	#EVENT_TIME_OUT_5S
 500

19 
	#EVENT_TIME_OUT_3S
 300

20 
	#EVENT_TIME_OUT_2S
 200

21 
	#EVENT_TIME_OUT_1S
 100

22 
	#EVENT_TIME_OUT_SHORT
 10

23 
	#MAX_EVENT_TIME_OUT
 
EVENT_TIME_OUT_5S


	)

25 
	s_key_


27 
KeySètus_T
 
	mSètus
;

29 
U32
 
	mVÆ
;

30 
U32
 
	mVÆP›
;

31 
U16
 
	mPushedTime
;

32 
U8
 
	mEvítFœg
;

33 } 
	tKey_T
;

35 
Key_T
 
	gKey
;

39 
	$InôKey
()

41 
	`MEMSET
((
__FAR
 *)&
Key
, 0, ( Key ) );

42 
	}
}

45 
U32
 
	$GëKeyVÆ
( )

47  
Key
.
VÆ
;

48 
	}
}

50 
U32
 
	$GëKeyP›VÆ
()

52  
Key
.
VÆP›
;

53 
	}
}

55 
	$SëKeyEvítFœg
(
U8
 
mu8Evít
 )

57 
Key
.
EvítFœg
 |
mu8Evít
;

58 
	}
}

60 
	$CÀ¨KeyEvítFœg
(
U8
 
mu8Evít
 )

62 
Key
.
EvítFœg
 &~
mu8Evít
;

63 
	}
}

65 
U8
 
	$IsSëKeyEvítFœg
–
U8
 
mu8Evít
 )

67 if–(
Key
.
EvítFœg
 & 
mu8Evít
) == mu8Event )

69  
TRUE
;

72  
FALSE
;

73 
	}
}

89 
	s_KeyEvít_


91 
U16
 
	mu16EvítTime
;

92 
U8
 
	mu8Evít
;

93 } 
	tKeyEvít_T
;

95 
KeyEvít_T
 
	gKeyEvítLi°
[] =

97 { 
EVENT_TIME_OUT_5S
, 
KEY_EVENT_PUSHED_LONG_5S
 },

98 { 
EVENT_TIME_OUT_3S
, 
KEY_EVENT_PUSHED_LONG_3S
 },

99 { 
EVENT_TIME_OUT_2S
, 
KEY_EVENT_PUSHED_LONG_2S
 },

100 { 
EVENT_TIME_OUT_1S
, 
KEY_EVENT_PUSHED_LONG_1S
 },

101 { 
EVENT_TIME_OUT_SHORT
, 
KEY_EVENT_PUSHED_SHORT
 },

104 
	#SZ_KEY_EVENT_LIST
 ((
KeyEvítLi°
)/(
KeyEvít_T
))

	)

106 
	$FödSëKeyEvít
(
U16
 
mu16PushedTime
)

108 
U8
 
mu8Index
;

110  
mu8Index
 = 0; mu8Index < 
SZ_KEY_EVENT_LIST
 ; mu8Index++ )

112 if–
KeyEvítLi°
[ 
mu8Index
 ].
u16EvítTime
 =
mu16PushedTime
 )

114 
	`SëKeyEvítFœg
–
KeyEvítLi°
[ 
mu8Index
 ].
u8Evít
 );

118 
	}
}

120 
	$Pro˚ssSˇnKey
()

122 
U32
 
mu32PªvKeyVÆ
;

123 
U32
 
mu32KeyVÆ
;

127 
mu32KeyVÆ
 = 
	`HAL_GëKeyVÆ
();

128 if–
mu32PªvKeyVÆ
 !
mu32KeyVÆ
 )

130 if–
mu32KeyVÆ
 =
HAL_KEY_NONE
 )

132 
Key
.
VÆP›
 = 
mu32PªvKeyVÆ
;

135 
mu32PªvKeyVÆ
 = 
mu32KeyVÆ
;

136 
Key
.
VÆ
 = 
mu32KeyVÆ
;

138 if–
mu32KeyVÆ
 !
HAL_KEY_NONE
 )

140 
Key
.
Sètus
 = 
KEY_STATUS_PUSHED
;

141 
Key
.
PushedTime
 = 0;

142 
	`CÀ¨KeyEvítFœg
–
KEY_EVENT_ALL
 );

147 if–
Key
.
PushedTime
 > 
EVENT_TIME_OUT_SHORT
 )

149 
Key
.
Sètus
 = 
KEY_STATUS_POP
;

150 
	`SëKeyEvítFœg
–
KEY_EVENT_POP
 );

154 
Key
.
Sètus
 = 
KEY_STATUS_NONE
;

159 if–
Key
.
Sètus
 =
KEY_STATUS_PUSHED
 )

161 
Key
.
PushedTime
++;

162 
	`FödSëKeyEvít
–
Key
.
PushedTime
 );

164 if–
Key
.
PushedTime
 > 
MAX_EVENT_TIME_OUT
 )

166 
Key
.
Sètus
 = 
KEY_STATUS_TIME_OUT
;

169 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key.h

1 #i‚de‡
__KEY_H__


2 
	#__KEY_H__


	)

4 
	~"hÆ_key.h
"

6 
InôKey
();

9 
	#K_NONE
 
HAL_KEY_NONE


	)

11 
	#K_SETTING
 
HAL_KEY_1


	)

12 
	#K_ICE
 
HAL_KEY_2


13 
	#K_HOT
 
HAL_KEY_3


14 
	#K_ROOM
 
HAL_KEY_4


	)

16 
	#K_COLD
 
HAL_KEY_5


	)

17 
	#K_AMOUNT
 
HAL_KEY_6


	)

18 
	#K_ICE_MAKE
 
HAL_KEY_7


19 
	#K_ICE_LOCK
 
HAL_KEY_8


	)

21 
	#K_HOT_LOCK
 
HAL_KEY_9


22 
	#K_LOCK_ALL
 
HAL_KEY_10


	)

23 
	#K_COLD_MAKE
 
HAL_KEY_11


	)

24 
	#K_SAVE
 
HAL_KEY_12


	)

27 
	#K_CP_ICE_TURBO
 
HAL_KEY_13


	)

28 
	#K_CP_ICE_SIZE
 
HAL_KEY_14


	)

29 
	#K_CP_ICE_MAKE
 
HAL_KEY_15


	)

31 
	#K_ALL
 
HAL_KEY_ALL


	)

35 
	#K_HOT_USER
 ( 
K_HOT
 | 
K_SETTING
 )

36 
	#K_HOT_TEST
 ( 
K_HOT
 | 
K_SETTING
 | 
K_COLD
 )

37 
	#K_DEICING
 ( 
K_ICE_LOCK
 | 
K_SAVE
 )

38 
	#K_CODY_KIT
 ( 
K_HOT
 | 
K_ROOM
 | 
K_AMOUNT
 )

	)

39 
	#K_CODY_KIT_CP
 ( 
K_CP_ICE_TURBO
 | 
K_ROOM
 | 
K_AMOUNT
 )

	)

40 
	#K_EMPTY_COLD
 ( 
K_HOT
 | 
K_COLD
 )

41 
	#K_EMPTY_COLD_CP
 ( 
K_CP_ICE_TURBO
 | 
K_COLD
 )

42 

	)

43 
	#K_EMPTY_COLD_DRAIN
 ( 
K_HOT
 | 
K_COLD
 | 
K_ROOM
 )

44 
	#K_EMPTY_COLD_DRAIN_CP
 ( 
K_CP_ICE_TURBO
 | 
K_COLD
 | 
K_ROOM
 )

45 

	)

46 
	#K_DRAIN_COLD
 ( 
K_HOT
 | 
K_COLD
 | 
K_AMOUNT
)

47 
	#K_DRAIN_COLD_CP
 ( 
K_CP_ICE_TURBO
 | 
K_COLD
 | 
K_AMOUNT
)

48 

	)

49 
	#K_TEST_ICE_TRAY
 ( 
K_ICE
 | 
K_AMOUNT
 )

50 
	#K_TEST_ICE_TRAY_CP
 ( 
K_CP_ICE_SIZE
 | 
K_AMOUNT
 )

51 

	)

56 
	#K_SETTING_CLOCK
 ( 
K_SETTING
 | 
K_ICE
 )

57 
	#K_SETTING_CLOCK_CP
 ( 
K_SETTING
 | 
K_CP_ICE_SIZE
 )

58 
	#K_SETTING_SOUND
 ( 
K_ROOM
 | 
K_AMOUNT
 )

59 
	#K_SETTING_CUSTOMER
 ( 
K_SETTING
 | 
K_ROOM
 )

60 
	#K_CANCEL_FLUSH
 ( 
K_SETTING
 | 
K_ICE
 | 
K_COLD
 | 
K_AMOUNT
 )

61 
	#K_CANCEL_FLUSH_CP
 ( 
K_SETTING
 | 
K_CP_ICE_SIZE
 | 
K_COLD
 | 
K_AMOUNT
 )

62 

	)

64 
	#K_TEST_TS
 ( 
K_SETTING
 | 
K_SAVE
 )

66 
	#K_MEMENTO
 ( 
K_ICE_LOCK
 | 
K_LOCK_ALL
 )

67 

	)

69 
	#K_WIFI_AP
 ( 
K_COLD
 | 
K_ROOM
 )

	)

70 
	#K_WIFI_ONOFF
 ( 
K_COLD
 | 
K_AMOUNT
 )

	)

73 
	#K_TEST_FRONT
 ( 
K_SETTING
 | 
K_AMOUNT
 )

74 
	#K_TEST_EOL
 ( 
K_HOT
 | 
K_AMOUNT
 )

75 
	#K_TEST_EOL_CP
 ( 
K_CP_ICE_TURBO
 | 
K_AMOUNT
 )

76 
	#K_TEST_FCT
 ( 
K_ICE_LOCK
 | 
K_COLD_MAKE
 )

77 

	)

80 
	#K_TEST_COMP
 ( 
K_ICE_LOCK
 | 
K_AMOUNT
 )

81 

	)

83 
U32
 
GëKeyVÆ
( );

84 
U32
 
GëKeyP›VÆ
( );

87 
	#KEY_EVENT_PUSHED_SHORT
 0x01

	)

88 
	#KEY_EVENT_PUSHED_LONG_5S
 0x02

	)

89 
	#KEY_EVENT_PUSHED_LONG_3S
 0x04

	)

90 
	#KEY_EVENT_PUSHED_LONG_2S
 0x08

	)

91 
	#KEY_EVENT_PUSHED_LONG_1S
 0x10

	)

92 
	#KEY_EVENT_POP
 0x20

	)

93 
	#KEY_EVENT_ALL
 0x3F

	)

94 
SëKeyEvítFœg
(
U8
 
mu8Evít
 );

95 
CÀ¨KeyEvítFœg
(
U8
 
mu8Evít
 );

96 
U8
 
IsSëKeyEvítFœg
–U8 
mu8Evít
 );

98 
Pro˚ssSˇnKey
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_common_handler.h

1 #i‚de‡
__KEY_COMMON_HANDLER_H__


2 
	#__KEY_COMMON_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	$U8
 (*
	tKeyVÆidFun_T
)(
	tU32
 
	tmu32Key
);

11 
	#KEY_ACTION_SHORT
 0

12 
	#KEY_ACTION_2_SEC
 1

13 
	#KEY_ACTION_3_SEC
 2

14 
	#KEY_ACTION_5_SEC
 3

15 
	#KEY_ACTION_POP
 4

16 
	#KEY_ACTION_1_SEC
 5

17 
	#KEY_ACTION_NUM
 6

	)

18 
	$U8
(*
	tKeyFun_T
)();

19 
	s_key_evít_


21 
U32
 
Key
;

22 
KeyFun_T
 
a˘i⁄Evít
[
KEY_ACTION_NUM
];

23 } 
	tKeyEvítLi°_T
;

26 
	$U8
 (*
	tKeyEvítSize_T
)();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_event_lib.c

1 
	~"key_evít_lib.h
"

2 
	~"key.h
"

4 
	~"cﬁd_w©î.h
"

5 
	~"hŸ_w©î.h
"

6 
	~"w©î_out.h
"

7 
	~"i˚.h
"

8 
	~"i˚_do‹.h
"

9 
	~"sound.h
"

10 
	~"timî.h
"

11 
	~"døö.h
"

12 
	~"‰⁄t.h
"

13 
	~"u£r.h
"

14 
	~"f˘.h
"

15 
	~"eﬁ.h
"

16 
	~"¥o˚ss_di•œy.h
"

17 
	~"Àak.h
"

26 
U8
 
	gmu8C⁄tTick
 = 
DEFAULT_CONT_TICK
;

27 
U8
 
	gmu8C⁄tKeyDown
 = 
FALSE
;

28 
U8
 
	gmu8C⁄tKeyUp
 = 
FALSE
;

30 
	$InôC⁄tKey
(
U8
 
mu8Tick
)

32 
mu8C⁄tTick
 = 
mu8Tick
;

33 if–
mu8C⁄tTick
 == 0 )

35 
mu8C⁄tTick
 = 
DEFAULT_CONT_TICK
;

37 
mu8C⁄tKeyUp
 = 
FALSE
;

38 
mu8C⁄tKeyDown
 = 
FALSE
;

39 
	}
}

41 
C⁄åﬁC⁄tKey
–
	$U8
 (*
pfKeyDown
)(), 
	$U8
 (*
pfKeyUp
)())

43 
U8
 
mu8Dñay
 = 0;

46 if–
mu8C⁄tKeyDown
 =
TRUE
 )

48 if–
mu8Dñay
 == 0 )

50 
mu8Dñay
 = 
mu8C⁄tTick
;

51 if–
pfKeyDown
 !
NULL
 )

53 
	`pfKeyDown
();

58 
mu8Dñay
--;

61 if–
mu8C⁄tKeyUp
 =
TRUE
 )

63 if–
mu8Dñay
 == 0 )

65 
mu8Dñay
 = 
mu8C⁄tTick
;

67 if–
pfKeyUp
 !
NULL
 )

69 
	`pfKeyUp
();

74 
mu8Dñay
--;

79 
mu8Dñay
 = 0;

81 
	}
}

83 
U8
 
	$KeyC⁄tDown
()

85 
mu8C⁄tKeyDown
 = 
TRUE
;

87  
SOUND_SELECT
;

88 
	}
}

90 
U8
 
	$KeyC⁄tUp
()

92 
mu8C⁄tKeyUp
 = 
TRUE
;

94  
SOUND_SELECT
;

95 
	}
}

97 
U8
 
	$KeySt›C⁄t
()

99 
mu8C⁄tKeyUp
 = 
FALSE
;

100 
mu8C⁄tKeyDown
 = 
FALSE
;

102  
SOUND_NONE
;

103 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_event_lib.h

1 #i‚de‡
__KEY_EVENT_LIB_H__


2 
	#__KEY_EVENT_LIB_H__


	)

4 
	~"¥j_ty≥.h
"

8 
	#DEFAULT_CONT_TICK
 2

9 
	`InôC⁄tKey
(
U8
 
mu8Tick
);

	)

10 
C⁄åﬁC⁄tKey
–
	$U8
 (*
pfKeyDown
)(), 
	$U8
 (*
pfKeyUp
)());

11 
U8
 
	`KeyC⁄tDown
();

12 
U8
 
	`KeyC⁄tUp
();

13 
U8
 
	`KeySt›C⁄t
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_handler.c

1 
	~"key_h™dÀr.h
"

2 
	~"key_comm⁄_h™dÀr.h
"

6 
KeyVÆidFun_T
 
	gpFunVÆid
 = 
NULL
;

7 
KeyEvítLi°_T
 *
	gpKeyEvítLi°
 = 
NULL
;

9 
U8
 
	ggu8Li°Size
 = 0;

11 
	$Regi°îKeyEvít
–
KeyVÆidFun_T
 
pVÆid
, 
KeyEvítLi°_T
 *
pLi°
, 
U8
 
mu8Size
 )

13 
pFunVÆid
 = 
pVÆid
;

14 
pKeyEvítLi°
 = 
pLi°
;

15 
gu8Li°Size
 = 
mu8Size
;

16 
	}
}

18 
U8
 
	$IsVÆidKeyC⁄dôi⁄
(
U32
 
mu32Key
)

20 
U8
 
mu8Rë
 = 
TRUE
;

23 if–
pFunVÆid
 !
NULL
 )

25 
mu8Rë
 = 
	`pFunVÆid
–
mu32Key
 );

28  
mu8Rë
;

29 
	}
}

31 * 
	$GëKeyEvítLi°
()

33  
pKeyEvítLi°
;

34 
	}
}

36 
U8
 
	$GëKeyEvítLi°Size
()

38  
gu8Li°Size
;

39 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_handler.h

1 #i‚de‡
__KEY_HANDLER_H__


2 
	#__KEY_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"key_comm⁄_h™dÀr.h
"

8 
Regi°îKeyEvít
–
KeyVÆidFun_T
 
pVÆid
, 
KeyEvítLi°_T
 *
pLi°
, 
U8
 
mu8Size
 );

9 
U8
 
IsVÆidKeyC⁄dôi⁄
(
U32
 
mu32Key
);

10 * 
GëKeyEvítLi°
();

11 
U8
 
GëKeyEvítLi°Size
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_normal_handler.c

1 
	~"hw.h
"

2 
	~"key_h™dÀr.h
"

3 
	~"key.h
"

4 
	~"key_comm⁄_h™dÀr.h
"

5 
	~"‰⁄t.h
"

6 
	~"hŸ_w©î.h
"

7 
	~"cﬁd_w©î.h
"

8 
	~"w©î_out.h
"

9 
	~"ènk_˛ón.h
"

10 
	~"i˚.h
"

11 
	~"i˚_makî.h
"

12 
	~"i˚_do‹.h
"

13 
	~"i˚_åay.h
"

14 
	~"powî_ßvög.h
"

15 
	~"sound.h
"

16 
	~"ì¥om.h
"

17 
	~"îr‹.h
"

18 
	~"di•œy_lib.h
"

19 
	~"di•œy_˛ock.h
"

20 
	~"¥o˚ss_di•œy.h
"

21 
	~"πc.h
"

22 
	~"eﬁ.h
"

23 
	~"f˘.h
"

24 
	~"time_sh‹t.h
"

25 
	~"timî.h
"

26 
	~"timî_id.h
"

27 
	~"døö.h
"

28 
	~"hó…h.h
"

29 
	~"døö_w©î.h
"

30 
	~"døö_pump.h
"

31 
	~"Êush_w©î_out.h
"

32 
	~"Àak.h
"

33 
	~"fûãr.h
"

34 
	~"Êow_mëî.h
"

35 
	~"voi˚.h
"

36 
	~"cody_kô.h
"

37 
	~"em±y_cﬁd_ènk.h
"

38 
	~"Êush_w©î_out.h
"

39 
	~"£rvi˚.h
"

40 
	~"i˚_åay_ã°.h
"

41 
	~"key_evít_lib.h
"

42 
	~"WIFI_C⁄åﬁ.h
"

44 #i‡
CONFIG_TEST


45 
	~"comp.h
"

48 
Di•OnOff
(
U8
 
mu8OnOff
);

50 
U8
 
SñSound
();

53 
U8
 
SñHŸ
();

56 
U8
 
SñCﬁd
();

57 
U8
 
OnCﬁdMake
();

58 
U8
 
OffCﬁdMake
();

59 
U8
 
OnOffCﬁdMake
();

60 
U8
 
OnOffEm±yCﬁdFau˚t
();

61 
U8
 
OnOffEm±yCﬁdDøö
();

65 
U8
 
SñRoom
();

67 
U8
 
OnDecoLed
();

68 
U8
 
OffDecoLed
();

70 
U8
 
CÀ¨Memíto
();

73 
U8
 
SñC⁄tyInföôy
();

76 
U8
 
SñSëtög
();

77 
U8
 
OnSëtög
();

78 
U8
 
OnDi•Comp
();

79 #i‡
CONFIG_GAS_FILLING


80 
U8
 
SñGasFûög
();

84 
U8
 
SñAmou¡
();

86 
U8
 
SñAmou¡Ex
();

88 
U8
 
C⁄figAmou¡
();

92 
U8
 
OnI˚Make
();

93 
U8
 
OffI˚Make
();

94 
U8
 
OnOffI˚Make
();

96 
U8
 
SñI˚
();

99 
U8
 
OnOffI˚Turbo
();

102 
U8
 
OnOffI˚Lock
();

104 
U8
 
SñI˚Size
();

107 
U8
 
OnOffHŸLock
();

109 
U8
 
OnOffHŸU£r
();

110 
U8
 
OnOffHŸTe°
();

113 
U8
 
OnOffSave
();

115 
U8
 
SëtögSound
();

116 
U8
 
SëtögCu°omî
();

117 
U8
 
SëtögClock
();

118 
U8
 
SëtögClockSave
();

119 
U8
 
SñC™˚lFlush
();

120 
U8
 
C™˚lFlush
();

126 
U8
 
OnOffMemíto
();

128 
U8
 
OnLockAŒ
();

129 
U8
 
OffLockAŒ
();

134 
U8
 
OnOffCodyKô
();

135 
U8
 
OnTe°I˚Tøy
();

138 
U8
 
OnOffUnu£dSave
();

141 
U8
 
OnDeIcög
();

142 
U8
 
OnM™uÆDøö
();

145 
U8
 
OnEø£Eïrom
();

148 
U8
 
OnWifiAp
();

149 
U8
 
OnWifiBÀ
();

150 
U8
 
OnWifiOnOff
();

153 
U8
 
OnEﬁSèπ
();

154 
U8
 
OnFr⁄tSèπ
();

155 
U8
 
OnF˘Sèπ
();

156 
U8
 
OnTimeSh‹t
();

158 
U8
 
OnTe°Sh‹tCompTime
();

161 
U8
 
OnOffUvI˚T™k
();

162 
U8
 
OnOffUvI˚Tøy
();

163 
U8
 
OnOffUvI˚Out
();

164 
U8
 
OnOffUvW©îOut
();

166 
U8
 
KeyC⁄tDownEx
();

167 
U8
 
KeyC⁄tUpEx
();

168 
U8
 
SñHŸTe°
();

171 
KeyEvítLi°_T
 
	gKeyEvítLi°
[] =

175 #i‡
CONFIG_UV_MANUAL


176 { 
K_HOT
, 
SñHŸ
, 
NULL
, NULL, NULL, NULL, 
OnOffUvI˚Out
 },

177 { 
K_ROOM
, 
SñRoom
, 
NULL
, NULL, NULL, NULL, 
OnOffUvI˚T™k
 },

178 { 
K_COLD
, 
SñCﬁd
, 
NULL
, NULL, NULL, NULL, 
OnOffUvI˚Tøy
 },

179 { 
K_AMOUNT
, 
SñAmou¡
, 
NULL
, 
C⁄figAmou¡
, NULL, NULL, 
OnOffUvW©îOut
 },

181 { 
K_HOT
, 
SñHŸ
, 
NULL
, 
OnOffHŸLock
, NULL, 
KeySt›C⁄t
, 
KeyC⁄tDownEx
 },

182 { 
K_ROOM
, 
SñRoom
, 
NULL
, 
OnWifiBÀ
, NULL, NULL, NULL },

183 { 
K_COLD
, 
SñCﬁd
, 
NULL
, 
OnCﬁdMake
, 
OffCﬁdMake
, 
KeySt›C⁄t
, 
KeyC⁄tUpEx
 },

185 { 
K_AMOUNT
, 
SñAmou¡
, 
NULL
, NULL, NULL, NULL, 
OnDi•Comp
 },

188 #i‡
CONFIG_GAS_FILLING


189 { 
K_SETTING
, 
SñSëtög
, 
SñGasFûög
, 
NULL
, NULL, NULL, NULL },

190 #ñi‡
CONFIG_TEST_HOT_OUT


191 { 
K_SETTING
, 
SñHŸTe°
, 
NULL
, NULL, NULL, NULL, NULL },

193 { 
K_SETTING
, 
SñSëtög
, 
NULL
, 
OnSëtög
, NULL, NULL, NULL },

196 { 
K_LOCK_ALL
, 
OnLockAŒ
, 
NULL
, 
OffLockAŒ
, NULL, NULL, NULL },

197 { 
K_ICE_LOCK
, 
OnOffI˚Lock
, 
NULL
, NULL, NULL, NULL, NULL },

198 { 
K_ICE_MAKE
, 
OnOffI˚Make
, 
NULL
, NULL, NULL, NULL, NULL },

199 { 
K_HOT_LOCK
, 
OnOffHŸLock
, 
NULL
, NULL, NULL, NULL, NULL },

200 { 
K_SAVE
, 
OnOffSave
, 
NULL
, NULL, NULL, NULL, NULL },

201 { 
K_COLD_MAKE
, 
OnOffCﬁdMake
, 
NULL
, NULL, NULL, NULL, NULL },

203 { 
K_ICE
, 
SñI˚
, 
NULL
, 
OnI˚Make
, 
OffI˚Make
, NULL, NULL },

204 #i‡
CONFIG_UV_MANUAL


205 { 
K_CP_ICE_TURBO
, 
OnOffI˚Turbo
, 
NULL
, NULL, NULL, NULL, 
OnOffUvI˚Out
 },

207 { 
K_CP_ICE_TURBO
, 
OnOffI˚Turbo
, 
NULL
, NULL, NULL, 
KeySt›C⁄t
, 
KeyC⁄tDownEx
 },

209 { 
K_CP_ICE_SIZE
, 
SñI˚Size
, 
NULL
, 
OnI˚Make
, 
OffI˚Make
, NULL, NULL },

210 { 
K_CP_ICE_MAKE
, 
OnOffI˚Make
, 
NULL
, NULL, NULL, NULL, NULL },

213 { 
K_HOT_USER
, 
SñSound
, 
NULL
, 
OnOffHŸU£r
, NULL, NULL, NULL },

214 #i‡ 
CONFIG_TEST_HOT_OUT


215 { 
K_HOT_TEST
, 
SñSound
, 
NULL
, 
OnOffHŸTe°
, NULL, NULL, NULL },

217 { 
K_SETTING_SOUND
, 
SñSound
, 
NULL
, 
SëtögSound
, NULL, NULL, NULL },

218 { 
K_SETTING_CUSTOMER
, 
SñSound
, 
NULL
, 
SëtögCu°omî
, NULL, NULL, NULL },

219 { 
K_SETTING_CLOCK
, 
SñSound
, 
NULL
, 
SëtögClock
, NULL, NULL, NULL },

220 { 
K_SETTING_CLOCK_CP
, 
SñSound
, 
NULL
, 
SëtögClock
, NULL, NULL, NULL },

221 { 
K_CANCEL_FLUSH
, 
SñC™˚lFlush
, 
NULL
, 
C™˚lFlush
, NULL, NULL, NULL },

222 { 
K_CANCEL_FLUSH_CP
, 
SñC™˚lFlush
, 
NULL
, 
C™˚lFlush
, NULL, NULL, NULL },

224 { 
K_EMPTY_COLD_DRAIN
, 
SñSound
, 
NULL
, 
OnOffEm±yCﬁdDøö
, NULL, NULL, NULL },

225 { 
K_EMPTY_COLD_DRAIN_CP
, 
SñSound
, 
NULL
, 
OnOffEm±yCﬁdDøö
, NULL, NULL, NULL },

226 { 
K_EMPTY_COLD
, 
SñSound
, 
NULL
, 
OnOffEm±yCﬁdFau˚t
, NULL, NULL, NULL },

227 { 
K_EMPTY_COLD_CP
, 
SñSound
, 
NULL
, 
OnOffEm±yCﬁdFau˚t
, NULL, NULL, NULL },

228 { 
K_DRAIN_COLD
, 
SñSound
, 
NULL
, 
OnM™uÆDøö
, NULL, NULL, NULL },

229 { 
K_DRAIN_COLD_CP
, 
SñSound
, 
NULL
, 
OnM™uÆDøö
, NULL, NULL, NULL },

230 { 
K_DEICING
, 
SñSound
, 
OnDeIcög
, 
NULL
, NULL, NULL, NULL },

233 { 
K_WIFI_AP
, 
SñSound
, 
NULL
, 
OnWifiAp
, NULL, NULL, NULL },

234 { 
K_WIFI_ONOFF
, 
SñSound
, 
NULL
, 
OnWifiOnOff
, NULL, NULL, NULL },

236 { 
K_CODY_KIT
, 
SñSound
, 
OnOffCodyKô
, 
NULL
, NULL, NULL, NULL },

237 { 
K_CODY_KIT_CP
, 
SñSound
, 
OnOffCodyKô
, 
NULL
, NULL, NULL, NULL },

239 { 
K_TEST_ICE_TRAY
, 
SñSound
, 
OnTe°I˚Tøy
, 
NULL
, NULL, NULL, NULL },

240 { 
K_TEST_ICE_TRAY_CP
, 
SñSound
, 
OnTe°I˚Tøy
, 
NULL
, NULL, NULL, NULL },

243 #i‡
CONFIG_TEST


244 { 
K_TEST_COMP
, 
SñSound
, 
OnTe°Sh‹tCompTime
, 
NULL
, NULL, NULL, NULL },

246 { 
K_TEST_TS
, 
SñSound
, 
OnTimeSh‹t
, 
NULL
, NULL, NULL, NULL },

247 { 
K_TEST_FCT
, 
SñSound
, 
OnF˘Sèπ
, 
NULL
, NULL, NULL, NULL },

249 #i‡
CONFIG_EOL


250 { 
K_TEST_FRONT
, 
SñSound
, 
OnFr⁄tSèπ
, 
NULL
, NULL, NULL, NULL },

251 { 
K_TEST_EOL
, 
SñSound
, 
OnEﬁSèπ
, 
NULL
, NULL, NULL, NULL },

252 { 
K_TEST_EOL_CP
, 
SñSound
, 
OnEﬁSèπ
, 
NULL
, NULL, NULL, NULL }

257 
KeyEvítLi°_T
 
	gKeyEvítTimeSh‹tLi°
[] =

261 { 
K_HOT
, 
SñHŸ
, 
NULL
, NULL, NULL, NULL, NULL },

262 { 
K_ROOM
, 
SñRoom
, 
NULL
, NULL, NULL, NULL, 
OnWifiBÀ
 },

263 { 
K_COLD
, 
SñCﬁd
, 
NULL
, NULL, NULL, NULL, 
OnOffCﬁdMake
 },

264 { 
K_AMOUNT
, 
SñAmou¡
, 
NULL
, NULL, NULL, NULL, 
C⁄figAmou¡
 },

265 { 
K_LOCK_ALL
, 
OnLockAŒ
, 
NULL
, 
OffLockAŒ
, NULL, NULL, NULL },

267 { 
K_SETTING
, 
SñSëtög
, 
NULL
, NULL, NULL, NULL, 
OnSëtög
 },

268 { 
K_ICE_LOCK
, 
OnOffI˚Lock
, 
NULL
, NULL, NULL, NULL, NULL },

269 { 
K_ICE_MAKE
, 
OnOffI˚Make
, 
NULL
, NULL, NULL, NULL, NULL },

270 { 
K_HOT_LOCK
, 
OnOffHŸLock
, 
NULL
, NULL, NULL, NULL, NULL },

271 { 
K_SAVE
, 
OnOffSave
, 
NULL
, NULL, NULL, NULL, NULL },

272 { 
K_COLD_MAKE
, 
OnOffCﬁdMake
, 
NULL
, NULL, NULL, NULL, NULL },

274 { 
K_ICE
, 
SñI˚
, 
NULL
, NULL, NULL, NULL, NULL },

275 { 
K_CP_ICE_TURBO
, 
OnOffI˚Turbo
, 
NULL
, NULL, NULL, NULL, NULL },

276 { 
K_CP_ICE_SIZE
, 
SñI˚Size
, 
NULL
, NULL, NULL, NULL, NULL },

277 { 
K_CP_ICE_MAKE
, 
OnOffI˚Make
, 
NULL
, NULL, NULL, NULL, NULL },

280 { 
K_SETTING_SOUND
, 
SñSound
, 
NULL
, NULL, NULL, NULL, 
SëtögSound
 },

281 { 
K_SETTING_CUSTOMER
, 
SñSound
, 
NULL
, NULL, NULL, NULL, 
SëtögCu°omî
 },

283 { 
K_DEICING
, 
SñSound
, 
NULL
, NULL, NULL, NULL, 
OnDeIcög
 },

286 { 
K_WIFI_AP
, 
SñSound
, 
NULL
, NULL, NULL, NULL, 
OnWifiAp
 },

287 { 
K_WIFI_ONOFF
, 
SñSound
, 
NULL
, NULL, NULL, NULL, 
OnWifiOnOff
 },

289 { 
K_TEST_COMP
, 
SñSound
, 
NULL
, NULL, NULL, NULL, 
OnTe°Sh‹tCompTime
 },

292 { 
K_MEMENTO
, 
SñSound
, 
NULL
, NULL, NULL, NULL, 
OnOffMemíto
 },

296 
KeyEvítLi°_T
 
	gKeyEvítMemítoLi°
[] =

300 { 
K_SETTING
, 
NULL
, NULL, NULL, NULL, NULL, 
OnOffMemíto
 },

301 { 
K_ROOM
, 
NULL
, NULL, NULL, NULL, NULL, 
CÀ¨Memíto
 },

304 
U8
 
	$IsVÆidSoundMíu
(
U32
 
mu32Key
)

306 if–
	`GëSoundDi•
(Ë=
FALSE
 )

308  
TRUE
;

311 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

313 if–
mu32Key
 !
K_COLD


314 && 
mu32Key
 !
K_HOT


315 && 
mu32Key
 !
K_SETTING_SOUND


318  
FALSE
;

323 if–
mu32Key
 !
K_COLD


324 && 
mu32Key
 !
K_CP_ICE_TURBO


325 && 
mu32Key
 !
K_SETTING_SOUND


328  
FALSE
;

332  
TRUE
;

333 
	}
}

335 
U8
 
	$IsVÆidClockMíu
(
U32
 
mu32Key
)

338 if–
	`GëClockDi•
(Ë=
TRUE
 )

340 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

342 if–
mu32Key
 !
K_SETTING


343 && 
mu32Key
 !
K_HOT


344 && 
mu32Key
 !
K_COLD


347  
FALSE
;

352 if–
mu32Key
 !
K_SETTING


353 && 
mu32Key
 !
K_CP_ICE_TURBO


354 && 
mu32Key
 !
K_COLD


357  
FALSE
;

362  
TRUE
;

363 
	}
}

365 
U8
 
	$IsVÆidN‹mÆKeyC⁄dôi⁄
(
U32
 
mu32Key
)

368 if–
	`Re£tDøöW©î
(Ë=
TRUE
 )

370 
	`Sound
–
SOUND_CANCEL
 );

371  
FALSE
;

375 if–
	`IsVÆidClockMíu
–
mu32Key
 ) =
FALSE
 )

377  
FALSE
;

381 if–
	`IsSèπEm±yCﬁdT™k
(Ë=
TRUE


382 && 
	`GëEm±yCﬁdT™kTy≥
(Ë=
TYPE_FAUCET
 )

384 if–
mu32Key
 !
K_EMPTY_COLD


385 && 
mu32Key
 !
K_EMPTY_COLD_CP
 )

387  
FALSE
;

392 if–
	`IsSèπEm±yCﬁdT™k
(Ë=
TRUE


393 && 
	`GëEm±yCﬁdT™kTy≥
(Ë=
TYPE_DRAIN
 )

395 if–
mu32Key
 !
K_EMPTY_COLD_DRAIN


396 && 
mu32Key
 !
K_EMPTY_COLD_DRAIN_CP
 )

398  
FALSE
;

404 if–
	`IsVÆidSoundMíu
–
mu32Key
 ) =
FALSE
 )

406  
FALSE
;

410 if–
	`GëCu°omîDi•
(Ë=
TRUE
 )

412 if–
mu32Key
 !
K_SETTING_CUSTOMER
 )

414  
FALSE
;

419 if–
	`GëFûãrDi•
(Ë=
TRUE
 )

421 if–
mu32Key
 !
K_CODY_KIT


422 && 
mu32Key
 !
K_CODY_KIT_CP
 )

424  
FALSE
;

429 if–
	`GëLockAŒ
(Ë=
LOCK
 )

431 if–
mu32Key
 !
K_LOCK_ALL
 )

433  
FALSE
;

438 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

440 if–
mu32Key
 !
K_TEST_FCT


441 && 
mu32Key
 !
K_TEST_FRONT


442 #i‡
CONFIG_EOL


443 && 
mu32Key
 !
K_TEST_EOL


444 && 
mu32Key
 !
K_TEST_EOL_CP


446 && 
mu32Key
 !
K_CANCEL_FLUSH


447 && 
mu32Key
 !
K_CANCEL_FLUSH_CP


448 && 
mu32Key
 !
K_COLD


449 && 
mu32Key
 !
K_LOCK_ALL


450 && 
mu32Key
 !
K_ROOM


451 && 
mu32Key
 !
K_WIFI_AP


452 && 
mu32Key
 !
K_WIFI_ONOFF


455  
FALSE
;

460 if–
	`GëSëtögDi•
(Ë=
TRUE
 )

462 if–
mu32Key
 !
K_ICE_LOCK


463 && 
mu32Key
 !
K_HOT_LOCK


464 && 
mu32Key
 !
K_COLD_MAKE


465 && 
mu32Key
 !
K_ICE_MAKE


466 && 
mu32Key
 !
K_SAVE


467 && 
mu32Key
 !
K_SETTING


468 && 
mu32Key
 !
K_LOCK_ALL


469 && 
mu32Key
 !
K_CP_ICE_MAKE


472  
FALSE
;

476 
	`SèπDi•TimîId
–
DISP_TIMER_SETTING_MENU
 );

481 if–
mu32Key
 =
K_ICE_LOCK


482 || 
mu32Key
 =
K_HOT_LOCK


483 || ( 
mu32Key
 =
K_LOCK_ALL
 && 
	`GëLockAŒ
(Ë=
UNLOCK
 )

484 || 
mu32Key
 =
K_COLD_MAKE


485 || 
mu32Key
 =
K_ICE_MAKE


486 || 
mu32Key
 =
K_SAVE


487 || 
mu32Key
 =
K_CP_ICE_MAKE


490  
FALSE
;

495 if–
	`GëMemítoDi•
(Ë=
TRUE
 )

497 if–
mu32Key
 !
K_SETTING


498 && 
mu32Key
 !
K_ROOM
 )

500  
FALSE
;

506 if–
	`GëLockAŒ
(Ë=
LOCK
 )

509 if–
mu32Key
 !
K_LOCK_ALL


510 && 
mu32Key
 !
K_SETTING
 )

512 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_SETTING
 );

513 
	`Sound
–
SOUND_ALARM_LOCK_ALL
 );

514  
FALSE
;

520 if–
	`GëW©îOut
(Ë=
TRUE


521 && 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_CODY
 )

523 if–
mu32Key
 !
K_CODY_KIT


524 || 
mu32Key
 !
K_CODY_KIT_CP
 )

526 
	`Sound
–
SOUND_ERROR
 );

527  
FALSE
;

532 if–
	`GëW©îOut
(Ë=
TRUE


533 && 
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_CODY
 )

535 if–
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_FLUSH
 )

537 
	`Sound
–
SOUND_ERROR
 );

539  
FALSE
;

542 if–
	`GëW©îOut
(Ë=
TRUE


543 && 
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_CODY
 )

545 if–
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_FLUSH
 )

548 
	`Sound
–
SOUND_ERROR
 );

553 if–
mu32Key
 =
K_WIFI_AP


554 || 
mu32Key
 =
K_WIFI_ONOFF


555 || 
mu32Key
 =
K_ROOM
 )

557  
TRUE
;

561  
FALSE
;

566 if–
	`GëI˚Do‹Sètus
(Ë=
ICE_DOOR_OPEN


567 || 
	`GëI˚Do‹Sètus
(Ë=
ICE_DOOR_OPENING
 )

569 if–
mu32Key
 !
K_AMOUNT


570 && 
mu32Key
 !
K_ROOM


571 && 
mu32Key
 !
K_COLD


572 && 
mu32Key
 !
K_HOT
 )

574  
FALSE
;

578  
TRUE
;

579 
	}
}

582 * 
	$GëN‹mÆKeyEvítLi°
()

584 if–
	`GëMemítoDi•
(Ë=
TRUE
 )

586  
KeyEvítMemítoLi°
;

588 if–
	`GëTimeSh‹tSètus
(Ë=
TRUE
 )

590  
KeyEvítTimeSh‹tLi°
;

593  
KeyEvítLi°
;

594 
	}
}

597 
U8
 
	$GëN‹mÆKeyEvítLi°Size
()

599 if–
	`GëMemítoDi•
(Ë=
TRUE
 )

601  ( (
KeyEvítMemítoLi°
Ë/ (
KeyEvítLi°_T
) );

603 if–
	`GëTimeSh‹tSètus
(Ë=
TRUE
 )

605  ( (
KeyEvítTimeSh‹tLi°
Ë/ (
KeyEvítLi°_T
) );

608  ( (
KeyEvítLi°
Ë/ (
KeyEvítLi°_T
) );

609 
	}
}

613 
U8
 
	$SëSñe˘W©î
–
U8
 
mu8Id
 )

621 
	`SëW©îOutSñe˘
–
mu8Id
 );

622  
TRUE
;

623 
	}
}

625 
	$Di•OnOff
(
U8
 
mu8OnOff
)

627 if–
mu8OnOff
 =
ON
 )

629 
	`SèπDi•TimîId
–
DISP_TIMER_ON
 );

630 
	`St›Di•TimîId
–
DISP_TIMER_OFF
 );

634 
	`SèπDi•TimîId
–
DISP_TIMER_OFF
 );

635 
	`St›Di•TimîId
–
DISP_TIMER_ON
 );

637 
	}
}

639 
U8
 
	$SñSound
()

641  
SOUND_SELECT
;

642 
	}
}

645 
U8
 
	$OnClockIãm
()

647 if–
	`GëClockDi•
(Ë=
TRUE
 )

649 
	`NextClock
();

650 
	`SèπDi•TimîId
–
DISP_TIMER_NEXT
 );

651 
	`SèπDi•TimîId
–
DISP_TIMER_CLOCK_MENU
 );

652  
TRUE
;

655  
FALSE
;

656 
	}
}

659 
U8
 
	$OnClockUp
()

661 if–
	`GëClockDi•
(Ë=
TRUE
 )

663 
	`UpClock
();

664 
	`SèπDi•TimîId
–
DISP_TIMER_UP
 );

665 
	`SèπDi•TimîId
–
DISP_TIMER_CLOCK_MENU
 );

666  
TRUE
;

669  
FALSE
;

670 
	}
}

673 
U8
 
	$OnClockDown
()

676 if–
	`GëClockDi•
(Ë=
TRUE
 )

678 
	`DownClock
();

680 
	`SèπDi•TimîId
–
DISP_TIMER_DOWN
 );

681 
	`SèπDi•TimîId
–
DISP_TIMER_CLOCK_MENU
 );

682  
TRUE
;

685  
FALSE
;

686 
	}
}

689 
U8
 
	$SëtögClock
()

691 if–
	`GëClockDi•
(Ë=
FALSE
 )

693 if–
	`GëRtcC⁄figInô
(Ë=
FALSE
 )

695 
	`InôClock
–
TRUE
 );

699 
	`InôClock
–
FALSE
 );

702 
	`InôC⁄tKey
–
DEFAULT_CONT_TICK
 );

703 
	`SëSëtögDi•
–
FALSE
 );

704 
	`SëClockDi•
–
TRUE
 );

707 
	`SèπDi•TimîId
–
DISP_TIMER_CLOCK_MENU
 );

708  
SOUND_SETUP
;

709 
	}
}

711 
U8
 
	$SëtögClockSave
()

713 
	`SaveClock
();

714 
	`SëClockDi•
–
FALSE
 );

716 
	`SèπDi•TimîId
–
DISP_TIMER_SETTING_CLOCK
 );

717  
SOUND_SETUP
;

718 
	}
}

720 
	$C⁄tySëtögClockKey
()

722 
	`C⁄åﬁC⁄tKey
–
OnClockDown
, 
OnClockUp
 );

723 
	}
}

725 
U8
 
	$SñC™˚lFlush
()

727 if–
	`IsExpúedTe°KeyLimôTimî
(Ë=
TRUE
 )

729  
SOUND_NONE
;

732  
SOUND_SELECT
;

733 
	}
}

736 
U8
 
	$C™˚lFlush
()

738 if–
	`IsExpúedTe°KeyLimôTimî
(Ë=
TRUE
 )

740  
SOUND_NONE
;

744 
	`SëFlushSëupInô
–
FLUSH_STATUS_DONE
 );

745 
	`SëFlushSètus
–
FLUSH_STATUS_DONE
 );

746 
	`SëFlushPowîOn
–
FLUSH_STATUS_DONE
 );

747 
	`SaveEïromId
–
EEP_ID_FLUSH_STATUS
 );

748 
	`SaveEïromId
–
EEP_ID_FLUSH_SETUP_INIT
 );

750 
	`SëFûãrCh™gedSètus
–
FILTER_MOUNTED
 );

751 
	`SaveEïromId
–
EEP_ID_FILTER_CHANGED
 );

753 
	`SëCﬁdW©îInôFuŒ
–
TRUE
 );

754 
	`SëFŸaReboŸ
–
FALSE
 );

755 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

757  
SOUND_SETUP
;

758 
	}
}

760 
U8
 
	$OnVﬁumeUp
()

762 if–
	`GëSoundDi•
(Ë=
TRUE
 )

764 if–
	`GëVoi˚Levñ
(Ë!
VOICE_LEVEL_OFF
 )

766 
	`SèπDi•TimîId
–
DISP_TIMER_UP
 );

767 
	`SèπDi•TimîId
–
DISP_TIMER_DOWN
 );

768 
	`VﬁumeUp
();

771 
	`SèπDi•TimîId
–
DISP_TIMER_SOUND_MENU
 );

772  
TRUE
;

775  
FALSE
;

776 
	}
}

778 
U8
 
	$OnVﬁumeDown
()

781 if–
	`GëSoundDi•
(Ë=
TRUE
 )

783 if–
	`GëVoi˚Levñ
(Ë!
VOICE_LEVEL_OFF
 )

785 
	`SèπDi•TimîId
–
DISP_TIMER_UP
 );

786 
	`SèπDi•TimîId
–
DISP_TIMER_DOWN
 );

787 
	`VﬁumeDown
();

790 
	`SèπDi•TimîId
–
DISP_TIMER_SOUND_MENU
 );

791  
TRUE
;

794  
FALSE
;

795 
	}
}

798 
U8
 
	$SñHŸ
()

800 
U8
 
mu8SñHŸ
;

803 if–
	`OnVﬁumeDown
(Ë=
TRUE
 )

805  
SOUND_SELECT
;

808 if–
	`OnClockDown
(Ë=
TRUE
 )

810  
SOUND_SELECT
;

814 if–
	`GëLockHŸ
(Ë=
LOCK
 )

816 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_LOCK_HOT
 );

817  
SOUND_ALARM_LOCK_HOT
;

821 if–
	`GëOuègeSètus
–
TYPE_HOT_WATER
 ) =
FLOW_OUTAGE
 )

823 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

824  
SOUND_ERROR_OUTAGE
;

828 if–
	`IsEº‹Ty≥
–
ERR_TYPE_HOT_WATER_OUT
 ) =
TRUE
 )

830 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

831  
SOUND_ERROR
;

834 if–
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_HOT
 )

836 if–
	`GëHŸC⁄figU£r
(Ë=
TRUE
 )

838 
	`SëHŸSñe˘
–
SEL_HOT_USER
 );

842 
	`SëHŸSñe˘
–
SEL_HOT_COFFEE
 );

845 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_HOT_TEMP
 ) =
FALSE
 )

847 
mu8SñHŸ
 = 
	`GëHŸSñe˘
();

848 if–
mu8SñHŸ
 =
SEL_HOT_COFFEE
 )

850 
mu8SñHŸ
 = 
SEL_HOT_TEA
;

852 if–
mu8SñHŸ
 =
SEL_HOT_TEA
 )

854 
mu8SñHŸ
 = 
SEL_HOT_MILK
;

856 if–
mu8SñHŸ
 =
SEL_HOT_MILK
 )

858 if–
	`GëHŸC⁄figU£r
(Ë=
TRUE
 )

860 
mu8SñHŸ
 = 
SEL_HOT_USER
;

864 
mu8SñHŸ
 = 
SEL_HOT_COFFEE
;

869 
mu8SñHŸ
 = 
SEL_HOT_COFFEE
;

871 
	`SëHŸSñe˘
–
mu8SñHŸ
 );

875 if–
	`SëSñe˘W©î
–
SEL_WATER_HOT
 ) =
TRUE
 )

878 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_HOT_TEMP
 );

879 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_HOT
 );

881  
SOUND_SELECT
;

884  
SOUND_ERROR
;

885 
	}
}

888 
U8
 
	$SñCﬁd
()

890 
U8
 
mu8Sound
 = 
SOUND_SELECT
;

893 if–
	`GëFlushSëupInô
(Ë=
FLUSH_STATUS_DONE


894 && 
	`GëFlushSètus
(Ë=
FLUSH_STATUS_INIT
 )

897 
	`SëFlushSètus
–
FLUSH_STATUS_DONE
 );

898 
	`SëFlushPowîOn
–
FLUSH_STATUS_DONE
 );

899 
	`SaveEïromId
–
EEP_ID_FLUSH_STATUS
 );

901 
	`SëFûãrCh™gedSètus
–
FILTER_MOUNTED
 );

902 
	`SaveEïromId
–
EEP_ID_FILTER_CHANGED
 );

904 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

906  
SOUND_SELECT
;

909 if–
	`GëFlushSëupInô
(Ë=
FLUSH_STATUS_INIT


910 || 
	`GëFlushPowîOn
(Ë=
FLUSH_STATUS_INIT
 )

912  
SOUND_NONE
;

916 if–
	`OnVﬁumeUp
(Ë=
TRUE
 )

918  
SOUND_SELECT
;

922 if–
	`OnClockUp
(Ë=
TRUE
 )

924  
SOUND_SELECT
;

928 
	`CÀ¨OuègeEº‹
();

930 if–
	`IsEº‹Ty≥
–
ERR_TYPE_COLD_WATER_OUT
 ) =
TRUE
 )

932 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

933  
SOUND_ERROR
;

936 if–
	`SëSñe˘W©î
–
SEL_WATER_COLD
 ) =
TRUE
 )

939 
	`St›Di•TimîId
–
DISP_TIMER_KEY_HOT
 );

940 
	`St›Di•TimîId
–
DISP_TIMER_KEY_HOT_TEMP
 );

943 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

945 
mu8Sound
 = 
SOUND_ALARM_COLD_OFF
;

946 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_MAKE_OFF_COLD
 );

949  
mu8Sound
;

950 
	}
}

952 
U8
 
	$OnOffEm±yCﬁdFau˚t
()

954 if–
	`IsSèπEm±yCﬁdT™k
(Ë=
FALSE
 )

956 
	`SèπEm±yCﬁdT™k
–
TYPE_FAUCET
 );

960 
	`St›Em±yCﬁdT™k
();

963  
SOUND_SELECT
;

964 
	}
}

966 
U8
 
	$OnOffEm±yCﬁdDøö
()

968 if–
	`IsSèπEm±yCﬁdT™k
(Ë=
FALSE
 )

970 
	`SèπEm±yCﬁdT™k
–
TYPE_DRAIN
 );

974 
	`St›Em±yCﬁdT™k
();

977  
SOUND_SELECT
;

978 
	}
}

981 
U8
 
	ggu8CﬁdOff
 = 
FALSE
;

982 
U8
 
	$OnCﬁdMake
()

984 if–
	`GëClockDi•
(Ë=
TRUE


985 || 
	`GëCu°omîDi•
(Ë=
TRUE


986 || 
	`GëSoundDi•
(Ë=
TRUE


987 || 
	`GëW©îOut
(Ë=
TRUE
 )

989  
SOUND_NONE
;

992 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
TRUE
 )

994  
SOUND_NONE
;

997 
gu8CﬁdOff
 = 
TRUE
;

998 
	`SëCﬁdW©îC⁄figMake
–
TRUE
 );

999 
	`Upd©eW©îOutRëu∫Time
();

1000  
SOUND_SETUP_COLD
;

1001 
	}
}

1003 
U8
 
	$OffCﬁdMake
()

1005 if–
	`GëClockDi•
(Ë=
TRUE


1006 || 
	`GëCu°omîDi•
(Ë=
TRUE


1007 || 
	`GëSoundDi•
(Ë=
TRUE


1008 || 
	`GëW©îOut
(Ë=
TRUE
 )

1010  
SOUND_NONE
;

1013 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

1015  
SOUND_NONE
;

1018 if–
gu8CﬁdOff
 =
TRUE
 )

1020  
SOUND_NONE
;

1023 
	`SëCﬁdW©îC⁄figMake
–
FALSE
 );

1024 
	`Re£tW©îOutRëu∫Time
();

1026  
SOUND_CANCEL_COLD
;

1027 
	}
}

1029 
U8
 
	$OnOffCﬁdMake
()

1031 
U8
 
mu8Sound
 = 
SOUND_NONE
;

1033 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

1035 
	`SëCﬁdW©îC⁄figMake
–
TRUE
 );

1036 
mu8Sound
 = 
SOUND_SETUP_COLD
;

1037 
	`Di•OnOff
–
ON
 );

1041 
	`SëCﬁdW©îC⁄figMake
–
FALSE
 );

1042 
mu8Sound
 = 
SOUND_CANCEL_COLD
;

1043 
	`Di•OnOff
–
OFF
 );

1046  
mu8Sound
;

1047 
	}
}

1051 
U8
 
	$SñRoom
()

1053 if–
	`GëW©îOut
(Ë=
TRUE


1054 && 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_FLUSH
 )

1056  
SOUND_NONE
;

1059 if–
	`GëClockDi•
(Ë=
TRUE
 )

1061  
SOUND_NONE
;

1065 if–
	`GëMemítoDi•
(Ë=
TRUE
 )

1067  
SOUND_NONE
;

1071 
	`CÀ¨OuègeEº‹
();

1073 if–
	`IsEº‹Ty≥
–
ERR_TYPE_ROOM_WATER_OUT
 ) =
TRUE
 )

1075 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

1076  
SOUND_ERROR
;

1079 if–
	`SëSñe˘W©î
–
SEL_WATER_ROOM
 ) =
TRUE
 )

1082 
	`St›Di•TimîId
–
DISP_TIMER_KEY_HOT
 );

1083 
	`St›Di•TimîId
–
DISP_TIMER_KEY_HOT_TEMP
 );

1084  
SOUND_SELECT
;

1086  
SOUND_ERROR
;

1087 
	}
}

1090 
U8
 
	$OnDecoLed
()

1092 if–
	`GëC⁄figDeco
–
DECO_LED_BUTTON
 ) =
TRUE
 )

1094  
SOUND_NONE
;

1097 
	`SëC⁄figDeco
–
DECO_LED_BUTTON
, 
TRUE
 );

1098  
SOUND_SETUP
;

1099 
	}
}

1101 
U8
 
	$OffDecoLed
()

1104 if–
	`GëC⁄figDeco
–
DECO_LED_BUTTON
 ) =
TRUE
 )

1106 
	`SëC⁄figDeco
–
DECO_LED_BUTTON
, 
FALSE
 );

1107  
SOUND_CANCEL
;

1110  
SOUND_NONE
;

1111 
	}
}

1114 
U8
 
	$CÀ¨Memíto
()

1116 if–
	`GëMemítoDi•
(Ë=
TRUE
 )

1119 
	`CÀ¨MemítoEº‹
();

1121  
SOUND_SELECT
;

1124  
SOUND_NONE
;

1125 
	}
}

1128 
U8
 
	$IsW©îOutC⁄ty
(
U8
 
mu8Out
, U8 
mu8C⁄ty
)

1133 if–
mu8Out
 =
TRUE


1134 && 
mu8C⁄ty
 =
TRUE


1135 && 
	`HAL_GëLevîW©î
() == 0

1138  
TRUE
;

1141  
FALSE
;

1142 
	}
}

1145 
U8
 
	$IsW©îOut
(
U8
 
mu8Out
, U8 
mu8C⁄ty
)

1150 if–
mu8Out
 =
TRUE


1151 && 
mu8C⁄ty
 =
FALSE


1152 && 
	`HAL_GëLevîW©î
() != 0

1155  
TRUE
;

1158  
FALSE
;

1159 
	}
}

1162 
U8
 
	$Ch™geAmou¡
(
U8
 
mu8Amou¡
)

1164 if–
mu8Amou¡
 =
FIXED_AMOUNT_HALF
 )

1166 
mu8Amou¡
 = 
FIXED_AMOUNT_ONE
;

1168 if–
mu8Amou¡
 =
FIXED_AMOUNT_ONE
 )

1170 
mu8Amou¡
 = 
FIXED_AMOUNT_TWO
;

1172 if–
mu8Amou¡
 =
FIXED_AMOUNT_TWO
 )

1174 
mu8Amou¡
 = 
FIXED_AMOUNT_INFINITY
;

1176 if–
mu8Amou¡
 =
FIXED_AMOUNT_INFINITY
 )

1179 if–
	`GëW©îOutC⁄figU£r
(Ë=
TRUE
 )

1181 
mu8Amou¡
 = 
FIXED_AMOUNT_USER
;

1185 
mu8Amou¡
 = 
FIXED_AMOUNT_HALF
;

1188 if–
mu8Amou¡
 =
FIXED_AMOUNT_USER
 )

1190 
mu8Amou¡
 = 
FIXED_AMOUNT_HALF
;

1194 
mu8Amou¡
 = 
FIXED_AMOUNT_HALF
;

1197  
mu8Amou¡
;

1198 
	}
}

1201 
U8
 
	$SñAmou¡
()

1203 
U8
 
mu8Sound
 = 
SOUND_SELECT
;

1204 
U8
 
mu8Amou¡
;

1207 if–
	`GëW©îOut
(Ë=
TRUE
 )

1209  
SOUND_ERROR
;

1215 
mu8Amou¡
 = 
	`GëW©îOutAmoutTy≥
();

1216 
mu8Amou¡
 = 
	`Ch™geAmou¡
( mu8Amount );

1217 
	`SëW©îOutFixedAmou¡Ty≥
–
mu8Amou¡
 );

1221 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_AMOUNT
 );

1224 if–
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_HOT
 )

1226 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_HOT
 );

1228 
	`St›Di•TimîId
–
DISP_TIMER_KEY_HOT_TEMP
 );

1230  
mu8Sound
;

1231 
	}
}

1233 
U8
 
	$Amou¡U£r
()

1235 
	`In¸emítW©îOutAmou¡
();

1237  
SOUND_SELECT
;

1238 
	}
}

1241 
U8
 
	$SñAmou¡Ex
()

1243 if–
	`GëSëtögDi•
(Ë=
TRUE


1244 && 
	`GëW©îOutC⁄figU£r
(Ë=
TRUE
 )

1246 
	`In¸emítW©îOutAmou¡
();

1248 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_AMOUNT
 );

1250  
SOUND_SELECT
;

1253  
	`SñAmou¡
();

1254 
	}
}

1257 
U8
 
	$C⁄figAmou¡
()

1259 
U8
 
mu8Amou¡
;

1261 if–
	`GëW©îOut
(Ë=
TRUE
 )

1263  
SOUND_NONE
;

1266 
mu8Amou¡
 = 
	`GëW©îOutAmoutTy≥
();

1267 if–
mu8Amou¡
 !
FIXED_AMOUNT_INFINITY
 )

1269 
	`SëW©îOutC⁄fFixedAmou¡Ty≥
–
mu8Amou¡
 );

1270 
	`SèπDi•TimîId
–
DISP_TIMER_CONFIG_AMOUNT
 );

1271  
SOUND_SETUP
;

1274  
SOUND_NONE
;

1275 
	}
}

1280 
U8
 
	$SñSëtög
()

1282 if–
	`GëW©îOut
(Ë=
TRUE


1283 || 
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

1285  
SOUND_NONE
;

1289 if–
	`GëClockDi•
(Ë=
TRUE
 )

1291 if–
	`OnClockIãm
(Ë=
TRUE
 )

1293  
SOUND_SELECT
;

1298 if–
	`GëSëtögDi•
(Ë=
TRUE
 )

1300 
	`SëSëtögDi•
–
FALSE
 );

1301 
	`St›Di•TimîId
–
DISP_TIMER_KEY_AMOUNT
 );

1302  
SOUND_CANCEL
;

1305  
SOUND_SETTING_MENU
;

1307 
	}
}

1312 
U8
 
	$OnSëtög
()

1314 if–
	`GëW©îOut
(Ë=
TRUE


1315 || 
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

1317  
SOUND_NONE
;

1321 if–
	`GëClockDi•
(Ë=
TRUE
 )

1323  
	`SëtögClockSave
();

1328 
	`SëSëtögDi•
–
TRUE
 );

1330 
	`SèπDi•TimîId
–
DISP_TIMER_SETTING_MENU
 );

1331 
	`St›Di•TimîId
–
DISP_TIMER_KEY_AMOUNT
 );

1332 
	`St›Di•TimîId
–
DISP_TIMER_KEY_HOT
 );

1333 
	`St›Di•TimîId
–
DISP_TIMER_KEY_HOT_TEMP
 );

1335  
SOUND_NONE
;

1336 
	}
}

1338 
U8
 
	gdbg_di•_comp_Ωs
 = 0;

1339 
U8
 
	$OnDi•Comp
()

1341 
dbg_di•_comp_Ωs
++;

1343 if–
dbg_di•_comp_Ωs
 > 3 )

1345 
dbg_di•_comp_Ωs
 = 0;

1348  
SOUND_SETUP
;

1349 
	}
}

1351 #i‡
CONFIG_GAS_FILLING


1352 
U8
 
fûlög
 = 0;

1353 
	~"gas_swôch_vÆve.h
"

1354 
U8
 
	$SñGasFûög
()

1356 
fûlög
 = !filling;

1358 if–
fûlög
 == 1 )

1360 
	`SëCﬁdW©îC⁄figMake
–
FALSE
 );

1361 
	`SëI˚C⁄figMake
–
FALSE
 );

1363 
	`GasSwôchCﬁd
();

1364 
	`SëCompMode
–
COMP_MODE_FORCED
 );

1365 
	`Tu∫OnF‹˚dComp
();

1367 
	`SëCompPrŸe˘OffTime
( 0 );

1368 
	`SëCompBldcT¨gëRps
( 60 );

1372 
	`SëCompMode
–
COMP_MODE_NONE
 );

1373 
	`SëCﬁdW©îC⁄figMake
–
TRUE
 );

1374 
	`SëI˚C⁄figMake
–
TRUE
 );

1377  
SOUND_SETUP
;

1378 
	}
}

1383 
U8
 
	$SñI˚
()

1385 
U8
 
mu8Turbo
;

1386 
U8
 
mu8Size
;

1389 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

1391 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_MAKE_OFF_ICE
 );

1392  
SOUND_ALARM_ICE_OFF
;

1396 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_ICE
 ) =
TRUE
 )

1398 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_ICE
 );

1399  
SOUND_SELECT
;

1403 
mu8Turbo
 = 
	`GëI˚Turbo
();

1404 
mu8Size
 = 
	`GëI˚Size
();

1405 if–
mu8Turbo
 =
FALSE
 && 
mu8Size
 =
ICE_LARGE
 )

1407 
	`SëI˚Size
–
ICE_SMALL
 );

1409 if–
mu8Turbo
 =
FALSE
 && 
mu8Size
 =
ICE_SMALL
 )

1411 
	`SëI˚Turbo
–
TRUE
 );

1412 
	`SëI˚Size
–
ICE_LARGE
 );

1414 if–
mu8Turbo
 =
TRUE
 && 
mu8Size
 =
ICE_LARGE
 )

1416 
	`SëI˚Size
–
ICE_SMALL
 );

1420 
	`SëI˚Turbo
–
FALSE
 );

1421 
	`SëI˚Size
–
ICE_LARGE
 );

1424 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_ICE
 );

1426  
SOUND_SELECT
;

1427 
	}
}

1431 
U8
 
	$OnOffI˚Turbo
()

1433 if–
	`OnVﬁumeDown
(Ë=
TRUE
 )

1435  
SOUND_SELECT
;

1438 if–
	`OnClockDown
(Ë=
TRUE
 )

1440  
SOUND_SELECT
;

1444 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

1446 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_MAKE_OFF_ICE
 );

1447  
SOUND_ALARM_ICE_OFF
;

1450 if–
	`GëI˚Turbo
(Ë=
TRUE
 )

1452 
	`SëI˚Turbo
–
FALSE
 );

1453  
SOUND_CANCEL
;

1456 
	`SëI˚Turbo
–
TRUE
 );

1457  
SOUND_SETUP
;

1458 
	}
}

1461 
U8
 
	ggu8I˚Off
 = 
FALSE
;

1462 
U8
 
	$OnI˚Make
()

1464 if–
	`GëI˚C⁄figMake
(Ë=
TRUE
 )

1466  
SOUND_NONE
;

1469 
gu8I˚Off
 = 
TRUE
;

1470 
	`SëI˚C⁄figMake
–
TRUE
 );

1471 
	`St›Timî
–
TIMER_ID_DRAIN_PUMP_24H
 );

1472  
SOUND_SETUP_ICE
;

1473 
	}
}

1475 
U8
 
	$OffI˚Make
()

1477 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

1479  
SOUND_NONE
;

1483 if–
gu8I˚Off
 =
TRUE
 )

1485  
SOUND_NONE
;

1487 
	`SëI˚C⁄figMake
–
FALSE
 );

1489 
	`F‹˚dClo£I˚Do‹
();

1492 
	`SèπDøöPumpOnLevñ
();

1494 
	`SèπTimî
–
TIMER_ID_DRAIN_PUMP_24H
, 
	`TIMER_SEC
(86400) );

1496  
SOUND_CANCEL_ICE
;

1497 
	}
}

1499 
U8
 
	$OnOffI˚Make
()

1501 if–
	`GëI˚C⁄figMake
(Ë=
TRUE
 )

1503 
	`Di•OnOff
–
OFF
 );

1504  
	`OffI˚Make
();

1507 
	`Di•OnOff
–
ON
 );

1508  
	`OnI˚Make
();

1509 
	}
}

1513 
U8
 
	$OnOffI˚Lock
()

1515 if–
	`GëLockI˚
(Ë=
LOCK
 )

1517 
	`SëLockI˚
–
UNLOCK
 );

1518 
	`St›Di•TimîId
–
DISP_TIMER_ALARM_SETTING
 );

1519  
SOUND_UNLOCK_ICE
;

1522 
	`SëLockI˚
–
LOCK
 );

1523  
SOUND_LOCK_ICE
;

1524 
	}
}

1527 
U8
 
	$SñI˚Size
()

1529 
U8
 
mu8Size
;

1532 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

1534 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_MAKE_OFF_ICE
 );

1535  
SOUND_ALARM_ICE_OFF
;

1539 if–
	`IsExpúedDi•Timî
–
DISP_TIMER_KEY_ICE
 ) =
TRUE
 )

1541 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_ICE
 );

1542  
SOUND_SELECT
;

1545 
mu8Size
 = 
	`GëI˚Size
();

1546 if–
mu8Size
 =
ICE_LARGE
 )

1548 
mu8Size
 = 
ICE_SMALL
;

1552 
mu8Size
 = 
ICE_LARGE
;

1555 
	`SëI˚Size
–
mu8Size
 );

1557 
	`SèπDi•TimîId
–
DISP_TIMER_KEY_ICE
 );

1558  
SOUND_SELECT
;

1559 
	}
}

1563 
U8
 
	$OnOffHŸLock
()

1565 if–
	`GëClockDi•
(Ë=
TRUE


1566 || 
	`GëCu°omîDi•
(Ë=
TRUE


1567 || 
	`GëSoundDi•
(Ë=
TRUE


1568 || 
	`GëW©îOut
(Ë=
TRUE
 )

1570  
SOUND_NONE
;

1581 if–
	`GëLockHŸ
(Ë=
UNLOCK
 )

1584 if–
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_HOT
 )

1586 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

1588 
	`SëLockHŸ
–
LOCK
 );

1589  
SOUND_LOCK_HOT
;

1592 
	`SëLockHŸ
–
UNLOCK
 );

1593 
	`St›Di•TimîId
–
DISP_TIMER_ALARM_SETTING
 );

1594  
SOUND_UNLOCK_HOT
;

1595 
	}
}

1597 
U8
 
	$OnOffHŸU£r
()

1600 if–
	`GëHŸC⁄figU£r
(Ë=
TRUE
 )

1602 
	`SëHŸC⁄figU£r
–
FALSE
 );

1603  
SOUND_CANCEL
;

1606 
	`SëHŸC⁄figU£r
–
TRUE
 );

1607  
SOUND_SETUP
;

1608 
	}
}

1610 
U8
 
	gdbg_hŸ_out_ãmp
 = 0;

1611 
U8
 
	$OnOffHŸTe°
()

1614 if–
	`GëHŸC⁄figTe°
(Ë=
TRUE
 )

1616 
	`SëHŸC⁄figTe°
–
FALSE
 );

1617  
SOUND_CANCEL
;

1620 
	`SëHŸC⁄figTe°
–
TRUE
 );

1621  
SOUND_SETUP
;

1622 
	}
}

1625 #i‡!
CONFIG_TEST_8585


1626 
U8
 
	$OnOffSave
()

1629 if–
	`GëRtcC⁄figInô
(Ë=
FALSE
 )

1631 
	`SëSavögC⁄fig
–
FALSE
 );

1632  
SOUND_ALARM_SLEEP_TIME
;

1635 if–
	`GëSavögC⁄fig
(Ë=
TRUE
 )

1637 
	`SëSavögC⁄fig
–
FALSE
 );

1639  
SOUND_CANCEL_SLEEP
;

1642 
	`SëSavögC⁄fig
–
TRUE
 );

1644  
SOUND_SETUP_SLEEP
;

1645 
	}
}

1649 
U8
 
the_8585_°ï
;

1650 
U8
 
the_8585_°ï_2
;

1651 
U8
 
	$OnOffSave
()

1653 if–
	`GëSavögC⁄fig
(Ë=
TRUE
 )

1655 
	`SëSavögC⁄fig
–
FALSE
 );

1657 #i‡
CONFIG_TEST_8585


1658 
	`DißbÀTimî
–
TIMER_ID_TEST_8585
 );

1659 
	`DißbÀTimî
–
TIMER_ID_TEST_8585_2
 );

1660 
the_8585_°ï
 = 0;

1663 #i‡
CONFIG_TEST_8585_ICE


1664 
	`DißbÀTimî
–
TIMER_ID_TEST_8585_ICE
 );

1665 
the_8585_°ï_2
 = 0;

1667  
SOUND_CANCEL
;

1670 
	`SëSavögC⁄fig
–
TRUE
 );

1672 #i‡
CONFIG_TEST_8585


1673 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
(20) );

1674 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
(20) );

1677 #i‡
CONFIG_TEST_8585_ICE


1678 
	`SèπTimî
–
TIMER_ID_TEST_8585_ICE
, 
	`TIMER_SEC
(30) );

1680  
SOUND_SETUP
;

1681 
	}
}

1685 
U8
 
	$SëtögSound
()

1687 
U8
 
mu8Levñ
;

1688 
U8
 
mu8Sound
 = 
SOUND_SELECT
;

1691 
mu8Levñ
 = 
	`GëVoi˚Levñ
();

1693 if–
	`GëSoundDi•
(Ë=
FALSE
 )

1696 
	`SëSoundDi•
–
TRUE
 );

1700 if–
mu8Levñ
 =
VOICE_LEVEL_OFF
 )

1702 
mu8Levñ
 = 
VOICE_LEVEL_VOICE_BEEP
;

1704 if–
mu8Levñ
 =
VOICE_LEVEL_BEEP
 )

1706 
mu8Levñ
 = 
VOICE_LEVEL_OFF
;

1710 
mu8Levñ
 = 
VOICE_LEVEL_BEEP
;

1713 
	`SëVoi˚Levñ
–
mu8Levñ
 );

1718 if–
mu8Levñ
 =
VOICE_LEVEL_OFF
 )

1720 
mu8Sound
 = 
SOUND_SETTING_MUTE
;

1722 if–
mu8Levñ
 =
VOICE_LEVEL_BEEP
 )

1724 
mu8Sound
 = 
SOUND_SETTING_EFFECT
;

1728 
mu8Sound
 = 
SOUND_SETTING_VOICE
;

1731 
	`SèπDi•TimîId
–
DISP_TIMER_SOUND_MENU
 );

1733  
mu8Sound
;

1734 
	}
}

1736 
U8
 
	$SëtögCu°omî
()

1738 
U8
 
mu8Ty≥
;

1741 if–
	`GëCu°omîDi•
(Ë=
FALSE
 )

1744 
	`SëCu°omîDi•
–
TRUE
 );

1748 
mu8Ty≥
 = 
	`GëCu°omîTy≥
();

1749 if–
mu8Ty≥
 =
CUSTOMER_SELF
 )

1751 
mu8Ty≥
 = 
CUSTOMER_VISIT
;

1755 
mu8Ty≥
 = 
CUSTOMER_SELF
;

1758 
	`SëCu°omîTy≥
–
mu8Ty≥
 );

1761 
	`SèπDi•TimîId
–
DISP_TIMER_CUSTOMER_MENU
 );

1763  
SOUND_SETUP
;

1764 
	}
}

1769 
U8
 
	$OnOffU£rAmou¡
()

1771 
U8
 
mu8Sound
 = 
SOUND_NONE
;

1773 if–
	`GëW©îOutC⁄figU£r
(Ë=
TRUE
 )

1775 
	`SëW©îOutC⁄figU£r
–
FALSE
 );

1776 
mu8Sound
 = 
SOUND_CANCEL
;

1780 
	`SëW©îOutC⁄figU£r
–
TRUE
 );

1781 
mu8Sound
 = 
SOUND_SETUP
;

1784  
mu8Sound
;

1785 
	}
}

1790 
U8
 
	$OnVîsi⁄
()

1792 
	`SëVîsi⁄Di•
(0);

1794  
SOUND_SELECT
;

1795 
	}
}

1799 
U8
 
	$OnOffMemíto
()

1801 if–
	`GëMemítoDi•
(Ë=
FALSE
 )

1803 
	`SëMemítoDi•
–
TRUE
 );

1807 
	`SëMemítoDi•
–
FALSE
 );

1810  
SOUND_SELECT
;

1811 
	}
}

1815 
U8
 
	$OnLockAŒ
()

1817 if–
	`GëLockAŒ
(Ë=
UNLOCK
 )

1819 
	`SëLockAŒ
–
LOCK
 );

1820  
SOUND_LOCK_ALL
;

1823 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_LOCK_ALL
 );

1824  
SOUND_ALARM_LOCK_ALL
;

1825 
	}
}

1828 
U8
 
	$OffLockAŒ
()

1830 if–
	`GëLockAŒ
(Ë=
LOCK
 )

1832 
	`SëLockAŒ
–
UNLOCK
 );

1833  
SOUND_UNLOCK_ALL
;

1836  
SOUND_NONE
;

1837 
	}
}

1841 
U8
 
	$OnOffLockAŒ
()

1843 
U8
 
mu8Sound
 = 
SOUND_LOCK_ALL
;

1846 if–
	`GëLockAŒ
(Ë=
LOCK
 )

1848 
	`SëLockAŒ
–
UNLOCK
 );

1849 
mu8Sound
 = 
SOUND_UNLOCK_ALL
;

1853 
	`SëLockAŒ
–
LOCK
 );

1856  
mu8Sound
;

1857 
	}
}

1861 
U8
 
	$OnOffMuã
()

1863 
U8
 
mu8Sound
 = 
SOUND_SETTING_VOICE
;

1865 if–
	`IsSëSoundMuã
(Ë=
FALSE
 )

1867 
	`SëSoundMuã
();

1871 
	`CÀ¨SoundMuã
();

1874  
SOUND_SETTING_MUTE
;

1875 
	}
}

1879 
U8
 
	$OnOffCodyKô
()

1881 if–
	`GëCodyKôSètus
(Ë=
TRUE
 )

1883 
	`St›W©îOut
();

1887 
	`SëSñe˘W©î
–
SEL_WATER_CODY
 );

1888 
	`SèπW©îOut
();

1891  
SOUND_SETUP
;

1892 
	}
}

1894 
U8
 
	$OnTe°I˚Tøy
()

1896 if–
	`GëSîvi˚CheckT™kO≥n
(Ë=
TRUE
 )

1898 if–
	`GëI˚TøyTe°Sètus
(Ë=
FALSE
 )

1900 
	`St›DummyDeIcög
();

1901 
	`St›I˚Make
();

1902 
	`SèπI˚TøyTe°
();

1903  
SOUND_SETUP
;

1907  
SOUND_NONE
;

1908 
	}
}

1911 
U8
 
	$OnDeIcög
()

1914 if–
	`St›I˚Make
(Ë=
TRUE
 )

1916  
SOUND_SETUP
;

1919  
SOUND_SELECT
;

1920 
	}
}

1923 
U8
 
	$OnM™uÆDøö
()

1925 if–
	`IsVÆidHó…h
(Ë=
FALSE
 )

1927  
SOUND_ERROR
;

1930 if–
	`SèπDøöW©î
–
FULL_DRAIN
 ) =
FALSE
 )

1932  
SOUND_ERROR
;

1935  
SOUND_EFFLUENT
;

1936 
	}
}

1939 
U8
 
	$OnEø£Eïrom
()

1941 if–
	`IsExpúedC⁄figTime
(Ë=
FALSE
 )

1943 
	`Eø£Eïrom
();

1944  
SOUND_SELECT
;

1947  
SOUND_NONE
;

1948 
	}
}

1950 
U8
 
	$OnWifiAp
()

1952 
	`WifiKey
(
WIFI_KEY_AP
);

1955 if–
	`GëWifiSètusVÆue
(
WIFI_STATUS_ERROR
) != 0 )

1957 
	`SèπDi•TimîId
–
DISP_TIMER_WIFI_AP_ERROR
 );

1959  
SOUND_NONE
;

1960 
	}
}

1962 
U8
 
	$OnWifiBÀ
()

1964 if–
	`GëW©îOut
(Ë=
TRUE


1965 && 
	`GëW©îOutSñe˘
(Ë!
SEL_WATER_FLUSH
 )

1967  
SOUND_NONE
;

1970 
	`WifiKey
(
WIFI_KEY_BLE
);

1972 if–
	`GëWifiSètusVÆue
(
WIFI_STATUS_ERROR
) != 0 )

1974 
	`SèπDi•TimîId
–
DISP_TIMER_WIFI_AP_ERROR
 );

1977  
SOUND_NONE
;

1978 
	}
}

1980 
U8
 
	$OnWifiOnOff
()

1982 
	`WifiKey
(
WIFI_KEY_ONOFF
);

1984  
SOUND_NONE
;

1985 
	}
}

1989 
U8
 
	$OnEﬁSèπ
()

1991 if–
	`SèπEﬁLﬂd
(Ë=
TRUE
 )

1993  
SOUND_EOL
;

1996  
SOUND_NONE
;

2000 if–
	`IsExpúedEﬁLimôTimî
(Ë=
TRUE
 )

2002  
SOUND_NONE
;

2006 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

2008  
SOUND_NONE
;

2012 
	`SèπEﬁ
–
EOL_TYPE_LOAD
 );

2013 
	`SèπDi•œyInô
();

2014 
	`SëVîsi⁄Di•
( 0 );

2017 
	`WifiKey
(
WIFI_KEY_TEST
);

2019  
SOUND_EOL
;

2021 
	}
}

2024 
U8
 
	$OnFr⁄tSèπ
()

2028 if–
	`IsExpúedEﬁLimôTimî
(Ë=
TRUE
 )

2030  
SOUND_NONE
;

2034 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

2036  
SOUND_NONE
;

2040 if–
	`GëLókSètus
(Ë=
TRUE


2041 || 
	`IsLókSemi
(Ë=
TRUE
 )

2043  
SOUND_ERROR
;

2047 if–
	`GëDøöLevñ
(Ë!
LEVEL_LOW
 )

2049  
SOUND_ERROR
;

2053 if–
	`GëFûãrSètus
–
ID_FILTER
 ) =
FILTER_OPEN
 )

2055  
SOUND_ERROR
;

2059 if–
	`GëSy°em
(Ë!
	`GëFr⁄tSy°em
() )

2061  
SOUND_ERROR
;

2065 
	`SèπEﬁ
–
EOL_TYPE_FRONT
 );

2067 
	`Tu∫OffDøöPumpEx
();

2068 
	`MoveI˚TøyIcögEﬁ
();

2069 
	`SèπDi•œyInô
();

2070 
	`SëVîsi⁄Di•
( 0 );

2073 
	`WifiKey
(
WIFI_KEY_TEST
);

2075  
SOUND_EOL
;

2076 
	}
}

2080 
U8
 
	$OnTimeSh‹t
()

2083 if–
	`IsExpúedTimeSh‹tLimôTimî
(Ë=
TRUE
 )

2085  
SOUND_NONE
;

2089 
	`SèπTimeSh‹t
();

2090  
SOUND_EOL
;

2091 
	}
}

2095 
U8
 
	$OnF˘Sèπ
()

2099 if–
	`IsExpúedF˘LimôTimî
(Ë=
TRUE
 )

2101  
SOUND_NONE
;

2106 
	`SèπF˘
();

2109 
	`WifiKey
(
WIFI_KEY_TEST
);

2110  
SOUND_SELECT
;

2111 
	}
}

2113 
U8
 
	$OnTe°Sh‹tCompTime
()

2116 #i‡
CONFIG_TEST


2117 
	`SëCompPrŸe˘OffTime
(0);

2119  
SOUND_SELECT
;

2120 
	}
}

2123 
U8
 
	$KeyC⁄tDownEx
()

2125 if–
	`GëClockDi•
(Ë=
TRUE
 )

2127  
	`KeyC⁄tDown
();

2130  
SOUND_NONE
;

2131 
	}
}

2133 
U8
 
	$KeyC⁄tUpEx
()

2135 if–
	`GëClockDi•
(Ë=
TRUE
 )

2137  
	`KeyC⁄tUp
();

2140  
SOUND_NONE
;

2141 
	}
}

2144 #i‡
CONFIG_TEST_HOT_OUT


2145 
U8
 
	$SñHŸTe°
()

2147 if–
	`GET_STATUS_VALVE_HOT_IN
() == 0 )

2149 
	`OPEN_VALVE_HOT_IN
();

2153 
	`CLOSE_VALVE_HOT_IN
();

2156  
SOUND_SELECT
;

2157 
	}
}

2161 #i‡
CONFIG_UV_MANUAL


2162 
U8
 
dbg_uv_i˚_do‹
;

2163 
U8
 
dbg_uv_w©î_out
;

2164 
U8
 
dbg_uv_i˚_åay
;

2165 
U8
 
dbg_uv_i˚_ènk
;

2166 
U8
 
	$OnOffUvI˚T™k
()

2168 
dbg_uv_i˚_ènk
 = !dbg_uv_ice_tank;

2169  
SOUND_SETUP
;

2170 
	}
}

2172 
U8
 
	$OnOffUvI˚Tøy
()

2174 
dbg_uv_i˚_åay
 = !dbg_uv_ice_tray;

2175  
SOUND_SETUP
;

2176 
	}
}

2178 
U8
 
	$OnOffUvI˚Out
()

2180 
dbg_uv_i˚_do‹
 = !dbg_uv_ice_door;

2181  
SOUND_SETUP
;

2182 
	}
}

2184 
U8
 
	$OnOffUvW©îOut
()

2186 
dbg_uv_w©î_out
 = !dbg_uv_water_out;

2188  
SOUND_SETUP
;

2189 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_normal_handler.h

1 #i‚de‡
__KEY_NORMAL_HANDLER_H__


2 
	#__KEY_NORMAL_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

7 
U8
 
IsVÆidN‹mÆKeyC⁄dôi⁄
(
U32
 
mu32Key
);

8 * 
GëN‹mÆKeyEvítLi°
();

10 
U8
 
GëN‹mÆKeyEvítLi°Size
();

12 
C⁄tySëtögClockKey
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\process_key.c

1 
	~"hw.h
"

2 
	~"¥j_ty≥.h
"

3 
	~"¥o˚ss_key.h
"

4 
	~"key.h
"

5 
	~"sound.h
"

6 
	~"powî_ßvög.h
"

8 
	~"¥o˚ss_di•œy.h
"

9 
	~"key_comm⁄_h™dÀr.h
"

10 
	~"key_h™dÀr.h
"

11 
	~"key_n‹mÆ_h™dÀr.h
"

12 
	~"key_eﬁ_h™dÀr.h
"

13 
	~"key_f˘_h™dÀr.h
"

27 
U8
 
gu8CﬁdOff
;

28 
U8
 
gu8I˚Off
;

29 
U8
 
	$KeyEvítH™dÀr
(
KeyVÆidFun_T
 
pVÆidFunc
, 
KeyEvítLi°_T
 *
pLi°
, 
U8
 
mu8Size
 )

31 
U8
 
i
;

32 
U32
 
mu32KeyVÆ
;

33 
U32
 
mu32KeyP›VÆ
;

34 
SoundId_T
 
mSound
;

36 
U32
 
mu32PªvKeyVÆ
 = 
K_NONE
;

37 
U8
 
mu8EºKeySkù
 = 
FALSE
;

42 
mu32KeyVÆ
 = 
	`GëKeyVÆ
();

43 
mu32KeyP›VÆ
 = 
	`GëKeyP›VÆ
();

49 if–
mu32KeyVÆ
 !
K_NONE
 )

51 
	`WakeUpSavögMode
();

54 if–
mu32KeyVÆ
 !
mu32PªvKeyVÆ
 )

56 
mu32PªvKeyVÆ
 = 
mu32KeyVÆ
;

57 
mu8EºKeySkù
 = 
FALSE
;

59 
gu8CﬁdOff
 = 
FALSE
;

60 
gu8I˚Off
 = 
FALSE
;

63 if–
mu8EºKeySkù
 =
TRUE
 )

65  
TRUE
;

68 if–
pLi°
 =
NULL
 || 
mu8Size
 == 0 )

70  
TRUE
;

74 if–
mu32KeyVÆ
 =
K_NONE


75 && 
	`IsSëKeyEvítFœg
–
KEY_EVENT_POP
 ) =
TRUE
 )

77 
	`CÀ¨KeyEvítFœg
–
KEY_EVENT_POP
 );

78  
i
 = 0; i < 
mu8Size
 ; i++ )

80 if–(
pLi°
+
i
)->
Key
 =
mu32KeyP›VÆ
 )

82 if–(
pLi°
+
i
)->
a˘i⁄Evít
[
KEY_ACTION_POP
] !
NULL
 )

84 
mSound
 = (
SoundId_T
)(
pLi°
+
i
)->
a˘i⁄Evít
[
KEY_ACTION_POP
]();

85 
	`Sound
–
mSound
 );

86  
TRUE
;

93  
i
 = 0; i < 
mu8Size
 ; i++ )

95 if–(
pLi°
+
i
)->
Key
 =
mu32KeyVÆ
 )

97 if–
	`IsSëKeyEvítFœg
–
KEY_EVENT_PUSHED_SHORT
 ) =
TRUE
 )

99 
	`CÀ¨KeyEvítFœg
–
KEY_EVENT_PUSHED_SHORT
 );

102 if–
mu32KeyVÆ
 !
K_NONE


103 && 
pVÆidFunc
 !
NULL
 )

106 
	`SèπDi•TimîId
–
DISP_TIMER_CLOCK
 );

107 
	`SèπDi•TimîId
–
DISP_TIMER_SLEEP
 );

109 if–
	`pVÆidFunc
–
mu32KeyVÆ
 ) =
FALSE
 )

112 
mu8EºKeySkù
 = 
TRUE
;

113  
TRUE
;

117 if–(
pLi°
+
i
)->
a˘i⁄Evít
[
KEY_ACTION_SHORT
] !
NULL
 )

119 
mSound
 = (
SoundId_T
)(
pLi°
+
i
)->
a˘i⁄Evít
[
KEY_ACTION_SHORT
]();

120 
	`Sound
–
mSound
 );

121  
TRUE
;

125 if–
	`IsSëKeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_5S
 ) =
TRUE
 )

127 
	`CÀ¨KeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_5S
 );

129 if–(
pLi°
+
i
)->
a˘i⁄Evít
[
KEY_ACTION_5_SEC
] !
NULL
 )

131 
mSound
 = (
SoundId_T
)(
pLi°
+
i
)->
a˘i⁄Evít
[
KEY_ACTION_5_SEC
]();

132 
	`Sound
–
mSound
 );

133  
TRUE
;

137 if–
	`IsSëKeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_3S
 ) =
TRUE
 )

139 
	`CÀ¨KeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_3S
 );

141 if–(
pLi°
+
i
)->
a˘i⁄Evít
[ 
KEY_ACTION_3_SEC
 ] !
NULL
 )

143 
mSound
 = (
SoundId_T
)(
pLi°
+
i
)->
a˘i⁄Evít
[ 
KEY_ACTION_3_SEC
 ]();

144 
	`Sound
–
mSound
 );

145  
TRUE
;

149 if–
	`IsSëKeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_2S
 ) =
TRUE
 )

151 
	`CÀ¨KeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_2S
 );

153 if–(
pLi°
+
i
)->
a˘i⁄Evít
[ 
KEY_ACTION_2_SEC
 ] !
NULL
 )

155 
mSound
 = (
SoundId_T
)(
pLi°
+
i
)->
a˘i⁄Evít
[ 
KEY_ACTION_2_SEC
 ]();

156 
	`Sound
–
mSound
 );

157  
TRUE
;

161 if–
	`IsSëKeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_1S
 ) =
TRUE
 )

163 
	`CÀ¨KeyEvítFœg
–
KEY_EVENT_PUSHED_LONG_1S
 );

165 if–(
pLi°
+
i
)->
a˘i⁄Evít
[ 
KEY_ACTION_1_SEC
 ] !
NULL
 )

167 
mSound
 = (
SoundId_T
)(
pLi°
+
i
)->
a˘i⁄Evít
[ 
KEY_ACTION_1_SEC
 ]();

168 
	`Sound
–
mSound
 );

169  
TRUE
;

176  
FALSE
;

177 
	}
}

179 
	$Pro˚ssKeyEvítH™dÀr
()

181 
U8
 
mu8Rë
 = 
FALSE
;

182 
U16
 
mu16Dñay
 = 0;

183 
KeyVÆidFun_T
 
pKeyVÆidFun
 = 
NULL
;

184 
KeyEvítLi°_T
 *
pKeyEvítLi°
 = 
NULL
;

185 
U8
 
mu8KeyEvítSize
 = 0;

190 if–
	`GëDi•œyInô
(Ë=
FALSE
 )

201 if–
mu16Dñay
 != 0 )

203 
mu16Dñay
--;

208 #i‡
CONFIG_EOL


209 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

212 
pKeyVÆidFun
 = 
IsVÆidEﬁKeyC⁄dôi⁄
;

213 
pKeyEvítLi°
 = (
KeyEvítLi°_T
 *)
	`GëEﬁKeyEvítLi°
();

214 
mu8KeyEvítSize
 = 
	`GëEﬁKeyEvítLi°Size
();

218 if–
	`GëF˘Sètus
(Ë=
TRUE
 )

221 
pKeyVÆidFun
 = 
IsVÆidF˘KeyC⁄dôi⁄
;

222 
pKeyEvítLi°
 = (
KeyEvítLi°_T
 *)
	`GëF˘KeyEvítLi°
();

223 
mu8KeyEvítSize
 = 
	`GëF˘KeyEvítLi°Size
();

228 
pKeyVÆidFun
 = 
IsVÆidN‹mÆKeyC⁄dôi⁄
;

229 
pKeyEvítLi°
 = (
KeyEvítLi°_T
 *)
	`GëN‹mÆKeyEvítLi°
();

230 
mu8KeyEvítSize
 = 
	`GëN‹mÆKeyEvítLi°Size
();

234 
mu8Rë
 = 
	`KeyEvítH™dÀr
–
pKeyVÆidFun
, 
pKeyEvítLi°
, 
mu8KeyEvítSize
 );

235 if–
mu8Rë
 =
TRUE
 )

237 
mu16Dñay
 = 30;

239 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\process_key.h

1 #i‚de‡
__PROCESS_KEY_H__


2 
	#__PROCESS_KEY_H__


	)

4 
	~"¥j_ty≥.h
"

6 
Pro˚ssKeyEvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever.c

1 
	~"hw.h
"

2 
	~"hÆ_key.h
"

3 
	~"Àvî.h
"

5 
	~<°rög.h
>

9 
	#LEVER_STATUS_NONE
 0

	)

10 
	#LEVER_STATUS_PUSHED
 1

	)

11 
	#LEVER_STATUS_POP
 2

	)

12 
	#LEVER_STATUS_TIME_OUT
 3

	)

16 
	#EVENT_TIME_OUT_LONG_2
 800

17 
	#EVENT_TIME_OUT_LONG
 200

18 
	#EVENT_TIME_OUT_SHORT
 10

19 

	)

20 
	s_key_


22 
U16
 
	mVÆ
;

23 
U16
 
	mVÆP›
;

24 
U8
 
	mSètus
;

25 
U16
 
	mPushedTime
;

26 
U8
 
	mEvítFœg
;

27 } 
	tLevî_T
;

29 
Levî_T
 
	gLevî
[ 
MAX_LEVER_ID
 ];

32 
	$InôLevî
()

34 
	`MEMSET
–(
__FAR
 *)&
Levî
, 0, ( Lever ) );

35 
	}
}

38 
U16
 
	$GëLevîVÆ
(
U8
 
mu8Id
 )

40  
Levî
[ 
mu8Id
 ].
VÆ
;

41 
	}
}

43 
U16
 
	$GëLevîP›VÆ
(
U8
 
mu8Id
 )

45  
Levî
[ 
mu8Id
 ].
VÆP›
;

46 
	}
}

48 
	$SëLevîEvítFœg
(
U8
 
mu8Id
, U8 
mu8Evít
 )

50 
Levî
[ 
mu8Id
 ].
EvítFœg
 |
mu8Evít
;

51 
	}
}

53 
	$CÀ¨LevîEvítFœg
(
U8
 
mu8Id
, U8 
mu8Evít
 )

55 
Levî
[ 
mu8Id
 ].
EvítFœg
 &~
mu8Evít
;

56 
	}
}

58 
U8
 
	$IsSëLevîEvítFœg
(
U8
 
mu8Id
, U8 
mu8Evít
 )

60 if–(
Levî
[ 
mu8Id
 ].
EvítFœg
 & 
mu8Evít
) == mu8Event )

62  
TRUE
;

65  
FALSE
;

66 
	}
}

68 
SˇnLevî
(
U8
 
mu8Id
, 
U16
 
mu8VÆ
);

69 
	$Pro˚ssSˇnLevî
()

71 
	`SˇnLevî
–
LEVER_ID_WATER
, 
	`HAL_GëLevîW©î
() );

72 
	`SˇnLevî
–
LEVER_ID_ICE
, 
	`HAL_GëLevîI˚
() );

73 
	}
}

79 
	$SˇnLevî
(
U8
 
mu8Id
, 
U16
 
mu8VÆ
)

81 
U16
 
mu16PªvLevîVÆ
[ 
MAX_LEVER_ID
 ];

85 if–
mu16PªvLevîVÆ
[ 
mu8Id
 ] !
mu8VÆ
 )

87 
mu16PªvLevîVÆ
[ 
mu8Id
 ] = 
mu8VÆ
;

88 
Levî
[ 
mu8Id
 ].
VÆ
 = 
mu8VÆ
;

89 if–
mu8VÆ
 == 0 )

91 
Levî
[ 
mu8Id
 ].
VÆP›
 = 
mu8VÆ
;

94 if–
mu8VÆ
 != 0 )

97 
Levî
[ 
mu8Id
 ].
Sètus
 = 
LEVER_STATUS_PUSHED
;

98 
Levî
[ 
mu8Id
 ].
PushedTime
 = 0;

99 
	`CÀ¨LevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSEHD_ALL
 );

103 if–
Levî
[ 
mu8Id
 ].
PushedTime
 >
EVENT_TIME_OUT_SHORT
 )

105 
Levî
[ 
mu8Id
 ].
Sètus
 = 
LEVER_STATUS_POP
;

106 
	`SëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_POP
 );

110 
Levî
[ 
mu8Id
 ].
Sètus
 = 
LEVER_STATUS_NONE
;

115 if–
Levî
[ 
mu8Id
 ].
Sètus
 =
LEVER_STATUS_PUSHED
 )

117 
Levî
[ 
mu8Id
 ].
PushedTime
++;

119 if–
Levî
[ 
mu8Id
 ].
PushedTime
 =
EVENT_TIME_OUT_LONG_2
 )

121 
	`SëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_LONG_2
 );

123 if–
Levî
[ 
mu8Id
 ].
PushedTime
 =
EVENT_TIME_OUT_LONG
 )

125 
	`SëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_LONG
 );

127 if–
Levî
[ 
mu8Id
 ].
PushedTime
 =
EVENT_TIME_OUT_SHORT
 )

129 
	`SëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_SHORT
 );

132 if–
Levî
[ 
mu8Id
 ].
PushedTime
 > 
EVENT_TIME_OUT_LONG_2
 )

134 
Levî
[ 
mu8Id
 ].
Sètus
 = 
LEVER_STATUS_TIME_OUT
;

137 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever.h

1 #i‚de‡
__LEVER_H__


2 
	#__LEVER_H__


	)

4 
	~"hÆ_key.h
"

7 
	#LEVER_ID_WATER
 0

	)

8 
	#LEVER_ID_ICE
 1

	)

9 
	#MAX_LEVER_ID
 2

	)

11 
InôLevî
();

13 
U16
 
GëLevîVÆ
(
U8
 
mu8Id
);

15 
U16
 
GëLevîP›VÆ
(
U8
 
mu8Id
);

18 
	#LEVER_EVENT_PUSHED_SHORT
 0x01

	)

19 
	#LEVER_EVENT_PUSHED_LONG
 0x02

	)

20 
	#LEVER_EVENT_PUSHED_LONG_2
 0x04

	)

21 
	#LEVER_EVENT_POP
 0x08

	)

22 
	#LEVER_EVENT_PUSEHD_ALL
 0x07

	)

23 
	#LEVER_EVENT_ALL
 0x0F

	)

24 
SëLevîEvítFœg
(
U8
 
mu8Id
, U8 
mu8Evít
 );

25 
CÀ¨LevîEvítFœg
(
U8
 
mu8Id
, U8 
mu8Evít
 );

26 
U8
 
IsSëLevîEvítFœg
(U8 
mu8Id
, U8 
mu8Evít
 );

28 
Pro˚ssSˇnLevî
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever_common_handler.h

1 #i‚de‡
__LEVER_COMMON_HANDLER_H__


2 
	#__LEVER_COMMON_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	$U8
(*
	tLevîFun_T
)();

7 
	s_Àvî_evít_


9 
LevîFun_T
 
a˘i⁄Evít_1
;

10 
LevîFun_T
 
a˘i⁄Evít_2
;

11 
LevîFun_T
 
a˘i⁄Evít_3
;

12 
LevîFun_T
 
a˘i⁄Evít_4
;

13 } 
	tLevîEvítLi°_T
;

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever_handler.c

1 
	~"Àvî_h™dÀr.h
"

2 
	~"Àvî_comm⁄_h™dÀr.h
"

4 
	~"w©î_out.h
"

5 
	~"Êush_w©î_out.h
"

7 
	~"‰⁄t.h
"

8 
	~"¥o˚ss_di•œy.h
"

9 
	~"sound.h
"

10 
	~"døö.h
"

11 
	~"døö_w©î.h
"

12 
	~"i˚.h
"

13 
	~"i˚_do‹.h
"

14 
	~"i˚_åay_ã°.h
"

15 
	~"cﬁd_w©î.h
"

16 
	~"îr‹.h
"

17 
	~"Êow_mëî.h
"

18 
	~"cody_kô.h
"

19 
	~"powî_ßvög.h
"

20 
	~"hŸ_w©î.h
"

23 
U8
 
LevîO≥nI˚Do‹
();

27 
U8
 
LevîO≥nT≠W©î
();

28 
U8
 
LevîClo£T≠W©î
();

29 
U8
 
LevîO≥nT≠W©îL⁄g
();

32 
U8
 
LevîClo£I˚Do‹
();

34 c⁄° 
LevîEvítLi°_T
 
	gLevîEvítLi°
[] =

37 { 
LevîO≥nT≠W©î
, 
LevîO≥nT≠W©îL⁄g
, 
LevîClo£T≠W©î
, 
NULL
 },

38 { 
LevîO≥nI˚Do‹
, 
NULL
, NULL, 
LevîClo£I˚Do‹
 }

44 
U8
 
CodyLevîO≥nT≠W©î
();

45 
U8
 
CodyLevîO≥nT≠W©îL⁄g
();

48 
U8
 
CodyLevîO≥nI˚Do‹
();

49 
U8
 
CodyLevîClo£I˚Do‹
();

50 c⁄° 
LevîEvítLi°_T
 
	gCodyLevîEvítLi°
[] =

53 { 
CodyLevîO≥nT≠W©î
, 
CodyLevîO≥nT≠W©îL⁄g
, 
LevîClo£T≠W©î
, 
NULL
 },

54 { 
CodyLevîO≥nI˚Do‹
, 
NULL
, NULL, 
CodyLevîClo£I˚Do‹
 }

60 
U8
 
Sîvi˚LevîO≥nT≠W©î
();

62 c⁄° 
LevîEvítLi°_T
 
	gSîvi˚LevîEvítLi°
[] =

65 { 
Sîvi˚LevîO≥nT≠W©î
, 
LevîO≥nT≠W©îL⁄g
, 
LevîClo£T≠W©î
, 
NULL
 },

66 { 
LevîO≥nI˚Do‹
, 
NULL
, NULL, 
LevîClo£I˚Do‹
 }

73 
U8
 
	$LevîO≥nT≠W©î
()

75 
U8
 
mu8Sound
 = 
SOUND_EFFLUENT
;

78 if–
	`GëCodyKôSètus
(Ë=
TRUE


79 && 
	`GëW©îOut
(Ë=
TRUE
 )

81 
	`St›W©îOut
();

82  
SOUND_EFFLUENT_END
;

86 if–
	`GëMemítoDi•
(Ë=
TRUE
 )

88  
SOUND_NONE
;

92 if–
	`Re£tDøöW©î
(Ë=
TRUE
 )

94  
SOUND_CANCEL
;

98 if–
	`GëLockAŒ
(Ë=
LOCK
 )

100  
SOUND_NONE
;

106 if–
	`GëW©îOut
(Ë=
TRUE
 )

108 
	`St›W©îOut
();

109 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

110  
SOUND_EFFLUENT_END
;

114 if–
	`IsExpúedOutPrŸe˘Time
(Ë=
FALSE
 )

116  
SOUND_NONE
;

120 
	`SëOuègeSètus
–
TYPE_WATER
, 
FLOW_SUPPLY
 );

135 if–
	`IsT™kCÀ™Mode
(Ë=
TRUE
 )

137 
	`SëT™kCÀ™
–
TRUE
 );

138 
	`SèπDøöPumpOnLevñ
();

144 
	`GëW©îOutAmoutTy≥
(Ë=
FIXED_AMOUNT_INFINITY
 )

146 
mu8Sound
 = 
SOUND_EFFLUENT_CONTINUE
;

150 if–
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_HOT
 )

152 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

154 
mu8Sound
 = 
SOUND_HOT_OUT_USER
;

158 
mu8Sound
 = 
SOUND_HOT_OUT
;

162 
	`SëSëtögDi•
–
FALSE
 );

164 
mu8Sound
 = 
	`SèπW©îOutFlush
( mu8Sound );

166  
mu8Sound
;

167 
	}
}

171 
U8
 
	$C™˚lFlushPowªOn
()

173 if–
	`IsD⁄eFlushSètus
(Ë=
TRUE


174 && 
	`GëFlushPowîOn
(Ë=
FLUSH_STATUS_INIT
 )

176 
	`SëCﬁdW©îInôFuŒ
–
TRUE
 );

177 
	`SëFlushPowîOn
–
FLUSH_STATUS_DONE
 );

178 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

180  
TRUE
;

183  
FALSE
;

184 
	}
}

186 
U8
 
	$LevîClo£T≠W©î
()

188 
U8
 
mu8Sound
 = 
SOUND_NONE
;

191 if–
	`GëW©îOut
(Ë=
TRUE
 )

193 
	`St›W©îOut
();

195 
	`C™˚lFlushPowªOn
();

196 
	`SëFŸaReboŸ
–
FALSE
 );

197  
SOUND_EFFLUENT_END
;

200 if–
	`C™˚lFlushPowªOn
(Ë=
TRUE
 )

202  
SOUND_CANCEL
;

205  
mu8Sound
;

206 
	}
}

208 
U8
 
	$W©îOutInföôy
()

210 if–
	`GëW©îOut
(Ë=
TRUE
 )

213 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

215  
FALSE
;

218 if–
	`GëW©îOutAmoutTy≥
(Ë!
FIXED_AMOUNT_INFINITY
 )

220 
	`SëW©îOutInföôyL⁄gKey
();

221  
TRUE
;

225  
FALSE
;

226 
	}
}

228 
U8
 
	$LevîO≥nT≠W©îL⁄g
()

230 
U8
 
mu8Sound
 = 
SOUND_NONE
;

233 if–
	`W©îOutInföôy
(Ë=
TRUE
 )

235 
mu8Sound
 = 
SOUND_EFFLUENT_CONTINUE
;

240 if–
	`IsT™kCÀ™Mode
(Ë=
TRUE
 )

242 
	`SëT™kCÀ™
–
TRUE
 );

243 
	`SèπDøöPumpOnLevñ
();

247 
	`SëSëtögDi•
–
FALSE
 );

248  
mu8Sound
;

249 
	}
}

253 
U8
 
	$LevîO≥nI˚Do‹
()

255 
U8
 
mu8Sound
 = 
SOUND_ALARM_ICE
;

258 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

260  
SOUND_NONE
;

263 if–
	`GëMemítoDi•
(Ë=
TRUE
 )

265  
SOUND_NONE
;

268 if–
	`Re£tDøöW©î
(Ë=
TRUE
 )

270  
SOUND_CANCEL
;

273 
	`SëSëtögDi•
–
FALSE
 );

276 if–
	`GëLockAŒ
(Ë=
LOCK
 )

278  
SOUND_NONE
;

284 if–
	`GëLockI˚
(Ë=
TRUE
 )

286 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_LOCK_ICE
 );

287  
SOUND_ALARM_ICE_LOCK
;

291 if–
	`GëI˚C⁄figMake
(Ë=
FALSE
 )

293 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_MAKE_OFF_ICE
 );

294 
mu8Sound
 = 
SOUND_ALARM_ICE_OFF
;

297 if–
	`GëSavögSètus
(Ë=
STATUS_SLEEP
 )

299 
mu8Sound
 = 
SOUND_ALARM_SLEEP_NO_ICE
;

302 
	`O≥nI˚Do‹
();

303  
mu8Sound
;

304 
	}
}

308 
U8
 
	$LevîClo£I˚Do‹
()

310 
U8
 
mu8Sound
 = 
SOUND_EFFLUENT_END
;

313 if–
	`GëLockI˚
(Ë=
TRUE


314 || 
	`GëLockAŒ
(Ë=
TRUE


315 || 
	`GëSoundDi•
(Ë=
TRUE


316 || 
	`GëMemítoDi•
(Ë=
TRUE


317 || 
	`GëSëtögDi•
(Ë=
TRUE


318 || 
	`GëClockDi•
(Ë=
TRUE


319 || 
	`GëCu°omîDi•
(Ë=
TRUE


320 || 
	`IsD⁄eFlushInôSëup
(Ë=
FALSE


323  
SOUND_NONE
;

328 if–
	`GëI˚C⁄figMake
(Ë=
TRUE


329 && 
	`GëSavögSètus
(Ë=
FALSE
 )

331 if–
	`GëI˚Do‹O≥nögTime
(Ë< 
ICE_DOOR_OPEN_ALARAM_TIME
 )

333 
mu8Sound
 = 
SOUND_ALARM_ICE_OUT
;

338 
	`Clo£I˚Do‹
();

339 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

340  
mu8Sound
;

341 
	}
}

345 
U8
 
	$CodyLevîO≥nT≠W©î
()

347 
U8
 
mu8Sound
 = 
SOUND_EFFLUENT
;

350 if–
	`GëW©îOut
(Ë=
TRUE
 )

352 
	`St›W©îOut
();

353  
SOUND_EFFLUENT_END
;

357 if–
	`IsExpúedOutPrŸe˘Time
(Ë=
FALSE
 )

359  
SOUND_NONE
;

369 
	`SèπW©îOut
();

371  
mu8Sound
;

372 
	}
}

374 
U8
 
	$CodyLevîO≥nT≠W©îL⁄g
()

376 
U8
 
mu8Sound
 = 
SOUND_NONE
;

379 if–
	`W©îOutInföôy
(Ë=
TRUE
 )

381 
mu8Sound
 = 
SOUND_EFFLUENT_CONTINUE
;

384  
mu8Sound
;

385 
	}
}

388 
U8
 
	$CodyLevîO≥nI˚Do‹
()

390 
	`O≥nI˚Do‹
();

392  
SOUND_EFFLUENT
;

393 
	}
}

395 
U8
 
	$CodyLevîClo£I˚Do‹
()

397 
	`Clo£I˚Do‹
();

398  
SOUND_EFFLUENT_END
;

399 
	}
}

404 
U8
 
	$Sîvi˚LevîO≥nT≠W©î
()

406 
U8
 
mu8Sound
 = 
SOUND_EFFLUENT
;

410 if–
	`GëW©îOut
(Ë=
TRUE
 )

412 
	`St›W©îOut
();

413  
SOUND_EFFLUENT_END
;

417 if–
	`IsExpúedOutPrŸe˘Time
(Ë=
FALSE
 )

419  
SOUND_NONE
;

436 #i‡
CONFIG_STER


437 if–
	`GëSãrEºW©îOut
(Ë=
TRUE
 )

439  
SOUND_ERROR
;

445 if–
	`IsT™kCÀ™Mode
(Ë=
TRUE
 )

447 
	`SëT™kCÀ™
–
TRUE
 );

448 
	`SèπDøöPumpOnLevñ
();

453 if–
	`GëW©îOutAmoutTy≥
(Ë=
FIXED_AMOUNT_INFINITY
 )

455 
mu8Sound
 = 
SOUND_EFFLUENT_CONTINUE
;

458 
	`SèπW©îOut
();

460  
mu8Sound
;

461 
	}
}

465 * 
	$GëLevîEvítLi°
()

468 if–
	`GëCodySîvi˚
(Ë=
TRUE
 )

470  (*)
CodyLevîEvítLi°
;

478  (*)
LevîEvítLi°
;

479 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever_handler.h

1 #i‚de‡
__LEVER_HANDLER_H__


2 
	#__LEVER_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

6 * 
GëLevîEvítLi°
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\process_lever.c

1 
	~"hw.h
"

2 
	~"¥j_ty≥.h
"

4 
	~"Àvî.h
"

5 
	~"Àvî_comm⁄_h™dÀr.h
"

6 
	~"Àvî_h™dÀr.h
"

7 
	~"¥o˚ss_Àvî.h
"

8 
	~"¥o˚ss_di•œy.h
"

10 
	~"key.h
"

11 
	~"‰⁄t.h
"

12 
	~"sound.h
"

13 
	~"powî_ßvög.h
"

15 
	~"i˚.h
"

16 
	~"w©î_out.h
"

17 
	~"fûãr.h
"

18 
	~"‰⁄t.h
"

19 
	~"Êush_w©î_out.h
"

20 
	~"îr‹.h
"

21 
	~"cody_kô.h
"

22 
	~"em±y_cﬁd_ènk.h
"

24 
	~"eﬁ.h
"

25 
	~"eﬁ_Àvî_h™dÀr.h
"

27 
	~"f˘.h
"

28 
	~"f˘_Àvî_h™dÀr.h
"

32 
U8
 
	$IsVÆidI˚Out
()

34  
TRUE
;

35 
	}
}

37 
U8
 
	$IsEº‹W©îOut
()

39 
U8
 
mu8SñW©î
;

41 
mu8SñW©î
 = 
	`GëW©îOutSñe˘
();

42 if–
mu8SñW©î
 =
SEL_WATER_ROOM


43 && 
	`IsEº‹Ty≥
–
ERR_TYPE_ROOM_WATER_OUT
Ë=
TRUE
 )

45  
TRUE
;

48 if–
mu8SñW©î
 =
SEL_WATER_COLD


49 && 
	`IsEº‹Ty≥
–
ERR_TYPE_COLD_WATER_OUT
Ë=
TRUE
 )

51  
TRUE
;

54 if–
mu8SñW©î
 =
SEL_WATER_HOT


55 && 
	`IsEº‹Ty≥
–
ERR_TYPE_HOT_WATER_OUT
Ë=
TRUE
 )

57  
TRUE
;

60  
FALSE
;

61 
	}
}

63 
U8
 
	$IsVÆidW©îOut
()

66 if–
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_FLUSH
 )

68 
	`CÀ¨OuègeEº‹
();

69 
	`CÀ¨OuègeHŸEº‹
();

72 if–
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_ROOM


73 || 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_COLD
 )

75 
	`CÀ¨OuègeEº‹
();

78 if–
	`IsEº‹W©îOut
(Ë=
TRUE
 )

80 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

81 
	`Sound
–
SOUND_ERROR
 );

83  
FALSE
;

86 if–
	`IsO≥nFûãr
–
ID_FILTER_COVER
 ) =
FILTER_OPEN


87 || 
	`IsO≥nFûãr
–
ID_FILTER
 ) =
FILTER_OPEN
 )

91 if–
	`GëEﬁSètus
(Ë=
TRUE


92 || 
	`GëCodyKôSètus
(Ë=
TRUE
 )

94  
TRUE
;

97 if–
	`IsO≥nFûãr
–
ID_FILTER_COVER
 ) =
FILTER_OPEN
 )

99 
	`Sound
–
SOUND_ALARM_COVER_OPEN_FRONT
 );

102 if–
	`IsO≥nFûãr
–
ID_FILTER
 ) =
FILTER_OPEN
 )

104 
	`Sound
–
SOUND_FILTER_CHECK
 );

107  
FALSE
;

110  
TRUE
;

111 
	}
}

113 
U8
 
	$IsVÆidLevîC⁄dôi⁄
(
U8
 
mu8Id
 )

116 if–
	`IsSèπEm±yCﬁdT™k
(Ë=
TRUE
 )

118 
	`St›Em±yCﬁdT™k
();

119  
FALSE
;

123 if–
	`GëSoundDi•
(Ë=
TRUE


124 || 
	`GëClockDi•
(Ë=
TRUE


125 || 
	`GëSëtögDi•
(Ë=
TRUE


126 || 
	`GëCu°omîDi•
(Ë=
TRUE


129  
FALSE
;

135 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

137 if–
	`GëLockAŒ
(Ë=
LOCK
 )

139 
	`SèπDi•TimîId
–
DISP_TIMER_ALARM_LOCK_ALL
 );

140 
	`Sound
–
SOUND_ALARM_LOCK_ALL
 );

141  
FALSE
;

146 if–
mu8Id
 =
LEVER_ID_WATER
 )

148  
	`IsVÆidW©îOut
();

151  
	`IsVÆidI˚Out
();

152 
	}
}

155 
	#LEVER_WAIT_TIME_OUT
 60U

	)

156 
	#LEVER_NO_WAIT_TIME_OUT
 0U

	)

157 
U8
 
	$EvítH™dÀr
(
U8
 
mu8Id
, 
LevîEvítLi°_T
 *
pLi°
)

159 
SoundId_T
 
mSound
;

160 
U8
 
mu8EºSkù
[ 
MAX_LEVER_ID
 ] = {
FALSE
};

163 if–
	`IsSëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_SHORT
 ) =
TRUE
 )

165 
	`CÀ¨LevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_SHORT
 );

167 if–
	`IsVÆidLevîC⁄dôi⁄
–
mu8Id
 ) =
FALSE
 )

169 
mu8EºSkù
[ 
mu8Id
 ] = 
TRUE
;

171 if–(
pLi°
 + 
mu8Id
 )->
a˘i⁄Evít_1
 !
NULL
 )

173 
mSound
 = (
SoundId_T
)(
pLi°
 + 
mu8Id
)->
	`a˘i⁄Evít_1
();

174 
	`Sound
–
mSound
 );

177 
	`WakeUpSavögMode
();

178 
	`SèπDi•TimîId
–
DISP_TIMER_SLEEP
 );

179 
	`SèπDi•TimîId
–
DISP_TIMER_CLOCK
 );

180 
	`Re£tUnu£dTime
();

182  
LEVER_WAIT_TIME_OUT
;

185 if–
	`IsSëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_LONG
 ) =
TRUE
 )

187 
	`CÀ¨LevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_LONG
 );

189 if–(
pLi°
 + 
mu8Id
 )->
a˘i⁄Evít_2
 !
NULL
 )

191 
mSound
 = (
SoundId_T
)(
pLi°
 + 
mu8Id
 )->
	`a˘i⁄Evít_2
();

192 
	`Sound
–
mSound
 );

193  
LEVER_WAIT_TIME_OUT
;

197 if–
	`IsSëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_LONG_2
 ) =
TRUE
 )

199 
	`CÀ¨LevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_PUSHED_LONG_2
 );

201 if–(
pLi°
 + 
mu8Id
 )->
a˘i⁄Evít_3
 !
NULL
 )

203 
mSound
 = (
SoundId_T
)(
pLi°
 + 
mu8Id
 )->
	`a˘i⁄Evít_3
();

204 
	`Sound
–
mSound
 );

205  
LEVER_WAIT_TIME_OUT
;

209 if–
	`IsSëLevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_POP
 ) =
TRUE
 )

211 
	`CÀ¨LevîEvítFœg
–
mu8Id
, 
LEVER_EVENT_POP
 );

214 if–
mu8EºSkù
[ 
mu8Id
 ] =
TRUE
 )

216 
mu8EºSkù
[ 
mu8Id
 ] = 
FALSE
;

219 if–(
pLi°
 + 
mu8Id
 )->
a˘i⁄Evít_4
 !
NULL
 )

221 
mSound
 = (
SoundId_T
)(
pLi°
 + 
mu8Id
 )->
	`a˘i⁄Evít_4
();

222 
	`Sound
–
mSound
 );

223  
LEVER_WAIT_TIME_OUT
;

228  
LEVER_NO_WAIT_TIME_OUT
;

229 
	}
}

231 
	$Pro˚ssLevîEvítH™dÀr
()

233 
LevîEvítLi°_T
 *
pEvítLi°
 = 
NULL
;

234 
U16
 
mu16DñayW©î
 = 0;

235 
U16
 
mu16DñayI˚
 = 0;

238 if–
	`GëDi•œyInô
(Ë=
FALSE
 )

244 #i‡
CONFIG_EOL


245 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

248 
pEvítLi°
 = (
LevîEvítLi°_T
 *)
	`GëEﬁLevîEvítLi°
();

252 if–
	`GëF˘Sètus
(Ë=
TRUE
 )

255 
pEvítLi°
 = (
LevîEvítLi°_T
 *)
	`GëF˘LevîEvítLi°
();

260 
pEvítLi°
 = (
LevîEvítLi°_T
 *)
	`GëLevîEvítLi°
();

263 if–
mu16DñayW©î
 != 0 )

265 
mu16DñayW©î
--;

269 
mu16DñayW©î
 = 
	`EvítH™dÀr
–
LEVER_ID_WATER
, 
pEvítLi°
 );

272 if–
mu16DñayI˚
 != 0 )

274 
mu16DñayI˚
--;

278 
mu16DñayI˚
 = 
	`EvítH™dÀr
–
LEVER_ID_ICE
, 
pEvítLi°
 );

280 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\process_lever.h

1 #i‚de‡
__PROCESS_LEVER_H__


2 
	#__PROCESS_LEVER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
Pro˚ssLevîEvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\main.c

1 
	~"mcu.h
"

2 
	~"r_smc_íåy.h
"

4 
	~"hw.h
"

5 
	~"timî.h
"

6 
	~"utû.h
"

7 
	~"ì¥om.h
"

8 
	~"πc.h
"

9 
	~"‰⁄t.h
"

10 
	~"sound.h
"

11 
	~"∑r£r.h
"

12 
	~"eﬁ.h
"

13 
	~"w©î_out.h
"

14 
	~"Êush_w©î_out.h
"

15 
	~"powî_ßvög.h
"

16 
	~"¥o˚ss_di•œy.h
"

17 
	~"¥o˚ss_sys_evít.h
"

18 
	~"WIFI_Comm⁄.h
"

19 
	~"WIFI_U£rI¡îÁ˚_Ic⁄AIS.h
"

20 
	~"WIFI_C⁄åﬁ.h
"

23 
	$InôSèπTimîs
( )

25 
	`InôTimî
();

27 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

28 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

29 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

30 
	`SèπTimî
–
TIMER_ID_1SEC
, 
	`TIMER_SEC
(1));

31 
	`SèπTimî
–
TIMER_ID_10SEC
, 
	`TIMER_SEC
(1));

35 
	`SèπTimî
–
TIMER_ID_40SEC
, 
	`TIMER_SEC
(600));

36 
	`SèπTimî
–
TIMER_ID_1MIN
, 
	`TIMER_SEC
(1));

37 #i‡!
CONFIG_JIG_RBK_FRONT


38 
	`SèπTimî
–
TIMER_ID_DEBUG
, 100);

40 
	`SèπTimî
–
TIMER_ID_FRONT
, 20 );

43 #i‡
CONFIG_JIG_GAS_SWITCH


44 
	`SèπTimî
–
TIMER_ID_TEST_100MS
, 100 );

47 
	`SèπTimî
–
TIMER_ID_COMM_FRONT_RX_ERR
, 
	`TIMER_SEC
(10));

49 
	`SèπTimî
–
TIMER_ID_CHECK_SYSTEM
, 
	`TIMER_SEC
(3));

50 
	}
}

52 
	$InôFŸaMem‹y
()

54 #i‡
CONFIG_FOTA_LIB


55 
bô
 
fŸa_ã°
;

57 
fŸa_ã°
 = 1;

58 
fŸa_ã°
 = 0;

60 
	}
}

64 
	$maö
( )

68 
PIOR
 = 0x00U;

69 
	`R_CGC_Gë_Re£tSour˚
();

70 
	`R_CGC_Cª©e
();

71 
	`R_PORT_Cª©e
();

72 
	`R_SAU0_Cª©e
();

73 
	`R_SAU1_Cª©e
();

74 
	`R_IICA0_Cª©e
();

75 
	`R_ADC_Cª©e
();

76 
	`R_TAU0_Cª©e
();

77 
	`R_TAU1_Cª©e
();

78 
	`R_WDT_Cª©e
();

79 
	`R_INTC_Cª©e
();

80 
IAWCTL
 = 0x00U;

83 
PRR0
 = 0x7FU;

84 
PRR1
 = 0xF3U;

85 
PRR0
 = 0x00U;

86 
PRR1
 = 0x00U;

88 
	`R_C⁄fig_PORT_Cª©e
();

89 
	`R_SAU0_Cª©e
();

90 
	`R_SAU1_Cª©e
();

91 
	`R_TAU0_Cª©e
();

92 
	`R_TAU1_Cª©e
();

93 
	`R_C⁄fig_IICA0_Cª©e
();

94 
	`R_C⁄fig_ADC_Cª©e
();

95 
	`R_C⁄fig_INTC_Cª©e
();

96 
	`R_C⁄fig_WDT_Cª©e
();

99 
	`Dñay_MS
( 1400U );

101 
	`RESET_WDT
();

103 
	`InôSy°em
();

104 
	`InôSèπTimîs
();

105 
	`InôFŸaMem‹y
();

106 
	`EI
();

109 
	`InôRtc
();

110 
	`RESET_WDT
();

111 #i‡!
CONFIG_JIG_RBK_FRONT


112 
	`InôEïrom
();

114 
	`CheckFa˘roySëup
();

116 
	`SëFŸaReboŸ
–
	`U£rRódEï
–
EEPROM_ADDR_FOTA_MCU
 ) );

118 
	`CheckSy°em
();

119 if–
	`GëFŸaReboŸ
(Ë=
FALSE
 )

121 
	`Sound
–
SOUND_POWER_ON
 );

124 #i‡
CONFIG_JIG_RBK_FRONT


125 
	`SèπEﬁ
–
EOL_TYPE_FRONT
 );

126 
	`SëVîsi⁄Di•
( 0 );

129 if–
	`GëSavögC⁄fig
(Ë=
TRUE
 )

131 #i‡
CONFIG_TEST_8585


132 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
(20) );

133 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
(20) );

135 #i‡
CONFIG_TEST_8585_ICE


136 
	`SèπTimî
–
TIMER_ID_TEST_8585_ICE
, 
	`TIMER_SEC
(30) );

140 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_SET
);

144 
	`RESET_WDT
();

146 
	`Pro˚ssEvítH™dÀr
();

149 
	`RecvPackëH™dÀr
();

150 
	`SídPackëH™dÀr
();

153 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_WHILE
);

157 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\metering\metering.c

1 
	~"hw.h
"

2 
	~"mëîög.h
"

3 
	~"hÆ_adc.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

10 
Mëî_T
 
	gMëîög
;

12 
	$InôMëîög
()

14 
Mëîög
.
Cuºít
[ 
ID_METERING_12V
 ] = 0.0f;

15 
Mëîög
.
Cuºít
[ 
ID_METERING_24V
 ] = 0.0f;

16 
	}
}

18 
Cuºít_T
 
	$GëMëîögCuºít
(
U8
 
id
)

20  
Mëîög
.
Cuºít
[ 
id
 ];

21 
	}
}

38 
Cuºít_T
 
	$CÆcCuºít_DC_12V
(
U16
 
mu16RawAdc
)

41 
F32
 
mVﬁt
;

42 
Cuºít_T
 
mCuºít
 = 0.0f;

44 
mVﬁt
 = (5.0f/1024.0fË* (
F32
)
mu16RawAdc
;

46 if–
mVﬁt
 < 0.05f )

48 
mCuºít
 = 0.0f;

50 if–
mVﬁt
 > 3.5f )

52 
mCuºít
 = (
mVﬁt
 + 0.025f ) * 1000.0f;

53 
mCuºít
 = mCurrent / ( 0.3f * 24.0f );

56  
mCuºít
;

57 
	}
}

60 
Cuºít_T
 
	$CÆcCuºít_DC_24V
(
U16
 
mu16RawAdc
)

62 
F32
 
mVﬁt
;

63 
Cuºít_T
 
mCuºít
 = 0.0f;

65 
mVﬁt
 = (5.0f/1024.0fË* (
F32
)
mu16RawAdc
;

67 if–
mVﬁt
 < 0.05f )

69 
mCuºít
 = 0.0f;

71 if–
mVﬁt
 > 3.5f )

73 
mCuºít
 = (
mVﬁt
 + 0.025f ) * 1000.0f;

74 
mCuºít
 = mCurrent / ( 0.3f * 24.0f );

77  
mCuºít
;

79 
	}
}

82 
	$Pro˚ssMëîög
()

84 
U16
 
mRawAdc
 = 0U;

88 if–
	`GET_STATUS_SMPS_12V
() == 0 )

90 
mRawAdc
 = 
	`HAL_GëAdcVÆue
–
ANI_12V_FB
 );

91 
Mëîög
.
Cuºít
[ 
ID_METERING_12V
 ] = 
	`CÆcCuºít_DC_12V
–
mRawAdc
 );

95 
mRawAdc
 = 
	`HAL_GëAdcVÆue
–
ANI_24V_FB
 );

96 
Mëîög
.
Cuºít
[ 
ID_METERING_24V
 ] = 
	`CÆcCuºít_DC_24V
–
mRawAdc
 );

97 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\metering\metering.h

1 #i‚de‡
__METERING__


2 
	#__METERING__


	)

4 
	~"¥j_ty≥.h
"

8 
	#ID_METERING_12V
 0

	)

9 
	#ID_METERING_24V
 1

	)

10 
	#MAX_METERING_NUM
 2

	)

13 
	tCuºít_T
;

16 
	s_mëîög_


18 
Cuºít_T
 
	mCuºít
[ 
MAX_METERING_NUM
 ];

21 } 
	tMëî_T
;

23 
InôMëîög
();

25 
Cuºít_T
 
GëMëîögCuºít
(
U8
 
id
);

27 
Pro˚ssMëîög
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\eco.c

1 
	~"eco.h
"

3 
	~"ãmp.h
"

6 
	#DEFAULT_START_TIME
 108000U

7 
	#DEFAULT_STOP_TIME
 43200U

8 

	)

9 
	#DEFAULT_COLD_OUT_COUNT
 4U

	)

10 
	#DEFAULT_COLD_OUT_TIME
 120U

11 

	)

13 
Eco_T
 
	gEco
;

16 
SèπEco
();

17 
St›Eco
();

18 
Re£tEcoSèπTime
();

20 
	$InôEco
()

22 
Eco
.
Sètus
 = 
ECO_STOP
;

24 
Eco
.
SèπTime
 = 
DEFAULT_START_TIME
;

25 
Eco
.
St›Time
 = 
DEFAULT_STOP_TIME
;

27 
Eco
.
IsCﬁdOut
 = 
FALSE
;

28 
Eco
.
CﬁdOutCou¡
 = 
DEFAULT_COLD_OUT_COUNT
;

29 
	}
}

31 
EcoSètus_T
 
	$GëEcoSètus
()

33  
Eco
.
Sètus
;

34 
	}
}

36 
	$SèπEco
()

38 
Eco
.
Sètus
 = 
ECO_START
;

40 
Eco
.
IsCﬁdOut
 = 
FALSE
;

41 
Eco
.
IsCﬁdOutSt›Time
 = 
FALSE
;

42 
Eco
.
CﬁdOutTime
 = 
DEFAULT_COLD_OUT_TIME
;

43 
Eco
.
CﬁdOutCou¡
 = 
DEFAULT_COLD_OUT_COUNT
;

44 
Eco
.
St›Time
 = 
DEFAULT_STOP_TIME
;

45 
	}
}

47 
	$St›Eco
()

49 
Eco
.
Sètus
 = 
ECO_STOP
;

51 
Eco
.
IsCﬁdOut
 = 
FALSE
;

52 
Eco
.
IsCﬁdOutSt›Time
 = 
FALSE
;

53 
	`Re£tEcoSèπTime
();

54 
	}
}

56 
	$Re£tEcoSèπTime
()

58 
Eco
.
SèπTime
 = 
DEFAULT_START_TIME
;

59 
	}
}

61 
	$Re£tEco
()

63 if–
Eco
.
Sètus
 =
ECO_STOP
 )

65 
	`Re£tEcoSèπTime
();

67 
	}
}

70 
	$Cou¡EcoCﬁdOut
()

72 if–
Eco
.
Sètus
 =
ECO_START
 )

75 
Eco
.
IsCﬁdOutSt›Time
 = 
TRUE
;

77 
Eco
.
IsCﬁdOut
 = 
TRUE
;

80 if–
Eco
.
CﬁdOutTime
 == 0 )

82 
Eco
.
CﬁdOutTime
 = 
DEFAULT_COLD_OUT_TIME
;

85 if–
Eco
.
CﬁdOutCou¡
 != 0 )

87 
Eco
.
CﬁdOutCou¡
--;

90 
	}
}

93 
	$Pro˚ssEco
()

95 
TEMP_T
 
tAmbi
;

98 
tAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

100 if–
Eco
.
Sètus
 =
ECO_STOP
 )

102 if–
tAmbi
 >= 23.0f &&ÅAmbi <= 28.0f )

104 if–--
Eco
.
SèπTime
 == 0 )

106 
	`SèπEco
();

111 
	`Re£tEcoSèπTime
();

116 if–
tAmbi
 < 23.0f ||ÅAmbi > 28.0f )

118 
	`St›Eco
();

122 if–
Eco
.
IsCﬁdOutSt›Time
 =
TRUE
 )

124 if–--
Eco
.
St›Time
 == 0 )

126 
	`St›Eco
();

131 if–
Eco
.
IsCﬁdOut
 =
TRUE
 )

133 if–
Eco
.
CﬁdOutTime
 != 0 )

135 
Eco
.
CﬁdOutTime
--;

139 if–
Eco
.
CﬁdOutCou¡
 > 0 )

141 
	`St›Eco
();

145 
Eco
.
IsCﬁdOut
 = 
FALSE
;

146 
Eco
.
CﬁdOutTime
 = 
DEFAULT_COLD_OUT_TIME
;

147 
Eco
.
CﬁdOutCou¡
 = 
DEFAULT_COLD_OUT_COUNT
;

153 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\eco.h

1 #i‚de‡
__ECO_H__


2 
	#__ECO_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mECO_STOP
,

10 
	mECO_START
,

11 } 
	tEcoSètus_T
;

15 
	s_eco_mode_


17 
EcoSètus_T
 
	mSètus
;

19 
U32
 
	mSèπTime
;

20 
U32
 
	mSt›Time
;

22 
U8
 
	mIsCﬁdOutSt›Time
;

23 
U8
 
	mIsCﬁdOut
;

24 
U8
 
	mCﬁdOutCou¡
;

25 
U32
 
	mCﬁdOutTime
;

27 } 
	tEco_T
;

30 
InôEco
();

32 
EcoSètus_T
 
GëEcoSètus
();

34 
Re£tEco
();

36 
Cou¡EcoCﬁdOut
();

38 
Pro˚ssEco
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\power_saving.c

1 
	~"hÆ_adc.h
"

3 
	~"powî_ßvög.h
"

4 
	~"ì¥om.h
"

5 
	~"comp.h
"

6 
	~"πc.h
"

9 
	#COMP_ON_DELAY_TIME
 300UL

10 

	)

13 
	#DEFAULT_ON_HOUR
 0U

	)

14 
	#DEFAULT_ON_MIN
 0U

	)

17 
	#DEFAULT_OFF_HOUR
 6U

	)

18 
	#DEFAULT_OFF_MIN
 0U

	)

20 
PowîSavög_T
 
	gSavög
;

23 
	$InôSavög
()

25 
Savög
.
C⁄fig
 = 
FALSE
;

27 
Savög
.
PªvSètus
 = 
STATUS_WAKE_UP
;

28 
Savög
.
Sètus
 = 
STATUS_WAKE_UP
;

30 
Savög
.
C⁄fHour
[ 
ALARM_ON
 ] = 
DEFAULT_ON_HOUR
;

31 
Savög
.
C⁄fMö
[ 
ALARM_ON
 ] = 
DEFAULT_ON_MIN
;

33 
Savög
.
C⁄fHour
[ 
ALARM_OFF
 ] = 
DEFAULT_OFF_HOUR
;

34 
Savög
.
C⁄fMö
[ 
ALARM_OFF
 ] = 
DEFAULT_OFF_MIN
;

35 
	}
}

37 
	$GëSavögD©a
(
PowîSavög_T
 *
pD©a
 )

39 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Savög
, –
PowîSavög_T
 ));

40 
	}
}

42 
	$SëSavögC⁄fig
(
U8
 
mu8VÆ
 )

44 if–
mu8VÆ
 !
TRUE
 && mu8VÆ !
FALSE
 )

49 if–
mu8VÆ
 !
Savög
.
C⁄fig
 )

51 
	`SaveEïromId
–
EEP_ID_CONF_POWER_SAVING
 );

54 
Savög
.
C⁄fig
 = 
mu8VÆ
;

55 
	}
}

57 
U8
 
	$GëSavögC⁄fig
()

59  
Savög
.
C⁄fig
;

60 
	}
}

62 
U32
 
	$C⁄vTime
–
U8
 
mHour
, U8 
mMö
, U8 
mSec
)

64 
U32
 
the_time
;

66 
the_time
 = (
mHour
 * 60ULË+ 
mMö
;

67 
the_time
 *= 60UL;

68 
the_time
 +
mSec
;

70  
the_time
;

71 
	}
}

74 
	$SëSavögAœrmTime
(
U8
 
mTy≥
, U8 
mHour
, U8 
mMö
)

76 
Savög
.
C⁄fHour
[ 
mTy≥
 ] = 
mHour
;

77 
Savög
.
C⁄fMö
[ 
mTy≥
 ] = 
mMö
;

79 
	`SaveEïromId
–
EEP_ID_POWER_SAVING_TIME
 );

80 
	}
}

82 
	$GëSavögAœrmTime
(
U8
 
mTy≥
, U8 *
pHour
, U8 *
pMö
)

84 if–
pHour
 !
NULL
 && 
pMö
 != NULL )

86 *
pHour
 = 
Savög
.
C⁄fHour
[ 
mTy≥
 ];

87 *
pMö
 = 
Savög
.
C⁄fMö
[ 
mTy≥
 ];

89 
	}
}

91 
	$SëSavögAœrmHour
(
U8
 
mTy≥
, U8 
mHour
)

93 
Savög
.
C⁄fHour
[ 
mTy≥
 ] = 
mHour
;

95 
	`SaveEïromId
–
EEP_ID_POWER_SAVING_TIME
 );

96 
	}
}

98 
U8
 
	$GëSavögAœrmHour
(
U8
 
mTy≥
)

100  
Savög
.
C⁄fHour
[ 
mTy≥
 ];

101 
	}
}

103 
	$SëSavögAœrmMö
(
U8
 
mTy≥
, U8 
mMö
)

105 
Savög
.
C⁄fMö
[ 
mTy≥
 ] = 
mMö
;

107 
	`SaveEïromId
–
EEP_ID_POWER_SAVING_TIME
 );

108 
	}
}

110 
U8
 
	$GëSavögAœrmMö
(
U8
 
mTy≥
)

112  
Savög
.
C⁄fMö
[ 
mTy≥
 ];

113 
	}
}

115 
U8
 
	$GëSavögSètus
()

117 if–
Savög
.
C⁄fig
 =
FALSE
 )

119  
STATUS_WAKE_UP
;

122  
Savög
.
Sètus
;

123 
	}
}

127 
	$WakeUpSavögMode
()

132 if–
Savög
.
Sètus
 =
STATUS_SLEEP


133 && 
	`GëCompOnOff
(Ë=
FALSE
 )

135 
	`SëCompPrŸe˘OffTime
–
COMP_ON_DELAY_TIME
 );

138 
Savög
.
Sètus
 = 
STATUS_WAKE_UP
;

140 
	}
}

143 #i‡
CONFIG_TEST_8585


144 
	$Pro˚ssSavög
()

147 
Savög
.
Sètus
 = 
STATUS_WAKE_UP
;

148 
	}
}

150 
	$Pro˚ssSavög
()

152 
TimeD©a_T
 
mTime
;

155 
	`GëRtcTime
–&
mTime
 );

156 
Savög
.
CuºítTime
 = 
	`C⁄vTime
–
mTime
.
Hour
, mTime.
Mö
, mTime.
Sec
 );

157 
Savög
.
OffTime
 = 
	`C⁄vTime
–Savög.
C⁄fHour
[
ALARM_OFF
], Savög.
C⁄fMö
[ALARM_OFF], 0U );

158 
Savög
.
OnTime
 = 
	`C⁄vTime
–Savög.
C⁄fHour
[
ALARM_ON
], Savög.
C⁄fMö
[ALARM_ON], 0U );

162 if–
Savög
.
OffTime
 =Savög.
OnTime
 )

164 
Savög
.
Sètus
 = 
STATUS_WAKE_UP
;

166 if–
Savög
.
OffTime
 > Savög.
OnTime
 )

168 if–
Savög
.
CuºítTime
 > Savög.
OnTime


169 && 
Savög
.
CuºítTime
 < Savög.
OffTime
 )

171 
Savög
.
Sètus
 = 
STATUS_SLEEP
;

175 
Savög
.
Sètus
 = 
STATUS_WAKE_UP
;

180 if–
Savög
.
CuºítTime
 > Savög.
OnTime


181 || 
Savög
.
CuºítTime
 < Savög.
OffTime
 )

183 
Savög
.
Sètus
 = 
STATUS_SLEEP
;

187 
Savög
.
Sètus
 = 
STATUS_WAKE_UP
;

190 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\power_saving.h

1 #i‚de‡
__POWER_SAVING_H__


2 
	#__POWER_SAVING_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#STATUS_WAKE_UP
 0

	)

8 
	#STATUS_SLEEP
 1

	)

11 
	#ALARM_ON
 0

	)

12 
	#ALARM_OFF
 1

	)

13 
	#ALARAM_NUM
 2

	)

16 
	s_powî_ßvög_


18 
U8
 
	mC⁄fig
;

20 
U8
 
	mPªvSètus
;

21 
U8
 
	mSètus
;

24 
U8
 
	mC⁄fHour
[
ALARAM_NUM
];

25 
U8
 
	mC⁄fMö
[
ALARAM_NUM
];

27 
U32
 
	mOffTime
;

28 
U32
 
	mOnTime
;

29 
U32
 
	mCuºítTime
;

31 } 
	tPowîSavög_T
;

34 
InôSavög
();

35 
GëSavögD©a
(
PowîSavög_T
 *
pD©a
 );

37 
SëSavögC⁄fig
(
U8
 
mu8VÆ
 );

38 
U8
 
GëSavögC⁄fig
();

41 
SëSavögAœrmTime
(
U8
 
mTy≥
, U8 
mHour
, U8 
mMö
);

42 
GëSavögAœrmTime
(
U8
 
mTy≥
, U8 *
pHour
, U8 *
pMö
);

44 
SëSavögAœrmHour
(
U8
 
mTy≥
, U8 
mHour
);

45 
U8
 
GëSavögAœrmHour
(U8 
mTy≥
);

47 
SëSavögAœrmMö
(
U8
 
mTy≥
, U8 
mMö
);

48 
U8
 
GëSavögAœrmMö
(U8 
mTy≥
);

51 
U8
 
GëSavögSètus
();

52 
WakeUpSavögMode
();

54 
Pro˚ssSavög
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\prj_type.h

1 #i‚de‡
__PRJ_TYPE_H__


2 
	#__PRJ_TYPE_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

8 #i‚de‡
__TYPEDEF_COWAY__


9 
	#__TYPEDEF_COWAY__


	)

10 
	tU8
;

11 sig√d 
	tI8
;

12 
	tU16
;

13 sig√d 
	tI16
;

14 
	tU32
;

15 sig√d 
	tI32
;

16 
	tF32
;

17 
	tBOOL_T
;

18 
	tTIME_T
;

20 
	tTEMP_T
;

24 
	#__DEBUG__
 1

	)

26 #i‡
__DEBUG__


27 
	#LOCAL


	)

29 
	#LOCAL
 

	)

32 #ifde‡
NULL


33 #unde‡
NULL


36 
	#NULL
 ((*)0)

	)

38 #ifde‡
TRUE


39 #unde‡
TRUE


42 
	#TRUE
 1

	)

44 #ifde‡
FALSE


45 #unde‡
FALSE


48 
	#FALSE
 0

	)

51 #ifde‡
ON


52 #unde‡
ON


55 
	#ON
 1

	)

57 #ifde‡
OFF


58 #unde‡
OFF


61 
	#OFF
 0

	)

63 
	#HIGH
 1

	)

64 
	#LOW
 0

	)

68 #i‡(
CONFIG_FOTA_LIB
 == 0)

69 
	#__FAR


	)

70 
	#SPRINTF
 
•rötf


	)

71 
	#MEMSET
 
mem£t


	)

72 
	#MEMCPY
 
mem˝y


	)

73 
	#ATOI
 
©oi


	)

75 
	#__FAR
 
__Ár


	)

76 
	#SPRINTF
 
•rötf_f


	)

77 
	#MEMSET
 
mem£t_f


	)

78 
	#MEMCPY
 
mem˝y_f


	)

79 
	#ATOI
 
©oi_f


	)

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\process_sys_event.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~"¥j_ty≥.h
"

5 
	~"timî.h
"

6 
	~"¥o˚ss_sys_evít.h
"

8 
	~"w©î_out.h
"

9 
	~"¥o˚ss_di•œy.h
"

10 
	~"ªœy.h
"

11 
	~"vÆve.h
"

12 
	~"i˚_åay.h
"

13 
	~"i˚_åay_ã°.h
"

14 
	~"i˚_fuŒ.h
"

15 
	~"key.h
"

16 
	~"gas_swôch_vÆve.h
"

17 
	~"¥o˚ss_key.h
"

18 
	~"key_h™dÀr.h
"

19 
	~"key_n‹mÆ_h™dÀr.h
"

22 
	~"Àvî.h
"

23 
	~"¥o˚ss_Àvî.h
"

25 
	~"hÆ_°ï_mŸ‹.h
"

26 
	~"hÆ_£rül.h
"

27 
	~"hÆ_adc.h
"

28 
	~"hÆ_Àd.h
"

29 
	~"hÆ_öput.h
"

30 
	~"hÆ_uv.h
"

32 
	~"døö_pump.h
"

33 
	~"¥o˚ss_make.h
"

35 
	~"‰⁄t.h
"

36 
	~"cﬁd_w©î.h
"

37 
	~"i˚.h
"

38 
	~"i˚_do‹.h
"

39 
	~"i˚_makî.h
"

40 
	~"døö.h
"

41 
	~"swög_b¨.h
"

42 
	~"ì¥om.h
"

43 
	~"powî_ßvög.h
"

44 
	~"Àak.h
"

45 
	~"îr‹.h
"

46 
	~"¥o˚ss_îr‹.h
"

47 
	~"£rvi˚.h
"

50 
	~"hŸ_w©î.h
"

51 
	~"hŸ_w©î_out.h
"

52 
	~"hŸ_w©î_Êow.h
"

53 
	~"hŸ_w©î_hóãr.h
"

54 
	~"hóãr_out.h
"

56 
	~"íîgy.h
"

57 
	~"u£r.h
"

58 
	~"uv.h
"

59 
	~"¥o˚ss_uv.h
"

60 
	~"hó…h.h
"

61 
	~"døö_w©î.h
"

62 
	~"hó…h_makî.h
"

63 
	~"em±y_cﬁd_ènk.h
"

64 
	~"cody_kô.h
"

66 
	~"πc.h
"

68 
	~"eﬁ.h
"

69 
	~"¥o˚ss_eﬁ.h
"

70 
	~"f˘.h
"

71 
	~"¥o˚ss_f˘.h
"

72 
	~"time_sh‹t.h
"

74 
	~"∑r£r.h
"

75 
	~"∑r£r_‰⁄t.h
"

76 
	~"∑r£r_comp.h
"

78 
	~"ãmp.h
"

79 
	~"sound.h
"

80 
	~"voi˚.h
"

81 
	~"smps.h
"

83 
	~"Êow_mëî.h
"

84 
	~"Êow_vÆve.h
"

85 
	~"fûãr.h
"

86 
	~"mëîög.h
"

87 
	~"comp.h
"

88 
	~"Êush_w©î_out.h
"

90 
	~"sm¨t_check.h
"

91 
	~"dügnosis.h
"

92 
	~"m⁄ô‹ög.h
"

95 
	~"WIFI_U£rI¡îÁ˚_Ic⁄AIS.h
"

96 
	~"WIFI_C⁄åﬁ.h
"

100 (*
	tA˘i⁄_T
)();

101 
	s_sys_evít_


103 
U8
 
timîId
;

104 
A˘i⁄_T
 
pFun
;

105 
A˘i⁄_T
 
pFun_Düg
;

106 
A˘i⁄_T
 
pFun_FCT
;

107 
A˘i⁄_T
 
pFun_EOL
;

108 } 
	tSysEvít_T
;

111 
	`Evt_1ms_H™dÀr
( );

112 
	`Evt_10ms_H™dÀr
( );

113 
	`Evt_100ms_H™dÀr
( );

114 
	`Evt_1£c_H™dÀr
( );

115 
	`Evt_10£c_H™dÀr
( );

116 
	`Evt_40£c_H™dÀr
( );

117 
	`Evt_1mö_H™dÀr
( );

118 
	`Evt_Debug_H™dÀr
( );

119 
	`Evt_Fr⁄t_H™dÀr
( );

120 
	`Evt_DøöPump_H™dÀr
( );

121 
	`Evt_Fr⁄tRxEº_H™dÀr
( );

122 
	`Evt_Comp_H™dÀr
( );

123 
	`Evt_CompRxEº_H™dÀr
( );

124 
	`Evt_CheckSy°em_H™dÀr
( );

127 
	`Evt_Düg_1ms_H™dÀr
( );

128 
	`Evt_Düg_10ms_H™dÀr
( );

129 
	`Evt_Düg_100ms_H™dÀr
( );

130 
	`Evt_Düg_1£c_H™dÀr
( );

131 
	`Evt_Düg_40£c_H™dÀr
( );

132 
	`Evt_Düg_1mö_H™dÀr
( );

135 
	`Evt_EOL_1ms_H™dÀr
();

136 
	`Evt_EOL_10ms_H™dÀr
();

137 
	`Evt_EOL_100ms_H™dÀr
();

138 
	`Evt_EOL_1£c_H™dÀr
( );

139 
	`Evt_EOL_1mö_H™dÀr
( );

142 
	`Evt_FCT_1ms_H™dÀr
( );

143 
	`Evt_FCT_10ms_H™dÀr
( );

144 
	`Evt_FCT_100ms_H™dÀr
();

145 
	`Evt_FCT_1£c_H™dÀr
( );

146 
	`Evt_FCT_1mö_H™dÀr
( );

149 #i‡
CONFIG_TEST_8585


150 
	`Evt_Te°_8585_H™dÀr
( );

151 
	`Evt_Te°_8585_2_H™dÀr
( );

153 #i‡
CONFIG_TEST_8585_ICE


154 
	`Evt_Te°_8585_I˚_H™dÀr
( );

156 #i‡
CONFIG_JIG_GAS_SWITCH


157 
	`Evt_Te°_GasSwôch_H™dÀr
( );

160 c⁄° 
SysEvít_T
 
SysEvítLi°
[] =

163 { 
TIMER_ID_1MS
, 
Evt_1ms_H™dÀr
, 
Evt_Düg_1ms_H™dÀr
, 
Evt_FCT_1ms_H™dÀr
, 
Evt_EOL_1ms_H™dÀr
 },

164 { 
TIMER_ID_10MS
, 
Evt_10ms_H™dÀr
, 
Evt_Düg_10ms_H™dÀr
, 
Evt_FCT_10ms_H™dÀr
, 
Evt_EOL_10ms_H™dÀr
 },

165 { 
TIMER_ID_100MS
, 
Evt_100ms_H™dÀr
, 
Evt_Düg_100ms_H™dÀr
, 
Evt_FCT_100ms_H™dÀr
, 
Evt_EOL_100ms_H™dÀr
 },

166 { 
TIMER_ID_1SEC
, 
Evt_1£c_H™dÀr
, 
Evt_Düg_1£c_H™dÀr
, 
Evt_FCT_1£c_H™dÀr
, 
Evt_EOL_1£c_H™dÀr
 },

167 { 
TIMER_ID_10SEC
, 
Evt_10£c_H™dÀr
, Evt_10£c_H™dÀr, 
NULL
, NULL },

168 { 
TIMER_ID_40SEC
, 
Evt_40£c_H™dÀr
, 
Evt_Düg_40£c_H™dÀr
, 
NULL
, NULL },

169 { 
TIMER_ID_1MIN
, 
Evt_1mö_H™dÀr
, 
Evt_Düg_1mö_H™dÀr
, 
Evt_FCT_1mö_H™dÀr
, 
Evt_EOL_1mö_H™dÀr
 },

170 { 
TIMER_ID_FRONT
, 
Evt_Fr⁄t_H™dÀr
, Evt_Front_Handler, Evt_Front_Handler, Evt_Front_Handler },

171 #i‡!
CONFIG_JIG_RBK_FRONT


172 { 
TIMER_ID_DEBUG
, 
Evt_Debug_H™dÀr
, Evt_Debug_Handler, Evt_Debug_Handler, Evt_Debug_Handler },

173 { 
TIMER_ID_DRAIN_PUMP_24H
, 
Evt_DøöPump_H™dÀr
, 
NULL
, NULL, NULL },

175 { 
TIMER_ID_COMM_FRONT_RX_ERR
, 
Evt_Fr⁄tRxEº_H™dÀr
, 
NULL
, NULL, NULL },

177 { 
TIMER_ID_COMP
, 
Evt_Comp_H™dÀr
, Evt_Comp_Handler, Evt_Comp_Handler, Evt_Comp_Handler },

178 { 
TIMER_ID_COMM_COMP_RX_ERR
, 
Evt_CompRxEº_H™dÀr
, Evt_CompRxEº_H™dÀr, 
NULL
, NULL },

179 { 
TIMER_ID_CHECK_SYSTEM
, 
Evt_CheckSy°em_H™dÀr
, Evt_CheckSy°em_H™dÀr, 
NULL
, Evt_CheckSystem_Handler },

182 #i‡
CONFIG_TEST_8585


183 { 
TIMER_ID_TEST_8585
, 
Evt_Te°_8585_H™dÀr
, 
NULL
, NULL, NULL },

184 { 
TIMER_ID_TEST_8585_2
, 
Evt_Te°_8585_2_H™dÀr
, 
NULL
, NULL, NULL },

187 #i‡
CONFIG_TEST_8585_ICE


188 { 
TIMER_ID_TEST_8585_ICE
, 
Evt_Te°_8585_I˚_H™dÀr
, 
NULL
, NULL, NULL },

191 #i‡
CONFIG_JIG_GAS_SWITCH


192 { 
TIMER_ID_TEST_100MS
, 
Evt_Te°_GasSwôch_H™dÀr
, 
NULL
, NULL, NULL },

194 
	}
};

195 
	#SZ_LIST
 ( –
SysEvítLi°
 ) / –
SysEvít_T
 ) )

	)

197 
	$Pro˚ssEvítH™dÀr
( )

199 
U8
 
i
;

200 
A˘i⁄_T
 
fun
;

202  
i
 = 0; i < 
SZ_LIST
 ; i++ )

204 if–
	`IsExpúedTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 ) =
TIMER_EXPIRE
 )

207 
	`DißbÀTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 );

210 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

213 
fun
 = 
SysEvítLi°
[ 
i
 ].
pFun_EOL
;

215 if–
	`GëF˘Sètus
(Ë=
TRUE
 )

218 
fun
 = 
SysEvítLi°
[ 
i
 ].
pFun_FCT
;

220 if–
	`IsSèπDügnosis
(Ë=
TRUE
 )

223 
fun
 = 
SysEvítLi°
[ 
i
 ].
pFun_Düg
;

228 
fun
 = 
SysEvítLi°
[ 
i
 ].
pFun
;

232 if–
fun
 !
NULL
 )

234 
	`fun
();

238 
	}
}

240 
	$Evt_1ms_H™dÀr
( )

242 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

244 
	`HAL_Pro˚ssAdc
();

246 
	}
}

249 
	$Evt_10ms_H™dÀr
( )

251 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

254 
	`Pro˚ssSˇnKey
();

255 
	`Pro˚ssKeyEvítH™dÀr
();

258 
	`Pro˚ssSˇnLevî
();

259 
	`Pro˚ssLevîEvítH™dÀr
();

262 
	`C⁄åﬁW©îOut
();

263 
	`C⁄åﬁVÆve
();

265 
	`C⁄åﬁI˚Tøy
();

266 
	`C⁄åﬁRñayC⁄cuºít
();

268 
	`C⁄åﬁSwögB¨
();

270 
	`HAL_Pro˚ssI≈ut
();

273 
	`Te°AutoCou¡ögFlowMëî
();

274 
	}
}

277 
	$Evt_100ms_H™dÀr
()

279 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

281 
	`Pro˚ssTemp
();

283 
	`Pro˚ssCheckT™kO≥n
();

284 
	`Pro˚ssT™kLevñ
();

285 
	`Pro˚ssLók
();

287 
	`Pro˚ssFlowMëî
();

289 
	`C⁄åﬁCﬁdW©îLevñ
();

290 
	`C⁄åﬁDøöLevñ
();

292 
	`C⁄åﬁGasSwôch
();

293 
	`C⁄åﬁSmps
();

294 
	`C⁄åﬁI˚Do‹
();

295 
	`C⁄åﬁFlowVÆve
();

298 
	`Pro˚ssEº‹
();

299 
	`Pro˚ssDi•œy
();

301 
	`Pro˚ssI˚TøyTe°
();

304 
	`CheckI˚FuŒ
();

305 
	`Upd©eI˚MakîTimî
();

307 
	`Upd©eEﬁTimî
();

309 #i‡!
CONFIG_JIG_RBK_FRONT


310 
	`Pro˚ssFûãr
();

313 #i‡!
CONFIG_TEST_8585


314 
	`Pro˚ssUv
();

316 
	`C⁄åﬁDøöW©î
();

317 
	`C⁄åﬁEm±yCﬁdT™k
();

319 
	`Pro˚ssMëîög
();

321 
	`CheckHŸOutHóãrOnTime
();

324 
	`C⁄åﬁSm¨tCheck
();

325 
	`C⁄åﬁM⁄ô‹ög
();

327 
	`Upd©eSoundTimî
();

329 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_100MS
);

330 
	}
}

333 
	$Evt_1£c_H™dÀr
( )

335 
	`SèπTimî
–
TIMER_ID_1SEC
, 
	`TIMER_SEC
(1) );

338 
	`CheckCﬁdW©îTempSètus
();

339 
	`MakeCﬁdW©î
();

342 
	`MakeI˚
();

343 
	`MakeI˚FuŒ
();

346 
	`Pro˚ssMake
();

348 
	`C⁄åﬁRñayEx˛usive
();

349 
	`C⁄åﬁDøöPump
();

352 
	`Pro˚ssSavög
();

355 
	`Pro˚ssEïrom
();

357 
	`Upd©eF˘Timî
();

358 
	`Upd©eTe°KeyLimôTimî
();

361 
	`Upd©eTimeSh‹tTimî
();

362 
	`Pro˚ssTimeSh‹t
();

365 
	`C⁄åﬁF‹˚dClo£I˚Do‹
();

366 
	`Cou¡ögI˚Do‹O≥nögTime
();

370 
	`C⁄åﬁHó…h
();

373 
	`Pro˚ssGasSwôch
();

375 
	`Pro˚ssE√rgy
();

378 #i‡
CONFIG_RTC_TEST


379 if–
	`GëW©îOut
(Ë=
FALSE
 )

381 
	`Pro˚ssRtc
();

385 
	`Pro˚ssCh™gedSètus
();

387 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1SEC
);

388 
	}
}

390 
	$Evt_10£c_H™dÀr
( )

392 
	`SèπTimî
–
TIMER_ID_10SEC
, 
	`TIMER_SEC
(10) );

394 #i‡!
CONFIG_RTC_TEST


396 if–
	`GëW©îOut
(Ë=
FALSE
 )

398 
	`Pro˚ssRtc
();

401 
	}
}

403 
	$Evt_40£c_H™dÀr
( )

405 
	`SèπTimî
–
TIMER_ID_40SEC
, 
	`TIMER_SEC
(40) );

408 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
TRUE
 )

410 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 
DEFAULT_TEMP_READ_TIME
 );

412 
	}
}

414 
	$Evt_1mö_H™dÀr
( )

416 
	`SèπTimî
–
TIMER_ID_1MIN
, 
	`TIMER_SEC
(60) );

419 
	`Pro˚ssSîvi˚Check
();

422 
	`Cou¡FûãrUßge
();

425 
	`Cou¡ögUnu£dTime
();

428 
	`C⁄åﬁC⁄töueSm¨tCheck
();

430 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1MIN
);

431 
	}
}

433 
	$Evt_Debug_H™dÀr
( )

435 
	`SèπTimî
–
TIMER_ID_COMM_DEBUG_TX
, 0 );

436 
	`SèπTimî
–
TIMER_ID_DEBUG
, 150 );

438 
	}
}

441 
	#FRONT_REFRESH_TIME
 50

442 
	`Evt_Fr⁄t_H™dÀr
–)

	)

444 
SèπTimî
–
TIMER_ID_FRONT
, 
FRONT_REFRESH_TIME
 );

446 
SëCommHódî
–
COMM_ID_FRONT
, 
PKT_FRONT_REQ_LED_3
 );

447 
SèπTimî
–
TIMER_ID_COMM_FRONT_TX
, 0 );

451 
	$Evt_DøöPump_H™dÀr
( )

453 
	`SèπDøöPumpOnLevñ
();

454 
	}
}

457 
U8
 
	gthe_ªåy_˙t
 = 0;

460 
	$Evt_Fr⁄tRxEº_H™dÀr
( )

463 if–
	`IsO≥nI˚Do‹
(Ë=
TRUE
 )

465 
	`Clo£I˚Do‹
();

466 
	`Sound
–
SOUND_EFFLUENT_END
 );

468 
	}
}

470 
	$Evt_Comp_H™dÀr
( )

472 
	`SèπTimî
–
TIMER_ID_COMP
, 
	`TIMER_SEC
(2) );

474 
	`SëCommHódî
–
COMM_ID_COMP
, 
PKT_COMP_REQ
 );

475 
	`SèπTimî
–
TIMER_ID_COMM_COMP_TX
, 0 );

476 
	}
}

479 
	$Evt_CompRxEº_H™dÀr
( )

481 
	`SëCompBldcEº‹Comm
–
TRUE
 );

482 
	}
}

485 
	$Evt_CheckSy°em_H™dÀr
( )

489 if–
	`HAL_GëI≈utVÆue
–
IN_HEATER
 ) != 0 )

491 
	`SëSy°em
–
SYSTEM_CHP
 );

495 
	`SëSy°em
–
SYSTEM_CP
 );

498 
	`SëFŸaReboŸ
–
FALSE
 );

509 #i‡!
CONFIG_TEST_HOT_OUT


510 if–
	`GëLockAŒ
(Ë=
UNLOCK
 )

513 
	`SèπW©îOutFlushPowîOn
();

516 
	`SëFlushSëupInô
–
FLUSH_STATUS_DONE
 );

517 
	`SëFlushSètus
–
FLUSH_STATUS_DONE
 );

519 
	`SëCﬁdW©îInôFuŒ
–
TRUE
 );

520 
	`SèπW©îOutFlushPowîOn
();

522 
	}
}

528 
	$Evt_Düg_1ms_H™dÀr
( )

530 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

532 
	`HAL_Pro˚ssAdc
();

533 
	}
}

535 
	$Evt_Düg_10ms_H™dÀr
( )

537 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

539 
	`C⁄åﬁI˚Tøy
();

540 
	`C⁄åﬁVÆve
();

541 
	`C⁄åﬁRñayC⁄cuºít
();

542 
	`HAL_Pro˚ssI≈ut
();;

543 
	}
}

545 
	$Evt_Düg_100ms_H™dÀr
( )

547 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

549 
	`Pro˚ssTemp
();

550 
	`Pro˚ssT™kLevñ
();

551 
	`Pro˚ssFlowMëî
();

553 
	`Pro˚ssDi•œy
();

555 
	`Pro˚ssI˚TøyTe°
();

557 
	`C⁄åﬁSm¨tCheck
();

558 
	`C⁄åﬁDügnosis
();

559 
	`C⁄åﬁM⁄ô‹ög
();

562 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_100MS
);

563 
	}
}

565 
	$Evt_Düg_1£c_H™dÀr
( )

567 
	`SèπTimî
–
TIMER_ID_1SEC
, 
	`TIMER_SEC
(1) );

569 
	`C⁄åﬁCompBldc
();

570 
	`C⁄åﬁRñayEx˛usive
();

571 
	`C⁄åﬁRñayC⁄cuºít
();

573 
	`Pro˚ssCh™gedSètus
();

576 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1SEC
);

577 
	}
}

579 
	$Evt_Düg_40£c_H™dÀr
( )

581 
	`SèπTimî
–
TIMER_ID_40SEC
, 
	`TIMER_SEC
(40) );

584 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
TRUE
 )

586 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 
DEFAULT_TEMP_READ_TIME
 );

588 
	}
}

590 
	$Evt_Düg_1mö_H™dÀr
( )

592 
	`SèπTimî
–
TIMER_ID_1MIN
, 
	`TIMER_SEC
(60) );

595 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1MIN
);

596 
	}
}

599 
	$TimîI§CÆlback
()

601 
	`FûãrFlowMëîNoi£
();

602 
	}
}

604 
	$InôSy°em
()

607 
	`InôRñay
();

608 
	`InôVÆve
();

609 
	`InôI˚Tøy
();

610 
	`InôI˚TøyTe°
();

611 
	`InôDøöPump
();

612 
	`InôDøö
();

613 
	`InôKey
();

614 
	`HAL_InôComm
();

615 
	`HAL_InôAdc
();

616 
	`HAL_InôLed
();

617 
	`InôUv
();

618 
	`InôVoi˚
();

619 
	`InôSound
();

622 
	`HAL_InôSãpMŸ‹
();

623 
	`InôGasSwôch
();

624 
	`InôI˚Do‹
();

625 
	`InôSwögB¨
();

627 
	`InôLók
();

628 
	`InôSîvi˚Check
();

629 
	`InôDi•œy
();

633 
	`InôCﬁdW©î
();

634 
	`InôHŸW©î
();

635 
	`InôW©îOut
();

637 
	`InôFlowMëî
();

638 
	`InôFlowVÆve
();

641 
	`InôHŸOut
();

642 
	`InôHŸW©îFlow
();

643 
	`InôHŸW©îHóãr
();

644 
	`InôHóãrOut
();

647 
	`InôFr⁄t
();

648 
	`InôI˚
();

649 
	`InôI˚FuŒ
();

652 
	`InôEº‹Li°
();

654 
	`InôPro˚ssMake
();

656 
	`InôSavög
();

657 
	`InôEﬁ
();

658 
	`InôF˘
();

659 
	`InôTimeSh‹t
();

662 
	`InôHó…h
();

663 
	`InôDøöW©î
();

664 
	`InôHó…hDøö
();

665 
	`InôUv
();

666 
	`InôEm±yCﬁdT™k
();

668 
	`InôU£r
();

669 
	`InôE√rgy
();

670 
	`InôFûãr
();

671 
	`InôMëîög
();

672 
	`InôCodyKô
();

674 
	`InôSm¨tCheck
();

677 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_INI
);

680 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 
DEFAULT_INIT_TEMP_READ_TIME
 );

681 
	`Tu∫OnTempSís‹
–
TEMP_ID_ROOM_WATER
, 
DEFAULT_INIT_TEMP_READ_TIME
 );

684 
	`Regi°îTimîISR
–
TimîI§CÆlback
 );

685 
	}
}

687 
	$Evt_FCT_1ms_H™dÀr
( )

689 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

692 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 
DEFAULT_INIT_TEMP_READ_TIME
 );

693 
	`Tu∫OnTempSís‹
–
TEMP_ID_ROOM_WATER
, 
DEFAULT_INIT_TEMP_READ_TIME
 );

695 
	`HAL_Pro˚ssAdc
();

696 
	}
}

698 
	$Evt_EOL_1ms_H™dÀr
()

700 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

702 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 
DEFAULT_INIT_TEMP_READ_TIME
 );

703 
	`Tu∫OnTempSís‹
–
TEMP_ID_ROOM_WATER
, 
DEFAULT_INIT_TEMP_READ_TIME
 );

705 
	`HAL_Pro˚ssAdc
();

706 
	}
}

708 
	$Evt_EOL_10ms_H™dÀr
()

710 
U8
 
mu8EﬁMode
;

712 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

714 
	`HAL_Pro˚ssI≈ut
();

717 
	`Pro˚ssSˇnKey
();

718 
	`Pro˚ssKeyEvítH™dÀr
();

721 
	`Pro˚ssSˇnLevî
();

722 
	`Pro˚ssLevîEvítH™dÀr
();

725 
mu8EﬁMode
 = 
	`GëEﬁMode
();

726 if–
mu8EﬁMode
 =
EOL_MODE_READY


727 || 
mu8EﬁMode
 =
EOL_MODE_DONE
 )

730 
	`C⁄åﬁW©îOut
();

734 if–
mu8EﬁMode
 =
EOL_MODE_READY


735 || 
mu8EﬁMode
 =
EOL_MODE_INIT


736 || 
mu8EﬁMode
 =
EOL_MODE_CHECK_SENSOR


737 || 
mu8EﬁMode
 =
EOL_MODE_DONE


738 || 
mu8EﬁMode
 =
EOL_MODE_SEALED_INIT


739 || 
mu8EﬁMode
 =
EOL_MODE_SEALED


743 
	`C⁄åﬁI˚Tøy
();

746 
	`C⁄åﬁVÆve
();

747 
	`C⁄åﬁRñayC⁄cuºít
();

748 
	`CheckI˚FuŒ
();

749 
	}
}

751 
	$Evt_EOL_100ms_H™dÀr
()

753 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

755 
	`Pro˚ssCheckT™kO≥n
();

756 
	`Pro˚ssT™kLevñ
();

758 
	`C⁄åﬁI˚Do‹
();

759 
	`C⁄åﬁFlowVÆve
();

760 
	`Pro˚ssDi•œy
();

763 
	`Upd©eEﬁTimî
();

764 #i‡
CONFIG_EOL


765 
	`Pro˚ssEﬁ
();

768 #i‡!
CONFIG_JIG_RBK_FRONT


769 
	`CheckFûãrSètus
();

773 
	`Pro˚ssFlowMëî
();

774 
	`C⁄åﬁGasSwôch
();

775 
	`C⁄åﬁSmps
();

776 
	`Pro˚ssMëîög
();

778 
	`Upd©eSoundTimî
();

779 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_100MS
);

780 
	}
}

783 
	$Evt_EOL_1£c_H™dÀr
( )

785 
	`SèπTimî
–
TIMER_ID_1SEC
, 
	`TIMER_SEC
(1) );

787 
	`C⁄åﬁCompBldc
();

788 
	`C⁄åﬁRñayEx˛usive
();

789 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1SEC
);

790 
	}
}

792 
	$Evt_EOL_1mö_H™dÀr
( )

794 
	`SèπTimî
–
TIMER_ID_1MIN
, 
	`TIMER_SEC
(60) );

796 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1MIN
);

797 
	}
}

800 
	$Evt_FCT_10ms_H™dÀr
( )

802 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

805 
	`Pro˚ssSˇnKey
();

806 
	`Pro˚ssKeyEvítH™dÀr
();

809 
	`Pro˚ssSˇnLevî
();

810 
	`Pro˚ssLevîEvítH™dÀr
();

812 
	`HAL_Pro˚ssI≈ut
();

813 
	`Pro˚ssF˘LﬂdTe°
();

815 
	`CheckI˚FuŒ
();

816 
	`C⁄åﬁVÆve
();

817 
	}
}

820 
	$Evt_FCT_100ms_H™dÀr
()

822 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

824 
	`Upd©eSoundTimî
();

825 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_100MS
);

827 
	}
}

829 
	$Evt_FCT_1£c_H™dÀr
( )

831 
	`SèπTimî
–
TIMER_ID_1SEC
, 
	`TIMER_SEC
(1) );

833 
	`Upd©eF˘Timî
();

834 
	`C⁄åﬁRñayEx˛usive
();

835 
	`C⁄åﬁRñayC⁄cuºít
();

837 
	`Pro˚ssF˘
();

839 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1SEC
);

840 
	}
}

842 
	$Evt_FCT_1mö_H™dÀr
( )

844 
	`SèπTimî
–
TIMER_ID_1MIN
, 
	`TIMER_SEC
(60) );

846 
	`WifiC⁄åﬁPro˚ss
(
WIFI_TIME_1MIN
);

847 
	}
}

850 #i‡(
CONFIG_TEST_8585_FILTER
==0)

852 
	#TEST_WATER_OUT_TIME
 2100UL

853 
	#TEST_WATER_OUT_TIME_2
 1UL

854 
U8
 
the_8585_°ï
 = 0;

	)

855 
	$Evt_Te°_8585_H™dÀr
( )

857 if–
	`GëHŸW©îInôFuŒ
(Ë=
FALSE


858 || 
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

860 
the_8585_°ï
 = 0;

861 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 1 ) );

865  
the_8585_°ï
 )

869 if–
	`GëW©îOut
(Ë=
TRUE
 )

871 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 10 ) );

874 
	`SëW©îOutSñe˘
–
SEL_WATER_COLD
 );

875 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_HALF
 );

877 
	`SèπW©îOut
();

878 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 3600U ) );

879 
the_8585_°ï
++;

883 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 3600U ) );

884 
the_8585_°ï
++;

888 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 0 ) );

889 
the_8585_°ï
 = 0;

893 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 0 );

894 
the_8585_°ï
 = 0;

897 
	}
}

900 
U8
 
	gthe_8585_°ï_2
 = 0;

901 
	$Evt_Te°_8585_2_H™dÀr
( )

903 if–
	`GëHŸW©îInôFuŒ
(Ë=
FALSE


904 || 
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

906 
the_8585_°ï_2
 = 0;

907 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
( 1 ) );

911  
the_8585_°ï_2
 )

914 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
( 2100U ) );

915 
the_8585_°ï_2
++;

920 if–
	`GëW©îOut
(Ë=
TRUE
 )

922 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
( 10 ) );

925 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

926 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_HALF
 );

928 
	`SèπW©îOut
();

929 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
–
TEST_WATER_OUT_TIME_2
 ) );

930 
the_8585_°ï_2
++;

935 if–
	`GëW©îOut
(Ë=
TRUE
 )

937 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
( 10 ) );

940 
	`SëW©îOutSñe˘
–
SEL_WATER_HOT
 );

941 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_HALF
 );

942 
	`SëHŸSñe˘
–
SEL_HOT_USER
 );

944 
	`SèπW©îOut
();

945 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 
	`TIMER_SEC
–
TEST_WATER_OUT_TIME_2
 ) );

946 
the_8585_°ï_2
 = 0;

950 
	`SèπTimî
–
TIMER_ID_TEST_8585_2
, 0 );

951 
the_8585_°ï_2
 = 0;

954 
	}
}

957 #i‡
CONFIG_TEST_8585


958 
U8
 
	gthe_8585_°ï
 = 0;

959 
	#DBG_THE_24H
 86400U

	)

960 
U32
 
	gthe_8585_time
 = 
DBG_THE_24H
;

961 
	$Evt_Te°_8585_H™dÀr
( )

964 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

966 
the_8585_°ï
 = 0;

967 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 1 ) );

971  
the_8585_°ï
 )

975 if–
	`GëW©îOut
(Ë=
TRUE
 )

977 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 3 ) );

982 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

983 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

984 
	`SèπW©îOut
();

986 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 1 ) );

987 
the_8585_time
 = 
DBG_THE_24H
;

988 
the_8585_°ï
++;

992 if–
the_8585_time
 != 0 )

994 
the_8585_time
--;

997 if–
	`GëW©îOut
(Ë=
FALSE
 )

999 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

1000 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

1001 
	`SèπW©îOut
();

1006 
	`St›W©îOut
();

1007 
the_8585_°ï
++;

1010 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 3 ) );

1015 
	`SëW©îOutSñe˘
–
SEL_WATER_COLD
 );

1016 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

1017 
	`SèπW©îOut
();

1019 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 1 ) );

1020 
the_8585_time
 = 
DBG_THE_24H
;

1021 
the_8585_°ï
++;

1025 if–
the_8585_time
 != 0 )

1027 
the_8585_time
--;

1030 if–
	`GëW©îOut
(Ë=
FALSE
 )

1032 
	`SëW©îOutSñe˘
–
SEL_WATER_COLD
 );

1033 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

1034 
	`SèπW©îOut
();

1039 
	`St›W©îOut
();

1040 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

1042 
the_8585_°ï
++;

1046 
the_8585_°ï
 = 6;

1050 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 3 ) );

1055 
	`SëW©îOutSñe˘
–
SEL_WATER_HOT
 );

1056 
	`SëHŸSñe˘
–
SEL_HOT_MILK
 );

1057 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

1058 
	`SèπW©îOut
();

1060 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 1 ) );

1061 
the_8585_time
 = 
DBG_THE_24H
;

1062 
the_8585_°ï
++;

1066 if–
the_8585_time
 != 0 )

1068 
the_8585_time
--;

1071 if–
	`GëW©îOut
(Ë=
FALSE
 )

1073 
	`SëW©îOutSñe˘
–
SEL_WATER_HOT
 );

1074 
	`SëHŸSñe˘
–
SEL_HOT_MILK
 );

1075 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

1076 
	`SèπW©îOut
();

1081 
	`St›W©îOut
();

1082 
the_8585_°ï
++;

1085 
	`SèπTimî
–
TIMER_ID_TEST_8585
, 
	`TIMER_SEC
( 3 ) );

1089 
	`SëSavögC⁄fig
–
FALSE
 );

1090 
	`DißbÀTimî
–
TIMER_ID_TEST_8585
 );

1091 
	`DißbÀTimî
–
TIMER_ID_TEST_8585_2
 );

1092 
the_8585_°ï
 = 0;

1097 
the_8585_°ï
 = 0;

1100 
	}
}

1102 
	$Evt_Te°_8585_2_H™dÀr
( )

1105 
	}
}

1111 #i‡
CONFIG_TEST_8585_ICE


1112 
U8
 
	gthe_8585_°ï_i˚
 = 0;

1113 
	$Evt_Te°_8585_I˚_H™dÀr
( )

1115  
the_8585_°ï_i˚
 )

1119 if–
	`GëI˚FuŒSètus
(Ë=
TRUE
 )

1121 
	`SèπTimî
–
TIMER_ID_TEST_8585_ICE
, 
	`TIMER_SEC
(1800UL) );

1122 
the_8585_°ï_i˚
++;

1126 
	`SèπTimî
–
TIMER_ID_TEST_8585_ICE
, 
	`TIMER_SEC
(1) );

1131 
	`O≥nI˚Do‹
();

1132 
	`SèπTimî
–
TIMER_ID_TEST_8585_ICE
, 
	`TIMER_SEC
(30) );

1133 
the_8585_°ï_i˚
++;

1137 
	`Clo£I˚Do‹
();

1138 
	`SèπTimî
–
TIMER_ID_TEST_8585_ICE
, 
	`TIMER_SEC
(60) );

1139 
the_8585_°ï_i˚
 = 0;

1143 
	`SèπTimî
–
TIMER_ID_TEST_8585_ICE
, 
	`TIMER_SEC
(0) );

1144 
the_8585_°ï_i˚
 = 0;

1147 
	}
}

1151 #i‡
CONFIG_JIG_GAS_SWITCH


1152 
U8
 
	gã°_°ï
 = 0;

1153 
U16
 
	gã°_cou¡
 = 0;

1154 
U16
 
	gã°_mu16Dñay
 = 0;

1155 
	~"Án_mŸ‹.h
"

1156 
	$Evt_Te°_GasSwôch_H™dÀr
( )

1159 
	`SëI˚C⁄figMake
–
FALSE
 );

1160 
	`SëCﬁdW©îC⁄figMake
–
FALSE
 );

1162 
	`SèπTimî
–
TIMER_ID_TEST_100MS
, 100 );

1164 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
FALSE
 )

1166 
ã°_°ï
 = 0;

1167 
ã°_cou¡
 = 72;

1171 if–
	`IsEº‹
–
ERR_COMP
 ) =
TRUE


1172 || 
	`IsEº‹
–
ERR_COMP_COMM
 ) =
TRUE
 )

1174 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

1175 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1176 
	`SèπTimî
–
TIMER_ID_TEST_100MS
, 
	`TIMER_SEC
(10) );

1181  
ã°_°ï
 )

1184 
ã°_cou¡
--;

1185 if–
ã°_cou¡
 == 0 )

1187 
	`Tu∫OffComp
–
COMP_TYPE_ICE
 );

1188 
	`Tu∫OffF™
–
FAN_TYPE_ICE
 );

1189 
	`SèπTimî
–
TIMER_ID_TEST_100MS
, 
	`TIMER_SEC
(10) );

1193 
	`GasSwôchI˚
();

1194 
	`Tu∫OnCompRps
(
COMP_TYPE_ICE
, 60 );

1195 
	`Tu∫OnF™
();

1196 
ã°_mu16Dñay
 = 300;

1197 
ã°_°ï
++;

1201 
	`Tu∫OnCompRps
(
COMP_TYPE_ICE
, 60 );

1202 
	`Tu∫OnF™
();

1203 
	`GasSwôchI˚
();

1205 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_ICE
 )

1207 if–
ã°_mu16Dñay
 != 0 )

1209 
ã°_mu16Dñay
--;

1213 
	`GasSwôchHŸGas
();

1214 
	`Tu∫OnF™
();

1215 
ã°_mu16Dñay
 = 50;

1217 
ã°_°ï
++;

1223 
	`GasSwôchHŸGas
();

1224 
	`Tu∫OnF™
();

1225 
	`Tu∫OnCompRps
(
COMP_TYPE_ICE
, 60 );

1226 if–
	`GëGasSwôchSètus
(Ë=
GAS_SWITCH_HOTGAS
 )

1228 if–
ã°_mu16Dñay
 != 0 )

1230 
ã°_mu16Dñay
--;

1234 
ã°_°ï
 = 0;

1240 
ã°_°ï
 = 0;

1243 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\process_sys_event.h

1 #i‚de‡
__PROCESS_SYS_EVENT_H__


2 
	#__PROCESS_SYS_EVENT_H__


	)

4 
InôSy°em
();

6 
Pro˚ssEvítH™dÀr
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\level.c

1 
	~"Àvñ.h
"

3 
	#DETECT_TIME
 10

	)

6 
	$U8
(*
	tA˘i⁄_T
)();

7 
	s_Àvñ_li°_


9 
U8
 
PªLevñ
;

10 
U8
 
CurLevñ
;

11 
U8
 
SëDëe˘Time
;

12 
U8
 
Dëe˘Time
;

13 
U8
 
EºCou¡
[ 
ERR_TYPE_NUM
 ];

14 
A˘i⁄_T
 
GëLevñ
;

15 } 
	tLevñLi°_T
;

17 
LevñLi°_T
 
LevñLi°
[ 
MAX_LEVEL_ID
 ] =

22 { 0, 0, 
DETECT_TIME
, DETECT_TIME, { 0, 0, 0, 0 }, 
HAL_GëLevñDøöT™k
 },

24 
	}
};

28 
	$InôT™kC⁄fDëe˘Time
()

33 
	`SëT™kC⁄fDëe˘Time
–
LEVEL_ID_DRAIN
, 
DETECT_TIME
 );

35 
	}
}

38 
	$SëT™kC⁄fDëe˘Time
(
U8
 
mu8Id
, U8 
mu16Dëe˘Time
)

40 
LevñLi°
[ 
mu8Id
 ].
SëDëe˘Time
 = 
mu16Dëe˘Time
;

41 
	}
}

44 
U8
 
	$GëT™kLevñ
(
U8
 
mu8Id
)

46  
LevñLi°
[ 
mu8Id
 ].
CurLevñ
;

47 
	}
}

50 
U8
 
	$IsDëe˘T™kLevñ
(
U8
 
mu8Id
, U8 
mu8Levñ
)

52 if–(
LevñLi°
[ 
mu8Id
 ].
CurLevñ
 & 
mu8Levñ
) == mu8Level )

54  
TRUE
;

57  
FALSE
;

58 
	}
}

60 
U8
 
	$IsT™kLevñFuŒ
(
U8
 
mu8Id
)

62 
U8
 
mu8Rë
 = 
FALSE
;

63 
U8
 
mu8Levñ
;

66 
mu8Levñ
 = 
	`GëT™kLevñ
–
mu8Id
 );

67  
mu8Levñ
 )

70 
LEVEL_HIGH
:

71 
LEVEL_ERR_LOW
:

72 
LEVEL_ERR_HIGH
:

73 
LEVEL_ERR_COMPLEX
:

74 
LEVEL_ERR_OVF_LOW
:

75 
LEVEL_OVF
:

76 
mu8Rë
 = 
TRUE
;

79 
LEVEL_LOW
:

80 
LEVEL_MID
:

82 
mu8Rë
 = 
FALSE
;

86  
mu8Rë
;

87 
	}
}

90 
U8
 
	$IsEº‹T™kLevñ
(
U8
 
mu8Levñ
)

92 if–
mu8Levñ
 =
LEVEL_OVF


93 || 
mu8Levñ
 =
LEVEL_ERR_OVF_LOW


94 || 
mu8Levñ
 =
LEVEL_ERR_HIGH


95 || 
mu8Levñ
 =
LEVEL_ERR_COMPLEX


96 || 
mu8Levñ
 =
LEVEL_ERR_LOW
 )

98  
TRUE
;

101  
FALSE
;

102 
	}
}

105 
U8
 
	$GëT™kLevñEº‹Cou¡
(
U8
 
mu8Id
, U8 
mu8EºTy≥
)

107  
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
mu8EºTy≥
 ];

108 
	}
}

110 
	$SëT™kLevñEº‹Cou¡
(
U8
 
mu8Id
, U8 
mu8EºTy≥
, U8 
mu8Cou¡
)

112 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
mu8EºTy≥
 ] = 
mu8Cou¡
;

113 
	}
}

115 
	$CÀ¨T™kLevñEº‹Cou¡
()

118 
U8
 
mu8Cou¡
;

120 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_OVF
 );

121 if–
mu8Cou¡
 < 3 )

123 
	`SëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_OVF
, 0 );

126 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_COMPLEX
 );

127 if–
mu8Cou¡
 < 3 )

129 
	`SëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_COMPLEX
, 0 );

132 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_HIGH
 );

133 if–
mu8Cou¡
 < 3 )

135 
	`SëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_HIGH
, 0 );

138 
	}
}

140 
	$Cou¡Eº‹Ty≥
(
U8
 
mu8Id
, U8 
mu8Levñ
 )

142  
mu8Levñ
 )

144 
LEVEL_ERR_LOW
:

145 
LEVEL_ERR_OVF_LOW
:

146 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
ERR_TYPE_LOW
 ]++;

149 
LEVEL_ERR_COMPLEX
:

150 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
ERR_TYPE_COMPLEX
 ]++;

153 
LEVEL_ERR_HIGH
:

154 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
ERR_TYPE_HIGH
 ]++;

157 
LEVEL_OVF
:

158 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
ERR_TYPE_OVF
 ]++;

161 
LEVEL_HIGH
:

162 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
ERR_TYPE_HIGH
 ] = 0;

163 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
ERR_TYPE_COMPLEX
 ] = 0;

171 if–
mu8Levñ
 !
LEVEL_ERR_LOW


172 && 
mu8Levñ
 !
LEVEL_ERR_OVF_LOW
 )

174 
LevñLi°
[ 
mu8Id
 ].
EºCou¡
[ 
ERR_TYPE_LOW
 ] = 0;

176 
	}
}

179 
	$Pro˚ssT™kLevñ
()

181 
U8
 
i
;

182 
U8
 
mu8Levñ
;

185  
i
 = 0; i < 
MAX_LEVEL_ID
 ; i++ )

188 
mu8Levñ
 = 
LevñLi°
[ 
i
 ].
	`GëLevñ
();

189 if–
LevñLi°
[ 
i
 ].
PªLevñ
 !
mu8Levñ
 )

192 
LevñLi°
[ 
i
 ].
PªLevñ
 = 
mu8Levñ
;

193 
LevñLi°
[ 
i
 ].
Dëe˘Time
 = LevñLi°[i].
SëDëe˘Time
;

198 if–
LevñLi°
[ 
i
 ].
Dëe˘Time
 != 0 )

200 
LevñLi°
[ 
i
 ].
Dëe˘Time
--;

204 if–
LevñLi°
[ 
i
 ].
CurLevñ
 !
mu8Levñ
 )

207 
	`Cou¡Eº‹Ty≥
–
i
, 
mu8Levñ
 );

211 
LevñLi°
[ 
i
 ].
CurLevñ
 = 
mu8Levñ
;

213 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\level.h

1 #i‚de‡
__LEVEL_H__


2 
	#__LEVEL_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_Àvñ.h
"

9 
	#LEVEL_LOW
 
HAL_LEVEL_LOW


	)

10 
	#LEVEL_MID
 
HAL_LEVEL_MID


	)

11 
	#LEVEL_ERR_LOW
 
HAL_LEVEL_ERR_LOW


	)

12 
	#LEVEL_HIGH
 
HAL_LEVEL_HIGH


	)

13 
	#LEVEL_ERR_COMPLEX
 
HAL_LEVEL_ERR_COMPLEX


	)

14 
	#LEVEL_ERR_HIGH
 
HAL_LEVEL_ERR_HIGH


	)

15 
	#LEVEL_ERR_OVF_LOW
 
HAL_LEVEL_ERR_OVF_LOW


	)

16 
	#LEVEL_OVF
 
HAL_LEVEL_OVF


	)

19 
	#ERR_TYPE_LOW
 0

	)

20 
	#ERR_TYPE_COMPLEX
 1

	)

21 
	#ERR_TYPE_HIGH
 2

	)

22 
	#ERR_TYPE_OVF
 3

	)

23 
	#ERR_TYPE_NUM
 4

	)

26 
InôT™kC⁄fDëe˘Time
();

29 
SëT™kC⁄fDëe˘Time
(
U8
 
mu8Id
, U8 
mu16Dëe˘Time
);

31 
U8
 
GëT™kLevñEº‹Cou¡
(U8 
mu8Id
, U8 
mu8EºTy≥
);

32 
SëT™kLevñEº‹Cou¡
(
U8
 
mu8Id
, U8 
mu8EºTy≥
, U8 
mu8Cou¡
);

33 
CÀ¨T™kLevñEº‹Cou¡
();

37 
	#LEVEL_ID_ROOM
 0

	)

38 
	#LEVEL_ID_COLD
 1

	)

39 
	#LEVEL_ID_HOT
 2

	)

40 
	#LEVEL_ID_DRAIN
 3

	)

41 
	#LEVEL_ID_ICE_TRAY
 4

	)

42 
	#MAX_LEVEL_ID
 5

	)

44 
	#LEVEL_ID_DRAIN
 0

	)

45 
	#MAX_LEVEL_ID
 1

	)

47 
U8
 
GëT™kLevñ
(U8 
mu8Id
);

53 
U8
 
IsDëe˘T™kLevñ
(U8 
mu8Id
, U8 
mu8Levñ
);

59 
U8
 
IsT™kLevñFuŒ
(U8 
mu8Id
);

65 
U8
 
IsEº‹T™kLevñ
(U8 
mu8Levñ
);

68 
Pro˚ssT™kLevñ
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp.c

1 
	~"hÆ_adc.h
"

2 
	~"ãmp.h
"

3 
	~"ãmp_èbÀ_ambõ¡.h
"

4 
	~"ãmp_èbÀ_i˚_åay_ö.h
"

5 
	~"ãmp_èbÀ_cﬁd.h
"

6 
	~"ãmp_èbÀ_cﬁd_œâr⁄.h
"

7 
	~"ãmp_èbÀ_hŸ_ö_out.h
"

8 
	~"ãmp_èbÀ_eva.h
"

11 
	$TEMP_T
(*
	tA˘i⁄_T
)(
	tU16
 
	tmu16Adc
);

12 
	s_ãmp_li°_


14 
U8
 
Id
;

15 
A˘i⁄_T
 
C⁄vAdc2Temp
;

17 
U8
 
OvîrideFœg
;

18 
TEMP_T
 
OvîrideTemp
;

20 
U32
 
TimeOut
;

21 } 
	tTempLi°_T
;

23 
TempLi°_T
 
TempLi°
[] =

25 { 
ANI_TEMP_AMBIENT
, 
C⁄vAdc2Temp_Ambõ¡
, 
FALSE
, 24.0f, 0 },

26 { 
ANI_TEMP_ROOM_WATER
, 
C⁄vAdc2Temp_I˚TøyIn
, 
FALSE
, 24.0f, 0 },

27 { 
ANI_TEMP_COLD_WATER
, 
C⁄vAdc2Temp_CﬁdW©î
, 
FALSE
, 24.0f, 0 },

29 { 
ANI_TEMP_EVA_1
, 
C⁄vAdc2Temp_L©å⁄_CﬁdW©î
, 
FALSE
, 24.0f, 0 },

30 { 
ANI_TEMP_HOT_OUT
, 
C⁄vAdc2Temp_HŸOut
, 
FALSE
, 24.0f, 0 },

31 { 
ANI_TEMP_HOT_IN
, 
C⁄vAdc2Temp_HŸIn
, 
FALSE
, 24.0f, 0 },

32 { 
ANI_TEMP_HEATER
, 
C⁄vAdc2Temp_HŸOut
, 
FALSE
, 24.0f, 0 }

33 
	}
};

34 
	#SZ_LIST
 ( –
TempLi°
 ) / –
TempLi°_T
 ))

	)

36 
U8
 
	$C⁄vAdc2Temp
–
U8
 
mu8Id
, 
U16
 
mu16AdcRaw
, 
TEMP_T
 *
pTemp
 )

38 if–
pTemp
 =
NULL
 )

40  
FALSE
;

43 if–
TempLi°
[ 
mu8Id
 ].
C⁄vAdc2Temp
 !
NULL
 )

45 *
pTemp
 = 
TempLi°
[ 
mu8Id
 ].
	`C⁄vAdc2Temp
–
mu16AdcRaw
 );

47  
TRUE
;

50  
FALSE
;

51 
	}
}

53 
TEMP_T
 
	$GëTemp
(
U8
 
mu8Id
 )

55 
U16
 
mu16Adc
 = 0U;

56 
TEMP_T
 
mTemp
 = 0.0f;

60 if–
mu8Id
 >
TEMP_ID_MAX
 )

66 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
TempLi°
[ 
mu8Id
 ].
Id
 );

69 
	`C⁄vAdc2Temp
–
mu8Id
, 
mu16Adc
, &
mTemp
 );

71 #i‡
CONFIG_TEST_COLD_TEMP_UP


72 if–
mu8Id
 =
TEMP_ID_COLD_WATER
 )

74 
mTemp
 += 0.5f;

76 #ñi‡
CONFIG_TEST_COLD_TEMP_DOWN


77 if–
mu8Id
 =
TEMP_ID_COLD_WATER
 )

79 
mTemp
 -= 0.5f;

83 #i‡
CONFIG_TEST_AMBI_TEMP_UP


84 if–
mu8Id
 =
TEMP_ID_AMBIENT
 )

86 
mTemp
 += 0.4f;

88 #ñi‡
CONFIG_TEST_AMBI_TEMP_DOWN


89 if–
mu8Id
 =
TEMP_ID_AMBIENT
 )

91 
mTemp
 -= 0.4f;

96 if–
TempLi°
[ 
mu8Id
 ].
OvîrideFœg
 =
TRUE
 )

98  
TempLi°
[ 
mu8Id
 ].
OvîrideTemp
;

101  
mTemp
;

102 
	}
}

104 
U16
 
	$GëTempSís‹Time
(
U8
 
mu8Id
)

106  (
U16
)–
TempLi°
[ 
mu8Id
 ].
TimeOut
 / 10UL );

107 
	}
}

110 
	$Tu∫OnTempSís‹
(
U8
 
mu8Id
, 
U16
 
mu16TimeOut
)

112 
U32
 
mu32Time
;

115 
mu32Time
 = (
U32
)
mu16TimeOut
 * 10UL;

116 if–
mu32Time
 > 
TempLi°
[ 
mu8Id
 ].
TimeOut
 )

118 
	`HAL_Tu∫OnSísögAdc
–
TempLi°
[ 
mu8Id
 ].
Id
 );

119 
TempLi°
[ 
mu8Id
 ].
TimeOut
 = 
mu32Time
;

121 
	}
}

123 
	$Tu∫OffTempSís‹
(
U8
 
mu8Id
)

125 
	`HAL_Tu∫OffSísögAdc
–
TempLi°
[ 
mu8Id
 ].
Id
 );

126 
TempLi°
[ 
mu8Id
 ].
TimeOut
 = 0;

127 
	}
}

131 
	$SëOvîrideTemp
(
U8
 
mu8Id
, U8 
mOvîride
, 
TEMP_T
 
mTemp
 )

133 
TempLi°
[ 
mu8Id
 ].
OvîrideFœg
 = 
mOvîride
;

134 
TempLi°
[ 
mu8Id
 ].
OvîrideTemp
 = 
mTemp
;

136 
	}
}

138 
TEMP_T
 
	$GëOvîrideTemp
(
U8
 
mu8Id
, U8 
mOvîride
 )

140  
TempLi°
[ 
mu8Id
 ].
OvîrideTemp
 = 
mOvîride
;

141 
	}
}

143 
TEMP_T
 
	ggTempRoom
 = 24.0f;

144 
TEMP_T
 
	ggTempCﬁd
 = 24.0f;

145 
TEMP_T
 
	ggTempAmbi
 = 24.0f;

146 
TEMP_T
 
	ggTempEva1
 = 24.0f;

147 
TEMP_T
 
	ggTempHŸIn
 = 24.0f;

148 
TEMP_T
 
	ggTempHŸOut
 = 24.0f;

149 
TEMP_T
 
	ggTempHóãr
 = 24.0f;

151 
U16
 
	ggAdcLók
 = 0;

152 
U16
 
	ggAdcI˚FuŒ
 = 0;

153 
U16
 
	ggAdcUv_1
 = 0;

154 
U16
 
	ggAdcUv_2
 = 0;

155 
U16
 
	ggAdcHóãr
 = 0;

156 
U16
 
	ggAdcDøö
 = 0;

157 
U16
 
	ggAdcF™
 = 0;

159 
U16
 
	ggAdc24_h
 = 0;

160 
U16
 
	ggAdc12_h
 = 0;

162 
U16
 
	ggAdcTempCﬁd
 = 0;

163 
U16
 
	ggAdcTempRoom
 = 0;

164 
U16
 
	ggAdcTempAmbi
 = 0;

165 
U16
 
	ggAdcTempEva1
 = 0;

168 
	$Pro˚ssTemp
()

170 
U8
 
i
;

172  
i
 = 0; i < 
SZ_LIST
; i++ )

174 if–
TempLi°
[ 
i
 ].
TimeOut
 != 0UL )

176 
TempLi°
[ 
i
 ].
TimeOut
--;

177 if–
TempLi°
[ 
i
 ].
TimeOut
 == 0UL )

179 
	`Tu∫OffTempSís‹
–
i
 );

185 
gTempRoom
 = 
	`GëTemp
–
TEMP_ID_ROOM_WATER
 );

186 
gTempCﬁd
 = 
	`GëTemp
–
TEMP_ID_COLD_WATER
 );

187 
gTempAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

188 
gTempEva1
 = 
	`GëTemp
–
TEMP_ID_EVA_1
 );

189 
gTempHŸOut
 = 
	`GëTemp
–
TEMP_ID_HOT_OUT
 );

190 
gTempHŸIn
 = 
	`GëTemp
–
TEMP_ID_HOT_IN
 );

191 
gTempHóãr
 = 
	`GëTemp
–
TEMP_ID_HEATER
 );

193 
gAdcTempCﬁd
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_COLD_WATER
 );

194 
gAdcTempRoom
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_ROOM_WATER
 );

195 
gAdcTempAmbi
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_AMBIENT
 );

196 
gAdcTempEva1
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_EVA_1
 );

198 
gAdcF™
 = 
	`HAL_GëAdcVÆue
–
ANI_DC_FAN
 );

199 
gAdcLók
 = 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_LEAK
 );

200 
gAdcI˚FuŒ
 = 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_INFRARED
 );

201 
gAdcUv_1
 = 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TRAY
 );

202 
gAdcUv_2
 = 
	`HAL_GëAdcVÆue
–
ANI_UV_ICE_TANK
 );

203 
gAdcHóãr
 = 
	`HAL_GëAdcVÆue
–
ANI_HEATER_FB
 );

204 
gAdcDøö
 = 
	`HAL_GëAdcVÆue
–
ANI_PUMP_DRAIN_FB
 );

206 
gAdc24_h
 = 
	`HAL_GëAdcVÆue
–
ANI_24V_FB
 );

207 
gAdc12_h
 = 
	`HAL_GëAdcVÆue
–
ANI_12V_FB
 );

208 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp.h

1 #i‚de‡
__TEMP_H__


2 
	#__TEMP_H__


	)

4 
	~"¥j_ty≥.h
"

10 
	mTEMP_ID_AMBIENT
,

11 
	mTEMP_ID_ROOM_WATER
,

12 
	mTEMP_ID_COLD_WATER
,

13 
	mTEMP_ID_EVA_1
,

14 
	mTEMP_ID_HOT_OUT
,

15 
	mTEMP_ID_HOT_IN
,

16 
	mTEMP_ID_HEATER
,

17 
	mTEMP_ID_MAX


22 
	#DEFAULT_INIT_TEMP_READ_TIME
 600U

23 
	#DEFAULT_TEMP_READ_TIME
 10U

24 

	)

25 
TEMP_T
 
GëTemp
(
U8
 
id
);

29 
U16
 
GëTempSís‹Time
(
U8
 
mu8Id
);

33 
Tu∫OnTempSís‹
(
U8
 
mu8Id
, 
U16
 
mu16TimeOut
);

34 
Tu∫OffTempSís‹
(
U8
 
mu8Id
);

37 
SëOvîrideTemp
(
U8
 
mu8Id
, U8 
mOvîride
, 
TEMP_T
 
mTemp
 );

38 
TEMP_T
 
GëOvîrideTemp
(
U8
 
mu8Id
, U8 
mOvîride
 );

40 
Pro˚ssTemp
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ambient.c

1 
	~"ãmp_èbÀ_comm⁄.h
"

2 
	~"ãmp_èbÀ_ambõ¡.h
"

17 
	#MIN_ADC_AMBIENT_TEMP
 66

	)

18 
	#MAX_ADC_AMBIENT_TEMP
 1010

	)

20 c⁄° 
	gãmp_ambõ¡_èbÀ
[] =

119 
TEMP_T
 
	$C⁄vAdc2Temp_Ambõ¡
(
U16
 
mu16Adc
)

121 
U16
 
mu16Index
;

122 
vÆ
;

125 
mu16Index
 = 
	`GëTempTabÀIndex
(

126 
RES_ADC_TABLE_10BIT
,

127 
mu16Adc
,

128 
MIN_ADC_AMBIENT_TEMP
,

129 
MAX_ADC_AMBIENT_TEMP
 );

131 
vÆ
 = 
ãmp_ambõ¡_èbÀ
[ 
mu16Index
 ];

132  
	`C⁄vI¡2Temp
–
vÆ
 );

133 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ambient.h

1 #i‚de‡
__TEMP_TABLE_AMBIENT_H__


2 
	#__TEMP_TABLE_AMBIENT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
TEMP_T
 
C⁄vAdc2Temp_Ambõ¡
(
U16
 
mu16Adc
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold.c

1 
	~"ãmp_èbÀ_comm⁄.h
"

2 
	~"ãmp_èbÀ_cﬁd.h
"

16 
	#MIN_ADC_COLD_WATER
 50

	)

17 
	#MAX_ADC_COLD_WATER
 600

	)

19 c⁄° 
	gãmp_cﬁd_w©î_èbÀ
[] =

85 
	#MIN_ADC_COLD_WATER_2DP
 1780U

	)

86 
	#MAX_ADC_COLD_WATER_2DP
 2241U

	)

87 c⁄° 
	gãmp_cﬁd_w©î_èbÀ_2dp
[] =

138 
TEMP_T
 
	$C⁄vAdc2Temp_CﬁdW©î
(
U16
 
mu16Adc
)

140 
U16
 
mu16Index
;

141 
vÆ
;

142 
TEMP_T
 
ãmp
;

145 if–
mu16Adc
 > 
MAX_ADC_COLD_WATER_2DP


146 || 
mu16Adc
 < 
MIN_ADC_COLD_WATER_2DP
 )

149 
mu16Index
 = 
	`GëTempTabÀIndex
(

150 
RES_ADC_TABLE_10BIT
,

151 
mu16Adc
,

152 
MIN_ADC_COLD_WATER
,

153 
MAX_ADC_COLD_WATER
 );

154 
vÆ
 = 
ãmp_cﬁd_w©î_èbÀ
[ 
mu16Index
 ];

155 
ãmp
 = 
	`C⁄vI¡2Temp
–
vÆ
 );

160 
mu16Index
 = 
	`GëTempTabÀIndex
(

161 
RES_ADC_TABLE_12BIT
,

162 
mu16Adc
,

163 
MIN_ADC_COLD_WATER_2DP
,

164 
MAX_ADC_COLD_WATER_2DP
 );

165 
vÆ
 = 
ãmp_cﬁd_w©î_èbÀ_2dp
[ 
mu16Index
 ];

166 
ãmp
 = 
	`C⁄vI¡2Temp2dp
–
vÆ
 );

169  
ãmp
;

170 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold.h

1 #i‚de‡
__TEMP_TABLE_COLD_H__


2 
	#__TEMP_TABLE_COLD_H__


	)

4 
	~"¥j_ty≥.h
"

9 
TEMP_T
 
C⁄vAdc2Temp_CﬁdW©î
(
U16
 
mu16Adc
);

14 
TEMP_T
 
C⁄vAdc2Temp_CﬁdW©î_2dp
(
U16
 
mu16Adc
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold_lattron.c

1 
	~"ãmp_èbÀ_comm⁄.h
"

2 
	~"ãmp_èbÀ_cﬁd_œâr⁄.h
"

16 
	#MIN_ADC_COLD_WATER_LATTRON
 176

	)

17 
	#MAX_ADC_COLD_WATER_LATTRON
 636

	)

19 c⁄° 
	gãmp_cﬁd_w©î_œâr⁄_èbÀ
[] =

76 
	#MIN_ADC_COLD_WATER_LATTRON_2DP
 1786U

	)

77 
	#MAX_ADC_COLD_WATER_LATTRON_2DP
 2543U

	)

78 c⁄° 
	gãmp_cﬁd_w©î_œâr⁄_èbÀ_2dp
[] =

158 
TEMP_T
 
	$C⁄vAdc2Temp_L©å⁄_CﬁdW©î
(
U16
 
mu16Adc
)

160 
U16
 
mu16Index
;

161 
vÆ
;

162 
TEMP_T
 
ãmp
;

165 if–
mu16Adc
 > 
MAX_ADC_COLD_WATER_LATTRON_2DP


166 || 
mu16Adc
 < 
MIN_ADC_COLD_WATER_LATTRON_2DP
 )

169 
mu16Index
 = 
	`GëTempTabÀIndex
(

170 
RES_ADC_TABLE_10BIT
,

171 
mu16Adc
,

172 
MIN_ADC_COLD_WATER_LATTRON
,

173 
MAX_ADC_COLD_WATER_LATTRON
 );

174 
vÆ
 = 
ãmp_cﬁd_w©î_œâr⁄_èbÀ
[ 
mu16Index
 ];

175 
ãmp
 = 
	`C⁄vI¡2Temp
–
vÆ
 );

180 
mu16Index
 = 
	`GëTempTabÀIndex
(

181 
RES_ADC_TABLE_12BIT
,

182 
mu16Adc
,

183 
MIN_ADC_COLD_WATER_LATTRON_2DP
,

184 
MAX_ADC_COLD_WATER_LATTRON_2DP
 );

185 
vÆ
 = 
ãmp_cﬁd_w©î_œâr⁄_èbÀ_2dp
[ 
mu16Index
 ];

186 
ãmp
 = 
	`C⁄vI¡2Temp2dp
–
vÆ
 );

189  
ãmp
;

190 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold_lattron.h

1 #i‚de‡
__TEMP_TABLE_COLD_LATTRON_H__


2 
	#__TEMP_TABLE_COLD_LATTRON_H__


	)

4 
	~"¥j_ty≥.h
"

9 
TEMP_T
 
C⁄vAdc2Temp_L©å⁄_CﬁdW©î
(
U16
 
mu16Adc
);

14 
TEMP_T
 
C⁄vAdc2Temp_L©å⁄_CﬁdW©î_2dp
(
U16
 
mu16Adc
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_common.c

1 
	~"ãmp_èbÀ_comm⁄.h
"

5 
U16
 
	$GëTempTabÀIndex
(
U8
 
ªsﬁuti⁄
, 
U16
 
øwAdc
, U16 
mö
, U16 
max
 )

7 
U16
 
mu16Index
;

10 if–
ªsﬁuti⁄
 =
RES_ADC_TABLE_10BIT
 )

12 
øwAdc
 =ÑawAdc >> 2;

15 if–
øwAdc
 < 
mö
 )

17 
øwAdc
 = 
mö
;

19 if–
øwAdc
 > 
max
 )

21 
øwAdc
 = 
max
;

24 
mu16Index
 = 
øwAdc
 - 
mö
;

25  
mu16Index
;

26 
	}
}

32 
TEMP_T
 
	$C⁄vI¡2Temp
(
ãmp
)

34 
TEMP_T
 
ªtTemp
 = 0.0f;

36 
ªtTemp
 = (
TEMP_T
)(
ãmp
/10);

37 
ªtTemp
 +(
TEMP_T
)(
ãmp
%10) * 0.1f;

39  
ªtTemp
;

40 
	}
}

43 
TEMP_T
 
	$C⁄vI¡2Temp2dp
(
ãmp
)

45 
TEMP_T
 
ªtTemp
 = 0.0f;

47 
ªtTemp
 = (
TEMP_T
)(
ãmp
/100);

48 
ªtTemp
 +(
TEMP_T
)(
ãmp
%100) * 0.01f;

50  
ªtTemp
;

51 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_common.h

1 #i‚de‡
__TEMP_TABLE_COMMON_H__


2 
	#__TEMP_TABLE_COMMON_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#RES_ADC_TABLE_10BIT
 0

	)

8 
	#RES_ADC_TABLE_12BIT
 1

	)

9 
U16
 
GëTempTabÀIndex
(
U8
 
ªsﬁuti⁄
, U16 
øwAdc
, U16 
mö
, U16 
max
 );

14 
TEMP_T
 
C⁄vI¡2Temp
(
ãmp
);

20 
TEMP_T
 
C⁄vI¡2Temp2dp
(
ãmp
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_eva.c

1 
	~"ãmp_èbÀ_comm⁄.h
"

2 
	~"ãmp_èbÀ_eva.h
"

6 
	#MIN_ADC_EVA_TEMP
 39

	)

7 
	#MAX_ADC_EVA_TEMP
 1000

	)

8 c⁄° 
	gãmp_eva_èbÀ
[] =

109 
TEMP_T
 
	$C⁄vAdc2Temp_Eva
(
U16
 
mu16Adc
)

111 
U16
 
mu16Index
;

112 
vÆ
;

115 
mu16Index
 = 
	`GëTempTabÀIndex
(

116 
RES_ADC_TABLE_10BIT
,

117 
mu16Adc
,

118 
MIN_ADC_EVA_TEMP
,

119 
MAX_ADC_EVA_TEMP
 );

121 
vÆ
 = 
ãmp_eva_èbÀ
[ 
mu16Index
 ];

122  
	`C⁄vI¡2Temp
–
vÆ
 );

123 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_eva.h

1 #i‚de‡
__TEMP_TABLE_EVA_H__


2 
	#__TEMP_TABLE_EVA_H__


	)

4 
	~"¥j_ty≥.h
"

6 
TEMP_T
 
C⁄vAdc2Temp_Eva
(
U16
 
mu16Adc
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_hot_in_out.c

1 
	~"ãmp_èbÀ_comm⁄.h
"

2 
	~"ãmp_èbÀ_hŸ_ö_out.h
"

16 
	#MIN_ADC_HOT_OUT
 196

	)

17 
	#MAX_ADC_HOT_OUT
 1004

	)

18 c⁄° 
	gãmp_hŸ_out_èbÀ
[] =

103 
TEMP_T
 
	$C⁄vAdc2Temp_HŸOut
(
U16
 
mu16Adc
)

105 
U16
 
mu16Index
;

106 
vÆ
;

108 
mu16Index
 = 
	`GëTempTabÀIndex
(

109 
RES_ADC_TABLE_10BIT
,

110 
mu16Adc
,

111 
MIN_ADC_HOT_OUT
,

112 
MAX_ADC_HOT_OUT
 );

114 
vÆ
 = 
ãmp_hŸ_out_èbÀ
[ 
mu16Index
 ];

115  
	`C⁄vI¡2Temp
–
vÆ
 );

116 
	}
}

133 
	#MIN_ADC_HOT_IN
 60

	)

134 
	#MAX_ADC_HOT_IN
 809

	)

135 c⁄° 
	gãmp_hŸ_ö_èbÀ
[] =

214 
TEMP_T
 
	$C⁄vAdc2Temp_HŸIn
(
U16
 
mu16Adc
)

216 
U16
 
mu16Index
;

217 
vÆ
;

220 
mu16Index
 = 
	`GëTempTabÀIndex
(

221 
RES_ADC_TABLE_10BIT
,

222 
mu16Adc
,

223 
MIN_ADC_HOT_IN
,

224 
MAX_ADC_HOT_IN
 );

226 
vÆ
 = 
ãmp_hŸ_ö_èbÀ
[ 
mu16Index
 ];

227  
	`C⁄vI¡2Temp
–
vÆ
 );

228 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_hot_in_out.h

1 #i‚de‡
__TEMP_TABLE_HOT_IN_OUT_H__


2 
	#__TEMP_TABLE_HOT_IN_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
TEMP_T
 
C⁄vAdc2Temp_HŸOut
(
U16
 
mu16Adc
);

7 
TEMP_T
 
C⁄vAdc2Temp_HŸIn
(
U16
 
mu16Adc
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ice_tray_in.c

1 
	~"ãmp_èbÀ_comm⁄.h
"

2 
	~"ãmp_èbÀ_i˚_åay_ö.h
"

6 
	#MIN_ADC_ICE_TRAY_IN
 61

	)

7 
	#MAX_ADC_ICE_TRAY_IN
 803

	)

8 c⁄° 
	gãmp_i˚_åay_ö_èbÀ
[] =

87 
TEMP_T
 
	$C⁄vAdc2Temp_I˚TøyIn
(
U16
 
mu16Adc
)

89 
U16
 
mu16Index
;

90 
vÆ
;

93 
mu16Index
 = 
	`GëTempTabÀIndex
(

94 
RES_ADC_TABLE_10BIT
,

95 
mu16Adc
,

96 
MIN_ADC_ICE_TRAY_IN
,

97 
MAX_ADC_ICE_TRAY_IN
 );

99 
vÆ
 = 
ãmp_i˚_åay_ö_èbÀ
[ 
mu16Index
 ];

100  
	`C⁄vI¡2Temp
–
vÆ
 );

101 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ice_tray_in.h

1 #i‚de‡
__TEMP_TABLE_ICE_TRAY_IN_H__


2 
	#__TEMP_TABLE_ICE_TRAY_IN_H__


	)

4 
	~"¥j_ty≥.h
"

6 
TEMP_T
 
C⁄vAdc2Temp_I˚TøyIn
(
U16
 
mu16Adc
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_room.c

1 
	~"ãmp_èbÀ_room.h
"

2 
	~"ãmp_èbÀ_cﬁd.h
"

4 
TEMP_T
 
	$C⁄vAdc2Temp_RoomW©î
(
U16
 
mu16Adc
)

6  
	`C⁄vAdc2Temp_CﬁdW©î
–
mu16Adc
 );

7 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_room.h

1 #i‚de‡
__TEMP_TABLE_ROOM_H__


2 
	#__TEMP_TABLE_ROOM_H__


	)

4 
	~"¥j_ty≥.h
"

6 
TEMP_T
 
C⁄vAdc2Temp_RoomW©î
(
U16
 
mu16Adc
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\cody_kit.c

1 
	~"cody_kô.h
"

2 
	~"w©î_out.h
"

6 
CodyKô_T
 
	gCody
;

8 
	$InôCodyKô
()

10 
Cody
.
Sètus
 = 0;

11 
Cody
.
Sãp
 = 0;

12 
	}
}

15 
	$SëCodyKôSètus
(
U8
 
mu8Sètus
)

17 
Cody
.
Sètus
 = 
mu8Sètus
;

18 
	}
}

20 
U8
 
	$GëCodyKôSètus
()

22  
Cody
.
Sètus
;

23 
	}
}

26 
	$SëCodyKôSãp
(
U8
 
mu8Sãp
)

28 
Cody
.
Sãp
 = 
mu8Sãp
;

29 
	}
}

31 
U8
 
	$GëCodyKôSãp
()

33  
Cody
.
Sãp
;

34 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\cody_kit.h

1 #i‚de‡
__CODY_KIT_H__


2 
	#__CODY_KIT_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#CODY_STEP_ROOM
 0

	)

8 
	#CODY_STEP_COLD
 1

	)

9 
	s_cody_kô_


11 
U8
 
	mSètus
;

12 
U8
 
	mSãp
;

13 } 
	tCodyKô_T
;

15 
InôCodyKô
();

17 
SëCodyKôSètus
(
U8
 
mu8Sètus
);

18 
U8
 
GëCodyKôSètus
();

20 
SëCodyKôSãp
(
U8
 
mu8Sãp
);

21 
U8
 
GëCodyKôSãp
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\ice_tray_test.c

1 
	~"i˚_åay_ã°.h
"

2 
	~"i˚_åay.h
"

3 
	~"£rvi˚.h
"

4 
	~"i˚.h
"

5 
	~"i˚_makî.h
"

9 
	mSTEP_MOVE_1
,

10 
	mSTEP_WAIT_1
,

12 
	mSTEP_MOVE_2
,

13 
	mSTEP_WAIT_2
,

15 
	mSTEP_MOVE_3
,

16 
	mSTEP_WAIT_3
,

18 
	mSTEP_TEST_ICING_DONE
,

19 
	mSTEP_TEST_DEICING_DONE


21 } 
	tTøyTe°Sãp_T
;

25 
	#POSITION_ICING
 0

	)

26 
	#POSITION_DEICING
 1

	)

28 
	#DEFAULT_WAIT
 30

29 
	s_i˚_åay_ã°_


	)

31 
U8
 
	mSètus
;

32 
TøyTe°Sãp_T
 
	mSãp
;

34 
U8
 
	mPosôi⁄
;

35 
U16
 
	mWaô
;

37 
U8
 
	mCheckIcög
;

38 
U8
 
	mCheckDeIcög
;

39 } 
	tI˚TøyTe°_T
;

42 
I˚TøyTe°_T
 
	gTøyTe°
;

45 
	$InôI˚TøyTe°
()

47 
TøyTe°
.
Sètus
 = 
FALSE
;

48 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

49 
TøyTe°
.
Posôi⁄
 = 
POSITION_ICING
;

51 
TøyTe°
.
CheckIcög
 = 
FALSE
;

52 
TøyTe°
.
CheckDeIcög
 = 
FALSE
;

53 
	}
}

56 
	$SèπI˚TøyTe°
()

58 
TøyTe°
.
Sètus
 = 
TRUE
;

59 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

60 
TøyTe°
.
CheckIcög
 = 
FALSE
;

61 
TøyTe°
.
CheckDeIcög
 = 
FALSE
;

62 
	}
}

65 
	$St›I˚TøyTe°
()

67 if–
TøyTe°
.
Posôi⁄
 =
POSITION_DEICING
 )

69 if–
TøyTe°
.
Sãp
 <
STEP_MOVE_2
 )

71 
TøyTe°
.
Sãp
 = 
STEP_TEST_ICING_DONE
;

76 if–
TøyTe°
.
Sãp
 < 
STEP_MOVE_2
 )

78 
TøyTe°
.
Sãp
 = 
STEP_TEST_DEICING_DONE
;

80 if–
TøyTe°
.
Sãp
 < 
STEP_MOVE_3
 )

82 
TøyTe°
.
Sãp
 = 
STEP_TEST_ICING_DONE
;

85 
	}
}

87 
U8
 
	$GëI˚TøyTe°Sètus
()

89  
TøyTe°
.
Sètus
;

90 
	}
}

92 
U8
 
	$GëI˚TøyTe°CheckIcög
()

94  
TøyTe°
.
CheckIcög
;

95 
	}
}

97 
U8
 
	$GëI˚TøyTe°CheckDeIcög
()

99  
TøyTe°
.
CheckDeIcög
;

100 
	}
}

102 
U8
 
	$IsI˚TøyTe°
()

106 if–
TøyTe°
.
Sètus
 =
FALSE
 )

108  
TRUE
;

111  
FALSE
;

112 
	}
}

114 
	$CheckPosôi⁄
()

116 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

118 
TøyTe°
.
Posôi⁄
 = 
POSITION_DEICING
;

122 
TøyTe°
.
Posôi⁄
 = 
POSITION_ICING
;

124 
	}
}

126 
	$Te°Icög
()

128  
TøyTe°
.
Sãp
 )

131 
STEP_MOVE_1
:

132 
	`MoveI˚TøyDeIcög
();

134 
TøyTe°
.
Waô
 = 
DEFAULT_WAIT
;

135 
TøyTe°
.
Sãp
++;

138 
STEP_WAIT_1
:

139 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

141 if–
TøyTe°
.
Waô
 != 0 )

143 
TøyTe°
.
Waô
--;

147 
TøyTe°
.
Sãp
++;

154 
STEP_MOVE_2
:

155 
	`MoveI˚TøyIcög
();

157 
TøyTe°
.
Waô
 = 
DEFAULT_WAIT
;

158 
TøyTe°
.
Sãp
++;

161 
STEP_WAIT_2
:

162 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_ICING
 )

164 
TøyTe°
.
CheckIcög
 = 
TRUE
;

165 if–
TøyTe°
.
Waô
 != 0 )

167 
TøyTe°
.
Waô
--;

171 
TøyTe°
.
Sãp
++;

178 
STEP_MOVE_3
:

179 
	`MoveI˚TøyDeIcög
();

181 
TøyTe°
.
Waô
 = 
DEFAULT_WAIT
;

182 
TøyTe°
.
Sãp
++;

185 
STEP_WAIT_3
:

186 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

188 
TøyTe°
.
CheckDeIcög
 = 
TRUE
;

189 if–
TøyTe°
.
Waô
 != 0 )

191 
TøyTe°
.
Waô
--;

195 
TøyTe°
.
Sãp
 = 
STEP_TEST_DEICING_DONE
;

202 
STEP_TEST_ICING_DONE
:

203 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_ICING
 )

205 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

206 
TøyTe°
.
Sètus
 = 
FALSE
;

207 
TøyTe°
.
Posôi⁄
 = 
POSITION_ICING
;

212 
STEP_TEST_DEICING_DONE
:

213 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

215 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

216 
TøyTe°
.
Sètus
 = 
FALSE
;

217 
TøyTe°
.
Posôi⁄
 = 
POSITION_DEICING
;

222 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

223 
TøyTe°
.
Sètus
 = 
FALSE
;

224 
TøyTe°
.
Posôi⁄
 = 
POSITION_DEICING
;

227 
	}
}

231 
	$Te°DeIcög
()

233  
TøyTe°
.
Sãp
 )

236 
STEP_MOVE_1
:

237 
	`MoveI˚TøyIcög
();

239 
TøyTe°
.
Waô
 = 
DEFAULT_WAIT
;

240 
TøyTe°
.
Sãp
++;

243 
STEP_WAIT_1
:

244 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_ICING
 )

246 
TøyTe°
.
CheckIcög
 = 
TRUE
;

247 if–
TøyTe°
.
Waô
 != 0 )

249 
TøyTe°
.
Waô
--;

253 
TøyTe°
.
Sãp
++;

259 
STEP_MOVE_2
:

260 
	`MoveI˚TøyDeIcög
();

262 
TøyTe°
.
Waô
 = 
DEFAULT_WAIT
;

263 
TøyTe°
.
Sãp
++;

266 
STEP_WAIT_2
:

267 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

269 
TøyTe°
.
CheckDeIcög
 = 
TRUE
;

270 if–
TøyTe°
.
Waô
 != 0 )

272 
TøyTe°
.
Waô
--;

276 
TøyTe°
.
Sãp
 = 
STEP_TEST_DEICING_DONE
;

282 
STEP_TEST_ICING_DONE
:

283 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_ICING
 )

285 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

286 
TøyTe°
.
Sètus
 = 
FALSE
;

287 
TøyTe°
.
Posôi⁄
 = 
POSITION_ICING
;

292 
STEP_TEST_DEICING_DONE
:

293 if–
	`GëI˚TøySètus
(Ë=
ICE_TRAY_DEICING
 )

295 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

296 
TøyTe°
.
Sètus
 = 
FALSE
;

297 
TøyTe°
.
Posôi⁄
 = 
POSITION_DEICING
;

302 
TøyTe°
.
Sãp
 = 
STEP_MOVE_1
;

303 
TøyTe°
.
Sètus
 = 
FALSE
;

304 
TøyTe°
.
Posôi⁄
 = 
POSITION_ICING
;

307 
	}
}

309 
	$Pro˚ssI˚TøyTe°
()

311 if–
TøyTe°
.
Sètus
 =
FALSE
 )

314 
	`CheckPosôi⁄
();

321 if–
	`IsSëI˚MakeMode
–
ICE_MODE_DUMMY_DEICING
 ) =
TRUE
 )

323 
	`St›DummyDeIcög
();

327 
	`St›I˚Make
();

332 if–
TøyTe°
.
Posôi⁄
 =
POSITION_ICING
 )

335 
	`Te°Icög
();

340 
	`Te°DeIcög
();

342 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\ice_tray_test.h

1 #i‚de‡
__ICE_TRAY_TEST_H__


2 
	#__ICE_TRAY_TEST_H__


	)

4 
	~"¥j_ty≥.h
"

7 
InôI˚TøyTe°
();

10 
SèπI˚TøyTe°
();

12 
St›I˚TøyTe°
();

15 
U8
 
GëI˚TøyTe°Sètus
();

16 
U8
 
GëI˚TøyTe°CheckIcög
();

17 
U8
 
GëI˚TøyTe°CheckDeIcög
();

19 
U8
 
IsI˚TøyTe°
();

22 
Pro˚ssI˚TøyTe°
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\service.c

1 
	~"hw.h
"

2 
	~"hÆ_öput.h
"

3 
	~"£rvi˚.h
"

4 
	~"ì¥om.h
"

5 
	~"i˚.h
"

6 
	~"i˚_makî.h
"

7 
	~"sound.h
"

9 
	#ONE_DAY_MIN
 ( 1440U )

	)

12 
Sîvi˚_T
 
	gSvc
;

14 
	$InôSîvi˚Check
()

16 
Svc
.
T™kO≥n
 = 0;

18 
Svc
.
Sètus
 = 
FALSE
;

19 
Svc
.
Time
 = 
SERVICE_TIME_MIN
;

20 
Svc
.
SaveTime
 = 
ONE_DAY_MIN
;

22 
Svc
.
O≥nTime
 = 0U;

23 
	}
}

25 
	$GëSîvi˚CheckD©a
(
Sîvi˚_T
 *
pD©a
 )

27 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Svc
, (
Sîvi˚_T
));

28 
	}
}

31 
U8
 
	$GëSîvi˚CheckT™kO≥n
()

33  
Svc
.
T™kO≥n
;

34 
	}
}

36 
U8
 
	$GëSîvi˚CheckSètus
()

38  
Svc
.
Sètus
;

39 
	}
}

41 
	$SëSîvi˚Time
(
U32
 
mu32Time
)

43 
Svc
.
Time
 = 
mu32Time
;

44 
	}
}

46 
U32
 
	$GëSîvi˚Time
()

48  
Svc
.
Time
;

49 
	}
}

51 
	$SëSîvi˚CheckDay
(
U8
 
mu8Days
)

54 
Svc
.
Time
 = (
U32
)
mu8Days
 * 24UL * 60UL;

55 
	}
}

57 
U8
 
	$GëSîvi˚CheckDay
()

59 
U32
 
mu32Time
;

61 
mu32Time
 = 
Svc
.
Time
 * 10UL;

62 
mu32Time
 = mu32Time / 24UL / 60UL;

63 
mu32Time
 = mu32Time + 5UL;

64 
mu32Time
 = mu32Time / 10UL;

66  (
U8
)
mu32Time
;

67 
	}
}

71 
	$SëSîvi˚O≥nTime
(
U16
 
mu16Time
)

73 
Svc
.
O≥nTime
 = 
mu16Time
;

74 
	}
}

76 
U16
 
	$GëSîvi˚O≥nTime
()

78  
Svc
.
O≥nTime
;

79 
	}
}

82 
	$Re£tSîvi˚CheckTimî
()

84 
Svc
.
Sètus
 = 
FALSE
;

85 
Svc
.
Time
 = 
SERVICE_TIME_MIN
;

86 
	}
}

89 
U8
 
	ggu8Sec
 = 10U;

90 
	$Cou¡ögSîvi˚O≥nTime
()

92 if–
gu8Sec
 != 0 )

94 
gu8Sec
--;

98 
gu8Sec
 = 10UL;

100 if–
Svc
.
O≥nTime
 < 65535 )

102 
Svc
.
O≥nTime
++;

105 
	}
}

107 
	$Re£tSîvi˚O≥nTime
()

109 
gu8Sec
 = 10U;

110 
Svc
.
O≥nTime
 = 0U;

111 
	}
}

113 
	$Pro˚ssCheckT™kO≥n
()

115 
U8
 
mu8VÆ
;

117 
mu8VÆ
 = 
	`HAL_GëI≈utVÆue
–
IN_TANK_OPEN
 );

120 if–
Svc
.
T™kO≥n
 !
mu8VÆ
 )

122 
Svc
.
T™kO≥n
 = 
mu8VÆ
;

124 if–
Svc
.
T™kO≥n
 =
TRUE
 )

126 
	`SaveEïromId
–
EEP_ID_SERVICE_CHECK_DAY
 );

129 
	`St›DummyDeIcög
();

130 
	`St›I˚Make
();

132 
	`Sound
–
SOUND_COVER_OPEN_TOP
 );

136 
	`Sound
–
SOUND_COVER_CLOSE_TOP
 );

140 if–
Svc
.
T™kO≥n
 =
TRUE
 )

142 
	`Re£tSîvi˚CheckTimî
();

143 
	`Cou¡ögSîvi˚O≥nTime
();

145 
	}
}

147 
	$Pro˚ssSîvi˚Check
()

149 if–
Svc
.
T™kO≥n
 =
TRUE
 )

155 if–
Svc
.
Time
 != 0 )

157 
Svc
.
Time
--;

161 if–
Svc
.
Time
 =0 && Svc.
Sètus
 =
FALSE
 )

163 
Svc
.
Sètus
 = 
TRUE
;

164 
	`SaveEïromId
–
EEP_ID_SERVICE_CHECK_DAY
 );

171 if–
Svc
.
Time
 !0 && Svc.
T™kO≥n
 =
FALSE
 && Svc.
Sètus
 == FALSE )

174 
Svc
.
SaveTime
--;

175 if–
Svc
.
SaveTime
 == 0 )

177 
Svc
.
SaveTime
 = 
ONE_DAY_MIN
;

178 
	`SaveEïromId
–
EEP_ID_SERVICE_CHECK_DAY
 );

181 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\service.h

1 #i‚de‡
__SERVICE_H__


2 
	#__SERVICE_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_£rvi˚_check_


8 
U8
 
	mT™kO≥n
;

10 
U8
 
	mSètus
;

11 
U32
 
	mTime
;

12 
U32
 
	mSaveTime
;

14 
U16
 
	mO≥nTime
;

15 } 
	tSîvi˚_T
;

18 
InôSîvi˚Check
();

20 
GëSîvi˚CheckD©a
(
Sîvi˚_T
 *
pD©a
 );

22 
U8
 
GëSîvi˚CheckT™kO≥n
();

24 
U8
 
GëSîvi˚CheckSètus
();

26 
	#SERVICE_TIME_MIN
 ( 129600UL )

	)

27 
SëSîvi˚Time
(
U32
 
mu32Time
);

28 
U32
 
GëSîvi˚Time
();

30 
SëSîvi˚CheckDay
(
U8
 
mu8Days
);

31 
U8
 
GëSîvi˚CheckDay
();

34 
SëSîvi˚O≥nTime
(
U16
 
mu32Time
);

35 
U16
 
GëSîvi˚O≥nTime
();

36 
Re£tSîvi˚O≥nTime
();

39 
Pro˚ssCheckT™kO≥n
();

42 
Pro˚ssSîvi˚Check
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\buzzer.c

2 
	~"hw.h
"

4 
	~<°rög.h
>

5 
	~"¥j_ty≥.h
"

6 
	~"buzzî.h
"

8 
	#D_BUZZER_END
 0xFFFF

	)

11 
	s_buzzî_


13 
U16
 
	mPowî
;

14 
U16
 
	mTDR
;

15 
U16
 
	mTime
;

16 
U8
 
	mOrdî
;

17 
E_BuzzId_T
 
	mOuçut
;

18 
U8
 
	mSûít
;

19 
U8
 
	mCrôiˇlSe˘i⁄
;

20 } 
	tBuzzî_T
;

22 
Buzzî_T
 
	gBuzzî
;

24 
	s_buzzî_li°_


26 
E_BuzzId_T
 
	mId
;

27 c⁄° 
U16
 *
	mTy≥
;

28 
U8
 
	mSize
;

29 
U8
 
	mSûítSë
;

30 } 
	tBuzz_li°_t
;

34 c⁄° 
U16
 
	gau16Buzz_Off
[3][1]=

38 {
D_BUZZER_END
}

41 c⁄° 
U16
 
	gau16Buzz_PowîOn
[3][11]=

43 {
ON
, 
OFF
, ON, OFF, ON, OFF, ON, OFF, ON, OFF, OFF},

44 {
Si5
, Si5, 
Re6
, Re6, 
Sﬁ6
, Sﬁ6, 
Pas6
, Pas6, 
Re7
, Re7, 0},

45 {4, 19, 4, 19, 4, 19, 5, 65, 5, 112, 
D_BUZZER_END
}

49 c⁄° 
U16
 
	gau16Buzz_EffSèπ
[3][5]=

51 {
ON
, 
OFF
, ON, OFF, OFF},

52 {
Re6
,Re6, 
Re7
, Re7, 0},

53 {3, 21, 3, 21, 
D_BUZZER_END
}

56 c⁄° 
U16
 
	gau16Buzz_EffSt›
[3][7]=

58 {
ON
, 
OFF
, ON, OFF, ON, OFF, OFF},

59 {
La5
, La5, 
Pas6
, Pas6, 
Re6
, Re6, 0},

60 {3, 21, 3, 21, 3, 30, 
D_BUZZER_END
}

63 c⁄° 
U16
 
	gau16Buzz_CoﬁOn
[3][5]=

65 {
ON
, 
OFF
, ON, OFF, OFF},

66 {
Pas6
, Pas6, 
Re7
, Re7, 0},

67 {5, 19, 10, 38, 
D_BUZZER_END
}

70 c⁄° 
U16
 
	gau16Buzz_CoﬁOff
[3][7]=

72 {
ON
, 
OFF
, ON, OFF, ON, OFF, OFF},

73 {
Sﬁs5
, Sﬁs5, 
Si5
, Si5, 
Mi5
, Mi5, 0},

74 {2, 21, 2, 21, 10, 38, 
D_BUZZER_END
}

77 c⁄° 
U16
 
	gau16Buzz_Sñe˘
[3][3]=

79 {
ON
, 
OFF
, OFF},

80 {
La6
, La6, 0},

81 {8, 28, 
D_BUZZER_END
}

84 c⁄° 
U16
 
	gau16Buzz_Eº‹
[3][9]=

86 {
ON
, 
OFF
, ON, OFF, ON, OFF, ON, OFF, OFF},

87 {
Re6
, Re6, 
Re7
, Re7, Re6, Re6, Re7, Re7, 0},

88 {2, 10, 8, 28, 2, 10, 8, 28, 
D_BUZZER_END
}

91 c⁄° 
U16
 
	gau16Buzz_FuncSë
[3][5]=

93 {
ON
, 
OFF
, ON, OFF, OFF},

94 {
Sﬁ6
, Sﬁ6, 
Re7
, Re7, 0},

95 {5, 19, 10, 38, 
D_BUZZER_END
}

98 c⁄° 
U16
 
	gau16Buzz_FuncCÃ
[3][5]=

100 {
ON
, 
OFF
, ON, OFF, OFF},

101 {
Re7
, Re7, 
Sﬁ6
, Sol6, 0},

102 {5, 19, 10, 38, 
D_BUZZER_END
}

105 c⁄° 
U16
 
	gau16Buzz_EffC⁄ti
[3][17]=

107 {
ON
, 
OFF
, ON, OFF, ON, OFF, ON, OFF, ON, OFF, ON, OFF, ON, OFF, ON, OFF, OFF},

108 {
Re6
, Re6, 
Re7
, Re7, 
Dos7
, Dos7, 
La6
, La6, 
Mi6
, Mi6, 
La5
, La5, Re6, Re6, La6, La6, 0},

109 {8, 20, 8, 20, 8, 20, 8, 20, 8, 20, 8, 20, 8, 20, 8, 20, 
D_BUZZER_END
}

112 c⁄° 
U16
 
	gau16Buzz_SãrûizeSèπ
[3][7]=

114 {
ON
, 
OFF
, ON, OFF, ON, OFF, OFF},

115 {
Mi6
, Mi6, 
Dos6
, Dos6, 
La6
, La6, 0},

116 {3, 21, 3, 21, 10, 38, 
D_BUZZER_END
}

119 c⁄° 
U16
 
	gau16Buzz_SãrûizeEnd
[3][11]=

121 {
ON
, 
OFF
, ON, OFF, ON, OFF, ON, OFF, ON, OFF, OFF},

122 {
La6
, La6, 
Dos6
, Dos6, Dos6, Dos6, 
Pas6
, Pas6, 
Mi6
, Mi6, 0},

123 {8, 28, 8, 28, 3, 21, 10, 38, 14, 50, 
D_BUZZER_END
}

126 c⁄° 
U16
 
	gau16Buzz_Memíto2
[3][5]=

128 {
ON
, 
OFF
, ON, OFF, OFF},

129 {
La6
, La6, La6, La6, 0},

130 {8, 28, 8, 28, 
D_BUZZER_END
}

133 c⁄° 
U16
 
	gau16Buzz_Memíto3
[3][7]=

135 {
ON
, 
OFF
, ON, OFF, ON, OFF, OFF},

136 {
La6
, La6, La6, La6, La6, La6, 0},

137 {8, 28, 8, 28, 8, 28, 
D_BUZZER_END
}

140 c⁄° 
U16
 
	gau16Buzz_Memíto4
[3][9]=

142 {
ON
, 
OFF
, ON, OFF, ON, OFF, ON, OFF, OFF},

143 {
La6
, La6, La6, La6, La6, La6, La6, La6, 0},

144 {8, 28, 8, 28, 8, 28, 8, 28, 
D_BUZZER_END
}

147 c⁄° 
U16
 
	gau16Buzz_Memíto5
[3][11]=

149 {
ON
, 
OFF
, ON, OFF, ON, OFF, ON, OFF, ON, OFF, OFF},

150 {
La6
, La6, La6, La6, La6, La6, La6, La6, La6, La6, 0},

151 {8, 28, 8, 28, 8, 28, 8, 28, 8, 28, 
D_BUZZER_END
}

154 c⁄° 
U16
 
	gau16Buzz_SîvîC⁄√˘
[3][7]=

156 {
ON
, 
OFF
, ON, OFF, ON, OFF, OFF},

157 {
Do7
, Do7, 
Re7
, Re7, 
Mi7
, Mi7, 0},

158 {3, 10, 3, 10, 3, 50, 
D_BUZZER_END
}

161 c⁄° 
U16
 
	gau16Buzz_APC⁄√˘
[3][7]=

163 {
ON
, 
OFF
, ON, OFF, ON, OFF, OFF},

164 {
Do6
, Do6, 
Re6
, Re6, 
Mi6
, Mi6, 0},

165 {5, 20, 5, 20, 5, 40, 
D_BUZZER_END
}

169 
Buzz_li°_t
 
	gBuzzLi°
[
BUZZ_NUM
] =

171 { 
BUZZER_OFF
, &
au16Buzz_Off
[0][0], 1U, 
ON
 },

172 { 
BUZZER_POWER_ON
, &
au16Buzz_PowîOn
[0][0], 11U, 
ON
 },

173 { 
BUZZER_EFFLUENT
, &
au16Buzz_EffSèπ
[0][0], 5U, 
OFF
 },

174 { 
BUZZER_EFFLUENT_END
, &
au16Buzz_EffSt›
[0][0], 7U, 
OFF
 },

175 { 
BUZZER_COOL_SETUP
, &
au16Buzz_CoﬁOn
[0][0], 5U, 
ON
 },

176 { 
BUZZER_COOL_CANCEL
, &
au16Buzz_CoﬁOff
[0][0], 7U, 
ON
 },

177 { 
BUZZER_SELECT
, &
au16Buzz_Sñe˘
[0][0], 3U, 
OFF
 },

178 { 
BUZZER_ERROR
, &
au16Buzz_Eº‹
[0][0], 9U, 
ON
 },

179 { 
BUZZER_SETUP
, &
au16Buzz_FuncSë
[0][0], 5U, 
ON
 },

180 { 
BUZZER_CANCEL
, &
au16Buzz_FuncCÃ
[0][0], 5U, 
ON
 },

181 { 
BUZZER_EFFLUENT_CONTINUE
, &
au16Buzz_EffC⁄ti
[0][0], 17U, 
OFF
 },

182 { 
BUZZER_STERILIZE_START
, &
au16Buzz_SãrûizeSèπ
[0][0], 7U, 
OFF
 },

183 { 
BUZZER_STERILIZE_END
, &
au16Buzz_SãrûizeEnd
[0][0], 11U, 
OFF
 },

184 { 
BUZZER_MEMENTO_1
, &
au16Buzz_Sñe˘
[0][0], 3U, 
ON
 },

185 { 
BUZZER_MEMENTO_2
, &
au16Buzz_Memíto2
[0][0], 5U, 
ON
 },

186 { 
BUZZER_MEMENTO_3
, &
au16Buzz_Memíto3
[0][0], 7U, 
ON
 },

187 { 
BUZZER_MEMENTO_4
, &
au16Buzz_Memíto4
[0][0], 9U, 
ON
 },

188 { 
BUZZER_MEMENTO_5
, &
au16Buzz_Memíto5
[0][0], 11U, 
ON
 },

189 { 
BUZZER_SERVER_CONNECT
, &
au16Buzz_SîvîC⁄√˘
[0][0], 7U, 
ON
 },

190 { 
BUZZER_AP_CONNECT
, &
au16Buzz_APC⁄√˘
[0][0], 7U, 
ON
 },

191 { 
BUZZER_AP_PAIRING
, &
au16Buzz_Sñe˘
[0][0], 3U, 
ON
 }

193 
	#SZ_BZ_LIST
 ( (
BuzzLi°
Ë/ (
Buzz_li°_t
Ë)

	)

196 
BuzzSèπ
();

197 
BuzzSt›
();

198 
BuzzîCou¡
();

199 
BuzzîCheck
();

201 
	$InôülizeBuzzî
()

203 
	`MEMSET
–(
__FAR
 *)&
Buzzî
, 0, –
Buzzî_T
 ));

204 
	`TURN_OFF_TDR
();

205 
	}
}

207 
	$SëBuzzOut
–
E_BuzzId_T
 
mu8BuzzId
 )

209 if–
Buzzî
.
Sûít
 =
ON


210 && 
BuzzLi°
[
mu8BuzzId
].
SûítSë
 =
OFF
 )

214 
Buzzî
.
CrôiˇlSe˘i⁄
 = 
ON
;

215 
Buzzî
.
Ouçut
 = 
mu8BuzzId
;

216 
Buzzî
.
Ordî
 = 0;

217 
Buzzî
.
Time
 = 0;

218 
Buzzî
.
CrôiˇlSe˘i⁄
 = 
OFF
;

219 
	}
}

221 
U8
 
	$IsSëSûít
()

223  
Buzzî
.
Sûít
;

224 
	}
}

226 
	$SëOnOffSûít
–
U8
 
mu8Sûít
 )

228 if(
mu8Sûít
 =
ON
)

230 
Buzzî
.
Sûít
 = 
ON
;

234 
Buzzî
.
Sûít
 = 
OFF
;

236 
	}
}

238 
	$Buzzög
(
U16
 
mu16Time
)

240 if–
mu16Time
 == 0 )

242 
	`BuzzSèπ
();

243 
	`BuzzîCheck
();

245 
	}
}

247 
	$BuzzîC⁄åﬁ
()

249 if(
Buzzî
.
CrôiˇlSe˘i⁄
 =
ON
)

255 
	`BuzzîCou¡
();

258 if(
Buzzî
.
Ouçut
 =
BUZZER_OFF
)

260 
	`BuzzSt›
();

261 if(
Buzzî
.
Sûít
 =
ON
 )

263 
	`InôülizeBuzzî
();

264 
Buzzî
.
Sûít
 = 
ON
;

268 
	`InôülizeBuzzî
();

273 if–
Buzzî
.
Sûít
 =
OFF
 )

275 
	`Buzzög
–
Buzzî
.
Time
 );

277 i‡–
BuzzLi°
[
Buzzî
.
Ouçut
].
SûítSë
==
ON
 )

279 
	`Buzzög
–
Buzzî
.
Time
 );

284 if–
Buzzî
.
Powî
 =
ON
 )

286 
	`TURN_ON_BUZZER_ONOFF
();

287 
	`TURN_ON_TDR
();

291 
	`TURN_OFF_BUZZER_ONOFF
();

293 
	}
}

298 
	$BuzzSèπ
()

300 
	`SoundSèπ
();

301 
	}
}

303 
	$BuzzSt›
()

305 
	`SoundSt›
();

306 
	}
}

311 
	$BuzzîCou¡
()

313 
U8
 
mu8Cou¡_BuzzCheckTime
 = 0;

315 
mu8Cou¡_BuzzCheckTime
++;

316 if–
mu8Cou¡_BuzzCheckTime
 >= 10 )

318 
mu8Cou¡_BuzzCheckTime
 = 0;

319 if(
Buzzî
.
Time
 != 0)

321 
Buzzî
.
Time
--;

324 
	}
}

329 
	$BuzzîCheck
()

331 
Buzz_li°_t
 *
pBuz
 = 
NULL
;

332 
U8
 
mu8BuzzCou¡
 = 0;

333 
U16
 
mu16IdxTDR
 = 0;

334 
U16
 
mu16IdxTime
 = 0;

336  
mu8BuzzCou¡
 = 0 ; mu8BuzzCou¡ < 
SZ_BZ_LIST
; mu8BuzzCount++ )

338 
pBuz
 = &
BuzzLi°
[ 
mu8BuzzCou¡
 ];

339 
mu16IdxTDR
 = 
pBuz
->
Size
 + 
Buzzî
.
Ordî
;

340 
mu16IdxTime
 = (
pBuz
->
Size
*2Ë+ 
Buzzî
.
Ordî
;

342 if–
pBuz
->
Id
 =
Buzzî
.
Ouçut
 )

344 
Buzzî
.
Powî
 = 
pBuz
->
Ty≥
[ Buzzî.
Ordî
 ];

345 
Buzzî
.
TDR
 = 
pBuz
->
Ty≥
[ 
mu16IdxTDR
 ];

346 
Buzzî
.
Time
 = 
pBuz
->
Ty≥
[ 
mu16IdxTime
 ];

347 
Buzzî
.
Ordî
++;

349 if(
Buzzî
.
Time
 =
D_BUZZER_END
)

351 
Buzzî
.
Ouçut
 = 
BUZZER_OFF
;

356 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\buzzer.h

2 #i‚de‡
_BUZZER_H_


3 
	#_BUZZER_H_


	)

15 
	#TDR_USE
 0U

16 
	#TDR_SET
 
TDR11


17 
	#OSC_16MHZ
 0U

18 
	#OSC_32MHZ
 1U

19 

	)

24 #i‡(
TDR_USE
==0)

26 
	#SoundSèπ
(Ëdo{ 
	`NOP
(); }0)

	)

27 
	#SoundSt›
(Ëdo{ 
	`NOP
(); }0)

	)

28 #ñi‡(
TDR_USE
==1)

29 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU0_0_Sèπ
();}0)

	)

30 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU0_0_St›
(); 
TO0
 &~
_0001_TAU_CH0_OUTPUT_VALUE_1
;}0)

	)

31 #ñi‡(
TDR_USE
==2)

32 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU1_1_Sèπ
();}0)

	)

33 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU1_1_St›
(); 
TO0
 &~
_0002_TAU_CH1_OUTPUT_VALUE_1
;}0)

	)

34 #ñi‡(
TDR_USE
==3)

35 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU0_2_Sèπ
();}0)

	)

36 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU0_2_St›
(); 
TO0
 &~
_0004_TAU_CH2_OUTPUT_VALUE_1
;}0)

	)

37 #ñi‡(
TDR_USE
==4)

38 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU0_3_Sèπ
();}0)

	)

39 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU0_3_St›
(); 
TO0
 &~
_0008_TAU_CH3_OUTPUT_VALUE_1
;}0)

	)

40 #ñi‡(
TDR_USE
==5)

41 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU0_4_Sèπ
();}0)

	)

42 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU0_4_St›
(); 
TO0
 &~
_0010_TAU_CH4_OUTPUT_VALUE_1
;}0)

	)

43 #ñi‡(
TDR_USE
==6)

44 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU0_5_Sèπ
();}0)

	)

45 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU0_5_St›
(); 
TO0
 &~
_0020_TAU_CH5_OUTPUT_VALUE_1
;}0)

	)

46 #ñi‡(
TDR_USE
==7)

47 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU0_6_Sèπ
();}0)

	)

48 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU0_6_St›
(); 
TO0
 &~
_0040_TAU_CH6_OUTPUT_VALUE_1
;}0)

	)

50 
	#SoundSèπ
(Ëdo{
	`R_C⁄fig_TAU0_7_Sèπ
();}0)

	)

51 
	#SoundSt›
(Ëdo{
	`R_C⁄fig_TAU0_7_St›
(); 
TO0
 &~
_0080_TAU_CH7_OUTPUT_VALUE_1
;}0)

	)

54 
	#TURN_ON_TDR
(Ëdo{
TDR_SET
 = 
Buzzî
.
TDR
;}0)

	)

55 
	#TURN_OFF_TDR
(Ëdo{
TDR_SET
 = 
OFF
;}0)

	)

57 
	#TURN_ON_TDR
(Ëdo{
TDR_SET
 = 
Buzzî
.
TDR
;}0)

	)

58 
	#TURN_OFF_TDR
(Ëdo{
TDR_SET
 = 
OFF
;}0)

	)

60 
	#TURN_ON_BUZZER_ONOFF
(Ëdo{ }0)

	)

61 
	#TURN_OFF_BUZZER_ONOFF
(Ëdo{ } 0)

	)

68 
	mBUZZER_OFF
 = 0,

69 
	mBUZZER_POWER_ON
,

70 
	mBUZZER_EFFLUENT
,

71 
	mBUZZER_EFFLUENT_END
,

72 
	mBUZZER_COOL_SETUP
,

73 
	mBUZZER_COOL_CANCEL
,

74 
	mBUZZER_SELECT
,

75 
	mBUZZER_ERROR
,

76 
	mBUZZER_SETUP
,

77 
	mBUZZER_CANCEL
,

78 
	mBUZZER_EFFLUENT_CONTINUE
,

79 
	mBUZZER_STERILIZE_START
,

80 
	mBUZZER_STERILIZE_END
,

81 
	mBUZZER_MEMENTO_1
,

82 
	mBUZZER_MEMENTO_2
,

83 
	mBUZZER_MEMENTO_3
,

84 
	mBUZZER_MEMENTO_4
,

85 
	mBUZZER_MEMENTO_5
,

86 
	mBUZZER_SERVER_CONNECT
,

87 
	mBUZZER_AP_CONNECT
,

88 
	mBUZZER_AP_PAIRING
,

90 
	mBUZZ_NUM


91 } 
	tE_BuzzId_T
;

97 #i‡(
OSC_16MHZ
 == 1)

99 
	#Do4
 (30577U)

	)

100 
	#Dos4
 (28861U)

	)

101 
	#Re4
 (27241U)

	)

102 
	#Mi4
 (24269U)

	)

103 
	#Pa4
 (22907U)

	)

104 
	#Pas4
 (21621U)

	)

105 
	#Sﬁ4
 (20407U)

	)

106 
	#Sﬁs4
 (19262U)

	)

107 
	#La4
 (18181U)

	)

108 
	#Si4
 (16197U)

	)

112 
	#Do4
 (61155U)

	)

113 
	#Dos4
 (57723U)

	)

114 
	#Re4
 (54483U)

	)

115 
	#Mi4
 (48539U)

	)

116 
	#Pa4
 (45814U)

	)

117 
	#Pas4
 (43243U)

	)

118 
	#Sﬁ4
 (40816U)

	)

119 
	#Sﬁs4
 (38525U)

	)

120 
	#La4
 (36363U)

	)

121 
	#Si4
 (32395U)

	)

125 
	#Do5
 (
Do4
/2)

126 
	#Dos5
 (
Dos4
/2)

127 
	#Re5
 (
Re4
/2)

128 
	#Mi5
 (
Mi4
/2)

129 
	#Pa5
 (
Pa4
/2)

130 
	#Pas5
 (
Pas4
/2)

131 
	#Sﬁ5
 (
Sﬁ4
/2)

132 
	#Sﬁs5
 (
Sﬁs4
/2)

133 
	#La5
 (
La4
/2)

134 
	#Si5
 (
Si4
/2)

136 
	#Do6
 (
Do5
/2)

137 
	#Dos6
 (
Dos5
/2)

138 
	#Re6
 (
Re5
/2)

139 
	#Mi6
 (
Mi5
/2)

140 
	#Pa6
 (
Pa5
/2)

141 
	#Pas6
 (
Pas5
/2)

142 
	#Sﬁ6
 (
Sﬁ5
/2)

143 
	#Sﬁs6
 (
Sﬁs5
/2)

144 
	#La6
 (
La5
/2)

145 
	#Si6
 (
Si5
/2)

147 
	#Do7
 (
Do6
/2)

148 
	#Dos7
 (
Dos6
/2)

149 
	#Re7
 (
Re6
/2)

150 
	#Mi7
 (
Mi6
/2)

	)

163 
InôülizeBuzzî
();

176 
SëBuzzOut
–
E_BuzzId_T
 
mu8BuzzId
 );

189 
U8
 
IsSëSûít
();

202 
SëOnOffSûít
–
U8
 
mu8Sûít
 );

215 
BuzzîC⁄åﬁ
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\sound.c

1 
	~"sound.h
"

2 
	~"ì¥om.h
"

3 
	~"utû.h
"

5 
	#CONFIG_BUZZER
 0

	)

7 #i‡
CONFIG_BUZZER


8 
	~"buzzî.h
"

10 
	~"voi˚.h
"

13 
	s_sound_


15 
U8
 
	mMuã
;

16 
U16
 
	mHﬁdTime
;

17 } 
	tSound_T
;

19 
Sound_T
 
	gsound
;

22 
	$InôSound
()

24 
sound
.
Muã
 = 
OFF
;

25 
sound
.
HﬁdTime
 = 0;

26 
	}
}

28 
	s_sound_li°_t


30 
SoundId_T
 
	mSoundId
;

31 
U16
 
	mC⁄fHﬁdTime
;

33 #i‡
CONFIG_BUZZER


34 
E_BuzzId_T
 
	mBuzzîId
;

36 
Voi˚Id_T
 
	mVoi˚Id
[ 
MAX_VOICE_LEVEL
 ];

39 } 
	tSoundLi°_T
;

41 #i‡
CONFIG_BUZZER


42 
SoundLi°_T
 
	gSoundLi°
[] =

45 { 
SOUND_POWER_OFF
 , 
BUZZER_OFF
 },

46 { 
SOUND_POWER_ON
 , 
BUZZER_POWER_ON
 },

47 { 
SOUND_EFFLUENT
 , 
BUZZER_EFFLUENT
 },

48 { 
SOUND_EFFLUENT_END
 , 
BUZZER_EFFLUENT_END
 },

49 { 
SOUND_CONFIG_SETUP
 , 
BUZZER_COOL_SETUP
 },

50 { 
SOUND_CONFIG_CANCEL
 , 
BUZZER_COOL_CANCEL
 },

51 { 
SOUND_SELECT
 , 
BUZZER_SELECT
 },

52 { 
SOUND_ERROR
 , 
BUZZER_ERROR
 },

53 { 
SOUND_SETUP
 , 
BUZZER_SETUP
 },

54 { 
SOUND_CANCEL
 , 
BUZZER_CANCEL
 },

55 { 
SOUND_LOCK_SETUP
 , 
BUZZER_SETUP
 },

56 { 
SOUND_LOCK_CANCEL
 , 
BUZZER_CANCEL
 },

57 { 
SOUND_EFFLUENT_CONTINUE
 , 
BUZZER_EFFLUENT_CONTINUE
 },

58 { 
SOUND_STERILIZE_START
 , 
BUZZER_STERILIZE_START
 },

59 { 
SOUND_STERILIZE_END
 , 
BUZZER_STERILIZE_END
 },

60 { 
SOUND_MEMENTO_1
 , 
BUZZER_MEMENTO_1
 },

61 { 
SOUND_MEMENTO_2
 , 
BUZZER_MEMENTO_2
 },

62 { 
SOUND_MEMENTO_3
 , 
BUZZER_MEMENTO_3
 },

63 { 
SOUND_MEMENTO_4
 , 
BUZZER_MEMENTO_4
 },

64 { 
SOUND_MEMENTO_5
 , 
BUZZER_MEMENTO_5
 },

65 { 
SOUND_MUTE
 , 
BUZZER_SETUP
 },

67 { 
SOUND_AP_CONNECT
 , 
BUZZER_AP_CONNECT
 },

68 { 
SOUND_AP_PAIRING
 , 
BUZZER_AP_PAIRING
 },

69 { 
SOUND_SERVER_CONNECT
 , 
BUZZER_SERVER_CONNECT
 }

77 c⁄° 
SoundLi°_T
 
	gSoundLi°
[] =

81 { 
SOUND_COVER_OPEN_FRONT
, 0U, { 
ID_01_001_OPEN_FRONT
, ID_01_001_OPEN_FRONT, ID_01_001_OPEN_FRONT }},

82 { 
SOUND_COVER_OPEN_TOP
, 0U, { 
ID_01_002_01_OPEN_ICE_TANK
, ID_01_002_01_OPEN_ICE_TANK, ID_01_002_01_OPEN_ICE_TANK }},

83 { 
SOUND_COVER_CLOSE_TOP
, 0U, { 
ID_01_003_01_CLOSE_ICE_TANK
, ID_01_003_01_CLOSE_ICE_TANK, ID_01_003_01_CLOSE_ICE_TANK }},

84 { 
SOUND_ERROR_COLD
, 30U, { 
ID_B_003_ERR_COLD
, ID_B_003_ERR_COLD, ID_B_003_ERR_COLD }},

85 { 
SOUND_ERROR_HOT
, 30U, { 
ID_B_004_ERR_HOT
, ID_B_004_ERR_HOT, ID_B_004_ERR_HOT }},

86 { 
SOUND_ERROR_ICE
, 30U, { 
ID_B_005_ERR_ICE
, ID_B_005_ERR_ICE, ID_B_005_ERR_ICE }},

87 { 
SOUND_ERROR_OUTAGE
, 30U, { 
ID_B_006_ERR_OUTAGE
, ID_B_006_ERR_OUTAGE, ID_B_006_ERR_OUTAGE }},

88 { 
SOUND_ERROR_LEAK
, 30U, { 
ID_B_007_ERR_LEAK
, ID_B_007_ERR_LEAK, ID_B_007_ERR_LEAK }},

92 { 
SOUND_FILTER_FLUSHING_READY
, 0U, { 
ID_02_001_READY_FLUSH_FILTER
, ID_02_001_READY_FLUSH_FILTER, ID_02_001_READY_FLUSH_FILTER }},

93 { 
SOUND_FILTER_CHECK
, 0U, { 
ID_02_002_CHECK_FILTER
, ID_02_002_CHECK_FILTER, ID_02_002_CHECK_FILTER }},

94 { 
SOUND_FILTER_FLUSHING
, 0U, { 
ID_02_003_FLUSHING_FILTER
, ID_02_003_FLUSHING_FILTER, ID_02_003_FLUSHING_FILTER }},

95 { 
SOUND_FILTER_FLUSHED
, 0U, { 
ID_02_004_FLUSHED_FILTER
, ID_02_004_FLUSHED_FILTER, ID_02_004_FLUSHED_FILTER }},

98 { 
SOUND_SMART_DIAG_START
, 0U, { 
ID_02_005_START_SMART_CHECK
, ID_02_005_START_SMART_CHECK, ID_02_005_START_SMART_CHECK }},

99 { 
SOUND_SMART_DIAG_NO_ERR_DONE
,0U, { 
ID_02_006_DONE_SMART_CHECK
, ID_02_006_DONE_SMART_CHECK, ID_02_006_DONE_SMART_CHECK }},

100 { 
SOUND_SMART_DIAG_ERR_DONE
, 0U, { 
ID_02_007_ERR_SMART_CHECK
, ID_02_007_ERR_SMART_CHECK, ID_02_007_ERR_SMART_CHECK }},

105 { 
SOUND_WIFI_CONNECTING
, 0U, { 
ID_03_004_WIFI_CONNECTING
, ID_03_004_WIFI_CONNECTING, ID_03_004_WIFI_CONNECTING }},

106 { 
SOUND_WIFI_CONNECTED_FIRST
, 0U, { 
ID_03_005_WIFI_CONNECTED
, ID_03_005_WIFI_CONNECTED, ID_03_005_WIFI_CONNECTED }},

107 { 
SOUND_WIFI_CONNECTED
, 0U, { 
ID_03_005_x_WIFI_CONNECTED
, ID_03_005_x_WIFI_CONNECTED, ID_03_005_x_WIFI_CONNECTED }},

108 { 
SOUND_WIFI_FAIL_CONNECTING
, 0U, { 
ID_B_010_WIFI_FAIL_CONNECTING
, ID_B_010_WIFI_FAIL_CONNECTING, ID_B_010_WIFI_FAIL_CONNECTING }},

109 { 
SOUND_WIFI_DISCONNECTED
, 0U, { 
ID_03_008_WIFI_DISCONN
, ID_03_008_WIFI_DISCONN, ID_03_008_WIFI_DISCONN }},

112 { 
SOUND_SETUP_FLUSHING_GUIDE
, 0U, { 
ID_03_009_01_READY_FLUSH_SETUP
, ID_03_009_01_READY_FLUSH_SETUP, ID_03_009_01_READY_FLUSH_SETUP }},

113 { 
SOUND_SETUP_FLUSHING
, 0U, { 
ID_03_010_FLUSHING_STEUP
, ID_03_010_FLUSHING_STEUP, ID_03_010_FLUSHING_STEUP }},

114 { 
SOUND_SETUP_FLUSHED
, 0U, { 
ID_03_011_01_FLUSHED_SETUP
, ID_03_011_01_FLUSHED_SETUP, ID_03_011_01_FLUSHED_SETUP }},

117 { 
SOUND_BLE_START_CONNECTING
, 0U, { 
ID_03_012_BLE_CONNECTING
, ID_03_012_BLE_CONNECTING, ID_03_012_BLE_CONNECTING }},

118 { 
SOUND_BLE_CONNTED
, 0U, { 
ID_03_013_BLE_CONNECTED
, ID_03_013_BLE_CONNECTED, ID_03_013_BLE_CONNECTED }},

119 { 
SOUND_BLE_FAIL
, 0U, { 
ID_03_014_BLE_FAIL_CONNECTING
, ID_03_014_BLE_FAIL_CONNECTING, ID_03_014_BLE_FAIL_CONNECTING }},

122 { 
SOUND_STER_START
, 30U, { 
ID_06_017_STER_START
, ID_06_017_STER_START, ID_06_017_STER_START }},

123 { 
SOUND_STER_RINSE
, 30U, { 
ID_06_018_STER_GOING
, ID_06_018_STER_GOING, ID_06_018_STER_GOING, }},

124 { 
SOUND_STER_DONE
, 30U, { 
ID_06_019_STER_DONE
, ID_06_019_STER_DONE, ID_06_019_STER_DONE, }},

127 { 
SOUND_HOT_OUT_USER
, 0U, { 
ID_NONE
, 
ID_EFFLUENT
, 
ID_07_001_HOT_OUT_USER
 }},

128 { 
SOUND_HOT_OUT_USER_OUT
, 0U, { 
ID_NONE
, ID_NONE, 
ID_04_001_HOT_OUT
 }},

129 { 
SOUND_HOT_OUT
, 0U, { 
ID_NONE
, 
ID_EFFLUENT
, 
ID_04_001_HOT_OUT
 }},

134 { 
SOUND_ALARM_COVER_OPEN_FRONT
,0U, { 
ID_01_001_OPEN_FRONT
, ID_01_001_OPEN_FRONT, ID_01_001_OPEN_FRONT }},

135 { 
SOUND_ALARM_LOCK_HOT
, 0U, { 
ID_05_002_LOCK_HOT_OUT
, ID_05_002_LOCK_HOT_OUT, ID_05_002_LOCK_HOT_OUT }},

136 { 
SOUND_ALARM_COLD_OFF
, 0U, { 
ID_05_003_OFF_COLD
, ID_05_003_OFF_COLD, ID_05_003_OFF_COLD }},

137 { 
SOUND_ALARM_LOCK_ALL
, 0U, { 
ID_05_004_LOCK_ALL
, ID_05_004_LOCK_ALL, ID_05_004_LOCK_ALL }},

138 { 
SOUND_ALARM_ICE
, 0U, { 
ID_05_005_PREPARING_ICE
, ID_05_005_PREPARING_ICE, ID_05_005_PREPARING_ICE }},

139 { 
SOUND_ALARM_ICE_OUT
, 30U, { 
ID_05_006_ALARAM_ICE_OUT
, ID_05_006_ALARAM_ICE_OUT, ID_05_006_ALARAM_ICE_OUT }},

140 { 
SOUND_ALARM_ICE_LOCK
, 0U, { 
ID_05_007_LOCK_ICE
, ID_05_007_LOCK_ICE, ID_05_007_LOCK_ICE }},

141 { 
SOUND_ALARM_ICE_OFF
, 0U, { 
ID_05_008_OFF_ICE
, ID_05_008_OFF_ICE, ID_05_008_OFF_ICE }},

142 { 
SOUND_ALARM_SLEEP_TIME
, 0U, { 
ID_05_009_ALARM_ON_SLEEP
, ID_05_009_ALARM_ON_SLEEP, ID_05_009_ALARM_ON_SLEEP }},

143 { 
SOUND_ALARM_SLEEP_NO_ICE
, 0U, { 
ID_B_019_01_ON_SLEEP
, ID_B_019_01_ON_SLEEP, ID_B_019_01_ON_SLEEP }},

147 { 
SOUND_LOCK_HOT
, 0U, { 
ID_NONE
, 
ID_SETUP
, 
ID_06_001_LOCK_HOT
 }},

148 { 
SOUND_UNLOCK_HOT
, 0U, { 
ID_NONE
, 
ID_CANCEL
, 
ID_06_002_UNLOCK_HOT
 }},

149 { 
SOUND_LOCK_ALL
, 0U, { 
ID_NONE
, 
ID_SETUP
, 
ID_06_003_LOCK_ALL
 }},

150 { 
SOUND_UNLOCK_ALL
, 0U, { 
ID_NONE
, 
ID_CANCEL
, 
ID_06_005_UNLOCK_ALL
 }},

153 { 
SOUND_SETTING_VOICE
, 30U, { 
ID_06_006_SOUND_VOICE
, ID_06_006_SOUND_VOICE, ID_06_006_SOUND_VOICE }},

154 { 
SOUND_SETTING_EFFECT
, 30U, { 
ID_06_007_SOUND_EFFECT
, ID_06_007_SOUND_EFFECT, ID_06_007_SOUND_EFFECT }},

155 { 
SOUND_SETTING_MUTE
, 30U, { 
ID_06_008_SOUND_MUTE
, ID_06_008_SOUND_MUTE, ID_06_008_SOUND_MUTE }},

157 { 
SOUND_CANCEL_COLD
, 0U, { 
ID_NONE
, 
ID_CANCEL
, 
ID_06_009_OFF_COLD
 }},

158 { 
SOUND_SETUP_COLD
, 0U, { 
ID_NONE
, 
ID_SETUP
, 
ID_06_010_02_OFF_COLD
 }},

160 { 
SOUND_LOCK_ICE
, 0U, { 
ID_NONE
, 
ID_SETUP
, 
ID_06_011_LOCK_ICE
 }},

161 { 
SOUND_UNLOCK_ICE
, 0U, { 
ID_NONE
, 
ID_CANCEL
, 
ID_06_012_UNLOCK_ICE
 }},

162 { 
SOUND_CANCEL_ICE
, 0U, { 
ID_NONE
, 
ID_CANCEL
, 
ID_06_014_OFF_ICE
 }},

163 { 
SOUND_SETUP_ICE
, 0U, { 
ID_NONE
, 
ID_SETUP
, 
ID_06_013_ON_ICE
 }},

164 { 
SOUND_CANCEL_SLEEP
, 0U, { 
ID_NONE
, 
ID_CANCEL
, 
ID_06_016_OFF_SLEEP
 }},

165 { 
SOUND_SETUP_SLEEP
, 0U, { 
ID_NONE
, 
ID_SETUP
, 
ID_06_015_ON_SLEEP
 }},

166 { 
SOUND_SETUP_MY_AMOUNT
, 0U, { 
ID_NONE
, 
ID_SETUP
, 
ID_06_021_MY_AMOUNT
 }},

167 { 
SOUND_SETTING_MENU
, 5U, { 
ID_NONE
, 
ID_SELECT
, 
ID_07_003_SETTING
 }},

171 { 
SOUND_EFFLUENT_CONTINUE
, 0U, { 
ID_NONE
, 
ID_EFFLUENT_CONTINUE
, ID_EFFLUENT_CONTINUE }},

172 { 
SOUND_EFFLUENT
, 0U, { 
ID_NONE
, 
ID_EFFLUENT
, ID_EFFLUENT }},

173 { 
SOUND_EFFLUENT_END
, 0U, { 
ID_NONE
, 
ID_EFFLUENT_END
, ID_EFFLUENT_END }},

176 { 
SOUND_SELECT
, 0U, { 
ID_NONE
, 
ID_SELECT
, ID_SELECT }},

177 { 
SOUND_ERROR
, 0U, { 
ID_NONE
, 
ID_SELECT_ERROR
, ID_SELECT_ERROR }},

178 { 
SOUND_SETUP
, 0U, { 
ID_NONE
, 
ID_SETUP
, ID_SETUP }},

179 { 
SOUND_CANCEL
, 0U, { 
ID_NONE
, 
ID_CANCEL
, ID_CANCEL }},

187 { 
SOUND_POWER_ON
, 50U, { 
ID_LOGO
, ID_LOGO, ID_LOGO }},

188 { 
SOUND_EOL
, 50U, { 
ID_TEST_MODE_EOL
, ID_TEST_MODE_EOL, ID_TEST_MODE_EOL }},

195 
	#SZ_LIST
 ( –
SoundLi°
 ) / –
SoundLi°_T
 ) )

	)

197 
	$Sound
(
SoundId_T
 
mId
)

199 
U8
 
i
;

200 
U8
 
mVoi˚Index
;

201 c⁄° 
SoundLi°_T
 *
pLi°
 = 
NULL
;

203 if–
sound
.
HﬁdTime
 != 0 )

208 
mVoi˚Index
 = 
	`SëMöMax8
–
	`GëVoi˚Levñ
(), 
MIN_VOICE_LEVEL
, 
MAX_VOICE_LEVEL
 );

209 
mVoi˚Index
 = mVoiceIndex - 1U ;

210  
i
 = 0; i < 
SZ_LIST
 ; i++ )

212 
pLi°
 = &
SoundLi°
[ 
i
 ];

213 if–
pLi°
->
SoundId
 =
mId
 )

215 #i‡
CONFIG_BUZZER


216 
	`SëBuzzOut
–
pLi°
->
BuzzîId
 );

218 if–
pLi°
->
Voi˚Id
[ 
mVoi˚Index
 ] !
ID_NONE
 )

220 
	`PœyVoi˚
–
pLi°
->
Voi˚Id
[ 
mVoi˚Index
 ] );

221 
sound
.
HﬁdTime
 = 
pLi°
->
C⁄fHﬁdTime
;

228 
	}
}

230 
U8
 
	$IsSëSoundMuã
()

232 #i‡
CONFIG_BUZZER


233  
	`IsSëSûít
();

235  
FALSE
;

237 
	}
}

239 
	$SëSoundMuã
()

241 
sound
.
Muã
 = 
ON
;

242 
	`SaveEïromId
–
EEP_ID_CONF_MUTE
 );

244 #i‡
CONFIG_BUZZER


245 
	`SëOnOffSûít
–
ON
 );

247 
	}
}

249 
U8
 
	$GëSoundMuã
()

251  
sound
.
Muã
;

252 
	}
}

254 
	$CÀ¨SoundMuã
()

256 
sound
.
Muã
 = 
OFF
;

257 
	`SaveEïromId
–
EEP_ID_CONF_MUTE
 );

259 #i‡
CONFIG_BUZZER


260 
	`SëOnOffSûít
–
OFF
 );

262 
	}
}

265 
	$Upd©eSoundTimî
()

267 if–
sound
.
HﬁdTime
 != 0 )

269 
sound
.
HﬁdTime
--;

272 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\sound.h

1 #i‚de‡
__SOUND_H__


2 
	#__SOUND_H__


	)

4 
	~"¥j_ty≥.h
"

10 
	mSOUND_COVER_OPEN_FRONT
,

11 
	mSOUND_COVER_OPEN_TOP
,

12 
	mSOUND_COVER_CLOSE_TOP
,

13 
	mSOUND_ERROR_COLD
,

14 
	mSOUND_ERROR_HOT
,

15 
	mSOUND_ERROR_ICE
,

16 
	mSOUND_ERROR_OUTAGE
,

17 
	mSOUND_ERROR_LEAK
,

21 
	mSOUND_FILTER_FLUSHING_READY
,

22 
	mSOUND_FILTER_CHECK
,

23 
	mSOUND_FILTER_FLUSHING
,

24 
	mSOUND_FILTER_FLUSHED
,

26 
	mSOUND_SMART_DIAG_START
,

27 
	mSOUND_SMART_DIAG_NO_ERR_DONE
,

28 
	mSOUND_SMART_DIAG_ERR_DONE
,

32 
	mSOUND_HOT_OUT
,

34 
	mSOUND_WIFI_CONNECTING
,

35 
	mSOUND_WIFI_CONNECTED_FIRST
,

36 
	mSOUND_WIFI_CONNECTED
,

37 
	mSOUND_WIFI_FAIL_CONNECTING
,

38 
	mSOUND_WIFI_DISCONNECTED
,

40 
	mSOUND_SETUP_FLUSHING_GUIDE
,

41 
	mSOUND_SETUP_FLUSHING
,

42 
	mSOUND_SETUP_FLUSHED
,

44 
	mSOUND_BLE_START_CONNECTING
,

45 
	mSOUND_BLE_CONNTED
,

46 
	mSOUND_BLE_FAIL
,

48 
	mSOUND_STER_START
,

49 
	mSOUND_STER_RINSE
,

50 
	mSOUND_STER_DONE
,

55 
	mSOUND_ALARM_COVER_OPEN_FRONT
,

56 
	mSOUND_ALARM_LOCK_HOT
,

57 
	mSOUND_ALARM_COLD_OFF
,

58 
	mSOUND_ALARM_LOCK_ALL
,

59 
	mSOUND_ALARM_ICE
,

60 
	mSOUND_ALARM_ICE_OUT
,

61 
	mSOUND_ALARM_ICE_LOCK
,

62 
	mSOUND_ALARM_ICE_OFF
,

63 
	mSOUND_ALARM_SLEEP_TIME
,

64 
	mSOUND_ALARM_SLEEP_NO_ICE
,

68 
	mSOUND_LOCK_HOT
,

69 
	mSOUND_UNLOCK_HOT
,

70 
	mSOUND_LOCK_ALL
,

71 
	mSOUND_UNLOCK_ALL
,

73 
	mSOUND_SETTING_MUTE
,

74 
	mSOUND_SETTING_EFFECT
,

75 
	mSOUND_SETTING_VOICE
,

77 
	mSOUND_CANCEL_COLD
 ,

78 
	mSOUND_SETUP_COLD
 ,

80 
	mSOUND_LOCK_ICE
,

81 
	mSOUND_UNLOCK_ICE
,

83 
	mSOUND_CANCEL_ICE
 ,

84 
	mSOUND_SETUP_ICE
 ,

85 
	mSOUND_CANCEL_SLEEP
 ,

86 
	mSOUND_SETUP_SLEEP
 ,

87 
	mSOUND_SETUP_MY_AMOUNT
 ,

91 
	mSOUND_HOT_OUT_USER
,

92 
	mSOUND_HOT_OUT_USER_OUT
,

93 
	mSOUND_SETTING_MENU
,

97 
	mSOUND_EFFLUENT_CONTINUE
,

98 
	mSOUND_EFFLUENT
,

99 
	mSOUND_EFFLUENT_END
,

101 
	mSOUND_SELECT
,

102 
	mSOUND_ERROR
,

103 
	mSOUND_SETUP
,

104 
	mSOUND_CANCEL
,

106 
	mSOUND_MEMENTO_1
,

107 
	mSOUND_MEMENTO_2
,

108 
	mSOUND_MEMENTO_3
,

109 
	mSOUND_MEMENTO_4
,

110 
	mSOUND_MEMENTO_5
,

112 
	mSOUND_POWER_ON
,

113 
	mSOUND_EOL
,

115 
	mSOUND_NONE
,

116 
	mMAX_SOUND_NUM


117 }
	tSoundId_T
;

119 
InôSound
();

122 
U8
 
IsSëSoundMuã
();

125 
SëSoundMuã
();

126 
U8
 
GëSoundMuã
();

129 
CÀ¨SoundMuã
();

132 
Sound
(
SoundId_T
 
mId
);

134 
Upd©eSoundTimî
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\voice.c

1 
	~"voi˚.h
"

2 
	~"timî.h
"

3 
	~"ì¥om.h
"

14 
	s_voi˚_


16 
U8
 
	mLevñ
;

17 
U8
 
	mVﬁume
;

18 
Voi˚Id_T
 
	mId
;

19 } 
	tVoi˚_T
;

21 
Voi˚_T
 
	gVoi˚
;

24 
	$InôVoi˚
()

26 
Voi˚
.
Levñ
 = 
DEFAULT_VOICE_LEVEL
;

27 
Voi˚
.
Vﬁume
 = 
DEFAULT_VOICE_VOLUME
;

28 
Voi˚
.
Id
 = 
ID_NONE
;

29 
	}
}

31 
	$SëVoi˚Levñ
(
U8
 
mu8Levñ
 )

33 
Voi˚
.
Levñ
 = 
mu8Levñ
;

35 
	`SaveEïromId
–
EEP_ID_VOICE_LEVEL
 );

36 
	}
}

39 
U8
 
	$GëVoi˚Levñ
()

41  
Voi˚
.
Levñ
;

42 
	}
}

45 
	$PœyVoi˚
(
Voi˚Id_T
 
id
)

47 
Voi˚
.
Id
 = 
id
;

48 
	}
}

50 
Voi˚Id_T
 
	$GëVoi˚PœyId
()

52  
Voi˚
.
Id
;

53 
	}
}

56 
	$SëVoi˚Vﬁume
(
U8
 
mu8Vﬁ
)

58 
Voi˚
.
Vﬁume
 = 
mu8Vﬁ
;

59 
	`SaveEïromId
–
EEP_ID_VOICE_VOLUME
 );

60 
	}
}

62 
U8
 
	$GëVoi˚Vﬁume
()

64  
Voi˚
.
Vﬁume
;

65 
	}
}

67 
	$VﬁumeUp
()

69 if–
Voi˚
.
Vﬁume
 < 
MAX_VOICE_VOLUME
 )

71 
Voi˚
.
Vﬁume
++;

72 
	`SaveEïromId
–
EEP_ID_VOICE_VOLUME
 );

74 
	}
}

76 
	$VﬁumeDown
()

78 if–
Voi˚
.
Vﬁume
 > 
MIN_VOICE_VOLUME
 )

80 
Voi˚
.
Vﬁume
--;

81 
	`SaveEïromId
–
EEP_ID_VOICE_VOLUME
 );

83 
	}
}

85 
U8
 
	$IsVoi˚MaxVﬁ
–
Voi˚Id_T
 
mId
 )

87 if–
mId
 =
ID_TEST_MODE_EOL


88 || 
mId
 =
ID_LOGO
 )

90  
TRUE
;

93  
FALSE
;

94 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\voice.h

1 #i‚de‡
__VOICE_H__


2 
	#__VOICE_H__


	)

4 
	~"¥j_ty≥.h
"

10 
	mID_ALARAM_COVER_OPEN_TOP
 = 15,

15 
	mID_COVER_OPEN_BOTTOM
 = 48,

16 
	mID_COVER_OPEN_TOP
,

17 
	mID_COVER_OPEN_FRONT
,

18 
	mID_COVER_OPEN_SIDE
,

20 
	mID_ERROR_COLD
 = 52,

21 
	mID_ERROR_COLD_FILTER
,

22 
	mID_ERROR_HOT
,

23 
	mID_ERROR_OUTAGE
,

24 
	mID_ERROR_LEAK
,

25 
	mID_ERROR_SENSOR_CUP
,

28 
	mID_FILTER_FLUSHING_READY
 = 58,

29 
	m_ID_FILTER_CHECK
,

30 
	mID_FILTER_CHECK
 = 115,

31 
	mID_FILTER_FLUSHING
 = 60,

32 
	mID_FILTER_FLUSHED
,

34 
	m_ID_SMART_DIAG_ERROR
,

36 
	mID_HOT_PREHEATING
,

38 
	mID_WIFI_CONNECTING
 = 64,

39 
	mID_WIFI_CONNECTED
,

40 
	mID_WIFI_FAIL_CONNECTING
,

41 
	m__ID_WIFI_CONNECTING
,

42 
	m__ID_WIFI_CONNECTED
,

43 
	mID_WIFI_DISCONNECTED
,

46 
	mID_SETUP_FLUSHING_GUIDE
 = 70,

47 
	mID_SETUP_FLUSHING
,

48 
	mID_SETUP_FLUSHED
,

51 
	mID_BLE_START_CONNECTING
 = 73,

52 
	mID_BLE_CONNTED
,

53 
	mID_BLE_FAIL
,

55 
	mID_HOT_CAREFUL
 = 76,

56 
	m_ID_HOT_CAREFUL
,

59 
	m__ID_COVER_OPEN_BOTTOM
 = 78,

60 
	m__ID_COVER_OPEN_TOP
,

61 
	m__ID_COVER_OPEN_FRONT
,

62 
	m__ID_COVER_OPEN_SIDE
,

65 
	mID_ALARM_LOCK_HOT
 = 82,

66 
	mID_ALARM_COLD_OFF
,

67 
	mID_ALARM_LOCK_ALL
,

68 
	mID_ALARM_LOCK_ALL_COMBI
,

70 
	mID_WATER_PREPARING
 = 86,

71 
	mID_WATER_READY
,

72 
	mID_WATER_STER
,

74 
	mID_LOCK_HOT
 = 89,

75 
	mID_UNLOCK_HOT
,

76 
	mID_LOCK_ALL
,

77 
	m_ID_LOCK_ALL
,

78 
	mID_UNLOCK
,

80 
	mID_SOUND_VOICE
 = 94,

81 
	mID_SOUND_EFFECT
,

82 
	mID_SOUND_MUTE
,

84 
	mID_CANCEL_COLD
 = 97,

85 
	mID_SETUP_COLD
,

86 
	mID_SETTING
,

88 
	mID_EFFLUENT_CONTINUE
 = 100,

89 
	mID_EFFLUENT
,

90 
	mID_EFFLUENT_END
,

91 
	mID_LOGO
,

92 
	mID_SELECT
,

93 
	mID_SELECT_ERROR
,

94 
	mID_SETUP
,

95 
	mID_CANCEL
,

97 
	mID_TEST_MODE_EOL
 = 109,

100 
	mID_B026_1_HOT_OUT
 = 135,

101 
	mID_B026_2_HOT_OUT
,

102 
	mID_B009_1_HOT_NO_WARM
,

105 
	mID_01_001_OPEN_FRONT
 = 150,

106 
	mID_01_002_01_OPEN_ICE_TANK
,

107 
	mID_01_003_01_CLOSE_ICE_TANK
,

109 
	mID_B_003_ERR_COLD
,

110 
	mID_B_004_ERR_HOT
,

111 
	mID_B_005_ERR_ICE
,

112 
	mID_B_006_ERR_OUTAGE
,

113 
	mID_B_007_ERR_LEAK
,

115 
	mID_02_001_READY_FLUSH_FILTER
,

116 
	mID_02_002_CHECK_FILTER
,

117 
	mID_02_003_FLUSHING_FILTER
,

118 
	mID_02_004_FLUSHED_FILTER
,

120 
	mID_02_005_START_SMART_CHECK
,

121 
	mID_02_006_DONE_SMART_CHECK
,

122 
	mID_02_007_ERR_SMART_CHECK
,

124 
	mID_03_004_WIFI_CONNECTING
,

125 
	mID_03_005_WIFI_CONNECTED
,

126 
	mID_B_010_WIFI_FAIL_CONNECTING
,

127 
	mID_03_005_x_WIFI_CONNECTED
,

128 
	mID_03_008_WIFI_DISCONN
,

130 
	mID_03_009_01_READY_FLUSH_SETUP
,

131 
	mID_03_010_FLUSHING_STEUP
,

132 
	mID_03_011_01_FLUSHED_SETUP
,

134 
	mID_03_012_BLE_CONNECTING
,

135 
	mID_03_013_BLE_CONNECTED
,

136 
	mID_03_014_BLE_FAIL_CONNECTING
,

138 
	mID_06_017_STER_START
,

139 
	mID_06_018_STER_GOING
,

140 
	mID_06_019_STER_DONE
,

141 
	mID_07_001_HOT_OUT_USER
,

142 
	mID_04_001_HOT_OUT
,

143 
	mID_05_002_LOCK_HOT_OUT
,

144 
	mID_05_003_OFF_COLD
,

145 
	mID_05_004_LOCK_ALL
,

146 
	mID_05_005_PREPARING_ICE
,

147 
	mID_05_006_ALARAM_ICE_OUT
,

148 
	mID_05_007_LOCK_ICE
,

149 
	mID_05_008_OFF_ICE
,

150 
	mID_05_009_ALARM_ON_SLEEP
,

151 
	mID_B_019_01_ON_SLEEP
,

152 
	mID_06_001_LOCK_HOT
,

153 
	mID_06_002_UNLOCK_HOT
,

154 
	mID_06_003_LOCK_ALL
,

156 
	mID_06_005_UNLOCK_ALL
 = 194,

157 
	mID_06_006_SOUND_VOICE
,

158 
	mID_06_007_SOUND_EFFECT
,

159 
	mID_06_008_SOUND_MUTE
,

161 
	mID_06_009_OFF_COLD
,

162 
	mID_06_010_02_OFF_COLD
,

163 
	mID_06_011_LOCK_ICE
,

164 
	mID_06_012_UNLOCK_ICE
,

165 
	mID_06_013_ON_ICE
,

166 
	mID_06_014_OFF_ICE
,

167 
	mID_06_015_ON_SLEEP
,

168 
	mID_06_016_OFF_SLEEP
,

169 
	mID_06_021_MY_AMOUNT
,

170 
	mID_07_003_SETTING
,

172 
	mID_NONE
 = 255

174 } 
	tVoi˚Id_T
;

177 
InôVoi˚
();

181 
	#VOICE_LEVEL_OFF
 1

182 
	#VOICE_LEVEL_BEEP
 2

183 
	#VOICE_LEVEL_VOICE_BEEP
 3

184 
	#MIN_VOICE_LEVEL
 
VOICE_LEVEL_OFF


	)

185 
	#MAX_VOICE_LEVEL
 
VOICE_LEVEL_VOICE_BEEP


	)

186 
	#DEFAULT_VOICE_LEVEL
 
VOICE_LEVEL_VOICE_BEEP


	)

188 
SëVoi˚Levñ
(
U8
 
mu8Levñ
);

189 
U8
 
GëVoi˚Levñ
();

191 
PœyVoi˚
(
Voi˚Id_T
 
id
);

193 
Voi˚Id_T
 
GëVoi˚PœyId
();

196 
	#VOICE_VOLUME_1
 1

197 
	#VOICE_VOLUME_2
 2

198 
	#VOICE_VOLUME_3
 3

199 
	#VOICE_VOLUME_4
 4

200 
	#VOICE_VOLUME_5
 5

201 
	#MIN_VOICE_VOLUME
 
VOICE_VOLUME_1


	)

202 
	#MAX_VOICE_VOLUME
 
VOICE_VOLUME_5


	)

204 
	#DEFAULT_VOICE_VOLUME
 
VOICE_VOLUME_3


	)

205 
SëVoi˚Vﬁume
(
U8
 
mu8Vﬁ
);

206 
U8
 
GëVoi˚Vﬁume
();

207 
VﬁumeUp
();

208 
VﬁumeDown
();

210 
U8
 
IsVoi˚MaxVﬁ
–
Voi˚Id_T
 
mId
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\time_short\time_short.c

1 
	~"time_sh‹t.h
"

3 
	~"comp.h
"

4 
	~"Àvñ.h
"

5 
	~"powî_ßvög.h
"

6 
	~"i˚_do‹.h
"

7 
	~"£rvi˚.h
"

8 
	~"w©î_out.h
"

9 
	~"cﬁd_w©î.h
"

10 
	~"i˚_makî.h
"

11 
	~"timî.h
"

12 
	~"¥o˚ss_di•œy.h
"

13 
	~"hó…h.h
"

14 
	~"Êush_w©î_out.h
"

27 
	#DEFAULT_LIMIT_TIME_VALUE
 30U

	)

28 
	#DEFAULT_TEST_TIME_VALUE
 7200U

	)

31 
	s_time_sh‹t_


33 
U8
 
	mSètus
;

34 
U16
 
	mLimôTimî
;

35 
U16
 
	mTe°Timî
;

36 } 
	tTimeSh‹t_T
;

38 
TimeSh‹t_T
 
	gts
;

41 
	$InôTimeSh‹t
()

43 
ts
.
Sètus
 = 
FALSE
;

44 
ts
.
LimôTimî
 = 
DEFAULT_LIMIT_TIME_VALUE
;

45 
ts
.
Te°Timî
 = 
DEFAULT_TEST_TIME_VALUE
;

46 
	}
}

48 
	$SèπTimeSh‹t
()

50 
ts
.
Sètus
 = 
TRUE
;

51 
	}
}

53 
	$St›TimeSh‹t
()

55 
ts
.
Sètus
 = 
FALSE
;

56 
	}
}

58 
U8
 
	$IsExpúedTimeSh‹tLimôTimî
()

60 if–
ts
.
LimôTimî
 != 0 )

62  
FALSE
;

64  
TRUE
;

65 
	}
}

67 
U8
 
	$GëTimeSh‹tSètus
()

69  
ts
.
Sètus
;

70 
	}
}

72 
	$SëTimeSh‹tTe°Timî
(
U16
 
mu16Time
)

74 
ts
.
Te°Timî
 = 
mu16Time
;

75 
	}
}

77 
U16
 
	$GëTimeSh‹tTe°Timî
()

79  
ts
.
Te°Timî
;

80 
	}
}

83 
	$Upd©eTimeSh‹tTimî
()

85 if–
	`IsD⁄eFlushInôSëup
(Ë=
FALSE
 )

90 if–
ts
.
LimôTimî
 != 0 )

92 
ts
.
LimôTimî
--;

94 if–
ts
.
Te°Timî
 != 0 )

96 
ts
.
Te°Timî
--;

98 
	}
}

100 
	$Sèπ
()

107 
	`SëT™kC⁄fDëe˘Time
–
LEVEL_ID_DRAIN
, 10 );

108 
	`SëW©îOutC⁄fInföôyTimeOut
–
INFINITY_10MIN_TIMEOUT
 );

114 
	`St›DummyDeIcög
();

117 
	`SëCompPrŸe˘OffTime
( 0 );

120 #i‡!
CONFIG_STER


123 
	`SëHó…hC⁄fDøöW©î
( 600UL, 60UL, 120UL, 3 );

125 
	}
}

127 
	$Ru¬ög
()

131 if–
	`GëSavögC⁄fTimîSÀï
() > 1 )

133 
	`SëSavögC⁄fTimîSÀï
( 1 );

136 if–
	`GëSavögC⁄fTimîWakeUp
() > 1 )

138 
	`SëSavögC⁄fTimîWakeUp
( 1 );

144 if–
	`GëW©îOutAmoutTy≥
(Ë=
FIXED_AMOUNT_INFINITY
 )

146 
	`SëW©îOutFixedAmoutT¨gëTime
( 60000UL );

150 if–
	`GëHŸW©îUnu£dOnTime
() > 60 )

152 
	`SëHŸW©îUnu£dOnTime
( 60 );

157 if–
	`GëI˚Do‹C⁄fClo£dTime
() > 60 )

159 
	`SëI˚Do‹C⁄fClo£dTime
( 60 );

164 if–
	`GëSîvi˚Time
() > 1 )

166 
	`SëSîvi˚Time
( 1 );

167 
	`SèπTimî
–
TIMER_ID_1MIN
, 
	`SEC
(60) );

171 if–
	`GëCﬁdW©îFìdTime
() > 1 )

173 
	`SëCﬁdW©îFìdTime
( 1 );

177 if–
	`GëRoomW©îFìdTime
() > 1 )

179 
	`SëRoomW©îFìdTime
( 1 );

182 
	}
}

184 
	$St›
()

190 
	`InôT™kC⁄fDëe˘Time
();

192 
	`SëW©îOutC⁄fInföôyTimeOut
–
INFINITY_3MIN_TIMEOUT
 );

196 
	`SëSavögC⁄fTimîSÀï
–
DEFAULT_SLEEP_TIMER
 );

197 
	`SëSavögC⁄fTimîWakeUp
–
DEFAULT_WAKE_UP_TIMER
 );

202 
	`SëHŸW©îUnu£dOnTime
–
UNUSED_SAVING_ON_6HOUR
 );

206 
	`SëI˚Do‹C⁄fClo£dTime
–
ICE_CLOSE_TIME
 );

210 
	`SëSîvi˚Time
–
SERVICE_TIME_MIN
 );

213 
	`SëRoomEºCou¡Limô
–
DEFAULT_ROOM_ERR_COUNT
 );

215 
	}
}

217 
	$Pro˚ssTimeSh‹t
()

219 
U8
 
mu8InôSèπ
 = 
FALSE
;

220 
U8
 
mu8InôSt›
 = 
TRUE
;

224 if–
mu8InôSèπ
 =
FALSE
 && 
ts
.
Sètus
 =
TRUE
 )

226 
mu8InôSèπ
 = 
TRUE
;

227 
mu8InôSt›
 = 
FALSE
;

228 
	`Sèπ
();

229 
	`SëVîsi⁄Di•
(0);

233 if–
mu8InôSt›
 =
FALSE
 && 
ts
.
Sètus
 == FALSE )

235 
mu8InôSt›
 = 
TRUE
;

236 
	`St›
();

240 if–
ts
.
Sètus
 =
FALSE
 )

246 if–
ts
.
Te°Timî
 == 0 )

248 
ts
.
Sètus
 = 
FALSE
;

251 
	`Ru¬ög
();

252 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\time_short\time_short.h

1 #i‚de‡
__TIME_SHORT_H__


2 
	#__TIME_SHORT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôTimeSh‹t
();

8 
SèπTimeSh‹t
();

9 
St›TimeSh‹t
();

10 
U8
 
IsExpúedTimeSh‹tLimôTimî
();

11 
U8
 
GëTimeSh‹tSètus
();

13 
SëTimeSh‹tTe°Timî
(
U16
 
mu16Time
);

14 
U16
 
GëTimeSh‹tTe°Timî
();

17 
Upd©eTimeSh‹tTimî
();

18 
Pro˚ssTimeSh‹t
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\timer\timer.c

2 
	~"hw.h
"

3 
	~"timî.h
"

5 
	~<°rög.h
>

10 #¥agm®
öãºu±
 
Ba£TimîI¡îru±
(
ve˘
=
INTTM00
)

13 
	#HZ
 (1UL)

	)

15 
	s_timî_


17 
U8
 
	míabÀ
;

18 
U8
 
	mty≥
;

19 
U32
 
	mtime_out
;

20 } 
	ttimî_öfo_t
;

22 
LOCAL
 
timî_öfo_t
 
	gtimî_öfo
[ 
MAX_TIMER_ID_NUM
 ];

24 (*
pFunU£rISR
)(Ë
NULL
 ;

27 
	$InôTimî
( )

29 
	`MEMSET
–(
__FAR
 *)
timî_öfo
, 0, (Åimer_info) );

31 
	`R_C⁄fig_TAU0_0_Sèπ
();

32 
	}
}

35 
	$SèπTimî
–
U8
 
id
, 
U32
 
time_out
 )

37 
	`INTS_BYTE_BASE_TIMER
();

39 
	`ENTER_CRITICAL_SECTION_TIMER
();

41 
timî_öfo
[ 
id
 ].
íabÀ
 = 1;

42 
timî_öfo
[ 
id
 ].
time_out
 =Åime_ouà/ 
HZ
;

43 #i‡(
HZ
 != 1UL)

44 if–(
time_out
 % 
HZ
Ë>(
U32
)5 )

46 
timî_öfo
[ 
id
 ].
time_out
++;

50 
	`EXIT_CRITICAL_SECTION_TIMER
();

52 
	}
}

54 
	$DißbÀTimî
–
U8
 
id
 )

56 
timî_öfo
[ 
id
 ].
íabÀ
 = 0;

57 
timî_öfo
[ 
id
 ].
time_out
 = (
U32
)-1;

58 
	}
}

60 
	$St›Timî
–
U8
 
id
 )

62 
	`DißbÀTimî
–
id
 );

63 
	}
}

66 
U8
 
	$IsExpúedTimî
–
U8
 
id
 )

68 
U32
 
time_out
;

69 
	`INTS_BYTE_BASE_TIMER
();

72 
	`ENTER_CRITICAL_SECTION_TIMER
();

73 
time_out
 = 
timî_öfo
[ 
id
 ].time_out;

74 
	`EXIT_CRITICAL_SECTION_TIMER
();

76 if–
timî_öfo
[ 
id
 ].
íabÀ
 == 0 )

78  
TIMER_DISABLE
;

81 if–
time_out
 > 0 )

83  
TIMER_NOT_EXPIRE
;

86  
TIMER_EXPIRE
;

87 
	}
}

90 
	$Upd©eTimî
( )

92 
U8
 
i
;

94  
i
 = 0 ; i < 
MAX_TIMER_ID_NUM
 ; i++ )

96 if–
timî_öfo
[ 
i
 ].
íabÀ
 == 0 )

101 if–
timî_öfo
[ 
i
 ].
time_out
 > 0 )

103 
timî_öfo
[ 
i
 ].
time_out
--;

106 
	}
}

110 
Regi°îTimîISR
–(*
pU£rISR
)() )

112 
pFunU£rISR
 = 
pU£rISR
;

113 
	}
}

116 
	$R_C⁄fig_TAU0_0_Cª©e_U£rInô
()

118 
	}
}

120 
__√¨
 
	$Ba£TimîI¡îru±
()

122 
	`Upd©eTimî
();

125 if–
pFunU£rISR
 !
NULL
 )

127 
	`pFunU£rISR
();

129 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\timer\timer.h

1 #i‚de‡
__TIMER_H__


2 
	#__TIMER_H__


	)

4 
	~"timî_id.h
"

6 
	#DELAY_MS
(
x
)

	)

7 
	#TIMER_SEC
–
x
 ) ( ( x ) * 1000UL )

	)

10 
	#INTS_BYTE_BASE_TIMER
(Ë
_öts_timî_byã


	)

11 
	#MASK_BASE_TIMER
 
TMMK00


	)

12 
	#DISABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 1; }0)

	)

13 
	#ENABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 0; }0)

	)

15 
	#ENTER_CRITICAL_SECTION_TIMER
() \

17 
_öts_timî_byã
 = 
MASK_BASE_TIMER
; \

18 
	`DISABLE_INT_MASK_BASE_TIMER
(); \

19 }0)

	)

21 
	#EXIT_CRITICAL_SECTION_TIMER
() \

23 
MASK_BASE_TIMER
 = 
_öts_timî_byã
; \

24 } 0)

	)

27 
InôTimî
( );

29 
SèπTimî
–
U8
 
id
, 
U32
 
time_out
 );

31 
DißbÀTimî
–
U8
 
id
 );

33 
St›Timî
–
U8
 
id
 );

35 
	#TIMER_EXPIRE
 0

	)

36 
	#TIMER_NOT_EXPIRE
 1

	)

37 
	#TIMER_DISABLE
 2

	)

38 
U8
 
IsExpúedTimî
–U8 
id
 );

42 
Regi°îTimîISR
–(*
pU£rISR
)() );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\timer\timer_id.h

1 #i‚de‡
__TIMER_ID_H__


2 
	#__TIMER_ID_H__


	)

7 
	mTIMER_ID_COMM_EOL_RX
,

8 
	mTIMER_ID_COMM_EOL_TX
,

10 
	mTIMER_ID_COMM_DEBUG_RX
,

11 
	mTIMER_ID_COMM_DEBUG_TX
,

13 
	mTIMER_ID_COMM_FRONT_RX
,

14 
	mTIMER_ID_COMM_FRONT_TX
,

15 
	mTIMER_ID_COMM_FRONT_RX_ERR
,

17 
	mTIMER_ID_COMM_WIFI_RX
,

18 
	mTIMER_ID_COMM_WIFI_TX
,

20 
	mTIMER_ID_COMM_COMP_RX
,

21 
	mTIMER_ID_COMM_COMP_TX
,

22 
	mTIMER_ID_COMM_COMP_RX_ERR
,

24 
	mTIMER_ID_1MS
,

25 
	mTIMER_ID_10MS
,

26 
	mTIMER_ID_100MS
,

27 
	mTIMER_ID_1SEC
,

28 
	mTIMER_ID_10SEC
,

29 
	mTIMER_ID_40SEC
,

30 
	mTIMER_ID_1MIN
,

31 
	mTIMER_ID_DEBUG
,

32 
	mTIMER_ID_FRONT
,

33 
	mTIMER_ID_COMP
,

35 
	mTIMER_ID_DRAIN_PUMP_24H
,

36 
	mTIMER_ID_CHECK_SYSTEM
,

38 
	mTIMER_ID_TEST_8585
,

39 
	mTIMER_ID_TEST_8585_2
,

40 
	mTIMER_ID_TEST_8585_ICE
,

41 
	mTIMER_ID_TEST_100MS
,

43 
	mMAX_TIMER_ID_NUM


	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\util.c

1 
	~"mcu.h
"

2 
	~"utû.h
"

3 
	~"hw.h
"

5 
I16
 
	$GëMö
–
I16
 
x
, I16 
y
 )

7 if–
x
 > 
y
 )

9  
y
;

12  
x
;

13 
	}
}

15 
I16
 
	$GëMax
–
I16
 
x
, I16 
y
 )

17 if–
x
 > 
y
 )

19  
x
;

22  
y
;

23 
	}
}

26 
U8
 
	$Hex2Dec
(
U8
 
mu8Hex
)

28 
U8
 
mu8Dec
;

30 
mu8Dec
 = (
mu8Hex
 & 0x0F);

31 
mu8Dec
 +((
mu8Hex
 & 0xF0) >> 4) * 10;;

33  
mu8Dec
;

34 
	}
}

37 
U8
 
	$Dec2Hex
(
U8
 
mu8Dec
)

39 
U8
 
mu8Hex
;

41 
mu8Hex
 = 
mu8Dec
 % 10;

42 
mu8Hex
 +(
mu8Dec
 / 10) * 16;

44  
mu8Hex
;

45 
	}
}

47 
U8
 
	$C⁄vAsc2Byã
(
U8
 
mu8Uµî
, U8 
mu8Lowî
 )

49 
U8
 
mu8Temp
 = 0;

50 
U8
 
mu8VÆ
 = 0;

54 if–
mu8Uµî
 > '9' )

56 
mu8Temp
 = 
mu8Uµî
 - '7';

60 
mu8Temp
 = 
mu8Uµî
 - '0';

62 
mu8VÆ
 = 
mu8Temp
 * 16;

65 if–
mu8Lowî
 > '9' )

67 
mu8Temp
 = 
mu8Lowî
 - '7';

71 
mu8Temp
 = 
mu8Lowî
 - '0';

73 
mu8VÆ
 +
mu8Temp
;

76  
mu8VÆ
;

77 
	}
}

79 
	$Dñay_US
–
U8
 
us
 )

81  
us
-- )

83 
	`NOP
();

84 
	`NOP
();

85 
	`NOP
();

87 
	}
}

89 
U16
 
	$ByãOrdîC⁄v
–
U16
 
_§c
 )

91 
U16
 
h_to_l
 = 
_§c
 >> 8;

92 
U16
 
l_to_h
 = ( 
_§c
 & 0x00FF ) << 8;

94  ( 
l_to_h
 | 
h_to_l
 );

95 
	}
}

97 
	$Dñay_MS
–
U16
 
ms
 )

99 
U16
 
i
;

100 
U8
 
j
;

102  
i
 = 0 ; i < 
ms
 ; i++ )

104  
j
 = 0; j < 4 ; j++ )

106 
	`Dñay_US
( 250 );

107 
	`R_C⁄fig_WDT_Re°¨t
();

110 
	}
}

112 
	$Re£t
()

118 
	}
}

120 
U8
 
	$CheckLimôVÆue
(
U8
 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
)

122 if–
mu8VÆ
 < 
mu8Mö
 || mu8VÆ > 
mu8Max
 )

124  
mu8Inô
;

127  
mu8VÆ
;

128 
	}
}

130 
U8
 
	$SëMöMax8
(
U8
 
mVÆ
, U8 
mMö
, U8 
mMax
 )

132 if–
mVÆ
 <
mMö
 )

134 
mVÆ
 = 
mMö
;

136 if–
mVÆ
 >
mMax
 )

138 
mVÆ
 = 
mMax
;

141  
mVÆ
;

142 
	}
}

144 
U16
 
	$SëMöMax16
(
U16
 
mu16VÆ
, U16 
mu16Mö
, U16 
mu16Max
 )

146 if–
mu16VÆ
 <
mu16Mö
 )

148 
mu16VÆ
 = 
mu16Mö
;

150 if–
mu16VÆ
 >
mu16Max
 )

152 
mu16VÆ
 = 
mu16Max
;

155  
mu16VÆ
;

156 
	}
}

158 
U32
 
	$SëMöMax32
(
U32
 
mu32VÆ
, U32 
mu32Mö
, U32 
mu32Max
 )

160 if–
mu32VÆ
 <
mu32Mö
 )

162 
mu32VÆ
 = 
mu32Mö
;

164 if–
mu32VÆ
 >
mu32Max
 )

166 
mu32VÆ
 = 
mu32Max
;

169  
mu32VÆ
;

170 
	}
}

172 
F32
 
	$SëMöMaxF32
(
F32
 
mf32VÆ
, F32 
mf32Mö
, F32 
mf32Max
 )

174 if–
mf32VÆ
 <
mf32Mö
 )

176 
mf32VÆ
 = 
mf32Mö
;

178 if–
mf32VÆ
 >
mf32Max
 )

180 
mf32VÆ
 = 
mf32Max
;

183  
mf32VÆ
;

184 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#GET_HIGH_BYTE
(
vÆ
Ë(
U8
)(((vÆ)&0xFF00Ë>> 8)

	)

7 
	#GET_LOW_BYTE
(
vÆ
Ë(
U8
)((vÆ)&0x00FF)

	)

8 
	#GET_UINT_WORD
(
lb
, 
hb
Ë((((
U16
)hb)<<8)|lb)

	)

10 
	#GET_32_BYTE_8
(
vÆ
Ë(
U8
)(((vÆ)&0x000000FF))

	)

11 
	#GET_32_BYTE_16
(
vÆ
Ë(
U8
)(((vÆ)&0x0000FF00)>>8)

	)

12 
	#GET_32_BYTE_24
(
vÆ
Ë(
U8
)(((vÆ)&0x00FF0000)>>16)

	)

13 
	#GET_32_BYTE_32
(
vÆ
Ë(
U8
)(((vÆ)&0xFF000000)>>24)

	)

14 
	#GET_UINT_WORD_32
(
b32
, 
b24
, 
b16
, 
b8
) \

16 –((
U32
)
b32
)<<24 ) |\

17 –((
U32
)
b24
)<<16 ) |\

18 –((
U32
)
b16
)<<8 ) |\

19 –(
U32
)
b8
) \

20 )

	)

22 
	#SET_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ |(
U8
)(bô); }0)

	)

23 
	#CLEAR_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ &(
U8
)(~bô); }0)

	)

25 
	#SET_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ |(
U16
)(bô); }0)

	)

26 
	#CLEAR_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ &(
U16
)(~bô); }0)

	)

28 
	#IS_SET_BIT_32
(
vÆ
,
bô
Ë((–vÆ & (bôË)==bô)?1:0)

	)

30 
	#DOWN_COUNT
(
vÆ
) \

32 if–
vÆ
 != 0 ) { val--; } \

33 }0)

	)

35 
	#DOWN_COUNT_RELOAD
(
vÆ
,
ªlﬂd
) \

37 if–
vÆ
 != 0 ){ val--;}\

38 { 
vÆ
=
ªlﬂd
;} \

39 }0)

	)

42 
I16
 
GëMö
–I16 
x
, I16 );

43 
I16
 
GëMax
–I16 
x
, I16 
y
 );

45 
U8
 
Hex2Dec
(U8 
mu8Hex
);

46 
U8
 
Dec2Hex
(U8 
mu8Dec
);

48 
U8
 
C⁄vAsc2Byã
(U8 
mu8Uµî
, U8 
mu8Lowî
 );

49 
U16
 
ByãOrdîC⁄v
–U16 
_§c
 );

51 
Dñay_US
–
U8
 
us
 );

52 
Dñay_MS
–
U16
 
ms
 );

54 
Re£t
();

59 
U8
 
CheckLimôVÆue
(U8 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
);

62 
U8
 
SëMöMax8
(U8 
mVÆ
, U8 
mMö
, U8 
mMax
 );

64 
U16
 
SëMöMax16
(U16 
mu16VÆ
, U16 
mu16Mö
, U16 
mu16Max
 );

66 
U32
 
SëMöMax32
(U32 
mu32VÆ
, U32 
mu32Mö
, U32 
mu32Max
 );

68 
F32
 
SëMöMaxF32
(F32 
mf32VÆ
, F32 
mf32Mö
, F32 
mf32Max
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cody_water_out.c

1 
	~"cody_w©î_out.h
"

2 
	~"cody_kô.h
"

3 
	~"vÆve.h
"

4 
	~"Êow_mëî.h
"

5 
	~"w©î_out.h
"

6 
	~"w©î_out_comm⁄.h
"

7 
	~"îr‹.h
"

8 
	~"sound.h
"

11 
	#DEFAULT_WAIT_TIME
 20

12 

	)

13 
	#ROOM_OUT_TIME
 3000UL

14 
	#COLD_OUT_TIME
 12000UL

15 
	#COLD_RINS_TIME
 12000UL

16 
	#ROOM_RINSE_TIME
 3000UL

17 
W©îOut_T
 
CodyOut
;

	)

21 
	$Tu∫OnCodyOut
(
W©îOutTy≥_T
 
mTy≥
)

23 
CodyOut
.
Out
 = 
TRUE
;

24 
CodyOut
.
Ty≥
 = 
mTy≥
;

27 
CodyOut
.
T¨gëAmou¡
 = 
ROOM_OUT_TIME
 + 
COLD_OUT_TIME
 + 
ROOM_RINSE_TIME
;

28 
	}
}

30 
	$Tu∫OffCodyOut
()

32 
CodyOut
.
Out
 = 
FALSE
;

33 
	}
}

36 
U8
 
	$IsCh™gedOutSètus
()

38 if–
CodyOut
.
Out
 !CodyOut.
PªvOut
 )

40 
CodyOut
.
PªvOut
 = CodyOut.
Out
;

42  
TRUE
;

45  
FALSE
;

46 
	}
}

48 
	$Regi°îOuègeCodyOut
()

50 
CodyOut
.
CuºítAmou¡
 = 0UL;

53 
	`SèπCheckOuège
–
OUTAGE_DELAY_TIME
, 
OUTAGE_CHECK_TIME_10SEC
, 
TYPE_WATER
 );

54 
	}
}

56 
	$UnRegi°îOuègeCodyOut
()

59 
CodyOut
.
CuºítAmou¡
 = 0UL;

62 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
NULL
 );

65 
	`St›CheckOuège
();

66 
	}
}

70 
	mOUT_INIT_OUTAGE
,

71 
	mOUT_STER_ROOM_WATER
,

72 
	mOUT_STER_COLD_WATER
,

73 
	mOUT_STER_COLD_WATER_2
,

74 
	mOUT_STER_RINSE_COLD_WATER_3
,

75 
	mOUT_RINSE_ROOM_WATER


79 
	$O≥nVÆveCodyOut
()

82  
CodyOut
.
O≥nSãp
 )

84 
OUT_INIT_OUTAGE
:

86 
	`Regi°îOuègeCodyOut
();

88 
	`SëCodyKôSãp
–
CODY_STEP_ROOM
 );

90 
CodyOut
.
O≥nSãp
++;

93 
OUT_STER_ROOM_WATER
:

94 
	`O≥nVÆve
–
VALVE_ROOM_OUT
 );

96 if–++
CodyOut
.
CuºítAmou¡
 >
ROOM_OUT_TIME
 )

98 
	`Clo£VÆve
–
VALVE_ROOM_OUT
 );

99 
CodyOut
.
O≥nSãp
++;

103 if–
CodyOut
.
CuºítAmou¡
 == 150 )

105 
	`Sound
–
SOUND_STER_START
 );

109 
OUT_STER_COLD_WATER
:

110 
	`SëCodyKôSãp
–
CODY_STEP_COLD
 );

112 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

113 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

115 
CodyOut
.
WaôTime
 = 
WAIT_100MS
;

116 
CodyOut
.
O≥nSãp
++;

119 
OUT_STER_COLD_WATER_2
:

120 if–
CodyOut
.
WaôTime
 != 0 )

122 
CodyOut
.
WaôTime
--;

126 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

127 if–++
CodyOut
.
CuºítAmou¡
 >(
ROOM_OUT_TIME
 + 
COLD_OUT_TIME
 + 
COLD_RINS_TIME
 ) )

129 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

130 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

132 
CodyOut
.
WaôTime
 = 
WAIT_100MS
;

133 
CodyOut
.
O≥nSãp
++;

137 if–
CodyOut
.
CuºítAmou¡
 =–
ROOM_OUT_TIME
 + 
COLD_OUT_TIME
 ) )

139 
	`Sound
–
SOUND_STER_RINSE
 );

145 
OUT_STER_RINSE_COLD_WATER_3
:

146 if–
CodyOut
.
WaôTime
 != 0 )

148 
CodyOut
.
WaôTime
--;

152 
	`SëCodyKôSãp
–
CODY_STEP_ROOM
 );

154 
	`O≥nVÆve
–
VALVE_ROOM_OUT
 );

155 
CodyOut
.
O≥nSãp
++;

160 
OUT_RINSE_ROOM_WATER
:

161 ++
CodyOut
.
CuºítAmou¡
;

162 
	`O≥nVÆve
–
VALVE_ROOM_OUT
 );

168 
	}
}

172 
	mSTOP_INIT_OUTAGE
,

173 
	mSTOP_CLOSE_WATER_OUT
,

176 
	$Clo£VÆveCodyOut
()

178  
CodyOut
.
Clo£Sãp
 )

180 
STOP_INIT_OUTAGE
:

183 
	`Clo£VÆve
–
VALVE_ROOM_OUT
 );

185 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

186 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

187 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

189 
	`UnRegi°îOuègeCodyOut
();

190 
CodyOut
.
Clo£Sãp
++;

193 
STOP_CLOSE_WATER_OUT
:

201 
	}
}

206 
U8
 
	$GëCodyOutPî˚¡
()

208  
	`CÆcPî˚¡
–
CodyOut
.
T¨gëAmou¡
, CodyOut.
CuºítAmou¡
 );

209 
	}
}

213 
U16
 
	$GëCodyOutAmou¡
()

215  
	`CÆcLôî
–
CodyOut
.
CuºítAmou¡
 );

216 
	}
}

219 
U8
 
	$IsD⁄eCodyOut
()

222 if–
CodyOut
.
T¨gëAmou¡
 <CodyOut.
CuºítAmou¡
 )

224 
	`Sound
–
SOUND_STER_DONE
 );

225  
TRUE
;

229 if–
	`IsEº‹Ty≥
–
ERR_TYPE_ROOM_WATER_OUT
 ) =
TRUE
 )

231  
TRUE
;

234  
FALSE
;

235 
	}
}

237 
	$OutÊow
(
U8
 
mu8Out
)

239 if–
mu8Out
 =
TRUE
 )

241 
CodyOut
.
Clo£Sãp
 = 0;

242 
	`O≥nVÆveCodyOut
();

246 
CodyOut
.
O≥nSãp
 = 0;

247 
	`Clo£VÆveCodyOut
();

249 
	}
}

252 
U8
 
	$C⁄åﬁW©îCodyOut
()

254 if–
	`IsCh™gedOutSètus
(Ë=
TRUE
 )

256 if–
CodyOut
.
Out
 =
TRUE
 )

259 
	`SëCodyKôSètus
–
TRUE
 );

264 
	`SëCodyKôSètus
–
FALSE
 );

265 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

269 if–
CodyOut
.
Out
 =
TRUE
 )

271 if–
	`IsD⁄eCodyOut
(Ë=
TRUE
 )

273 
	`Tu∫OffCodyOut
();

274  
WATER_OUT_DONE
;

278 
	`OutÊow
(
CodyOut
.
Out
);

279  
WATER_OUT_GOING
;

280 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cody_water_out.h

1 #i‚de‡
__CODY_WATER_OUT_H__


2 
	#__CODY_WATER_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out_ty≥.h
"

10 
Tu∫OnCodyOut
(
W©îOutTy≥_T
 
mTy≥
);

13 
Tu∫OffCodyOut
();

16 
U8
 
GëCodyOutPî˚¡
();

19 
U16
 
GëCodyOutAmou¡
();

22 
U8
 
C⁄åﬁW©îCodyOut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water.c

1 
	~"cﬁd_w©î.h
"

2 
	~"Àvñ.h
"

3 
	~"ãmp.h
"

4 
	~"vÆve.h
"

5 
	~"îr‹.h
"

6 
	~"powî_ßvög.h
"

7 
	~"comp.h
"

8 
	~"gas_swôch_vÆve.h
"

9 
	~"ì¥om.h
"

10 
	~"‰⁄t.h
"

11 
	~"ènk_˛ón.h
"

12 
	~"i˚_makî.h
"

13 
	~"w©î_out.h
"

14 
	~"fûãr.h
"

15 
	~"døö_w©î.h
"

16 
	~"Êush_w©î_out.h
"

17 
	~"Êow_mëî.h
"

18 
	~"døö_pump.h
"

19 
	~"hŸ_w©î_out.h
"

20 
	~"cody_kô.h
"

24 
	#PROTECT_COLD_TEMP
 0.0f

	)

27 c⁄° 
TEMP_T
 
	gOnTempPowîSavög
 = 10.0f;

31 
	#MODE_INIT_STARTING
 0

	)

32 
	#MODE_RESTARTING
 1

	)

33 
	#MODE_SUSTAIN
 2

	)

34 
	#MODE_NUM
 3

	)

36 
	#TEMP_INIT_STARTING
 17.0f

37 
	#ON_DELAY_TIME
 10

38 

	)

40 
	#RESTARTING_COUNT
 2

	)

43 
	#REGION_COLD_LOWER
 0

	)

44 
	#REGION_COLD_UPPER
 1

	)

48 
	mREGION_AMBIENT_0
,

49 
	mREGION_AMBIENT_1
,

50 
	mREGION_AMBIENT_2
,

51 
	mREGION_AMBIENT_3
,

52 
	mREGION_AMBIENT_4
,

53 
	mREGION_AMBIENT_5
,

54 
	mREGION_AMBIENT_6
,

55 
	mREGION_AMBIENT_7
,

56 
	mREGION_AMBIENT_8
,

57 
	mREGION_AMBIENT_9
,

58 
	mREGION_AMBIENT_10
,

59 
	mREGION_NUM
,

60 } 
	tCﬁdRegi⁄_T
;

62 
	#INIT_STARTING_AMOUNT_TIME
 180U

63 

	)

78 
	s_cﬁd_w©î_make_èbÀ_


80 
CﬁdRegi⁄_T
 
	mRegi⁄Ambi
;

82 
TEMP_T
 
	mTempOn
;

83 
TEMP_T
 
	mTempOff
;

85 
TEMP_T
 
	mTempCompRps
;

86 
RPS_T
 
	mRpsLowî
;

87 
RPS_T
 
	mRpsUµî
;

89 
U16
 
	mExåaMakeTime
;

90 } 
	tCﬁdMakeTabÀ_T
;

94 c⁄° 
CﬁdMakeTabÀ_T
 
	gCﬁdMakeTabÀLi°
[ 
MODE_NUM
 ][ 
REGION_NUM
 ] =

98 { 
REGION_AMBIENT_A
, 
TEMP_ON
, 
TEMP_OFF_6D0
, 0.0f, 45, 45, 
EXTRA_MAKE_TIME_0MIN
 },

99 { 
REGION_AMBIENT_B
, 
TEMP_ON
, 
TEMP_OFF_5D8
, 0.0f, 45, 45, 
EXTRA_MAKE_TIME_0MIN
 },

100 { 
REGION_AMBIENT_C
, 
TEMP_ON
, 
TEMP_OFF_5D8
, 8.0f, 60, 45, 
EXTRA_MAKE_TIME_0MIN
 },

101 { 
REGION_AMBIENT_D
, 
TEMP_ON
, 
TEMP_OFF_5D8
, 10.0f, 60, 45, 
EXTRA_MAKE_TIME_5MIN
 }

106 { 
REGION_AMBIENT_A
, 
TEMP_ON
, 
TEMP_OFF_6D0
, 0.0f, 40, 40, 
EXTRA_MAKE_TIME_0MIN
 },

107 { 
REGION_AMBIENT_B
, 
TEMP_ON
, 
TEMP_OFF_5D8
, 6.5f, 40, 45, 
EXTRA_MAKE_TIME_0MIN
 },

108 { 
REGION_AMBIENT_C
, 
TEMP_ON
, 
TEMP_OFF_5D8
, 10.0f, 60, 45, 
EXTRA_MAKE_TIME_0MIN
 },

109 { 
REGION_AMBIENT_D
, 
TEMP_ON
, 
TEMP_OFF_5D8
, 10.0f, 60, 45, 
EXTRA_MAKE_TIME_5MIN
 }

113 c⁄° 
CﬁdMakeTabÀ_T
 
	gCﬁdMakeTabÀLi°
[ 
MODE_NUM
 ][ 
REGION_NUM
 ] =

118 { 
REGION_AMBIENT_0
, 3.5f, 2.0f, 0.0f, 45, 45, 90 },

119 { 
REGION_AMBIENT_1
, 4.0f, 2.5f, 0.0f, 48, 48, 120 },

120 { 
REGION_AMBIENT_2
, 4.5f, 3.0f, 0.0f, 48, 48, 180 },

121 { 
REGION_AMBIENT_3
, 5.0f, 3.5f, 0.0f, 48, 48, 210 },

122 { 
REGION_AMBIENT_4
, 6.0f, 4.0f, 0.0f, 48, 48, 240 },

123 { 
REGION_AMBIENT_5
, 7.0f, 5.0f, 0.0f, 48, 48, 480 },

124 { 
REGION_AMBIENT_6
, 8.0f, 5.0f, 0.0f, 51, 51, 600 },

125 { 
REGION_AMBIENT_7
, 9.5f, 5.0f, 0.0f, 51, 51, 690 },

126 { 
REGION_AMBIENT_8
, 11.0f, 5.0f, 0.0f, 51, 51, 750 },

127 { 
REGION_AMBIENT_9
, 13.0f, 5.0f, 5.0f, 53, 50, 840 },

128 { 
REGION_AMBIENT_10
, 14.0f, 5.0f, 5.0f, 53, 50, 930 }

134 { 
REGION_AMBIENT_0
, 3.5f, 2.0f, 0.0f, 45, 45, 0 },

135 { 
REGION_AMBIENT_1
, 4.0f, 2.5f, 0.0f, 45, 45, 60 },

136 { 
REGION_AMBIENT_2
, 4.5f, 3.0f, 0.0f, 45, 45, 90 },

137 { 
REGION_AMBIENT_3
, 7.0f, 3.5f, 0.0f, 45, 45, 90 },

138 { 
REGION_AMBIENT_4
, 8.0f, 4.0f, 0.0f, 45, 45, 120 },

139 { 
REGION_AMBIENT_5
, 9.0f, 5.0f, 0.0f, 45, 45, 210 },

140 { 
REGION_AMBIENT_6
, 10.0f, 5.0f, 5.0f, 45, 41, 240 },

141 { 
REGION_AMBIENT_7
, 12.0f, 5.0f, 5.0f, 47, 41, 270 },

142 { 
REGION_AMBIENT_8
, 13.5f, 5.0f, 5.0f, 49, 43, 300 },

143 { 
REGION_AMBIENT_9
, 15.0f, 5.0f, 5.0f, 49, 43, 330 },

144 { 
REGION_AMBIENT_10
, 16.0f, 5.0f, 5.0f, 49, 43, 360 }

150 { 
REGION_AMBIENT_0
, 3.5f, 2.0f, 0.0f, 45, 45, 0 },

151 { 
REGION_AMBIENT_1
, 4.0f, 2.5f, 0.0f, 45, 45, 60 },

152 { 
REGION_AMBIENT_2
, 4.5f, 3.0f, 0.0f, 45, 45, 90 },

153 { 
REGION_AMBIENT_3
, 7.0f, 3.5f, 0.0f, 45, 45, 90 },

154 { 
REGION_AMBIENT_4
, 8.0f, 4.0f, 0.0f, 45, 45, 120 },

155 { 
REGION_AMBIENT_5
, 9.0f, 5.0f, 0.0f, 45, 45, 210 },

156 { 
REGION_AMBIENT_6
, 10.0f, 5.0f, 5.0f, 45, 41, 240 },

157 { 
REGION_AMBIENT_7
, 12.0f, 5.0f, 5.0f, 47, 41, 270 },

158 { 
REGION_AMBIENT_8
, 13.5f, 5.0f, 5.0f, 49, 43, 300 },

159 { 
REGION_AMBIENT_9
, 15.0f, 5.0f, 5.0f, 49, 43, 330 },

160 { 
REGION_AMBIENT_10
, 16.0f, 5.0f, 5.0f, 49, 43, 360 }

165 c⁄° 
CﬁdMakeTabÀ_T
 *
	gpCﬁdMake
 = 
NULL
;

166 
CﬁdW©î_T
 
	gCﬁd
;

170 
Upd©eCﬁdMakeD©a
();

171 
TEMP_T
 
GëT¨gëOnTemp
();

172 
TEMP_T
 
GëT¨gëOffTemp
();

174 
	$InôCﬁdW©î
()

176 
Cﬁd
.
InôFuŒ
 = 
FALSE
;

177 
Cﬁd
.
Levñ
 = 
LEVEL_HIGH
;

178 
Cﬁd
.
C⁄figMake
 = 
TRUE
;

179 
Cﬁd
.
Make
 = 
FALSE
;

180 
Cﬁd
.
Mode
 = 
COLD_MODE_INIT
;

183 
Cﬁd
.
SèπögMode
 = 
MODE_INIT_STARTING
;

184 
Cﬁd
.
SèπögModeTime
 = 0U;

186 
	`Upd©eCﬁdMakeD©a
();

187 
Cﬁd
.
TempT¨gëOn
 = 
	`GëT¨gëOnTemp
();

188 
Cﬁd
.
TempT¨gëOff
 = 
	`GëT¨gëOffTemp
();

189 
Cﬁd
.
TempCuºít
 = 
	`GëTemp
–
TEMP_ID_COLD_WATER
 );

190 
Cﬁd
.
TempSètus
 = 
COLD_STATUS_GOOD
;

192 
Cﬁd
.
Regi⁄Cﬁd
 = 
REGION_COLD_UPPER
;

193 
Cﬁd
.
T¨gëRps
 = 48;

195 
Cﬁd
.
ExåaMake
 = 
FALSE
;

196 
Cﬁd
.
ExåaMakeTime
 = 0;

198 
	`Re£tCﬁdAmou¡
();

199 
	}
}

202 
	$GëCﬁdW©îD©a
(
CﬁdW©î_T
 *
pD©a
)

204 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
Cﬁd
, –
CﬁdW©î_T
 ));

205 
	}
}

207 
	$SëCﬁdW©îInôFuŒ
(
U8
 
mu8VÆ
 )

209 
Cﬁd
.
InôFuŒ
 = 
mu8VÆ
;

210 
	}
}

212 
U8
 
	$GëCﬁdW©îInôFuŒ
()

214  
Cﬁd
.
InôFuŒ
;

215 
	}
}

218 
	$SëCﬁdW©îLevñ
(
U8
 
mu8VÆ
 )

220 
Cﬁd
.
Levñ
 = 
mu8VÆ
;

221 
	}
}

223 
U8
 
	$GëCﬁdW©îLevñ
()

225  
Cﬁd
.
Levñ
;

226 
	}
}

228 
	$SëCﬁdW©îC⁄figMake
(
U8
 
mu8VÆ
 )

230 if–
mu8VÆ
 !
TRUE
 && mu8VÆ !
FALSE
 )

235 
Cﬁd
.
C⁄figMake
 = 
mu8VÆ
;

237 
	`SaveEïromId
–
EEP_ID_CONF_MAKE_COLD
 );

238 
	}
}

240 
U8
 
	$GëCﬁdW©îC⁄figMake
()

242  
Cﬁd
.
C⁄figMake
;

243 
	}
}

246 
	$SëCﬁdW©îMake
(
U8
 
mu8VÆ
 )

248 
Cﬁd
.
Make
 = 
mu8VÆ
;

249 
	}
}

251 
U8
 
	$GëCﬁdW©îMake
()

253  
Cﬁd
.
Make
;

254 
	}
}

256 
TEMP_T
 
	$GëCﬁdT¨gëOffTemp
()

258  
Cﬁd
.
TempT¨gëOff
;

259 
	}
}

261 
TEMP_T
 
	$GëCﬁdT¨gëOnTemp
()

263  
Cﬁd
.
TempT¨gëOn
;

264 
	}
}

267 
U8
 
	$GëCﬁdW©îTempSètus
()

269  
Cﬁd
.
TempSètus
;

270 
	}
}

272 
	$CheckCﬁdW©îTempSètus
()

275 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

282 if–
Cﬁd
.
TempSètus
 =
COLD_STATUS_GOOD
 )

284 if–
	`GëTemp
–
TEMP_ID_COLD_WATER
 ) >
	`GëCﬁdT¨gëOnTemp
() )

286 
Cﬁd
.
TempSètus
 = 
COLD_STATUS_BAD
;

291 if–
	`GëTemp
–
TEMP_ID_COLD_WATER
 ) <
	`GëCﬁdT¨gëOffTemp
() )

293 
Cﬁd
.
TempSètus
 = 
COLD_STATUS_GOOD
;

296 
	}
}

299 
	$SëCﬁdW©îMakeMode
(
U8
 
mu8Mode
 )

301 
Cﬁd
.
Mode
 |
mu8Mode
;

302 
	}
}

304 
	$CÀ¨CﬁdW©îMakeMode
(
U8
 
mu8Mode
 )

306 
Cﬁd
.
Mode
 &~
mu8Mode
;

307 
	}
}

309 
U8
 
	$IsSëCﬁdW©îMakeMode
(
U8
 
mu8Mode
 )

311 if–(
Cﬁd
.
Mode
 & 
mu8Mode
 ) == mu8Mode )

313  
TRUE
;

316  
FALSE
;

317 
	}
}

319 
U8
 
	$GëCﬁdW©îMakeMode
()

321  
Cﬁd
.
Mode
;

322 
	}
}

324 
RPS_T
 
	$GëCﬁdW©îMakeCompRps
()

326  
Cﬁd
.
T¨gëRps
;

327 
	}
}

329 
	$InôCﬁdW©îRe°¨tögCou¡
()

331 
Cﬁd
.
Re°¨tögCou¡
 = 
RESTARTING_COUNT
;

332 
	}
}

334 
	$Cou¡CﬁdW©îRe°¨tögCou¡
()

336 if–
Cﬁd
.
SèπögMode
 =
MODE_INIT_STARTING
 )

338 
Cﬁd
.
Re°¨tögCou¡
 = 
RESTARTING_COUNT
;

342 if–
Cﬁd
.
Re°¨tögCou¡
 != 0 )

344 
Cﬁd
.
Re°¨tögCou¡
--;

347 
	}
}

352 
	$C⁄åﬁCﬁdW©îLevñ
()

354 
U8
 
IsFûãrO≥n
 = 
FALSE
;

360 if–
	`GëCodyKôSètus
(Ë=
FALSE
 )

362 if–
	`IsO≥nFûãr
–
ID_FILTER
Ë=
TRUE


363 || 
	`IsO≥nFûãr
–
ID_FILTER_COVER
Ë=
TRUE
 )

365 
IsFûãrO≥n
 = 
TRUE
;

370 if–
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


371 || 
	`IsEº‹
–
ERR_LEAK_FLOW
 ) =
TRUE


372 || 
IsFûãrO≥n
 =
TRUE
 )

374 
	`Clo£VÆve
–
VALVE_NOS
 );

378 
	`O≥nVÆve
–
VALVE_NOS
 );

380 
	}
}

383 
U8
 
	$IsVÆidMake
()

386 if–
Cﬁd
.
C⁄figMake
 =
FALSE
 )

388  
FALSE
 ;

391 if–
	`IsD⁄eFlushSètus
(Ë=
FALSE
 )

393  
FALSE
;

398 if–
Cﬁd
.
InôFuŒ
 =
FALSE
 )

400  
FALSE
;

406 if–
	`GëSavögSètus
(Ë=
TRUE
 )

408  
FALSE
;

413 if–
	`IsExpúedCompPrŸe˘Time
(Ë=
FALSE
 )

415  
FALSE
;

419 if–
	`IsOvîCompPrŸe˘OnTime
(Ë=
TRUE
 )

421  
FALSE
;

425 if–
	`IsCompBldcPrŸe˘Mode
(Ë=
TRUE
 )

427  
FALSE
;

431 if–
	`IsEº‹Ty≥
–
ERR_TYPE_COLD_MAKE
 ) =
TRUE
 )

433  
FALSE
;

437 if–
	`IsGoögOnDøöW©îFuŒ
(Ë=
TRUE
 )

439  
FALSE
;

444 if–
	`GëT™kCÀ™OffLﬂd
(Ë=
TRUE
 )

446  
FALSE
;

449 if–
	`GëCodySîvi˚
(Ë=
TRUE
 )

451  
FALSE
;

455  
TRUE
;

456 
	}
}

458 
TEMP_T
 
	$GëT¨gëOnTemp
()

461 if–
	`GëSavögSètus
(Ë=
STATUS_SLEEP
 )

463  
OnTempPowîSavög
;

466  
pCﬁdMake
->
TempOn
;

467 
	}
}

469 
TEMP_T
 
	$GëT¨gëOffTemp
()

471  
pCﬁdMake
->
TempOff
;

472 
	}
}

476 
	$Upd©eExåaMakeTime
()

478 if–
	`GëCompOnOff
(Ë=
OFF
 )

483 if–
	`GëGasSwôchSètus
(Ë!
GAS_SWITCH_COLD
 )

488 if–
Cﬁd
.
ExåaMakeTime
 != 0 )

490 
Cﬁd
.
ExåaMakeTime
--;

492 
	}
}

498 
U8
 
	$IsExåaMake
()

501 if–
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE
 )

503  
FALSE
;

507 if–
pCﬁdMake
->
ExåaMakeTime
 =
EXTRA_MAKE_TIME_0MIN
 )

509  
FALSE
;

512  
TRUE
;

513 
	}
}

516 
	$Re£tCﬁdAmou¡
()

518 
Cﬁd
.
Amou¡
 = 
AMOUNT_250
;

519 
Cﬁd
.
Amou¡Time
 = 
INIT_STARTING_AMOUNT_TIME
;

520 
	}
}

522 
	$CheckInôSèπögModeByCﬁdAmou¡
()

524 if–
Cﬁd
.
Amou¡
 < 
AMOUNT_250
 )

526 if–
Cﬁd
.
Amou¡Time
 == 0 )

528 if–
Cﬁd
.
Amou¡
 != 0 )

530 
	`Re£tCﬁdAmou¡
();

535 
Cﬁd
.
Amou¡Time
--;

538 
	}
}

543 
U8
 
	$IsPrŸe˘Re°¨tögByFªezög
()

545 
TEMP_T
 
mCuºítTemp
;

546 
TEMP_T
 
mT¨gëTemp
;

549 
mCuºítTemp
 = 
	`GëTemp
–
TEMP_ID_EVA_1
 );

550  
Cﬁd
.
Regi⁄Ambi
 )

552 
REGION_AMBIENT_0
: 
mT¨gëTemp
 = 0.4f; ;

553 
REGION_AMBIENT_1
: 
mT¨gëTemp
 = 0.5f; ;

554 
REGION_AMBIENT_2
: 
mT¨gëTemp
 = 0.6f; ;

555 
REGION_AMBIENT_3
: 
mT¨gëTemp
 = 0.7f; ;

556 
REGION_AMBIENT_4
: 
mT¨gëTemp
 = 0.8f; ;

557 
REGION_AMBIENT_5
: 
mT¨gëTemp
 = 1.0f; ;

558 
REGION_AMBIENT_6
: 
mT¨gëTemp
 = 1.0f; ;

559 
REGION_AMBIENT_7
: 
mT¨gëTemp
 = 1.2f; ;

560 
REGION_AMBIENT_8
: 
mT¨gëTemp
 = 1.3f; ;

561 
REGION_AMBIENT_9
: 
mT¨gëTemp
 = 1.4f; ;

562 
REGION_AMBIENT_10
: 
mT¨gëTemp
 = 1.4f; ;

563 : 
mT¨gëTemp
 = 1.4f; ;

566 if–
mT¨gëTemp
 <
mCuºítTemp
 )

568  
FALSE
;

571  
TRUE
;

572 
	}
}

574 
U16
 
	$PrŸe˘FªezögExåaTime
–
U16
 
mExåaMakeTime
 )

576 
U16
 
mPrŸe˘MakeTime
;

577 
TEMP_T
 
mCuºítTemp
;

580  
Cﬁd
.
Regi⁄Ambi
 )

582 
REGION_AMBIENT_0
: 
mPrŸe˘MakeTime
 = 0; ;

583 
REGION_AMBIENT_1
: 
mPrŸe˘MakeTime
 = 0; ;

584 
REGION_AMBIENT_2
: 
mPrŸe˘MakeTime
 = 30; ;

585 
REGION_AMBIENT_3
: 
mPrŸe˘MakeTime
 = 30; ;

586 
REGION_AMBIENT_4
: 
mPrŸe˘MakeTime
 = 60; ;

587 
REGION_AMBIENT_5
: 
mPrŸe˘MakeTime
 = 60; ;

588 
REGION_AMBIENT_6
: 
mPrŸe˘MakeTime
 = 90; ;

589 
REGION_AMBIENT_7
: 
mPrŸe˘MakeTime
 = 90; ;

590 
REGION_AMBIENT_8
: 
mPrŸe˘MakeTime
 = 120; ;

591 
REGION_AMBIENT_9
: 
mPrŸe˘MakeTime
 = 120; ;

592 
REGION_AMBIENT_10
: 
mPrŸe˘MakeTime
 = 180; ;

593 : 
mPrŸe˘MakeTime
 = 180; ;

596 
mCuºítTemp
 = 
	`GëTemp
–
TEMP_ID_EVA_1
 );

597 if–
mCuºítTemp
 <= 0.0f )

599 if–
mExåaMakeTime
 > 
mPrŸe˘MakeTime
 )

601 
mExåaMakeTime
 = 
mPrŸe˘MakeTime
;

605  
mExåaMakeTime
;

606 
	}
}

610 
U8
 
	$CheckSèπMake
()

612 
U8
 
mu8Make
 = 
FALSE
;

615 if–
Cﬁd
.
TempCuºít
 >
TEMP_INIT_STARTING
 )

617 
Cﬁd
.
SèπögMode
 = 
MODE_INIT_STARTING
;

618 
mu8Make
 = 
TRUE
;

624 if–
Cﬁd
.
TempCuºít
 >Cﬁd.
TempT¨gëOn
 )

627 if–
	`GëW©îOut
(Ë=
TRUE


628 && 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_COLD
 )

630 
Cﬁd
.
SèπögModeTime
 = 
ON_DELAY_TIME
;

634 if–
Cﬁd
.
SèπögModeTime
 != 0 )

636 
Cﬁd
.
SèπögModeTime
--;

641 if–
Cﬁd
.
Amou¡
 == 0 )

643 
Cﬁd
.
SèπögMode
 = 
MODE_INIT_STARTING
;

644 
mu8Make
 = 
TRUE
;

649 if–
Cﬁd
.
Re°¨tögCou¡
 == 0 )

651 
Cﬁd
.
SèπögMode
 = 
MODE_SUSTAIN
;

655 
Cﬁd
.
SèπögMode
 = 
MODE_RESTARTING
;

659 if–
	`IsPrŸe˘Re°¨tögByFªezög
(Ë=
TRUE
 )

661 
mu8Make
 = 
FALSE
;

665 
mu8Make
 = 
TRUE
;

673 
Cﬁd
.
SèπögModeTime
 = 
ON_DELAY_TIME
;

677  
mu8Make
;

678 
	}
}

680 
U8
 
	$CheckSt›Make
()

682 
U8
 
mu8Make
 = 
TRUE
;

685 if–
Cﬁd
.
TempT¨gëOff
 >Cﬁd.
TempCuºít


686 || 0.0‡>
	`GëTemp
–
TEMP_ID_EVA_1
 ) )

688 
Cﬁd
.
ExåaMake
 = 
TRUE
;

689 
Cﬁd
.
ExåaMakeTime
 = 
pCﬁdMake
->ExtraMakeTime;

690 if–
Cﬁd
.
ExåaMakeTime
 == 0 )

693 
Cﬁd
.
ExåaMake
 = 
FALSE
;

694 
mu8Make
 = 
FALSE
;

698  
mu8Make
;

699 
	}
}

704 
	$Upd©eCﬁdMakeD©a
()

706 
TEMP_T
 
mTempAmbi
;

709 
mTempAmbi
 = 
	`GëTemp
–
TEMP_ID_AMBIENT
 );

710 if–
mTempAmbi
 <4.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_0
; }

711 if–
mTempAmbi
 <8.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_1
; }

712 if–
mTempAmbi
 <12.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_2
; }

713 if–
mTempAmbi
 <16.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_3
; }

714 if–
mTempAmbi
 <20.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_4
; }

715 if–
mTempAmbi
 <24.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_5
; }

716 if–
mTempAmbi
 <28.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_6
; }

717 if–
mTempAmbi
 <32.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_7
; }

718 if–
mTempAmbi
 <36.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_8
; }

719 if–
mTempAmbi
 <40.0‡Ë{ 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_9
; }

720 { 
Cﬁd
.
Regi⁄Ambi
 = 
REGION_AMBIENT_10
; }

722 
pCﬁdMake
 = &
CﬁdMakeTabÀLi°
[ 
Cﬁd
.
SèπögMode
 ][ Cﬁd.
Regi⁄Ambi
 ];

723 
	}
}

727 
RPS_T
 
	$CheckCompRps
()

729 
RPS_T
 
mT¨gëRps
;

730 
TEMP_T
 
mTempLowî
;

731 
TEMP_T
 
mTempUµî
;

735 
mTempLowî
 = 
pCﬁdMake
->
TempCompRps
;

736 
mTempUµî
 = 
pCﬁdMake
->
TempCompRps
 + 0.5f;

737 if–
Cﬁd
.
Regi⁄Cﬁd
 =
REGION_COLD_LOWER
 )

739 if–
mTempUµî
 <
Cﬁd
.
TempCuºít
 )

741 
Cﬁd
.
Regi⁄Cﬁd
 = 
REGION_COLD_UPPER
;

746 if–
Cﬁd
.
TempCuºít
 < 
mTempLowî
 )

748 
Cﬁd
.
Regi⁄Cﬁd
 = 
REGION_COLD_LOWER
;

754 if–
Cﬁd
.
Regi⁄Cﬁd
 =
REGION_COLD_LOWER
 )

756 
mT¨gëRps
 = 
pCﬁdMake
->
RpsLowî
;

760 
mT¨gëRps
 = 
pCﬁdMake
->
RpsUµî
;

763  
mT¨gëRps
;

764 
	}
}

767 
	$Upd©eCﬁdAmou¡
(
U32
 
mu32Amou¡
)

769 if–
Cﬁd
.
Amou¡
 < 
mu32Amou¡
 )

771 
Cﬁd
.
Amou¡
 = 0;

775 
Cﬁd
.
Amou¡
 -
mu32Amou¡
;

777 
	}
}

780 
	$MakeCﬁdW©î
()

782 
U8
 
mu8Make
 = 
FALSE
;

785 
	`Upd©eExåaMakeTime
();

787 
	`Upd©eCﬁdMakeD©a
();

789 
	`CheckInôSèπögModeByCﬁdAmou¡
();

792 
mu8Make
 = 
	`GëCﬁdW©îMake
();

795 
Cﬁd
.
TempT¨gëOn
 = 
	`GëT¨gëOnTemp
();

796 
Cﬁd
.
TempT¨gëOff
 = 
	`GëT¨gëOffTemp
();

797 
Cﬁd
.
TempCuºít
 = 
	`GëTemp
–
TEMP_ID_COLD_WATER
 );

800 if–
Cﬁd
.
ExåaMake
 =
TRUE
 )

803 
mu8Make
 = 
FALSE
;

806 if–
mu8Make
 =
TRUE
 )

808 
mu8Make
 = 
	`CheckSt›Make
();

812 
mu8Make
 = 
	`CheckSèπMake
();

816 if–
Cﬁd
.
ExåaMake
 =
TRUE
 )

818 if–
Cﬁd
.
SèπögMode
 !
MODE_INIT_STARTING
 )

820 
Cﬁd
.
ExåaMakeTime
 = 
	`PrŸe˘FªezögExåaTime
( Cold.ExtraMakeTime );

823 if–
Cﬁd
.
ExåaMakeTime
 != 0 )

825 
mu8Make
 = 
TRUE
;

829 
Cﬁd
.
ExåaMake
 = 
FALSE
;

834 if–
mu8Make
 =
TRUE
 )

836 
Cﬁd
.
T¨gëRps
 = 
	`CheckCompRps
();

847 if–
	`IsVÆidMake
(Ë=
FALSE
 )

849 
mu8Make
 = 
FALSE
;

850 
Cﬁd
.
ExåaMakeTime
 = 0;

854 
	`SëCﬁdW©îMake
–
mu8Make
 );

855 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water.h

1 #i‚de‡
__COLD_WATER_H__


2 
	#__COLD_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"Àvñ.h
"

6 
	~"comp_bldc.h
"

10 
	#EXTRA_FEED_TIME
 0U

	)

14 
	s_cﬁd_w©î_


16 
U8
 
	mInôFuŒ
;

17 
U8
 
	mLevñ
;

20 
U8
 
	mC⁄figMake
;

21 
U8
 
	mMake
;

24 
U8
 
	mMode
;

27 
U8
 
	mSèπögMode
;

28 
U16
 
	mSèπögModeTime
;

30 
U8
 
	mRegi⁄Ambi
;

32 
TEMP_T
 
	mTempT¨gëOn
;

33 
TEMP_T
 
	mTempT¨gëOff
;

34 
TEMP_T
 
	mTempCuºít
;

35 
U8
 
	mTempSètus
;

37 
U8
 
	mRegi⁄Cﬁd
;

38 
RPS_T
 
	mT¨gëRps
;

40 
U8
 
	mRe°¨tögCou¡
;

41 
U8
 
	mIsExåaMake
;

43 
U8
 
	mExåaMake
;

44 
U16
 
	mExåaMakeTime
;

46 
U16
 
	mAmou¡Time
;

47 
U32
 
	mAmou¡
;

48 } 
	tCﬁdW©î_T
;

51 
InôCﬁdW©î
();

52 
GëCﬁdW©îD©a
(
CﬁdW©î_T
 *
pD©a
);

55 
SëCﬁdW©îInôFuŒ
(
U8
 
mu8VÆ
 );

56 
U8
 
GëCﬁdW©îInôFuŒ
();

59 
SëCﬁdW©îLevñ
(
U8
 
mu8VÆ
 );

60 
U8
 
GëCﬁdW©îLevñ
();

63 
SëCﬁdW©îC⁄figMake
(
U8
 
mu8VÆ
 );

64 
U8
 
GëCﬁdW©îC⁄figMake
();

67 
SëCﬁdW©îMake
(
U8
 
mu8VÆ
 );

68 
U8
 
GëCﬁdW©îMake
();

71 
TEMP_T
 
GëCﬁdT¨gëOffTemp
();

72 
TEMP_T
 
GëCﬁdT¨gëOnTemp
();

75 
Re£tCﬁdAmou¡
();

78 
	#COLD_STATUS_GOOD
 0

	)

79 
	#COLD_STATUS_BAD
 1

	)

80 
U8
 
GëCﬁdW©îTempSètus
();

81 
CheckCﬁdW©îTempSètus
();

86 
SëCﬁdW©îFìdTime
(
U16
 
mu16Time
 );

87 
U16
 
GëCﬁdW©îFìdTime
();

91 
	#COLD_MODE_NONE
 0x00

	)

92 
	#COLD_MODE_INIT
 0x01

	)

93 
	#COLD_MODE_COOLING
 0x02

	)

94 
	#COLD_MODE_DONE
 0x08

	)

95 
	#COLD_MODE_ALL
 0xFF

	)

96 
SëCﬁdW©îMakeMode
(
U8
 
mu8Mode
 );

97 
CÀ¨CﬁdW©îMakeMode
(
U8
 
mu8Mode
 );

98 
U8
 
IsSëCﬁdW©îMakeMode
(U8 
mu8Mode
 );

99 
U8
 
GëCﬁdW©îMakeMode
();

101 
RPS_T
 
GëCﬁdW©îMakeCompRps
();

104 
InôCﬁdW©îRe°¨tögCou¡
();

105 
Cou¡CﬁdW©îRe°¨tögCou¡
();

108 
SèπFìdCﬁdW©î
();

109 
St›FìdCﬁdW©î
();

110 
C⁄åﬁCﬁdW©îLevñ
();

113 
MakeCﬁdW©î
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water_out.c

1 
	~"cﬁd_w©î_out.h
"

2 
	~"vÆve.h
"

3 
	~"u£r.h
"

4 
	~"Êow_mëî.h
"

5 
	~"w©î_out_comm⁄.h
"

6 
	~"døö_w©î.h
"

7 
	~"hŸ_w©î_out.h
"

8 
	~"îr‹.h
"

9 
	~"sound.h
"

10 
	~"cﬁd_w©î.h
"

13 
W©îOut_T
 
	gCﬁdOut
;

17 
	$Upd©eU£rUßge
(
U32
 
mu32Amou¡
)

19 
U32
 
mu32T¨gëAmou¡
;

21 
mu32T¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–
OUT_AMOUNT_10
 );

22 if–
mu32T¨gëAmou¡
 != 0 )

24 
mu32Amou¡
 = mu32Amou¡ / 
mu32T¨gëAmou¡
;

25 
mu32Amou¡
 *= 10;

29 
mu32Amou¡
 = 0;

32 
	`AddU£rUßgeW©î
–
mu32Amou¡
 );

33 
	}
}

35 
	$Tu∫OnCﬁdOut
(
W©îOutTy≥_T
 
mTy≥
)

37 
CﬁdOut
.
Out
 = 
TRUE
;

38 
CﬁdOut
.
Ty≥
 = 
mTy≥
;

39 
CﬁdOut
.
T¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–CﬁdOut.
Ty≥
 );

40 
	}
}

42 
	$Tu∫OffCﬁdOut
()

44 
CﬁdOut
.
Out
 = 
FALSE
;

45 
	}
}

48 
U8
 
	$IsCh™gedOutSètus
()

50 if–
CﬁdOut
.
Out
 !CﬁdOut.
PªvOut
 )

52 
CﬁdOut
.
PªvOut
 = CﬁdOut.
Out
;

54  
TRUE
;

57  
FALSE
;

58 
	}
}

60 
	$Upd©eCﬁdCuºítAmou¡
()

64 if–
CﬁdOut
.
PaddögAmou¡
 == 0 )

66 
CﬁdOut
.
CuºítAmou¡
++;

70 
CﬁdOut
.
PaddögAmou¡
--;

72 
	}
}

73 
	$Regi°îOuègeCﬁdOut
()

75 
CﬁdOut
.
CuºítAmou¡
 = 0UL;

78 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eCﬁdCuºítAmou¡
 );

81 
	`SèπCheckOuège
–
OUTAGE_DELAY_TIME
, 
OUTAGE_CHECK_TIME_10SEC
, 
TYPE_WATER
 );

82 
	}
}

84 
	$UnRegi°îOuègeCﬁdOut
()

87 
	`Upd©eDøöCﬁdW©îC⁄sume
–
CﬁdOut
.
CuºítAmou¡
 );

90 
	`Upd©eCﬁdAmou¡
–
CﬁdOut
.
CuºítAmou¡
 );

93 
	`Upd©eU£rUßge
–
CﬁdOut
.
CuºítAmou¡
 );

94 
CﬁdOut
.
CuºítAmou¡
 = 0UL;

97 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
NULL
 );

99 
	`St›CheckOuège
();

100 
	}
}

105 
	mOUT_CLOSE_AIR
,

106 
	mOUT_OPEN_WATER_IN
,

107 
	mOUT_INIT_OUTAGE
,

108 
	mOUT_OPEN_WATER_OUT
,

113 
	$O≥nVÆveCﬁdOut
()

115  
CﬁdOut
.
O≥nSãp
 )

118 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

119 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

120 
CﬁdOut
.
PaddögAmou¡
 = 
AMOUNT_10
;

122 
CﬁdOut
.
WaôTime
 = 
WAIT_100MS
;

123 
CﬁdOut
.
O≥nSãp
++;

127 if–
CﬁdOut
.
WaôTime
 != 0 )

129 
CﬁdOut
.
WaôTime
--;

133 
	`Regi°îOuègeCﬁdOut
();

134 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

135 
CﬁdOut
.
O≥nSãp
++;

140 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

142 
	`O≥nVÆve
–
VALVE_COLD_OUT
 );

143 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

149 
	}
}

153 
	mSTOP_CLOSE_WATER_OUT
,

154 
	mSTOP_CLOSE_WATER_IN
,

155 
	mSTOP_OPEN_AIR
,

159 
	$Clo£VÆveCﬁdOut
()

161  
CﬁdOut
.
Clo£Sãp
 )

164 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

165 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

167 if–
CﬁdOut
.
CuºítAmou¡
 > 
AMOUNT_50
 )

169 
	`Upd©eHŸOutLPM
–
	`GëFlowMëîLPM
() );

172 
	`UnRegi°îOuègeCﬁdOut
();

174 
CﬁdOut
.
WaôTime
 = 
WAIT_100MS
;

175 
CﬁdOut
.
Clo£Sãp
++;

179 if–
CﬁdOut
.
WaôTime
 != 0 )

181 
CﬁdOut
.
WaôTime
--;

185 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

187 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

188 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

189 
CﬁdOut
.
Clo£Sãp
++;

200 
	}
}

202 
U8
 
	$GëCﬁdOutPî˚¡
()

204  
	`CÆcPî˚¡
–
CﬁdOut
.
T¨gëAmou¡
, CﬁdOut.
CuºítAmou¡
 );

205 
	}
}

208 
U16
 
	$GëCﬁdOutAmou¡
()

210  
	`CÆcLôî
–
CﬁdOut
.
CuºítAmou¡
 );

211 
	}
}

215 
U8
 
	$IsD⁄eCﬁdOut
()

218 if–
	`IsEº‹Ty≥
–
ERR_TYPE_COLD_WATER_OUT
 ) =
TRUE
 )

220  
TRUE
;

224 if–
CﬁdOut
.
T¨gëAmou¡
 <CﬁdOut.
CuºítAmou¡
 )

226  
TRUE
;

229  
FALSE
;

230 
	}
}

232 
	$OutÊow
(
U8
 
mu8Out
)

234 if–
mu8Out
 =
TRUE
 )

236 
CﬁdOut
.
Clo£Sãp
 = 0;

237 
	`O≥nVÆveCﬁdOut
();

241 
CﬁdOut
.
O≥nSãp
 = 0;

242 
	`Clo£VÆveCﬁdOut
();

244 
	}
}

248 
U8
 
	$C⁄åﬁW©îCﬁdOut
()

250 if–
	`IsCh™gedOutSètus
(Ë=
TRUE
 )

252 if–
CﬁdOut
.
Out
 =
TRUE
 )

258 if–
CﬁdOut
.
Out
 =
TRUE
 )

260 if–
	`IsD⁄eCﬁdOut
(Ë=
TRUE
 )

262 
	`Tu∫OffCﬁdOut
();

263 
	`Sound
(
SOUND_EFFLUENT_END
);

264  
WATER_OUT_DONE
;

268 
	`OutÊow
(
CﬁdOut
.
Out
);

269  
WATER_OUT_GOING
;

270 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water_out.h

1 #i‚de‡
__COLD_WATER_OUT_H__


2 
	#__COLD_WATER_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out_ty≥.h
"

9 
Tu∫OnCﬁdOut
(
W©îOutTy≥_T
 
mTy≥
);

12 
Tu∫OffCﬁdOut
();

15 
U8
 
GëCﬁdOutPî˚¡
();

18 
U16
 
GëCﬁdOutAmou¡
();

21 
Upd©eCﬁdAmou¡
(
U32
 
mu32Amou¡
);

24 
U8
 
C⁄åﬁW©îCﬁdOut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\flush_water_out.c

1 
	~"hw.h
"

2 
	~"Êush_w©î_out.h
"

3 
	~"vÆve.h
"

4 
	~"Êow_mëî.h
"

5 
	~"u£r.h
"

6 
	~"Àvñ.h
"

7 
	~"ì¥om.h
"

8 
	~"‰⁄t.h
"

9 
	~"w©î_out_comm⁄.h
"

10 
	~"hŸ_w©î.h
"

11 
	~"hŸ_w©î_out.h
"

12 
	~"hŸ_w©î_hóãr.h
"

13 
	~"hóãr_out.h
"

14 
	~"Êow_vÆve.h
"

15 
	~"WIFI_C⁄åﬁ.h
"

16 
	~"sound.h
"

17 
	~"døö_pump.h
"

18 
	~"cﬁd_w©î.h
"

19 
	~"îr‹.h
"

20 
	~"fûãr.h
"

28 
FlushOut_T
 
	gFlushOut
;

31 
InôOutEvítLi°
();

32 
Upd©eFlushCuºítAmou¡
();

33 
U32
 
GëFlushFödOutT¨gëTime
–
W©îOutTy≥_T
 
mTy≥
);

38 
	#FLUSH_AMOUNT_FILTER
 18000UL

39 
	#FLUSH_AMOUNT_HEATER
 3000UL

40 
	#FLUSH_AMOUNT_COOLER
 6000UL

42 

	)

43 
	#VALVE_DELAY_TIME
 10U

	)

46 
	#MAX_FILTER_TIME_OUT
 ( 5U * 60U * 100U )

47 

	)

49 
	#MAX_COLD_TIME_OUT
 ( 3U * 60U * 100U )

50 

	)

51 
	#MAX_FLUSH_COLD_TIME_OUT
 ( 5U * 60U * 100U )

52 

	)

54 
	#MAX_DONE_WAIT_TIME
 ( 1U * 100U )

55 

	)

57 c⁄° 
W©îOutTabÀ_T
 
	gFlushTabÀLi°
[] =

59 { 
OUT_AMOUNT_FLUSH_FILTER
, 
AMOUNT_3000
 },

61 { 
OUT_AMOUNT_FLUSH_HEATER
, 
AMOUNT_500
 },

62 { 
OUT_AMOUNT_FLUSH_COOLER
, 
AMOUNT_1000
 },

63 { 
OUT_AMOUNT_FLUSH_COOLER_DRAIN
, 
AMOUNT_5000
 },

64 { 
OUT_AMOUNT_FLUSH_CHECK_HEATER
, 
AMOUNT_500
 },

65 { 
OUT_AMOUNT_CHECK_HEATER
, 
AMOUNT_120
 }

68 
	#SZ_FLUSH_TABLE
 ((
FlushTabÀLi°
)/(
W©îOutTabÀ_T
))

	)

69 
	#DEFAULT_AMOUNT
 0UL

	)

72 
U32
 
	$GëFlushFödOutT¨gëTime
–
W©îOutTy≥_T
 
mTy≥
)

74 
U8
 
i
;

76  
i
 = 0; i < 
SZ_FLUSH_TABLE
 ; i++ )

78 if–
FlushTabÀLi°
[ 
i
 ].
Ty≥
 =
mTy≥
 )

80  
FlushTabÀLi°
[ 
i
 ].
Amou¡
;

84  
DEFAULT_AMOUNT
;

85 
	}
}

88 
	$InôFlushOut
()

96 
FlushOut
.
SëupInô
 = 
FLUSH_STATUS_DONE
;

97 
FlushOut
.
Sètus
 = 
FLUSH_STATUS_DONE
;

98 
FlushOut
.
PowîOn
 = 
FLUSH_STATUS_INIT
;

99 
FlushOut
.
Out
 = 
FALSE
;

100 
FlushOut
.
PªvOut
 = 
FALSE
;

102 
FlushOut
.
T¨gëAmou¡
 = 0UL;

103 
FlushOut
.
FûãrT¨gëAmou¡
 = 0UL;

104 
FlushOut
.
FlushCﬁdT¨gëAmou¡
 = 0UL;

105 
FlushOut
.
CuºítAmou¡
 = 0UL;

107 
FlushOut
.
Mode
 = 0U;

108 
	}
}

112 
	$SëFlushSëupInô
(
FlushSètus_T
 
mu8Sètus
)

114 
FlushOut
.
SëupInô
 = 
mu8Sètus
;

115 
	}
}

117 
FlushSètus_T
 
	$GëFlushSëupInô
()

119  
FlushOut
.
SëupInô
;

120 
	}
}

124 
	$SëFlushSètus
(
FlushSètus_T
 
mu8Sètus
)

126 
FlushOut
.
Sètus
 = 
mu8Sètus
;

127 
	}
}

129 
FlushSètus_T
 
	$GëFlushSètus
()

131  
FlushOut
.
Sètus
;

132 
	}
}

136 
	$SëFlushPowîOn
(
FlushSètus_T
 
mu8Sètus
)

138 
FlushOut
.
PowîOn
 = 
mu8Sètus
;

139 
	}
}

141 
FlushSètus_T
 
	$GëFlushPowîOn
()

143  
FlushOut
.
PowîOn
;

144 
	}
}

147 
U32
 
	$GëFlushCuºítAmou¡
()

149  
FlushOut
.
CuºítAmou¡
;

150 
	}
}

152 
	$SëFlushCuºítAmou¡
(
U32
 
mu32Amou¡
)

154 
FlushOut
.
CuºítAmou¡
 = 
mu32Amou¡
;

155 
	}
}

158 
U8
 
	$IsD⁄eFlushSètus
()

160 if–
	`GëFlushSètus
(Ë=
FLUSH_STATUS_DONE


161 && 
	`GëFlushSëupInô
(Ë=
FLUSH_STATUS_DONE


164  
TRUE
;

167  
FALSE
;

168 
	}
}

172 
U8
 
	$IsD⁄eFlushInôSëup
()

174 if–
	`IsD⁄eFlushSètus
(Ë=
TRUE


175 && 
	`GëFlushPowîOn
(Ë=
FLUSH_STATUS_DONE
 )

177  
TRUE
;

180  
FALSE
;

181 
	}
}

183 
	$Re£tFlushW©îOut
()

185 
FlushOut
.
Sètus
 = 
FLUSH_STATUS_INIT
;

186 
FlushOut
.
CuºítAmou¡
 = 0UL;

188 
	`SaveEïromId
–
EEP_ID_FLUSH_STATUS
 );

189 
	}
}

192 
	$SëFlushOutMode
–
U16
 
mu16Mode
 )

194 
FlushOut
.
Mode
 |
mu16Mode
;

195 
	}
}

197 
	$CÀ¨FlushOutMode
–
U16
 
mu16Mode
 )

199 
FlushOut
.
Mode
 &~
mu16Mode
;

200 
	}
}

202 
U8
 
	$IsSëFlushOutMode
(
U16
 
mu8Mode
 )

204 if–(
FlushOut
.
Mode
 & 
mu8Mode
 ) == mu8Mode )

206  
TRUE
;

209  
FALSE
;

210 
	}
}

213 
U16
 
	$GëFlushOutMode
()

215  
FlushOut
.
Mode
;

216 
	}
}

220 
	$Tu∫OnFlushOut
(
W©îOutTy≥_T
 
mTy≥
)

222 ()
mTy≥
;

224 
FlushOut
.
Out
 = 
TRUE
;

228 
FlushOut
.
T¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

229 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

232 if–
FlushOut
.
SëupInô
 =
FLUSH_STATUS_INIT
 )

234 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER
 );

238 
FlushOut
.
FûãrT¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

239 
FlushOut
.
FûãrT¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

240 
	}
}

242 
	$Tu∫OnFlushOut
(
W©îOutTy≥_T
 
mTy≥
)

244 ()
mTy≥
;

246 
FlushOut
.
Out
 = 
TRUE
;

248 if–
FlushOut
.
SëupInô
 =
FLUSH_STATUS_INIT
 )

251 
FlushOut
.
T¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

252 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

253 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER
 );

254 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER_DRAIN
 );

257 
FlushOut
.
FûãrT¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

258 
FlushOut
.
FûãrT¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

261 
FlushOut
.
FlushCﬁdT¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

262 
FlushOut
.
FlushCﬁdT¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

263 
FlushOut
.
FlushCﬁdT¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER
 );

265 if–
FlushOut
.
Sètus
 =
FLUSH_STATUS_INIT
 )

268 
FlushOut
.
T¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

269 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

270 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER
 );

273 
FlushOut
.
FûãrT¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

274 
FlushOut
.
FûãrT¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

278 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

280 
FlushOut
.
T¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

281 
FlushOut
.
T¨gëAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER
 );

283 
FlushOut
.
FûãrT¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

287 
FlushOut
.
T¨gëAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER
 );

290 
	}
}

293 
U8
 
	$IsFlushOut
()

295  
FlushOut
.
Out
;

296 
	}
}

299 
	$Tu∫OffFlushOut
()

301 
FlushOut
.
Out
 = 
FALSE
;

302 
	}
}

305 
U8
 
	$IsCh™gedOutSètus
()

307 if–
FlushOut
.
Out
 !FlushOut.
PªvOut
 )

309 
FlushOut
.
PªvOut
 = FlushOut.
Out
;

311  
TRUE
;

314  
FALSE
;

315 
	}
}

317 
	$SèπFlushOut
()

319 if–
FlushOut
.
SëupInô
 =
FLUSH_STATUS_DONE


320 && 
FlushOut
.
Sètus
 =
FLUSH_STATUS_DONE
 )

323 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

325 
	`SëFlushOutMode
–
POWER_ON_CHP
 );

329 
	`SëFlushOutMode
–
POWER_ON_CP
 );

335 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

337 
	`SëFlushOutMode
–
FLUSH_OUT_CHP
 );

341 
	`SëFlushOutMode
–
FLUSH_OUT_CP
 );

345 if–
FlushOut
.
SëupInô
 =
FLUSH_STATUS_DONE
 )

347 
	`CÀ¨FlushOutMode
–
FLUSH_OUT_EXCEPT_SETUP_INIT
 );

348 
	`SëFlushOutMode
–
FLUSH_OUT_COLD
 );

351 
	}
}

354 
	$St›FlushOut
()

356 
	`CÀ¨FlushOutMode
–
FLUSH_OUT_CANCEL
 );

357 
	`SëFlushOutMode
–
FLUSH_OUT_CLOSE_VALVE
 );

358 
	}
}

362 
	$U8
 (*
	tDoA˘i⁄_T
)(
	tU8
 *
	tpSãp
);

363 
	s_Êush_out_evít_


365 
U16
 
Mode
;

366 
U8
 
Sãp
;

367 
DoA˘i⁄_T
 
DoA˘i⁄
;

368 } 
	tFlushOutEvít_T
;

370 
U8
 
	`DoP¨ögWifi
(U8 *
pSãp
);

371 
U8
 
	`DoFûãrFlushög_CHP
(U8 *
pSãp
);

372 
U8
 
	`DoFûãrFlushög_CP
(U8 *
pSãp
);

373 
U8
 
	`DoFûlHŸW©î
(U8 *
pSãp
);

374 
U8
 
	`DoFûlCﬁdW©î
(U8 *
pSãp
);

375 
U8
 
	`DoFûlCﬁdFlushW©î
(U8 *
pSãp
);

376 
U8
 
	`DoClo£VÆves
(U8 *
pSãp
);

377 
U8
 
	`DoD⁄e
(U8 *
pSãp
);

378 
FlushOutEvít_T
 
OutEvítLi°
[] =

380 { 
FLUSH_OUT_PARING_WIFI
, 0U, 
DoP¨ögWifi
 },

381 { 
FLUSH_OUT_FILTER
, 0U, 
DoFûãrFlushög_CHP
 },

382 { 
FLUSH_OUT_FILTER_CP
, 0U, 
DoFûãrFlushög_CP
 },

383 { 
FLUSH_OUT_HEATER
, 0U, 
DoFûlHŸW©î
 },

384 { 
FLUSH_OUT_COLD
, 0U, 
DoFûlCﬁdW©î
 },

385 { 
FLUSH_OUT_FLUSH_COLD
, 0U, 
DoFûlCﬁdFlushW©î
 },

386 { 
FLUSH_OUT_CLOSE_VALVE
, 0U, 
DoClo£VÆves
 },

387 { 
FLUSH_OUT_DONE
, 0U, 
DoD⁄e
 }

388 
	}
};

389 
	#SZ_FLUSH_OUT_EVENT_LIST
 ((
OutEvítLi°
)/(
FlushOutEvít_T
))

	)

391 
	$InôOutEvítLi°
()

393 
U8
 
i
;

395  
i
 = 0; i < 
SZ_FLUSH_OUT_EVENT_LIST
 ; i++ )

397 
OutEvítLi°
[
i
].
Sãp
 = 0U;

399 
	}
}

401 
	$OutÊow
()

403 
U8
 
i
;

404 
U8
 
mu8Rë
 = 
FALSE
;

405 
FlushOutEvít_T
 *
pLi°
 = 
NULL
;

407  
i
 = 0; i < 
SZ_FLUSH_OUT_EVENT_LIST
 ; i++ )

409 
pLi°
 = &
OutEvítLi°
[ 
i
 ];

411 if–
	`IsSëFlushOutMode
–
pLi°
->
Mode
 ) =
TRUE
 )

413 if–
pLi°
->
DoA˘i⁄
 !
NULL
 )

415 
mu8Rë
 = 
pLi°
->
	`DoA˘i⁄
–&pLi°->
Sãp
 );

416 if–
mu8Rë
 =
TRUE
 )

418 
	`CÀ¨FlushOutMode
–
pLi°
->
Mode
 );

424 
	}
}

426 
	$SoundFlushögD⁄e
()

428 if–
	`GëFlushSëupInô
(Ë=
FALSE
 )

431 
	`Sound
–
SOUND_SETUP_FLUSHED
 );

433 if–
	`GëFlushSètus
(Ë=
FALSE
 )

436 
	`Sound
–
SOUND_FILTER_FLUSHED
 );

441 if–
	`GëFŸaReboŸ
(Ë=
TRUE
 )

443 
	`SëFŸaReboŸ
–
FALSE
 );

447 
	`Sound
–
SOUND_EFFLUENT_END
 );

450 
	}
}

453 
U8
 
	$DoP¨ögWifi
(
U8
 *
pSãp
)

456 
	`WifiKey
(
WIFI_KEY_BLE
);

459 
	`Sound
–
SOUND_SETUP_FLUSHING
 );

461  
TRUE
;

462 
	}
}

466 
	mFLUSH_OPEN_VALVE
,

467 
	mFLUSH_CHECK_OUTAGE
,

468 
	mFLUSH_FILLING
,

469 
	mFLUSH_DONE


473 
	#CHECK_HEATER_WATT_TIME
 300U

474 
U8
 
	`DoFûãrFlushög_CHP
(U8 *
pSãp
)

	)

476 
U16
 
	gmu16Time
 = 0U;

477 
U32
 
	gmAmou¡
;

480  *
	gpSãp
 )

482 
	gFLUSH_OPEN_VALVE
:

484 
O≥nVÆve
–
VALVE_HOT_IN
 );

485 
O≥nVÆve
–
VALVE_HOT_DRAIN
 );

486 
Clo£VÆve
–
VALVE_HOT_OUT
 );

488 
	gmu16Time
 = 
VALVE_DELAY_TIME
;

489 (*
	gpSãp
)++;

492 
	gFLUSH_CHECK_OUTAGE
:

495 if–
mu16Time
 > 0 )

497 
mu16Time
--;

501 
	gFlushOut
.
	gFûãrTimeOut
 = 
MAX_FILTER_TIME_OUT
;

503 
Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eFlushCuºítAmou¡
 );

504 
SèπCheckOuège
–
OUTAGE_FLUSHING_DELAY_TIME
, 
OUTAGE_CHECK_TIME_FLUSHING
, 
TYPE_HOT_WATER
 );

506 
FlowVÆveInô
();

508 
	gmu16Time
 = 
CHECK_HEATER_WATT_TIME
;

509 (*
	gpSãp
)++;

514 
	gFLUSH_FILLING
:

515 if–
FlushOut
.
FûãrTimeOut
 != 0 )

517 
FlushOut
.
FûãrTimeOut
--;

521 
	gmAmou¡
 = 
GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_CHECK_HEATER
 );

522 if–
	gFlushOut
.
	gCuºítAmou¡
 >
mAmou¡
 )

524 if–
mu16Time
 != 0 )

526 
mu16Time
--;

527 
SëHóãrOuçut
( 100 );

531 
SëHóãrOuçut
( 0 );

534 
SëHŸW©îInôFuŒ
–
TRUE
 );

536 
CheckHóãrW©t
–
GëHóãrOuçut
() );

539 if–
	gFlushOut
.
	gFûãrTimeOut
 == 0 )

542 
FlushOut
.
CuºítAmou¡
 = 
GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

543 
	gFlushOut
.
	gCuºítAmou¡
 +
GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

545 
SëHóãrOuçut
( 0 );

546 (*
	gpSãp
)++;

548 if–
	gFlushOut
.
	gCuºítAmou¡
 >
FlushOut
.
FûãrT¨gëAmou¡
 )

551 
SëHóãrOuçut
( 0 );

552 (*
	gpSãp
)++;

557 
	gFLUSH_DONE
:

558 
SëHóãrOuçut
( 0 );

560 
Upd©eRegi⁄TempIn
();

561 
St›CheckOuège
();

563 
Re£tFûãrUßge
();

564 
FlowVÆveT¨gë
–
DEFAULT_FLOW_TARGET
 );

565 
Clo£VÆve
–
VALVE_HOT_IN
 );

566 (*
	gpSãp
) = 0;

567  
	gTRUE
;

571 (*
pSãp
) = 0;

576  
	gFALSE
;

579 
U8
 
	$DoFûãrFlushög_CP
(
U8
 *
pSãp
)

581 
U16
 
mu16Time
 = 0U;

584  *
pSãp
 )

586 
FLUSH_OPEN_VALVE
:

587 
	`O≥nVÆve
–
VALVE_COLD_FLUSH
 );

589 
mu16Time
 = 
VALVE_DELAY_TIME
;

590 (*
pSãp
)++;

593 
FLUSH_CHECK_OUTAGE
:

596 if–
mu16Time
 > 0 )

598 
mu16Time
--;

602 
FlushOut
.
FûãrTimeOut
 = 
MAX_FILTER_TIME_OUT
;

604 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eFlushCuºítAmou¡
 );

605 
	`SèπCheckOuège
–
OUTAGE_FLUSHING_DELAY_TIME
, 
OUTAGE_CHECK_TIME_FLUSHING
, 
TYPE_WATER
 );

607 (*
pSãp
)++;

612 
FLUSH_FILLING
:

613 if–
FlushOut
.
FûãrTimeOut
 != 0 )

615 
FlushOut
.
FûãrTimeOut
--;

619 if–
FlushOut
.
FûãrTimeOut
 == 0 )

622 
FlushOut
.
CuºítAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

623 
FlushOut
.
CuºítAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

625 (*
pSãp
)++;

627 if–
FlushOut
.
CuºítAmou¡
 >FlushOut.
FûãrT¨gëAmou¡
 )

630 (*
pSãp
)++;

635 
FLUSH_DONE
:

636 
	`Clo£VÆve
–
VALVE_COLD_FLUSH
 );

637 
	`St›CheckOuège
();

638 
	`Re£tFûãrUßge
();

639 (*
pSãp
) = 0;

640  
TRUE
;

644 (*
pSãp
) = 0;

649  
FALSE
;

650 
	}
}

654 
	mHOT_OPEN_VALVE
,

655 
	mHOT_CHECK_OUTAGE
,

656 
	mHOT_FILLING
,

657 
	mHOT_DONE


660 
U8
 
	$DoFûlHŸW©î
(
U8
 *
pSãp
)

662 
U16
 
mu16Time
 = 0U;

663 
U32
 
mAmou¡
;

666  *
pSãp
 )

668 
HOT_OPEN_VALVE
:

670 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

671 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

672 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

674 
	`InôCheckHóãrW©t
();

676 
mu16Time
 = 
VALVE_DELAY_TIME
;

677 (*
pSãp
)++;

680 
HOT_CHECK_OUTAGE
:

683 if–
mu16Time
 > 0 )

685 
mu16Time
--;

689 
FlushOut
.
FûãrTimeOut
 = 
MAX_FILTER_TIME_OUT
;

691 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eFlushCuºítAmou¡
 );

692 
	`SèπCheckOuège
–
OUTAGE_FLUSHING_DELAY_TIME
, 
OUTAGE_CHECK_TIME_10SEC
, 
TYPE_HOT_WATER
 );

694 
	`FlowVÆveInô
();

695 
mu16Time
 = 
CHECK_HEATER_WATT_TIME
;

697 (*
pSãp
)++;

702 
HOT_FILLING
:

703 if–
FlushOut
.
FûãrTimeOut
 != 0 )

705 
FlushOut
.
FûãrTimeOut
--;

709 
mAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_CHECK_HEATER
 );

710 if–
FlushOut
.
CuºítAmou¡
 >
mAmou¡
 )

712 if–
mu16Time
 != 0 )

714 
mu16Time
--;

715 
	`SëHóãrOuçut
( 100 );

719 
	`SëHóãrOuçut
( 0 );

722 
	`SëHŸW©îInôFuŒ
–
TRUE
 );

724 
	`CheckHóãrW©t
–
	`GëHóãrOuçut
() );

727 if–
FlushOut
.
FûãrTimeOut
 == 0 )

730 
FlushOut
.
CuºítAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

732 
	`SëHóãrOuçut
( 0 );

733 (*
pSãp
)++;

735 if–
FlushOut
.
CuºítAmou¡
 >FlushOut.
FûãrT¨gëAmou¡
 )

738 
	`SëHóãrOuçut
( 0 );

739 (*
pSãp
)++;

744 
HOT_DONE
:

745 
	`St›CheckOuège
();

747 
	`SëHóãrOuçut
( 0 );

748 
	`Upd©eRegi⁄TempIn
();

750 
	`FlowVÆveT¨gë
–
DEFAULT_FLOW_TARGET
 );

751 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

752 (*
pSãp
) = 0;

753  
TRUE
;

757 (*
pSãp
) = 0;

762  
FALSE
;

763 
	}
}

769 
	mN_COLD_CHECK_WAIT
,

770 
	mN_COLD_CHECK_LEVEL
,

771 
	mN_COLD_WAIT_DRAIN_LEVEL
,

772 
	mN_COLD_OPEN_VALVE
,

773 
	mN_COLD_CHECK_OUTAGE
,

774 
	mN_COLD_FILLING
,

775 
	mN_COLD_LAZY_DONE
,

776 
	mN_COLD_DONE


780 
	$Clo£FûlCﬁdW©î
()

783 
	`St›CheckOuège
();

785 
	`SëFlushOutMode
–
FLUSH_OUT_CLOSE_VALVE
 );

787 
	`Upd©eHŸOutLPM
–
	`GëFlowMëîLPM
() );

788 
	`SëCﬁdW©îInôFuŒ
–
TRUE
 );

790 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

791 
	}
}

793 
U8
 
	$DoFûlCﬁdW©î
(
U8
 *
pSãp
)

795 
U16
 
mu16Time
 = 0U;

798  *
pSãp
 )

800 
N_COLD_CHECK_WAIT
:

802 
mu16Time
 = 400U;

804 (*
pSãp
)++;

807 
N_COLD_CHECK_LEVEL
:

808 if–
mu16Time
 != 0 )

810 
mu16Time
--;

815 if–
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) !
LEVEL_LOW
 )

817 
	`Tu∫OnDøöPump
();

821 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

822 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

825 (*
pSãp
)++;

828 
N_COLD_WAIT_DRAIN_LEVEL
:

830 if–
	`GëDøöPumpSètus
(Ë=
OFF


831 || 
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) =
LEVEL_LOW
 )

833 (*
pSãp
)++;

837 
N_COLD_OPEN_VALVE
:

839 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

840 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

842 
mu16Time
 = 10U;

843 (*
pSãp
)++;

846 
N_COLD_CHECK_OUTAGE
:

847 if–
mu16Time
 > 0 )

849 
mu16Time
--;

853 
FlushOut
.
CﬁdTimeOut
 = 
MAX_COLD_TIME_OUT
;

855 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eFlushCuºítAmou¡
 );

856 
	`SèπCheckOuège
–
OUTAGE_FLUSHING_DELAY_TIME
, 
OUTAGE_CHECK_TIME_10SEC
, 
TYPE_WATER
 );

858 (*
pSãp
)++;

862 
N_COLD_FILLING
:

863 if–
FlushOut
.
CﬁdTimeOut
 != 0 )

865 
FlushOut
.
CﬁdTimeOut
--;

869 if–
	`GëT™kLevñ
(
LEVEL_ID_DRAIN
Ë!
LEVEL_LOW


870 || 
FlushOut
.
CﬁdTimeOut
 == 0 )

872 
	`Clo£FûlCﬁdW©î
();

873 (*
pSãp
)++;

875 if–
FlushOut
.
T¨gëAmou¡
 <FlushOut.
CuºítAmou¡
 )

877 (*
pSãp
Ë
N_COLD_DONE
;

883 
N_COLD_LAZY_DONE
:

886 
FlushOut
.
CuºítAmou¡
 += 10;

887 if–
FlushOut
.
T¨gëAmou¡
 <FlushOut.
CuºítAmou¡
 )

889 (*
pSãp
)++;

893 
N_COLD_DONE
:

894 
	`Clo£FûlCﬁdW©î
();

896 (*
pSãp
) = 0;

897  
TRUE
;

902 (*
pSãp
) = 0;

907  
FALSE
;

908 
	}
}

913 
	mN_FLUSH_COLD_CHECK_WAIT
,

914 
	mN_FLUSH_COLD_CHECK_LEVEL
,

915 
	mN_FLUSH_COLD_WAIT_DRAIN_LEVEL
,

916 
	mN_FLUSH_COLD_OPEN_VALVE
,

917 
	mN_FLUSH_COLD_CHECK_OUTAGE
,

918 
	mN_FLUSH_COLD_FILLING
,

921 
	mN_FLUSH_COLD_READY
,

922 
	mN_FLUSH_COLD
,

923 
	mN_FLUSH_COLD_COLD
,

924 
	mN_FLUSH_COLD_CLOSE_DRAIN
,

925 
	mN_FLUSH_COLD_LAZY_DONE
,

926 
	mN_FLUSH_COLD_DONE
,

930 
U8
 
	$DoFûlCﬁdFlushW©î
(
U8
 *
pSãp
)

933 
U16
 
mu16Time
 = 0;

934 
U32
 
mAmou¡
 = 0;

937  *
pSãp
 )

939 
N_FLUSH_COLD_CHECK_WAIT
:

941 
mu16Time
 = 400U;

943 (*
pSãp
)++;

946 
N_FLUSH_COLD_CHECK_LEVEL
:

947 if–
mu16Time
 != 0 )

949 
mu16Time
--;

954 if–
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) !
LEVEL_LOW
 )

956 
	`Tu∫OnDøöPump
();

960 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

961 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

964 (*
pSãp
)++;

967 
N_FLUSH_COLD_WAIT_DRAIN_LEVEL
:

969 if–
	`GëDøöPumpSètus
(Ë=
OFF


970 || 
	`GëT™kLevñ
–
LEVEL_ID_DRAIN
 ) =
LEVEL_LOW
 )

972 (*
pSãp
)++;

976 
N_FLUSH_COLD_OPEN_VALVE
:

978 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

979 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

981 
mu16Time
 = 10U;

982 (*
pSãp
)++;

985 
N_FLUSH_COLD_CHECK_OUTAGE
:

986 if–
mu16Time
 > 0 )

988 
mu16Time
--;

992 
FlushOut
.
CﬁdTimeOut
 = 
MAX_COLD_TIME_OUT
;

994 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eFlushCuºítAmou¡
 );

995 
	`SèπCheckOuège
–
OUTAGE_FLUSHING_DELAY_TIME
, 
OUTAGE_CHECK_TIME_10SEC
, 
TYPE_WATER
 );

997 (*
pSãp
)++;

1001 
N_FLUSH_COLD_FILLING
:

1002 if–
FlushOut
.
CﬁdTimeOut
 != 0 )

1004 
FlushOut
.
CﬁdTimeOut
--;

1007 
mAmou¡
 = 
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_FILTER
 );

1008 
mAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_HEATER
 );

1009 
mAmou¡
 +
	`GëFlushFödOutT¨gëTime
–
OUT_AMOUNT_FLUSH_COOLER
 );

1012 if–
	`GëT™kLevñ
(
LEVEL_ID_DRAIN
Ë!
LEVEL_LOW


1013 || 
FlushOut
.
CﬁdTimeOut
 == 0 )

1016 
FlushOut
.
CuºítAmou¡
 = 
mAmou¡
;

1017 (*
pSãp
)++;

1019 if–
FlushOut
.
CuºítAmou¡
 >
mAmou¡
 )

1021 (*
pSãp
)++;

1026 
N_FLUSH_COLD_READY
:

1028 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

1031 
FlushOut
.
CﬁdTimeOut
 = 
MAX_FLUSH_COLD_TIME_OUT
;

1033 
mu16Time
 = 
WAIT_200MS
;

1034 (*
pSãp
)++;

1037 
N_FLUSH_COLD
:

1039 if–
mu16Time
 != 0 )

1041 
mu16Time
--;

1045 
	`SèπCheckOuège
–
OUTAGE_FLUSHING_DELAY_TIME
, 
OUTAGE_CHECK_TIME_60SEC
, 
TYPE_WATER
 );

1047 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

1048 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

1049 (*
pSãp
)++;

1053 
N_FLUSH_COLD_COLD
:

1054 if–
FlushOut
.
CﬁdTimeOut
 != 0 )

1056 
FlushOut
.
CﬁdTimeOut
--;

1060 
	`Clo£VÆve
–
VALVE_COLD_AIR
 );

1061 
	`Clo£VÆve
–
VALVE_COLD_OUT
 );

1063 
	`O≥nVÆve
–
VALVE_COLD_DRAIN
 );

1064 
	`O≥nVÆve
–
VALVE_COLD_IN
 );

1067 if–
FlushOut
.
CﬁdTimeOut
 == 0 )

1070 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

1071 
mu16Time
 = 200;

1073 (*
pSãp
)++;

1075 if–
FlushOut
.
T¨gëAmou¡
 <FlushOut.
CuºítAmou¡
 )

1077 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

1078 
mu16Time
 = 200;

1080 (*
pSãp
)++;

1085 
N_FLUSH_COLD_CLOSE_DRAIN
:

1086 if–
mu16Time
 != 0 )

1088 
mu16Time
--;

1092 if–
FlushOut
.
CﬁdTimeOut
 == 0 )

1094 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

1095 
	`Clo£FûlCﬁdW©î
();

1096 (*
pSãp
)++;

1100 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

1101 (*
pSãp
Ë
N_FLUSH_COLD_DONE
;

1106 
N_FLUSH_COLD_LAZY_DONE
:

1109 
FlushOut
.
CuºítAmou¡
 += 50;

1110 if–
FlushOut
.
T¨gëAmou¡
 <FlushOut.
CuºítAmou¡
 )

1112 (*
pSãp
)++;

1116 
N_FLUSH_COLD_DONE
:

1117 
	`Clo£FûlCﬁdW©î
();

1119 (*
pSãp
) = 0;

1120  
TRUE
;

1123 (*
pSãp
) = 0;

1128  
FALSE
;

1129 
	}
}

1133 
	mCLOSE_INIT
,

1134 
	mCLOSE_VALVE
,

1135 
	mCLOSE_WAIT


1138 
U8
 
	$DoClo£VÆves
(
U8
 *
pSãp
)

1140  *
pSãp
 )

1142 
CLOSE_INIT
:

1143 
FlushOut
.
D⁄eWaôTime
 = 
MAX_DONE_WAIT_TIME
;

1145 (*
pSãp
)++;

1148 
CLOSE_VALVE
:

1150 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

1151 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1153 
	`O≥nVÆve
–
VALVE_COLD_AIR
 );

1154 
	`Clo£VÆve
–
VALVE_COLD_IN
 );

1156 
	`Clo£VÆve
–
VALVE_COLD_FLUSH
 );

1158 
	`Clo£VÆve
–
VALVE_COLD_DRAIN
 );

1160 
	`SëHóãrOuçut
( 0 );

1162 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
NULL
 );

1165 (*
pSãp
)++;

1168 
CLOSE_WAIT
:

1169 if–
FlushOut
.
D⁄eWaôTime
 != 0 )

1171 
FlushOut
.
D⁄eWaôTime
--;

1175 (*
pSãp
) = 0;

1178 if–
FlushOut
.
T¨gëAmou¡
 <FlushOut.
CuºítAmou¡
 )

1180 
	`SëFlushOutMode
–
FLUSH_OUT_DONE
 );

1183  
TRUE
;

1190 (*
pSãp
) = 0;

1194  
FALSE
;

1195 
	}
}

1199 
U8
 
	$DoD⁄e
(
U8
 *
pSãp
)

1201 
	`SoundFlushögD⁄e
();

1204 if–
	`GëFlushSëupInô
(Ë=
FLUSH_STATUS_DONE


1205 && 
	`GëFlushSètus
(Ë=
FLUSH_STATUS_INIT
 )

1207 
	`SëFûãrCh™gedFlushSètus
–
FILTER_CHANGED_FLUSH
 );

1211 
	`SëFlushSëupInô
–
FLUSH_STATUS_DONE
 );

1212 
	`SaveEïromId
–
EEP_ID_FLUSH_SETUP_INIT
 );

1215 
	`SëFlushSètus
–
FLUSH_STATUS_DONE
 );

1216 
	`SaveEïromId
–
EEP_ID_FLUSH_STATUS
 );

1219 
	`SëFlushPowîOn
–
FLUSH_STATUS_DONE
 );

1222 
	`SëW©îOutSñe˘
–
SEL_WATER_ROOM
 );

1223  
TRUE
;

1224 
	}
}

1228 
U8
 
	$GëFlushOutPî˚¡
()

1230  
	`CÆcPî˚¡
–
FlushOut
.
T¨gëAmou¡
, FlushOut.
CuºítAmou¡
 );

1231 
	}
}

1234 
U16
 
	$GëFlushOutAmou¡
()

1236  
	`CÆcLôî
–
FlushOut
.
CuºítAmou¡
 );

1237 
	}
}

1240 
	$Upd©eFlushCuºítAmou¡
()

1242 
FlushOut
.
CuºítAmou¡
++;

1243 
	}
}

1245 
U8
 
	$IsD⁄eFlushOut
()

1248 if–
	`IsEº‹Ty≥
–
ERR_TYPE_ROOM_WATER_OUT
 ) =
TRUE
 )

1250  
TRUE
;

1253 if–
	`GëSy°em
(Ë=
SYSTEM_CHP
 )

1255 if–
	`IsEº‹
–
ERR_OUTAGE_HOT_WATER
 ) =
TRUE
 )

1257  
TRUE
;

1261  
FALSE
;

1262 
	}
}

1267 
U8
 
	$C⁄åﬁW©îFlushOut
()

1270 if–
	`IsCh™gedOutSètus
(Ë=
TRUE
 )

1273 if–
FlushOut
.
Out
 =
TRUE
 )

1276 
	`SèπFlushOut
();

1277 
	`InôOutEvítLi°
();

1282 
	`St›FlushOut
();

1284 
	`St›CheckOuège
();

1290 if–
FlushOut
.
Out
 =
TRUE
 )

1292 if–
	`IsD⁄eFlushOut
(Ë=
TRUE
 )

1294 
	`SëFlushCuºítAmou¡
( 0UL );

1295 
	`Tu∫OffFlushOut
();

1296  
WATER_OUT_DONE
;

1298 if–
	`IsSëFlushOutMode
–
FLUSH_OUT_DONE
 ) =
TRUE
 )

1300 
	`Tu∫OffFlushOut
();

1301  
WATER_OUT_DONE
;

1305 
	`OutÊow
();

1306  
WATER_OUT_GOING
;

1307 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\flush_water_out.h

1 #i‚de‡
__FLUSH_WATER_OUT_H__


2 
	#__FLUSH_WATER_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out_ty≥.h
"

9 
	#FLUSH_OUT_PARING_WIFI
 0x0001

10 
	#FLUSH_OUT_FILTER
 0x0002

11 
	#FLUSH_OUT_FILTER_CP
 0x0004

12 
	#FLUSH_OUT_HEATER
 0x0008

13 
	#FLUSH_OUT_COLD
 0x0010

14 
	#FLUSH_OUT_FLUSH_COLD
 0x0020

15 
	#FLUSH_OUT_CLOSE_VALVE
 0x0040

16 
	#FLUSH_OUT_DONE
 0x0080

	)

20 
	#FLUSH_OUT_CHP
 (\

21 
FLUSH_OUT_PARING_WIFI
 | \

22 
FLUSH_OUT_FILTER
 | \

23 
FLUSH_OUT_HEATER
 | \

24 
FLUSH_OUT_FLUSH_COLD
 )

	)

27 
	#FLUSH_OUT_CP
 (\

28 
FLUSH_OUT_PARING_WIFI
 | \

29 
FLUSH_OUT_FILTER_CP
 | \

30 
FLUSH_OUT_FLUSH_COLD
 )

	)

33 
	#POWER_ON_CHP
 (\

34 
FLUSH_OUT_HEATER
 | \

35 
FLUSH_OUT_COLD
 )

	)

38 
	#POWER_ON_CP
 (\

39 
FLUSH_OUT_COLD
 )

	)

45 
	#FLUSH_OUT_EXCEPT_SETUP_INIT
 (\

46 
FLUSH_OUT_FLUSH_COLD
 | \

47 
FLUSH_OUT_PARING_WIFI
 )

	)

51 
	#FLUSH_OUT_CANCEL
 (\

52 
FLUSH_OUT_FILTER
 | \

53 
FLUSH_OUT_FILTER_CP
 | \

54 
FLUSH_OUT_HEATER
 | \

55 
FLUSH_OUT_COLD
 | \

56 
FLUSH_OUT_FLUSH_COLD
 )

	)

61 
	mFLUSH_STATUS_INIT
,

62 
	mFLUSH_STATUS_DONE
,

63 } 
	tFlushSètus_T
;

66 
	s_Êush_w©î_out_


68 
FlushSètus_T
 
	mSëupInô
;

69 
FlushSètus_T
 
	mSètus
;

70 
FlushSètus_T
 
	mPowîOn
;

72 
U8
 
	mOut
;

73 
U8
 
	mPªvOut
;

75 
U16
 
	mMode
;

77 
U32
 
	mT¨gëAmou¡
;

78 
U32
 
	mFûãrT¨gëAmou¡
;

79 
U32
 
	mFlushCﬁdT¨gëAmou¡
;

80 
U32
 
	mCuºítAmou¡
;

82 
U16
 
	mFûãrTimeOut
;

83 
U16
 
	mCﬁdTimeOut
;

84 
U16
 
	mFlushCﬁdTimeOut
;

85 
U16
 
	mD⁄eWaôTime
;

86 } 
	tFlushOut_T
;

88 
InôFlushOut
();

91 
SëFlushSëupInô
(
FlushSètus_T
 
mu8Sètus
);

92 
FlushSètus_T
 
GëFlushSëupInô
();

95 
FlushSètus_T
 
GëFlushSètus
();

96 
SëFlushSètus
(
FlushSètus_T
 
mu8Sètus
);

98 
SëFlushPowîOn
(
FlushSètus_T
 
mu8Sètus
);

99 
FlushSètus_T
 
GëFlushPowîOn
();

102 
U32
 
GëFlushCuºítAmou¡
();

103 
SëFlushCuºítAmou¡
(
U32
 
mu32Amou¡
);

106 
U8
 
IsD⁄eFlushSètus
();

109 
U8
 
IsD⁄eFlushInôSëup
();

113 
Re£tFlushW©îOut
();

117 
Tu∫OnFlushOut
(
W©îOutTy≥_T
 
mTy≥
);

121 
U8
 
IsFlushOut
();

124 
Tu∫OffFlushOut
();

126 
U8
 
GëFlushOutPî˚¡
();

129 
U16
 
GëFlushOutAmou¡
();

132 
U8
 
C⁄åﬁW©îFlushOut
();

135 
SëFlushOutMode
–
U16
 
mu16Mode
 );

136 
U16
 
GëFlushOutMode
();

137 
CÀ¨FlushOutMode
–
U16
 
mu16Mode
 );

138 
U8
 
IsSëFlushOutMode
(
U16
 
mu8Mode
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water.c

1 
	~"hŸ_w©î.h
"

2 
	~"îr‹.h
"

3 
	~"w©î_out.h
"

4 
	~"Êush_w©î_out.h
"

5 
	~"ì¥om.h
"

6 
	~"hŸ_w©î_out.h
"

7 
	~"hóãr_out.h
"

8 
	~"ªœy.h
"

13 
	#TEMP_HOT_USER
 100

	)

14 
	#TEMP_HOT_COFFEE
 85

	)

15 
	#TEMP_HOT_TEA
 70

	)

16 
	#TEMP_HOT_MILK
 45

	)

17 c⁄° 
U16
 
	ggu16TempLi°
[ 
SEL_HOT_NUM
 ] =

19 
TEMP_HOT_MILK
,

20 
TEMP_HOT_TEA
,

21 
TEMP_HOT_COFFEE
,

22 
TEMP_HOT_USER
,

32 
	#HEATER_ON_TIME
 20U

33 

	)

34 
HŸW©î_T
 
	gHŸ
;

37 
	$InôHŸW©î
()

39 
HŸ
.
InôFuŒ
 = 
FALSE
;

40 
HŸ
.
Sñe˘
 = 
SEL_HOT_USER
;

41 
HŸ
.
HóãrOnTime
 = 
HEATER_ON_TIME
;

42 
HŸ
.
C⁄fU£r
 = 
TRUE
;

43 
HŸ
.
Coﬁög
 = 
FALSE
;

44 #i‡
CONFIG_TEST_HOT_OUT


45 
HŸ
.
Te°
 = 
TRUE
;

47 
	}
}

49 
	$GëHŸW©îD©a
(
HŸW©î_T
 *
pD©a
)

51 
	`MEMCPY
–(
__FAR
 *)
pD©a
, (c⁄° __FAR *)&
HŸ
, –
HŸW©î_T
 ));

52 
	}
}

54 
	$SëHŸW©îInôFuŒ
(
U8
 
mu8VÆ
 )

56 
HŸ
.
InôFuŒ
 = 
mu8VÆ
;

57 
	}
}

59 
U8
 
	$GëHŸW©îInôFuŒ
()

61  
HŸ
.
InôFuŒ
;

62 
	}
}

64 
	$SëHŸW©îCoﬁög
(
U8
 
mu8VÆ
 )

66 
HŸ
.
Coﬁög
 = 
mu8VÆ
;

67 
	}
}

69 
U8
 
	$GëHŸW©îCoﬁög
()

71  
HŸ
.
Coﬁög
;

72 
	}
}

74 
	$SëHŸSñe˘
(
U8
 
mu8Sñ
 )

76 
HŸ
.
Sñe˘
 = 
mu8Sñ
;

77 
	}
}

79 
U8
 
	$GëHŸSñe˘
()

81  
HŸ
.
Sñe˘
;

82 
	}
}

84 
	$CÀ¨HŸHóãrOnTime
()

86 
HŸ
.
HóãrOnTime
 = 0;

87 
	}
}

90 
	$SëHŸC⁄figU£r
(
U8
 
mu8C⁄f
 )

92 
HŸ
.
C⁄fU£r
 = 
mu8C⁄f
;

93 
	`SaveEïromId
–
EEP_ID_CONF_USER_HOT
 );

94 
	}
}

96 
U8
 
	$GëHŸC⁄figU£r
()

98  
HŸ
.
C⁄fU£r
;

99 
	}
}

101 
U16
 
	$GëHŸSñe˘Temp
(
U8
 
mu8Sñ
)

103 if–
mu8Sñ
 > 
SEL_HOT_NUM
 )

105 
mu8Sñ
 = 
SEL_HOT_COFFEE
;

108  
gu16TempLi°
[ 
mu8Sñ
 ];

109 
	}
}

112 
	$SëHŸC⁄figTe°
(
U8
 
mu8Te°
)

114 
HŸ
.
Te°
 = 
mu8Te°
;

115 
	}
}

117 
U16
 
	$GëHŸC⁄figTe°
()

119  
HŸ
.
Te°
;

120 
	}
}

123 
U8
 
	$IsExpúedHóãrOnTime
()

125 if–
HŸ
.
HóãrOnTime
 == 0 )

127  
TRUE
;

130  
FALSE
;

131 
	}
}

133 
	$CheckHŸOutHóãrOnTime
()

139 if–
	`IsHŸOut
(Ë=
TRUE


140 || 
	`GëHóãrOuçut
() != 0 )

142 if–
	`IsTu∫OnRñay
–
RELAY_COMP
 ) =
FALSE
 )

144 
HŸ
.
HóãrOnTime
 = 
HEATER_ON_TIME
;

148 if–
HŸ
.
HóãrOnTime
 != 0 )

150 
HŸ
.
HóãrOnTime
--;

152 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water.h

1 #i‚de‡
__HOT_WATER_H__


2 
	#__HOT_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	s_hŸ_w©î_


8 
U8
 
	mInôFuŒ
;

9 
U8
 
	mSñe˘
;

14 
U16
 
	mHóãrOnTime
;

15 
U8
 
	mC⁄fU£r
;

17 
U8
 
	mCoﬁög
;

18 
U8
 
	mTe°
;

19 } 
	tHŸW©î_T
;

22 
InôHŸW©î
();

23 
GëHŸW©îD©a
(
HŸW©î_T
 *
pD©a
);

26 
SëHŸW©îInôFuŒ
(
U8
 
mu8VÆ
 );

27 
U8
 
GëHŸW©îInôFuŒ
();

30 
SëHŸW©îCoﬁög
(
U8
 
mu8VÆ
 );

31 
U8
 
GëHŸW©îCoﬁög
();

34 
	#SEL_HOT_MILK
 0U

35 
	#SEL_HOT_TEA
 1U

36 
	#SEL_HOT_COFFEE
 2U

37 
	#SEL_HOT_USER
 3U

38 
	#SEL_HOT_NUM
 4U

	)

39 
SëHŸSñe˘
(
U8
 
mu8Sñ
 );

40 
U8
 
GëHŸSñe˘
();

42 
CÀ¨HŸHóãrOnTime
();

44 
SëHŸC⁄figU£r
(
U8
 
mu8C⁄f
 );

45 
U8
 
GëHŸC⁄figU£r
();

47 
U16
 
GëHŸSñe˘Temp
(
U8
 
mu8Sñ
);

49 
SëHŸC⁄figTe°
(
U8
 
mu8Te°
);

50 
U16
 
GëHŸC⁄figTe°
();

52 
U8
 
IsExpúedHóãrOnTime
();

53 
CheckHŸOutHóãrOnTime
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out.c

1 
	~"hw.h
"

2 
	~"vÆve.h
"

3 
	~"u£r.h
"

4 
	~"ãmp.h
"

5 
	~"Êow_mëî.h
"

6 
	~"Êow_vÆve.h
"

7 
	~"w©î_out_comm⁄.h
"

8 
	~"eﬁ.h
"

9 
	~"sound.h
"

10 
	~"îr‹.h
"

11 
	~"utû.h
"

12 
	~"hŸ_w©î_out.h
"

13 
	~"hŸ_w©î.h
"

14 
	~"hŸ_w©î_hóãr.h
"

15 
	~"hŸ_w©î_Êow.h
"

16 
	~"hŸ_w©î_ãmp_èbÀ.h
"

17 
	~"hŸ_w©î_out_¥ehót.h
"

18 
	~"hóãr_out.h
"

19 
	~"hóãr_èbÀ.h
"

23 
dbg_hŸ_t
 
	gdbg_hŸ
;

25 
InôCupTemp
(
TEMP_T
 
mT¨gëTemp
);

26 
CÆcCupTemp
();

28 
	#MAX_HOT_OUT_LASTED_TIME
 60000U

29 

	)

31 
	#VALVE_DELAY_TIME
 100

34 

	)

35 
HŸOut_T
 
	gHŸOut
;

36 
CupTemp_T
 
	gCup
;

38 
InôOutEvítLi°
();

39 
Upd©eHŸCuºítAmou¡
();

42 
	$InôHŸOut
()

44 
HŸOut
.
Out
 = 
FALSE
;

45 
HŸOut
.
PªvOut
 = 
FALSE
;

46 
HŸOut
.
Ty≥
 = 
OUT_AMOUNT_0
;

49 
HŸOut
.
LPM
 = 
MAX_LPM
;

51 
HŸOut
.
T¨gëAmou¡
 = 0UL;

52 
HŸOut
.
CuºítAmou¡
 = 0UL;

54 
HŸOut
.
Mode
 = 0U;

55 
HŸOut
.
Regi⁄TempIn
 = 
REGION_TEMP_MID
;

57 
HŸOut
.
AvîageOutTemp
 = 0.0f;

60 
HŸOut
.
InôT¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–
OUT_AMOUNT_250
 );

61 
HŸOut
.
InôCuºítAmou¡
 = 0UL;

62 
HŸOut
.
InôCheckW©tAmou¡
 = 0UL;

64 
HŸOut
.
CoﬁögTime
 = 0U;

65 
HŸOut
.
MaxTimeOut
 = 0U;

66 
HŸOut
.
La°edOutTime
 = 0U;

68 
	`FlowVÆveFuŒO≥n
();

69 
	}
}

71 
	$GëHŸOutD©a
(
HŸOut_T
 *
pD©a
)

73 
	`MEMCPY
((
__FAR
 *Ë
pD©a
, (c⁄° __FAR *)&
HŸOut
, –
HŸOut_T
 ));

74 
	}
}

76 
TEMP_T
 
	$GëHŸOutAvîageOutTemp
()

78  
HŸOut
.
AvîageOutTemp
;

79 
	}
}

81 
TEMP_T
 
	$GëHŸOutPªHótTemp
()

83  
HŸOut
.
T¨gëPªHótTemp
;

84 
	}
}

86 
TEMP_T
 
	$GëHŸOutT¨gëOutTemp
()

88  
HŸOut
.
T¨gëOutTemp
;

89 
	}
}

91 
U8
 
	$GëHŸOutRegi⁄TempIn
()

93  
HŸOut
.
Regi⁄TempIn
;

94 
	}
}

96 
	$Upd©eRegi⁄TempIn
()

98 
TEMP_T
 
tIn
;

101 
tIn
 = 
	`GëTemp
–
TEMP_ID_HOT_IN
 );

102 if–
HŸOut
.
Regi⁄TempIn
 =
REGION_TEMP_LOW
 )

104 if–
tIn
 >= 25.0f )

106 
HŸOut
.
Regi⁄TempIn
 = 
REGION_TEMP_HIGH
;

108 if–
tIn
 >= 16.0f )

110 
HŸOut
.
Regi⁄TempIn
 = 
REGION_TEMP_MID
;

113 if–
HŸOut
.
Regi⁄TempIn
 =
REGION_TEMP_MID
 )

115 if–
tIn
 >= 25.0f )

117 
HŸOut
.
Regi⁄TempIn
 = 
REGION_TEMP_HIGH
;

119 if–
tIn
 <= 15.0f )

121 
HŸOut
.
Regi⁄TempIn
 = 
REGION_TEMP_LOW
;

126 if–
tIn
 <= 24.0f )

128 
HŸOut
.
Regi⁄TempIn
 = 
REGION_TEMP_MID
;

130 if–
tIn
 <= 15.0f )

132 
HŸOut
.
Regi⁄TempIn
 = 
REGION_TEMP_LOW
;

135 
	}
}

139 
F32
 
	$GëHŸOutLPM
()

141  
HŸOut
.
LPM
;

142 
	}
}

144 
	$SëHŸOutLPM
(
F32
 
mf32LPM
)

146 
HŸOut
.
LPM
 = 
mf32LPM
;

147 
	}
}

149 
	$Upd©eHŸOutLPM
(
F32
 
mf32LPM
)

151 if–
mf32LPM
 > 
MAX_LPM
 )

153 
HŸOut
.
LPM
 = 
MAX_LPM
;

155 if–
mf32LPM
 < 
MIN_LPM
 )

157 
HŸOut
.
LPM
 = 
MIN_LPM
;

161 
HŸOut
.
LPM
 = 
mf32LPM
;

163 
	}
}

167 
	#SUM_DELAY_TIME
 10

168 
	`Re£tAvîageOutTemp
()

	)

170 
	gHŸOut
.
	gSumCou¡
 = 0;

171 
	gHŸOut
.
	gSumOutTemp
 = 0.0f;

172 
	gHŸOut
.
	gSumDñayTime
 = 
SUM_DELAY_TIME
;

175 
	$CÆcAvîageOutTemp
()

177 if–
HŸOut
.
SumDñayTime
 != 0 )

179 
HŸOut
.
SumDñayTime
--;

183 
HŸOut
.
SumDñayTime
 = 
SUM_DELAY_TIME
;

185 
HŸOut
.
SumCou¡
++;

186 
HŸOut
.
SumOutTemp
 +
	`GëTemp
–
TEMP_ID_HOT_OUT
 );

187 
HŸOut
.
AvîageOutTemp
 = HŸOut.
SumOutTemp
 / (
TEMP_T
)HŸOut.
SumCou¡
;

189 
	}
}

193 
	$SëHŸOutMode
–
U16
 
mu16Mode
 )

195 
HŸOut
.
Mode
 |
mu16Mode
;

196 
	}
}

198 
U16
 
	$GëHŸOutMode
()

200  
HŸOut
.
Mode
;

201 
	}
}

203 
	$CÀ¨HŸOutMode
–
U16
 
mu16Mode
 )

205 
HŸOut
.
Mode
 &~
mu16Mode
;

206 
	}
}

208 
U8
 
	$IsSëHŸOutMode
(
U16
 
mu8Mode
 )

210 if–(
HŸOut
.
Mode
 & 
mu8Mode
 ) == mu8Mode )

212  
TRUE
;

215  
FALSE
;

216 
	}
}

218 
	$SëHŸOutCh™gedSñ
()

220 
HŸOut
.
Inô
 = 
TRUE
;

221 
	}
}

223 
	$CÀ¨HŸOutCh™gedSñ
()

225 
HŸOut
.
Inô
 = 
FALSE
;

226 
	}
}

228 
U8
 
	$GëHŸOutCh™gedSñ
()

230  
HŸOut
.
Inô
;

231 
	}
}

234 
	$CÀ¨HŸOutLa°edTimeOut
()

236 
HŸOut
.
La°edOutTime
 = 
RECHECK_OUTAGE_TIME
;

237 
	}
}

239 
	$Re£tHŸOutLa°edTimeOut
()

241 
HŸOut
.
La°edOutTime
 = 0;

242 
	}
}

244 
U16
 
	$GëHŸOutLa°edTimeOut
()

246  
HŸOut
.
La°edOutTime
;

247 
	}
}

249 
	$Upd©eHŸOutTime
()

251 if–
HŸOut
.
La°edOutTime
 < 
MAX_HOT_OUT_LASTED_TIME
 )

253 
HŸOut
.
La°edOutTime
++;

255 
	}
}

257 
	$Tu∫OnHŸOut
(
W©îOutTy≥_T
 
mTy≥
)

259 
U8
 
mu8Sñ
;

260 
U8
 
mu8Cœss
;

263 
mu8Cœss
 = (
U8
)
	`GëHóãrCœss
();

264 
mu8Sñ
 = 
	`GëHŸSñe˘
();

266 
HŸOut
.
Out
 = 
TRUE
;

267 
HŸOut
.
Ty≥
 = 
mTy≥
;

268 
HŸOut
.
T¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–HŸOut.
Ty≥
 );

269 
HŸOut
.
T¨gëOutTemp
 = 
	`GëHŸT¨gëOutTemp
–
mu8Sñ
, 
mu8Cœss
, HŸOut.
Regi⁄TempIn
 );

270 
HŸOut
.
T¨gëPªHótTemp
 = 
	`GëHŸT¨gëPªHótTemp
–
mu8Sñ
, 
mu8Cœss
, HŸOut.
Regi⁄TempIn
 );

271 
	}
}

274 
U8
 
	$IsHŸOut
()

276  
HŸOut
.
Out
;

277 
	}
}

280 
	$Tu∫OffHŸOut
()

282 
HŸOut
.
Out
 = 
FALSE
;

283 
	}
}

286 
U8
 
	$IsCh™gedOutSètus
()

288 if–
HŸOut
.
Out
 !HŸOut.
PªvOut
 )

290 
HŸOut
.
PªvOut
 = HŸOut.
Out
;

292  
TRUE
;

295  
FALSE
;

296 
	}
}

300 
	$SèπHŸOut
()

302 if–
	`GëHŸW©îInôFuŒ
(Ë=
FALSE
 )

304 
	`SëHŸOutMode
–
HOT_OUT_FIRST
 );

306 if–
	`GëHŸW©îCoﬁög
(Ë=
TRUE
 )

308 
	`SëHŸOutMode
–
HOT_OUT_WITH_COOLING
 );

312 
	`SëHŸOutMode
–
HOT_OUT_ALL
 );

314 
	`CÀ¨HŸOutMode
–
HOT_OUT_RESET
 );

316 
HŸOut
.
CuºítAmou¡
 = 0;

317 
HŸOut
.
InôCuºítAmou¡
 = 0;

318 
	}
}

321 
	$SèπHŸOutEﬁ
()

323 
	`SëHŸOutMode
–
HOT_OUT_ALL_EOL
 );

325 
HŸOut
.
CuºítAmou¡
 = 0;

326 
HŸOut
.
InôCuºítAmou¡
 = 0;

327 
	}
}

329 
	$St›HŸOut
()

331 
U8
 
mu8IsOut
 = 
FALSE
;

332 
U8
 
mu8IsPªHót
 = 
FALSE
;

333 
U8
 
mu8IsInô
 = 
FALSE
;

334 
U8
 
mu8IsEﬁOut
 = 
FALSE
;

337 
mu8IsOut
 = 
	`IsSëHŸOutMode
–
HOT_OUT_OUT
 );

338 
mu8IsPªHót
 = 
	`IsSëHŸOutMode
–
HOT_OUT_PRE_HEATING
 );

339 
mu8IsInô
 = 
	`IsSëHŸOutMode
–
HOT_OUT_INIT_DRAIN
 );

340 
mu8IsEﬁOut
 = 
	`IsSëHŸOutMode
–
HOT_OUT_OUT_EOL
 );

341 i‡–
mu8IsOut
 =
TRUE


342 || 
mu8IsPªHót
 =
TRUE


343 || 
mu8IsInô
 =
TRUE


344 || 
mu8IsEﬁOut
 =
TRUE
)

346 
	`CÀ¨HŸOutMode
–
HOT_OUT_CANCEL
 );

347 
	`SëHŸOutMode
–
HOT_OUT_DONE
 );

349 
	}
}

353 
	$U8
 (*
	tDoA˘i⁄_T
)(
	tU8
 *
	tpSãp
);

354 
	s_hŸ_out_evít_


356 
U16
 
Mode
;

357 
U8
 
Sãp
;

358 
DoA˘i⁄_T
 
DoA˘i⁄
;

359 } 
	tHŸOutEvít_T
;

361 
U8
 
	`DoInôDøö
(U8 *
pSãp
);

362 
U8
 
	`DoCoﬁög
(U8 *
pSãp
);

363 
U8
 
	`DoOut
(U8 *
pSãp
);

364 
U8
 
	`DoOutEﬁ
(U8 *
pSãp
);

365 
U8
 
	`DoD⁄e
(U8 *
pSãp
);

366 
U8
 
	`DoRe£t
(U8 *
pSãp
);

367 
HŸOutEvít_T
 
OutEvítLi°
[] =

370 { 
HOT_OUT_INIT_DRAIN
, 0U, 
DoInôDøö
 },

371 { 
HOT_OUT_COOLING
, 0U, 
DoCoﬁög
 },

372 { 
HOT_OUT_PRE_HEATING
, 0U, 
DoPªHótög
 },

373 { 
HOT_OUT_OUT_EOL
, 0U, 
DoOutEﬁ
 },

374 { 
HOT_OUT_OUT
, 0U, 
DoOut
 },

375 { 
HOT_OUT_DONE
, 0U, 
DoD⁄e
 },

376 { 
HOT_OUT_RESET
, 0U, 
DoRe£t
 }

377 
	}
};

378 
	#SZ_HOT_OUT_EVENT_LIST
 ((
OutEvítLi°
)/(
HŸOutEvít_T
))

	)

380 
	$InôOutEvítLi°
()

382 
U8
 
i
;

384  
i
 = 0; i < 
SZ_HOT_OUT_EVENT_LIST
 ; i++ )

386 
OutEvítLi°
[
i
].
Sãp
 = 0U;

388 
	}
}

390 
	$OutÊow
()

392 
U8
 
i
;

393 
U8
 
mu8Rë
 = 
FALSE
;

394 
HŸOutEvít_T
 *
pLi°
 = 
NULL
;

396  
i
 = 0; i < 
SZ_HOT_OUT_EVENT_LIST
 ; i++ )

398 
pLi°
 = &
OutEvítLi°
[ 
i
 ];

400 if–
	`IsSëHŸOutMode
–
pLi°
->
Mode
 ) =
TRUE
 )

402 if–
pLi°
->
DoA˘i⁄
 !
NULL
 )

404 
mu8Rë
 = 
pLi°
->
	`DoA˘i⁄
–&pLi°->
Sãp
 );

405 if–
mu8Rë
 =
TRUE
 )

407 
	`CÀ¨HŸOutMode
–
pLi°
->
Mode
 );

413 
	}
}

427 
	mDRAIN_OPEN_OUT
,

428 
	mDRAIN_OPEN_IN
,

429 
	mDRAIN_DOING
,

430 
	mDRAIN_TURN_OFF_HEATER
,

431 
	mDRAIN_CLOSE_IN
,

432 
	mDRAIN_DONE
,

435 
	#MAX_TIME_OUT_INIT
 18000U

436 
	#CHECK_HEATER_WATT_TIME
 300U

437 
U8
 
	`DoInôDøö
(U8 *
pSãp
)

	)

439 
U16
 
	gmu16Time
 = 0U;

441  *
	gpSãp
 )

443 
	gDRAIN_OPEN_OUT
:

445 
O≥nVÆve
–
VALVE_HOT_DRAIN
 );

446 
Clo£VÆve
–
VALVE_HOT_OUT
 );

447 
FlowVÆveFuŒO≥n
();

452 
	gHŸOut
.
	gInôCheckW©tAmou¡
 = 
HŸOut
.
InôT¨gëAmou¡
 / 2UL;

453 
	gHŸOut
.
	gInôCuºítAmou¡
 = 0UL;

454 
	gHŸOut
.
	gMaxTimeOut
 = 
MAX_TIME_OUT_INIT
;

456 
InôCheckHóãrW©t
();

458 
	gmu16Time
 = 
VALVE_DELAY_TIME
;

459 (*
	gpSãp
)++;

462 
	gDRAIN_OPEN_IN
:

464 if–
mu16Time
 != 0 )

466 
mu16Time
--;

471 
Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eHŸInôCuºítAmou¡
 );

472 
SèπCheckOuège
–
OUTAGE_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

474 
O≥nVÆve
–
VALVE_HOT_IN
 );

476 
	gmu16Time
 = 
CHECK_HEATER_WATT_TIME
;

477 (*
	gpSãp
)++;

481 
	gDRAIN_DOING
:

484 if–
HŸOut
.
InôT¨gëAmou¡
 <HŸOut.
InôCuºítAmou¡
 )

486 
SëHŸOutMode
–
HOT_OUT_DONE
 );

487 
SëHŸW©îInôFuŒ
–
TRUE
 );

489 (*
	gpSãp
)++;

495 if–
	gHŸOut
.
	gMaxTimeOut
 != 0 )

497 
HŸOut
.
MaxTimeOut
--;

501 (*
	gpSãp
)++;

509 if–
	gHŸOut
.
	gInôCheckW©tAmou¡
 <
HŸOut
.
InôCuºítAmou¡
 )

511 if–
mu16Time
 != 0 )

513 
mu16Time
--;

514 
SëHóãrOuçut
( 100 );

518 
SëHóãrOuçut
( 0 );

522 
CheckHóãrW©t
–
GëHóãrOuçut
() );

525 
	gDRAIN_TURN_OFF_HEATER
:

526 
SëHóãrOuçut
( 0 );

528 
	gmu16Time
 = 
VALVE_DELAY_TIME
;

529 (*
	gpSãp
)++;

532 
	gDRAIN_CLOSE_IN
:

533 if–
mu16Time
 != 0 )

535 
mu16Time
--;

539 
Upd©eRegi⁄TempIn
();

541 
St›CheckOuège
();

542 
Clo£VÆve
–
VALVE_HOT_IN
 );

543 (*
	gpSãp
)++;

547 
	gDRAIN_DONE
:

548  
TRUE
;

552 (*
pSãp
) = 0;

557  
	gFALSE
;

571 
	mCOOLING_OPEN_DRAIN
,

572 
	mCOOLING_OPEN_OUT
,

573 
	mCOOLING_DOING
,

574 
	mCOOLING_CLOSE_IN
,

575 
	mCOOLING_DONE
,

578 
	#COOLING_TIME
 1200

579 
U8
 
	`DoCoﬁög
(U8 *
pSãp
)

	)

581 
U16
 
	gmu16Time
 = 0U;

583  *
	gpSãp
 )

585 
	gCOOLING_OPEN_DRAIN
:

586 
O≥nVÆve
–
VALVE_HOT_IN
 );

587 
O≥nVÆve
–
VALVE_HOT_DRAIN
 );

589 
SëHóãrOuçut
( 0 );

590 
FlowVÆveFuŒO≥n
();

593 
Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eHŸInôCuºítAmou¡
 );

594 
SèπCheckOuège
–
OUTAGE_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

596 
	gHŸOut
.
	gCoﬁögTime
 = 
COOLING_TIME
;

597 
	gmu16Time
 = 
VALVE_DELAY_TIME
;

599 (*
	gpSãp
)++;

602 
	gCOOLING_OPEN_OUT
:

603 if–
mu16Time
 != 0 )

605 
mu16Time
--;

609 
Clo£VÆve
–
VALVE_HOT_OUT
 );

610 (*
	gpSãp
)++;

614 
	gCOOLING_DOING
:

617 if–
GëOuègeSètus
(
TYPE_HOT_WATER
Ë=
FLOW_OUTAGE
 )

619 (*
pSãp
)++;

621 if–
GëTemp
–
TEMP_ID_HOT_IN
 ) + 10.0‡>GëTemp–
TEMP_ID_HEATER
 ) )

624 
SëHŸW©îCoﬁög
–
FALSE
 );

625 (*
	gpSãp
)++;

627 if–
	gHŸOut
.
	gCoﬁögTime
 != 0 )

629 
HŸOut
.
CoﬁögTime
--;

634 
SëHŸW©îCoﬁög
–
FALSE
 );

635 (*
	gpSãp
)++;

638 
	gmu16Time
 = 
VALVE_DELAY_TIME
;

641 
	gCOOLING_CLOSE_IN
:

642 if–
mu16Time
 != 0 )

644 
mu16Time
--;

648 
Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
NULL
 );

649 
St›CheckOuège
();

650 
Clo£VÆve
–
VALVE_HOT_IN
 );

651 (*
	gpSãp
)++;

655 
	gCOOLING_DONE
:

657  
TRUE
;

661 (*
pSãp
) = 0;

666  
	gFALSE
;

683 
	mOUT_INIT_VALVE
,

684 
	mOUT_INIT_VALVE_2
,

686 
	mOUT_INIT
,

687 
	mOUT_DOING
,

688 
	mOUT_DONE
,

693 
U16
 
ChekHŸSñ
–U16 
mu16Ouçut
, 
U8
 
mTime
 );

694 
	$C⁄åﬁW©t
()

696 
U16
 
mu16Ouçut
;

697 
F32
 
mLPM
;

701 
	`CÆcHóãrT¨gëW©t
–
	`GëHŸW©îT¨gëLPM
() );

703 
mLPM
 = 
	`GëFlowMëîLPM
();

704 if–
mLPM
 < 
MIN_LPM
 )

706 
mLPM
 = 
MIN_LPM
;

709 
	`CÆcHóãrT¨gëW©t
–
mLPM
 );

710 
mu16Ouçut
 = 
	`CÆcHóãrOuçut
();

712 
mu16Ouçut
 = 
	`ChekHŸSñ
–mu16Ouçut, 
FALSE
 );

713 
mu16Ouçut
 = 
	`CheckOvîHótög
( mu16Output );

714 
	`SëHóãrOuçut
–
mu16Ouçut
 );

715 
	}
}

721 
	#RELAY_TIME
 30

	)

722 
U16
 
	$CheckLimôOuçutRñay
(
U16
 
mu16Ouçut
, 
U8
 
mTime
, U8 
UpTime
, U8 
DownTime
 )

724 
U8
 
mu8Up
 = 
RELAY_TIME
;

725 
U8
 
mu8Down
 = 
RELAY_TIME
;

726 
U8
 
mu8ToggÀ
 = 
OFF
;

730 if–
mTime
 =
FALSE
 )

732 
mu8Up
 = 
UpTime
;

733 
mu8Down
 = 
DownTime
;

734 
mu8ToggÀ
 = 
OFF
;

735  
mu16Ouçut
;

738 if–
mu16Ouçut
 > 45

739 && 
mu8ToggÀ
 =
OFF
)

741 
mu8Down
 = 
DownTime
;

742 if–
mu8Up
 != 0 )

744 
mu8Up
--;

749 
mu8ToggÀ
 = 
TRUE
;

751 if–
mu16Ouçut
 < 55

752 && 
mu8ToggÀ
 =
ON
)

754 
mu8Up
 = 
UpTime
;

755 
mu8ToggÀ
 = 
ON
;

756 if–
mu8Down
 != 0 )

758 
mu8Down
--;

760 
mu8ToggÀ
 = 
OFF
;

765 if–
mu8ToggÀ
 =
ON
 )

767 if–
mu16Ouçut
 < 55 )

774 if–
mu16Ouçut
 > 45 )

781  
mu16Ouçut
;

782 
	}
}

786 
	#CHECK_HOT_SEL_TIME
 20

	)

787 
U16
 
	$CheckLimôOuçut
(
U16
 
mu16Ouçut
, 
U8
 
mTime
)

789 
U8
 
mu8Cou¡
 = 
CHECK_HOT_SEL_TIME
;

792 if–
mTime
 =
FALSE
 )

794 
mu8Cou¡
 = 
CHECK_HOT_SEL_TIME
;

797 if–
mu16Ouçut
 >= 65 )

799 if–
mu8Cou¡
 != 0 )

801 
mu8Cou¡
--;

803 if–
mu16Ouçut
 > 45 )

805 
mu16Ouçut
 = 45;

811 
mu8Cou¡
 = 
CHECK_HOT_SEL_TIME
;

813 if–
mu16Ouçut
 > 45 )

815 
mu16Ouçut
 = 45;

819  
mu16Ouçut
;

820 
	}
}

822 
	#CHECK_HOT_SEL_TIME
 30

	)

823 
U16
 
	$CheckLimôOuçut
(
U16
 
mu16Ouçut
, 
U8
 
mTime
)

825 
U8
 
mu8UpCou¡
 = 
CHECK_HOT_SEL_TIME
;

826 
U8
 
mu8DownCou¡
 = 
CHECK_HOT_SEL_TIME
;

829 if–
mTime
 =
FALSE
 )

831 
mu8UpCou¡
 = 
CHECK_HOT_SEL_TIME
;

832 
mu8DownCou¡
 = 
CHECK_HOT_SEL_TIME
;

836 if–
	`GëHóãrOutRegi⁄
(Ë=
REGION_DOUBLE
 )

838 if–
mu16Ouçut
 <= 45 )

840 if–
mu8DownCou¡
 != 0 )

842 
mu8DownCou¡
--;

844 
mu16Ouçut
 = 46;

849 
mu8DownCou¡
 = 
CHECK_HOT_SEL_TIME
;

852 
mu8UpCou¡
 = 
CHECK_HOT_SEL_TIME
;

857 if–
mu16Ouçut
 >= 50 )

859 if–
mu8UpCou¡
 != 0 )

861 
mu8DownCou¡
 = 
CHECK_HOT_SEL_TIME
;

862 
mu8UpCou¡
--;

864 
mu16Ouçut
 = 50;

867 if–
mu16Ouçut
 > 45 )

869 
mu8DownCou¡
 = 
CHECK_HOT_SEL_TIME
;

870 
mu16Ouçut
 = 45;

874 
mu8UpCou¡
 = 
CHECK_HOT_SEL_TIME
;

877 
mu8DownCou¡
 = 
CHECK_HOT_SEL_TIME
;

880  
mu16Ouçut
;

881 
	}
}

883 
U16
 
	$ChekHŸSñ
–
U16
 
mu16Ouçut
, 
U8
 
mTime
 )

888 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_TEA


889 && 
	`GëTemp
–
TEMP_ID_HOT_IN
 ) > 18.0f

890 && 
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 28.0f

891 && 
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW
 )

893 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) < 80.0f )

895 if–
mu16Ouçut
 <= 55 )

897 
mu16Ouçut
 = 55;

901 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_COFFEE


902 && 
	`GëTemp
–
TEMP_ID_HOT_IN
 ) > 18.0f

903 && 
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 28.0f

904 && 
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW
 )

909 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) < 90.0f )

911 if–
mu16Ouçut
 <= 55 )

913 
mu16Ouçut
 = 55;

918 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


919 && 
	`GëTemp
–
TEMP_ID_HOT_IN
 ) > 27.0f

920 && 
	`GëHóãrCœss
(Ë=
HEATER_CLASS_HIGH
 )

922 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 95.0f )

924 if–
mTime
 =
FALSE
 )

926 if–
mu16Ouçut
 > 55 )

928 
mu16Ouçut
 = 55;

933 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_COFFEE
 )

936 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 98.0f )

938 if–
mu16Ouçut
 >= 55 )

940 
mu16Ouçut
 = 55;

943 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 95.0f )

945 if–
mu16Ouçut
 >= 70 )

947 
mu16Ouçut
 = 70;

952 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_TEA
 )

954 if–
	`GëTemp
–
TEMP_ID_HOT_OUT
 ) >= 85.0f

955 || 
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 90.0f )

957 if–
mu16Ouçut
 >= 55 )

959 
mu16Ouçut
 = 55;

961 if–
mu16Ouçut
 >= 45 )

963 
mu16Ouçut
 = 20;

992 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_MILK


993 || 
	`GëHŸSñe˘
(Ë=
SEL_HOT_TEA


994 || 
	`GëHŸSñe˘
(Ë=
SEL_HOT_COFFEE


995 || 
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


998 
mu16Ouçut
 = 
	`CheckLimôOuçut
–mu16Ouçut, 
mTime
 );

1001  
mu16Ouçut
;

1002 
	}
}

1005 
	#RECAL_FLOW_TIME
 10

1006 
U8
 
gu8LowFlowCou¡
 = 
RECAL_FLOW_TIME
;

	)

1007 
U16
 
	$CheckLowFlow
(
F32
 
mLPM
, 
U16
 
mu16Ouçut
)

1009 if–
mLPM
 <= 0.01f )

1011 if–
gu8LowFlowCou¡
 != 0 )

1013 
gu8LowFlowCou¡
--;

1017 if–
mu16Ouçut
 > 10 )

1019 
mu16Ouçut
 = 10;

1025 
gu8LowFlowCou¡
 = 
RECAL_FLOW_TIME
;

1028  
mu16Ouçut
;

1029 
	}
}

1031 
	#RECAL_WATT_TIME
 10

1032 
U16
 
ReCÆTime
 = 0;

	)

1033 
	$C⁄åﬁW©tByOff£t
(
F32
 
CuºítLPM
)

1035 
U16
 
mu16Ouçut
 = 0;

1037 if–
ReCÆTime
 != 0 )

1039 
ReCÆTime
--;

1043 
ReCÆTime
 = 
RECAL_WATT_TIME
;

1046 
	`CÆcHóãrT¨gëW©t
–
CuºítLPM
 );

1047 
mu16Ouçut
 = 
	`CÆcHóãrOuçut
();

1049 
	`CÆcOuçutOff£t
–
CuºítLPM
, 
HŸOut
.
T¨gëOutTemp
, 
	`GëTemp
(
TEMP_ID_HOT_OUT
) );

1050 
mu16Ouçut
 = 
	`ChekHŸSñ
–mu16Ouçut, 
TRUE
 );

1051 
mu16Ouçut
 = 
	`CheckOvîHótög
( mu16Output );

1052 
mu16Ouçut
 = 
	`CheckLowFlow
–
CuºítLPM
, mu16Output );

1053 
	`SëHóãrOuçut
–
mu16Ouçut
 );

1055 
	}
}

1058 
	#CHECK_UNDER_TEMP_TIME
 200

1059 
U16
 
	`GëUndîTempTime
()

	)

1062 if–
GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

1068  
	gCHECK_UNDER_TEMP_TIME
;

1070 
F32
 
	$GëUndîTempFlowVÆ
()

1072 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

1074 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW
 )

1080 
	}
}

1082 
U8
 
	gdbg_the_Êow
 = 0;

1083 
	$CheckUndîTemp
()

1085 
U16
 
mu16Time
 = 
CHECK_UNDER_TEMP_TIME
;

1087 
F32
 
mLPM
;

1092 if–
	`GëHóãrOuçut
() < 101 )

1094 
mu16Time
 = 
	`GëUndîTempTime
();

1098 if–
mu16Time
 != 0 )

1100 
mu16Time
--;

1104 
mu16Time
 = 
	`GëUndîTempTime
();

1106 
mLPM
 = 
	`GëFlowOff£tLPM
();

1107 
mLPM
 -
	`GëUndîTempFlowVÆ
();

1108 
	`SëFlowOff£tLPM
–
mLPM
 );

1116 if–
dbg_the_Êow
 == 1 )

1118 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 98.0f )

1121 if–
mu16Time
 != 0 )

1123 
mu16Time
--;

1127 
mu16Time
 = 
	`GëUndîTempTime
();

1128 if–
mu8Fœg
 == 0 )

1130 
mu8Fœg
 = 1;

1131 
	`SëFlowOff£tLPM
( 0.02f );

1135 
mu8Fœg
 = 0;

1136 
	`SëFlowOff£tLPM
( 0.00f );

1142 
mu8Fœg
 = 0;

1143 
	`SëFlowOff£tLPM
( 0.0f );

1144 
mu16Time
 = 
	`GëUndîTempTime
();

1149 
	}
}

1152 
	$C⁄åﬁFlow
()

1154 
F32
 
mT¨gëLPM
 = 0.0f;

1155 
F32
 
mCuºítLPM
 = 0.0f;

1160 
	`CÆcHóãrT¨gëLPM
();

1161 
mT¨gëLPM
 = 
	`GëHŸW©îT¨gëLPM
();

1163 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_HIGH
 )

1165 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_COFFEE
)

1167 if–
	`GëHóãrBa£W©t
(Ë>
HIGH_HEATER_WATT
 )

1169 
mT¨gëLPM
 += 0.05f;

1177 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW
 )

1184 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_MID
 )

1186 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_TEA
 )

1188 
mT¨gëLPM
 -= 0.02f;

1196 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

1198 if–
	`GëHŸOutPªHótTy≥
(Ë!
LOW_PREHEAT
 )

1200 if–
	`GëTemp
–
TEMP_ID_HOT_OUT
 ) <= 77.0f )

1202 
mT¨gëLPM
 -= 0.15f;

1204 if–
	`GëTemp
–
TEMP_ID_HOT_OUT
 ) <= 80.0f )

1206 
mT¨gëLPM
 -= 0.10f;

1208 if–
	`GëTemp
–
TEMP_ID_HOT_OUT
 ) <= 90.0f )

1210 
mT¨gëLPM
 -= 0.07f;

1214 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) <= 13.0f )

1216 
mT¨gëLPM
 -= 0.07f;

1220 
mT¨gëLPM
 -= 0.05f;

1228 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) <= 13.0f )

1230 
mT¨gëLPM
 -= 0.07f;

1234 
mT¨gëLPM
 -= 0.05f;

1239 
mCuºítLPM
 = 
	`GëFlowMëîLPM
();

1241 
	`CheckUndîTemp
();

1242 
	`Adju°FlowVÆveByFlow
–
mT¨gëLPM
 + 
	`GëFlowOff£tLPM
(), 
mCuºítLPM
 );

1243 
	}
}

1246 
	#UNSTABLE_AMOUNT
 
AMOUNT_20


	)

1247 
	$Outög
()

1250 if–
HŸOut
.
CuºítAmou¡
 < 
UNSTABLE_AMOUNT
 )

1253 
	`C⁄åﬁW©t
();

1254 
gu8LowFlowCou¡
 = 
RECAL_FLOW_TIME
;

1259 
	`C⁄åﬁW©tByOff£t
–
	`GëFlowMëîLPM
() );

1260 
	`C⁄åﬁFlow
();

1264 
	`CheckHóãrW©t
–
	`GëHóãrOuçut
() );

1266 
	`CÆcAvîageOutTemp
();

1267 
	}
}

1269 
	$St›Out
()

1271 if–
Cup
.
SumCou¡
 < 
CUP_HALF_NUM
 )

1274 
	`InôFlowVÆveSam∂eLPM
();

1279 
	`SëFlowVÆveSam∂eLPM
–
	`GëFlowMëîLPM
(), 
	`GëFlowVÆveT¨gë
() );

1283 
	`SëHóãrOuçut
( 0 );

1286 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

1287 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1288 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
NULL
 );

1290 
	}
}

1292 
	$SëupSèπögFlowLPM
()

1294 
	`InôOff£tLPM
();

1296 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


1297 && 
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW


1298 && 
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 20.0f )

1300 
	`SëFlowOff£tLPM
( -0.04f );

1302 
	}
}

1305 
U8
 
	$DoOut
(
U8
 *
pSãp
)

1307 
U16
 
mu16Time
 = 0U;

1310  *
pSãp
 )

1312 
OUT_INIT
:

1314 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

1315 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1316 
	`Clo£VÆve
–
VALVE_HOT_DRAIN
 );

1318 
	`InôCupTemp
–
HŸOut
.
T¨gëOutTemp
 );

1321 
	`SëHóãrTempT¨gëOut
–
HŸOut
.
T¨gëOutTemp
 );

1322 
	`Re£tAvîageOutTemp
();

1325 
HŸOut
.
CuºítAmou¡
 = 0U;

1326 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eHŸCuºítAmou¡
 );

1327 
	`SèπCheckOuège
–
OUTAGE_HOT_OUT_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

1329 
	`InôAdju°FlowVÆve
();

1330 
	`SëupSèπögFlowLPM
();

1332 
	`Re£tHóãrOff£t
();

1334 
	`InôCheckHóãrW©t
();

1336 
dbg_hŸ
.
adju°_up
 = 0;

1337 
dbg_hŸ
.
adju°_down
 = 0;

1339 (*
pSãp
)++;

1342 
OUT_DOING
:

1343 if–
HŸOut
.
T¨gëAmou¡
 > HŸOut.
CuºítAmou¡
 )

1346 
	`Outög
();

1351 
	`St›Out
();

1355 
mu16Time
 = 20;

1356 (*
pSãp
)++;

1360 
OUT_DONE
:

1361 if–
mu16Time
 != 0 )

1363 
mu16Time
--;

1367 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

1369 
	`SëHŸOutMode
–
HOT_OUT_DONE
 );

1370 (*
pSãp
) = 0;

1371  
TRUE
;

1378 (*
pSãp
) = 0;

1382  
FALSE
;

1383 
	}
}

1385 
U8
 
	$DoOut
(
U8
 *
pSãp
)

1387 
U16
 
mu16Time
 = 0U;

1390  *
pSãp
 )

1392 
OUT_INIT_VALVE
:

1394 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

1395 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1396 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1398 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

1401 
mu16Time
 = 120U;

1405 
mu16Time
 = 20U;

1407 (*
pSãp
)++;

1410 
OUT_INIT_VALVE_2
:

1411 if–
mu16Time
 != 0 )

1413 
mu16Time
--;

1417 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

1418 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1419 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1421 
mu16Time
 = 20U;

1422 (*
pSãp
)++;

1425 
OUT_INIT
:

1431 if–
mu16Time
 != 0 )

1433 
mu16Time
--;

1436 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

1437 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1438 
	`Clo£VÆve
–
VALVE_HOT_DRAIN
 );

1440 
	`InôCupTemp
–
HŸOut
.
T¨gëOutTemp
 );

1443 
	`SëHóãrTempT¨gëOut
–
HŸOut
.
T¨gëOutTemp
 );

1444 
	`Re£tAvîageOutTemp
();

1447 
HŸOut
.
CuºítAmou¡
 = 0U;

1448 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eHŸCuºítAmou¡
 );

1449 
	`SèπCheckOuège
–
OUTAGE_HOT_OUT_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

1451 
	`InôAdju°FlowVÆve
();

1452 
	`SëupSèπögFlowLPM
();

1454 
	`Re£tHóãrOff£t
();

1456 
	`InôCheckHóãrW©t
();

1458 
dbg_hŸ
.
adju°_up
 = 0;

1459 
dbg_hŸ
.
adju°_down
 = 0;

1461 (*
pSãp
)++;

1464 
OUT_DOING
:

1465 if–
HŸOut
.
T¨gëAmou¡
 > HŸOut.
CuºítAmou¡
 )

1468 
	`Outög
();

1473 
	`St›Out
();

1477 
mu16Time
 = 20;

1478 (*
pSãp
)++;

1482 
OUT_DONE
:

1483 if–
mu16Time
 != 0 )

1485 
mu16Time
--;

1489 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

1491 
	`SëHŸOutMode
–
HOT_OUT_DONE
 );

1492 (*
pSãp
) = 0;

1493  
TRUE
;

1500 (*
pSãp
) = 0;

1504  
FALSE
;

1505 
	}
}

1514 
	mEOL_OUT_OPEN_OUT
,

1515 
	mEOL_OUT_DOING
,

1516 
	mEOL_OUT_DONE
,

1518 
U8
 
	$DoOutEﬁ
(
U8
 *
pSãp
)

1520 
U16
 
mu16Time
 = 0U;

1523  *
pSãp
 )

1525 
EOL_OUT_OPEN_OUT
:

1526 
	`O≥nVÆve
–
VALVE_HOT_OUT
 );

1527 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1528 
	`Clo£VÆve
–
VALVE_HOT_DRAIN
 );

1529 
	`FlowVÆveFuŒO≥n
();

1531 
mu16Time
 = 
VALVE_DELAY_TIME
;

1533 
HŸOut
.
CuºítAmou¡
 = 0U;

1535 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eHŸCuºítAmou¡
 );

1536 
	`SèπCheckOuège
–
OUTAGE_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

1538 (*
pSãp
)++;

1541 
EOL_OUT_DOING
:

1542 
	`SëHóãrOuçut
( 0 );

1544 if–
HŸOut
.
T¨gëAmou¡
 > HŸOut.
CuºítAmou¡
 )

1547 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1551 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
NULL
 );

1552 
	`St›CheckOuège
();

1553 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

1554 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1556 
mu16Time
 = 
VALVE_DELAY_TIME
;

1557 (*
pSãp
)++;

1561 
EOL_OUT_DONE
:

1562 if–
mu16Time
 != 0 )

1564 
mu16Time
--;

1568 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

1570 
	`SëHŸOutMode
–
HOT_OUT_DONE
 );

1571 (*
pSãp
) = 0;

1576 (*
pSãp
) = 0;

1580  
FALSE
;

1581 
	}
}

1586 
U8
 
	gdbg_do_d⁄e
 = 0;

1587 
U8
 
	$DoD⁄e
(
U8
 *
pSãp
)

1590 if–
	`IsEº‹Ty≥
–
ERR_TYPE_HOT_WATER_OUT
 ) =
TRUE


1591 || 
	`IsEº‹
–
ERR_OUTAGE_HOT_WATER
 ) =
TRUE


1592 || 
	`IsEº‹
–
ERR_HEATER_OVERHEAT
 ) =
TRUE
 )

1594 
	`InôFlowVÆveSam∂eLPM
();

1599 if–
Cup
.
SumCou¡
 < 
CUP_HALF_NUM
 )

1603 if–
	`IsO≥nVÆve
–
VALVE_HOT_OUT
 ) =
TRUE
 )

1606 
	`SëFlowVÆveSam∂eLPM
–
	`GëFlowMëîLPM
(), 
	`GëFlowVÆveT¨gë
() );

1610 #i‡
CONFIG_TEST_HOT_DRAIN


1611 
	`Clo£VÆve
–
VALVE_HOT_DRAIN
 );

1613 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1615 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1616 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

1618 
	`Upd©eRegi⁄TempIn
();

1621 
	`SëHóãrOuçut
( 0 );

1622 
	`SëHŸW©îHóãrOff£tW©t
(0);

1623 
	`TURN_OFF_HEATER_TRIAC
();

1624 
	`TURN_OFF_HEATER_RELAY
();

1630 
	`SëHŸOutMode
–
HOT_OUT_RESET
 );

1631 
dbg_do_d⁄e
++;

1633  
TRUE
;

1634 
	}
}

1638 
	mRESET_INIT
,

1639 
	mRESET_DOING
,

1640 
	mRESET_DONE


1644 
U8
 
	gdbg_do_ª°_time
 = 0;

1645 
	#RESET_TIME_1S
 
dbg_do_ª°_time


1646 
	#RESET_TIME_2S
 
dbg_do_ª°_time


1647 #ñ£

	)

1648 
	#RESET_TIME_1S
 100

1649 
	#RESET_TIME_2S
 200

1651 

	)

1652 
U8
 
	$DoRe£t
(
U8
 *
pSãp
)

1655 
U16
 
mu16Time
 = 0U;

1658  *
pSãp
 )

1660 
RESET_INIT
:

1662 if–
	`GëTemp
–
TEMP_ID_HOT_OUT
 ) >= 98.0f

1663 || 
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 98.0f )

1665 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1666 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

1668 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 100.0f )

1670 
mu16Time
 = 
RESET_TIME_2S
;

1674 
mu16Time
 = 
RESET_TIME_1S
;

1676 (*
pSãp
)++;

1681 (*
pSãp
Ë
RESET_DONE
;

1685 
RESET_DOING
:

1686 if–--
mu16Time
 == 0

1687 || 
	`GëW©îOut
(Ë=
TRUE
 )

1689 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1690 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

1692 
	`St›CheckOuège
();

1694 (*
pSãp
) = 0;

1695  
TRUE
;

1699 
RESET_DONE
:

1700 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1701 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

1703 
	`St›CheckOuège
();

1705 (*
pSãp
) = 0;

1706  
TRUE
;

1709 (*
pSãp
) = 0;

1713  
FALSE
;

1715 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

1716 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

1717 
	`St›CheckOuège
();

1719  
TRUE
;

1721 
	}
}

1725 
U8
 
	$GëHŸOutPî˚¡
()

1727  
	`CÆcPî˚¡
–
HŸOut
.
T¨gëAmou¡
, HŸOut.
CuºítAmou¡
 );

1728 
	}
}

1731 
U16
 
	$GëHŸOutAmou¡
()

1733  
	`CÆcLôî
–
HŸOut
.
CuºítAmou¡
 );

1734 
	}
}

1736 
	$Upd©eU£rUßge
(
U32
 
mu32Amou¡
)

1738 
U32
 
mu32T¨gëAmou¡
;

1740 
mu32T¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–
OUT_AMOUNT_10
 );

1741 if–
mu32T¨gëAmou¡
 != 0 )

1743 
mu32Amou¡
 = mu32Amou¡ / 
mu32T¨gëAmou¡
;

1744 
mu32Amou¡
 *= 10;

1748 
mu32Amou¡
 = 0;

1751 
	`AddU£rUßgeW©î
–
mu32Amou¡
 );

1752 
	}
}

1755 
	$InôCupTemp
(
TEMP_T
 
mT¨gëTemp
)

1757 
U8
 
i
;

1759 
Cup
.
tSum
 = 0.0f;

1760 
Cup
.
tAvîage
 = 0.0f;

1761 
Cup
.
SumCou¡
 = 0;

1762 
Cup
.
Amou¡Hz
 = 
AMOUNT_10
;

1763 
Cup
.
Fú°T¨gëTemp
 = 
mT¨gëTemp
;

1764 
Cup
.
Sec⁄dT¨gëTemp
 = 0.0f;

1766  
i
 = 0; i < 
CUP_LIST_NUM
 ; i++ )

1768 
Cup
.
tSumLi°
[ 
i
 ] = 0.0f;

1769 
Cup
.
ÕmSumLi°
[ 
i
 ] = 0.0f;

1771 
	}
}

1773 
	$CÆcCupTemp
()

1775 
TEMP_T
 
tOut
 = 0.0f;

1777 if–--
Cup
.
Amou¡Hz
 == 0 )

1779 
Cup
.
Amou¡Hz
 = 
AMOUNT_10
;

1781 if–
Cup
.
SumCou¡
 < 
CUP_LIST_NUM
 )

1783 
tOut
 = 
	`GëTemp
–
TEMP_ID_HOT_OUT
 );

1784 
Cup
.
ÕmSumLi°
[ Cup.
SumCou¡
 ] = 
	`GëFlowMëîLPM
();

1785 
Cup
.
tSumLi°
[ Cup.
SumCou¡
 ] = 
tOut
;

1786 
Cup
.
tSum
 +
tOut
;

1788 
Cup
.
SumCou¡
++;

1789 
Cup
.
tAvîage
 = Cup.
tSum
 / Cup.
SumCou¡
;

1791 if–
Cup
.
SumCou¡
 =
CUP_HALF_NUM
 )

1793 
Cup
.
Sec⁄dT¨gëTemp
 = (Cup.
Fú°T¨gëTemp
 * 2Ë- Cup.
tAvîage
;

1795 if–
Cup
.
Fú°T¨gëTemp
 > Cup.
tAvîage
 )

1797 
Cup
.
Sec⁄dT¨gëTemp
 += 1.0f;

1800 if–
Cup
.
Fú°T¨gëTemp
 < Cup.
tAvîage
 )

1802 
Cup
.
Sec⁄dT¨gëTemp
 -= 1.0f;

1806 if–
Cup
.
Sec⁄dT¨gëTemp
 > 98.0f )

1808 
Cup
.
Sec⁄dT¨gëTemp
 = 98.0f;

1811 
	`SëHóãrTempT¨gëOut
–
Cup
.
Sec⁄dT¨gëTemp
 );

1814 if–
Cup
.
SumCou¡
 =
CUP_ONE_NUM
 )

1816 
	`SëHóãrTempT¨gëOut
–
Cup
.
Fú°T¨gëTemp
 );

1820 
	}
}

1823 
	$Upd©eHŸCuºítAmou¡
()

1825 
	`CÆcCupTemp
();

1826 
HŸOut
.
CuºítAmou¡
++;

1827 
	}
}

1830 
	$Upd©eHŸInôCuºítAmou¡
()

1832 
HŸOut
.
InôCuºítAmou¡
++;

1833 
	}
}

1835 
U8
 
	$IsD⁄eHŸOut
()

1838 if–
	`IsEº‹Ty≥
–
ERR_TYPE_HOT_WATER_OUT
 ) =
TRUE
 )

1840  
TRUE
;

1843  
FALSE
;

1844 
	}
}

1846 
	#HOT_OUT_ALARAM_TIME
 800U

	)

1847 
U16
 
	ggu16SoundAœøm
 = 
HOT_OUT_ALARAM_TIME
;

1848 
	$InôHŸOutSound
()

1850 
gu16SoundAœøm
 = 
HOT_OUT_ALARAM_TIME
;

1851 
	}
}

1853 
	$HŸOutSound
()

1855 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

1857 if–
gu16SoundAœøm
 != 0 )

1859 
gu16SoundAœøm
--;

1860 if–
gu16SoundAœøm
 == 1 )

1862 
	`Sound
–
SOUND_HOT_OUT_USER_OUT
 );

1866 
	}
}

1869 
	$CheckHŸSñe˘
()

1871 
U8
 
mu8Pªv
 = 
SEL_HOT_USER
;

1872 
U8
 
mu8Sñe˘
;

1874 
mu8Sñe˘
 = 
	`GëHŸSñe˘
();

1875 if–
mu8Pªv
 !
mu8Sñe˘
 )

1877 
mu8Pªv
 = 
mu8Sñe˘
;

1878 
	`SëHŸOutCh™gedSñ
();

1880 
	}
}

1883 
U8
 
	$C⁄åﬁW©îHŸOut
()

1886 if–
	`IsCh™gedOutSètus
(Ë=
TRUE
 )

1889 if–
HŸOut
.
Out
 =
TRUE
 )

1891 
	`CheckHŸSñe˘
();

1894 if–
	`GëEﬁSètus
(Ë=
TRUE
 )

1896 
	`SèπHŸOutEﬁ
();

1900 
	`SèπHŸOut
();

1902 
	`InôOutEvítLi°
();

1908 
	`Upd©eU£rUßge
–
HŸOut
.
CuºítAmou¡
 );

1910 
	`St›HŸOut
();

1911 
	`InôHŸOutSound
();

1917 if–
HŸOut
.
Out
 =
TRUE
 )

1919 if–
	`IsD⁄eHŸOut
(Ë=
TRUE
 )

1921 
	`Tu∫OffHŸOut
();

1922 
	`Sound
(
SOUND_EFFLUENT_END
);

1923  
WATER_OUT_DONE
;

1925 if–
	`IsSëHŸOutMode
–
HOT_OUT_DONE
 ) =
TRUE
 )

1927 
	`Tu∫OffHŸOut
();

1928 
	`Sound
(
SOUND_EFFLUENT_END
);

1929 
	`Re£tHŸOutLa°edTimeOut
();

1930  
WATER_OUT_DONE
;

1932 if–
	`IsEº‹
–
ERR_HEATER_OVERHEAT
 ) =
TRUE


1933 && 
	`IsSëHŸOutMode
–
HOT_OUT_COOLING
 ) =
FALSE
 )

1935 
	`Tu∫OffHŸOut
();

1936 
	`Sound
(
SOUND_EFFLUENT_END
);

1937 
	`Re£tHŸOutLa°edTimeOut
();

1938  
WATER_OUT_DONE
;

1940 if–
	`IsSëHŸOutMode
–
HOT_OUT_RESET
 ) =
TRUE
 )

1942  
WATER_OUT_DONE
;

1945 
	`HŸOutSound
();

1949 
	`Upd©eHŸOutTime
();

1950 
	`OutÊow
();

1951  
WATER_OUT_GOING
;

1952 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out.h

1 #i‚de‡
__HOT_WATER_OUT_H__


2 
	#__HOT_WATER_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out_ty≥.h
"

9 
	#HOT_OUT_INIT_DRAIN
 0x0001

	)

10 
	#HOT_OUT_COOLING
 0x0002

	)

11 
	#HOT_OUT_PRE_HEATING
 0x0010

	)

12 
	#HOT_OUT_OUT_EOL
 0x0020

	)

13 
	#HOT_OUT_OUT
 0x0040

	)

14 
	#HOT_OUT_DONE
 0x0080

	)

15 
	#HOT_OUT_OVER_HEAT
 0x0100

	)

16 
	#HOT_OUT_RESET
 0x0200

	)

20 
	#HOT_OUT_FIRST
 (\

21 
HOT_OUT_INIT_DRAIN
 )

	)

24 
	#HOT_OUT_WITH_COOLING
 (\

25 
HOT_OUT_COOLING
 | \

26 
HOT_OUT_PRE_HEATING
 | \

27 
HOT_OUT_OUT
 )

	)

30 
	#HOT_OUT_ALL
 (\

31 
HOT_OUT_PRE_HEATING
 | \

32 
HOT_OUT_OUT
 )

	)

36 
	#HOT_OUT_ALL_EOL
 (\

37 
HOT_OUT_OUT_EOL
 \

38 )

	)

41 
	#HOT_OUT_CANCEL
 (\

42 
HOT_OUT_INIT_DRAIN
 | \

43 
HOT_OUT_COOLING
 | \

44 
HOT_OUT_PRE_HEATING
 | \

45 
HOT_OUT_OUT
 | \

46 
HOT_OUT_OUT_EOL
 | \

47 
HOT_OUT_DONE
 )

	)

49 
	s_dbg_hŸ_


51 
U8
 
	m¥Ÿe˘
;

53 
U16
 
	madju°_up
;

54 
U16
 
	madju°_down
;

55 } 
	tdbg_hŸ_t
;

56 
dbg_hŸ_t
 
dbg_hŸ
;

61 
	#REGION_TEMP_LOW
 0

	)

62 
	#REGION_TEMP_MID
 1

	)

63 
	#REGION_TEMP_HIGH
 2

	)

65 
	s_hŸ_w©î_out_


67 
U8
 
	mInô
;

68 
U8
 
	mOut
;

69 
U8
 
	mPªvOut
;

70 
U16
 
	mLa°edOutTime
;

72 
W©îOutTy≥_T
 
	mTy≥
;

73 
U32
 
	mT¨gëAmou¡
;

74 
U32
 
	mCuºítAmou¡
;

76 
U16
 
	mMode
;

78 
F32
 
	mLPM
;

80 
U8
 
	mRegi⁄TempIn
;

83 
TEMP_T
 
	mT¨gëOutTemp
;

84 
TEMP_T
 
	mT¨gëPªHótTemp
;

87 
U32
 
	mInôT¨gëAmou¡
;

88 
U32
 
	mInôCuºítAmou¡
;

89 
U32
 
	mInôCheckW©tAmou¡
;

92 
U16
 
	mCoﬁögTime
;

94 
U16
 
	mMaxTimeOut
;

97 
U8
 
	mSumDñayTime
;

98 
U32
 
	mSumCou¡
;

99 
TEMP_T
 
	mSumOutTemp
;

100 
TEMP_T
 
	mAvîageOutTemp
;

101 } 
	tHŸOut_T
;

104 
	#CUP_LIST_NUM
 12

105 
	#CUP_ONE_NUM
 12

106 
	#CUP_HALF_NUM
 3

107 
	s_cup_ãmp_


	)

109 
TEMP_T
 
	mtSum
;

110 
TEMP_T
 
	mtAvîage
;

111 
U8
 
	mSumCou¡
;

112 
U16
 
	mAmou¡Hz
;

114 
TEMP_T
 
	mFú°T¨gëTemp
;

115 
TEMP_T
 
	mSec⁄dT¨gëTemp
;

117 
TEMP_T
 
	mtSumLi°
[ 
CUP_LIST_NUM
 ];

118 
F32
 
	mÕmSumLi°
[ 
CUP_LIST_NUM
 ];

119 } 
	tCupTemp_T
;

122 
InôHŸOut
();

124 
GëHŸOutD©a
(
HŸOut_T
 *
pD©a
);

126 
Upd©eRegi⁄TempIn
();

128 
TEMP_T
 
GëHŸOutAvîageOutTemp
();

130 
TEMP_T
 
GëHŸOutPªHótTemp
();

132 
TEMP_T
 
GëHŸOutT¨gëOutTemp
();

134 
U8
 
GëHŸOutRegi⁄TempIn
();

137 
F32
 
GëHŸOutLPM
();

138 
SëFlowMëîLPM
(
F32
 
mf32LPM
);

139 
Upd©eHŸOutLPM
(
F32
 
mf32LPM
);

142 
SëHŸOutMode
–
U16
 
mu16Mode
 );

143 
U16
 
GëHŸOutMode
();

144 
CÀ¨HŸOutMode
–
U16
 
mu16Mode
 );

145 
U8
 
IsSëHŸOutMode
(
U16
 
mu8Mode
 );

148 
SëHŸOutCh™gedSñ
();

149 
CÀ¨HŸOutCh™gedSñ
();

150 
U8
 
GëHŸOutCh™gedSñ
();

155 
	#RECHECK_OUTAGE_TIME
 3000U

156 
	#SHORT_HEATING_TIME
 3000U

157 
	`CÀ¨HŸOutLa°edTimeOut
();

	)

158 
Re£tHŸOutLa°edTimeOut
();

159 
U16
 
GëHŸOutLa°edTimeOut
();

163 
Tu∫OnHŸOut
(
W©îOutTy≥_T
 
mTy≥
);

167 
U8
 
IsHŸOut
();

170 
Tu∫OffHŸOut
();

172 
U8
 
GëHŸOutPî˚¡
();

175 
U16
 
GëHŸOutAmou¡
();

177 
Upd©eHŸInôCuºítAmou¡
();

180 
U8
 
C⁄åﬁW©îHŸOut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out_preheat.c

1 
	~"hw.h
"

2 
	~"hŸ_w©î_out_¥ehót.h
"

4 
	~"hŸ_w©î_out.h
"

5 
	~"hŸ_w©î.h
"

6 
	~"vÆve.h
"

7 
	~"u£r.h
"

8 
	~"ãmp.h
"

9 
	~"Êow_mëî.h
"

10 
	~"Êow_vÆve.h
"

11 
	~"hŸ_w©î_hóãr.h
"

12 
	~"hŸ_w©î_Êow.h
"

13 
	~"hŸ_w©î_ãmp_èbÀ.h
"

14 
	~"hóãr_èbÀ.h
"

15 
	~"w©î_out_comm⁄.h
"

16 
	~"hóãr_out.h
"

17 
	~"utû.h
"

18 
	~"hŸ_w©î.h
"

21 
	#MAX_TIME_OUT_PREHEAT_LONG
 1500U

22 
	#MAX_TIME_OUT_PREHEAT
 1000U

23 
	#MIN_PREHEAT_ON_TIME_500MS
 50U

24 
	#MIN_PREHEAT_ON_TIME_1S
 100U

25 
	#MIN_PREHEAT_ON_TIME_2S
 200U

26 
	#MIN_PREHEAT_ON_TIME_3S
 300U

27 

	)

30 
PªHót_T
 
	gPªHót
;

34 
	$DBG_CheckPªHótTemp
()

37 
PªHót
.
tPªhótOut
 = 
	`GëTemp
–
TEMP_ID_HOT_OUT
 );

38 
PªHót
.
tPªhótHóãr
 = 
	`GëTemp
–
TEMP_ID_HEATER
 );

39 
	}
}

41 
PªHótTy≥_T
 
	$GëHŸOutPªHótTy≥
()

43  
PªHót
.
Ty≥
;

44 
	}
}

47 
U8
 
	$GëHŸOutPªHótLevñ
()

49  
PªHót
.
Di•Sãp
;

50 
	}
}

55 
U16
 
	$GëMöHótögTime
()

57 
TEMP_T
 
tDñè
;

58 
U16
 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_500MS
;

60 
tDñè
 = 
	`GëHŸOutT¨gëOutTemp
(Ë- 
	`GëTemp
–
TEMP_ID_HOT_OUT
 );

61 if–
tDñè
 < -3.0f )

63 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_500MS
;

65 if–
tDñè
 < 0.0f )

67 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_1S
;

69 if–
tDñè
 <= 3.0f )

71 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_1S
;

73 if–
tDñè
 <= 5.0f )

75 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_HIGH
 )

77 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_1S
;

81 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_2S
;

84 if–
tDñè
 <= 10.0f )

86 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_2S
;

90 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_3S
;

93 if–
	`GëHŸOutLa°edTimeOut
(Ë>
SHORT_HEATING_TIME
 )

95 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_3S
;

99 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


100 && 
	`GëTemp
–
TEMP_ID_HEATER
 ) < 78.0f )

102 
mu16OnTime
 = 
MIN_PREHEAT_ON_TIME_3S
 + MIN_PREHEAT_ON_TIME_3S;

106  
mu16OnTime
;

107 
	}
}

109 
	$InôPªHótDi•Levñ
(
TEMP_T
 
tPªHót
, TEMP_T 
tHóãr
)

114 
F32
 
vÆ
;

116 if–
tPªHót
 > 
tHóãr
 )

118 
vÆ
 = ((
tPªHót
 - 
tHóãr
 ) * 95.0‡* 4.2‡Ë/ ( 
	`GëHóãrW©t
() * 0.97f );

119 
PªHót
.
CÆcuœãdTimeOut
 = (
U16
)
vÆ
;

120 
PªHót
.
CÆcuœãdTimeOut
 *= 100U;

124 
PªHót
.
CÆcuœãdTimeOut
 = 
	`GëMöHótögTime
();

127 
PªHót
.
Di•Sãp
 = 
PREHEAT_PROGRESS_LEVEL_1
;

128 
	}
}

130 
	$CheckPªHótDi•Levñ
(
TEMP_T
 
tPªHót
, TEMP_T 
tHóãr
)

132 
U16
 
Mid
;

133 
U16
 
Max
;

135 
Mid
 = (
U16
)(
PªHót
.
CÆcuœãdTimeOut
 * 0.4f);

136 
Max
 = (
U16
)(
PªHót
.
CÆcuœãdTimeOut
 * 0.8f);

138 if–
PªHót
.
HótögTime
 >
Max
 )

140 
PªHót
.
Di•Sãp
 = 
PREHEAT_PROGRESS_LEVEL_3
;

142 if–
PªHót
.
HótögTime
 >
Mid
 )

144 
PªHót
.
Di•Sãp
 = 
PREHEAT_PROGRESS_LEVEL_2
;

148 
PªHót
.
Di•Sãp
 = 
PREHEAT_PROGRESS_LEVEL_1
;

151 
	}
}

154 
	$D⁄ePªHótDi•Levñ
()

156 
PªHót
.
Di•Sãp
 = 
PREHEAT_PROGRESS_LEVEL_3
;

157 
	}
}

159 
U16
 
	$GëPªHótPowî
()

161 
U8
 
mu8HŸSñ
;

162 
TEMP_T
 
tHóãr
;

165 
mu8HŸSñ
 = 
	`GëHŸSñe˘
();

166 
tHóãr
 = 
	`GëTemp
–
TEMP_ID_HEATER
 );

168 if–
mu8HŸSñ
 =
SEL_HOT_USER
 )

171 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_HIGH
 )

173 if–
	`GëHóãrBa£W©t
(Ë>
HIGH_HEATER_WATT
 )

175 if–
tHóãr
 >= 95.0f ) {  0; }

176 if–
tHóãr
 >= 90.0f ) {  55; }

178 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 18.0f )

180 if–
tHóãr
 >= 80.0f ) {  60; }

181 if–
tHóãr
 >= 50.0f ) {  55; }

185 if–
tHóãr
 >= 80.0f ) {  55; }

186 if–
tHóãr
 >= 50.0f ) {  60; }

191 if–
tHóãr
 >= 95.0f ) {  0; }

192 if–
tHóãr
 >= 90.0f ) {  55; }

194 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 18.0f )

196 if–
tHóãr
 >= 80.0f ) {  60; }

197 if–
tHóãr
 >= 50.0f ) {  60; }

201 if–
tHóãr
 >= 80.0f ) {  60; }

202 if–
tHóãr
 >= 60.0f ) {  60; }

206 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_MID
 )

208 if–
tHóãr
 >= 98.0f ) {  0; }

209 if–
tHóãr
 >= 95.0f ) {  55; }

210 if–
tHóãr
 >= 90.0f ) {  55; }

212 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 18.0f )

214 if–
tHóãr
 >= 80.0f ) {  60; }

215 if–
tHóãr
 >= 50.0f ) {  55; }

219 if–
tHóãr
 >= 80.0f ) {  60; }

220 if–
tHóãr
 >= 50.0f ) {  60; }

225 if–
tHóãr
 >= 98.0f ) {  0; }

226 if–
tHóãr
 >= 95.0f ) {  55; }

227 if–
tHóãr
 >= 90.0f ) {  55; }

228 if–
tHóãr
 >= 50.0f ) {  60; }

231 if–
mu8HŸSñ
 =
SEL_HOT_COFFEE
 )

233 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW
 )

235 if–
tHóãr
 >= 80.0f )

242 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_HIGH
 )

244 if–
tHóãr
 >= 80.0f )

248 if–
tHóãr
 >= 50.0f )

257 if–
tHóãr
 >= 80.0f )

261 if–
tHóãr
 >= 50.0f )

263 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) > 18.0f )

275 if–
mu8HŸSñ
 =
SEL_HOT_TEA
 )

277 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_HIGH
 )

279 if–
tHóãr
 >= 80.0f )

283 if–
tHóãr
 >= 65.0f )

287 if–
tHóãr
 >= 40.0f )

294 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 20.0f )

298 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 30.0f )

308 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_MID
 )

311 if–
tHóãr
 >= 80.0f )

315 if–
tHóãr
 >= 65.0f )

317 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) > 18.0f )

326 if–
tHóãr
 >= 50.0f )

330 if–
tHóãr
 >= 40.0f )

338 if–
tHóãr
 >= 80.0f )

342 if–
tHóãr
 >= 65.0f )

346 if–
tHóãr
 >= 40.0f )

354 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 20.0f )

358 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 30.0f )

365 if–
mu8HŸSñ
 =
SEL_HOT_MILK
 )

367 if–
tHóãr
 >= 55.0f )

371 if–
tHóãr
 >= 50.0f )

383 
	}
}

385 
	$Hótög
()

387 
U16
 
mu16Powî
;

390 
mu16Powî
 = 
	`GëPªHótPowî
();

391 
	`SëHóãrOuçut
–
mu16Powî
 );

393 
	`CheckHóãrW©t
–
	`GëHóãrOuçut
() );

394 
	}
}

397 
U8
 
	$IsTimeOutPªHótög
()

399 if–
PªHót
.
HótögTime
 < PªHót.
MaxTimeOut
 )

401 
PªHót
.
HótögTime
++;

402  
FALSE
;

405  
TRUE
;

406 
	}
}

409 
	#HEATER_TEMP_NUM
 3

	)

410 
TEMP_T
 
	gtHóãrTemp
[ 
HEATER_TEMP_NUM
 ];

411 
U8
 
	gtHóãrCou¡
 = 0;

413 
	$InôHóãrTemp
()

415 
tHóãrCou¡
 = 
HEATER_TEMP_NUM
;

417 
tHóãrTemp
[ 0 ] = 0.0f;

418 
tHóãrTemp
[ 1 ] = 0.0f;

419 
tHóãrTemp
[ 2 ] = 0.0f;

420 
	}
}

422 
	$SëHóãrTemp
(
TEMP_T
 
mTemp
)

424 if–
tHóãrTemp
[2] !
mTemp
 )

426 if–
tHóãrCou¡
 != 0 )

428 
tHóãrCou¡
--;

431 
tHóãrTemp
[ 0 ] =ÅHeaterTemp[ 1 ];

432 
tHóãrTemp
[ 1 ] =ÅHeaterTemp[ 2 ];

433 
tHóãrTemp
[ 2 ] = 
mTemp
;

435 
	}
}

437 
	#TEMP_STATUS_NONE
 0

	)

438 
	#TEMP_STATUS_RISING
 1

	)

439 
	#TEMP_STATUS_FALLING
 2

	)

440 
U8
 
	$GëSètusHóãrTemp
()

442 if–
tHóãrCou¡
 != 0 )

444  
TEMP_STATUS_NONE
;

447 if–
tHóãrTemp
[0] <ÅHeaterTemp[1]

448 && 
tHóãrTemp
[1] <ÅHeaterTemp[2] )

450  
TEMP_STATUS_RISING
;

453 if–
tHóãrTemp
[0] >ÅHeaterTemp[1]

454 && 
tHóãrTemp
[1] >ÅHeaterTemp[2] )

456  
TEMP_STATUS_FALLING
;

459  
TEMP_STATUS_NONE
;

460 
	}
}

462 
	$Upd©eHótögTime
()

464 if–
	`GëHóãrOuçut
() > 0 )

466 
PªHót
.
HóãrOnTime
++;

468 
	}
}

470 
U8
 
	$IsRóchedT¨gëTemp
()

472 if–
	`GëHŸOutPªHótTemp
(Ë<
	`GëTemp
–
TEMP_ID_HEATER
 ) )

475 if–
PªHót
.
HóãrOnTime
 >PªHót.
HóãrC⁄fOnTime
 )

477  
TRUE
;

481  
FALSE
;

482 
	}
}

484 
U8
 
	$CheckHótög
()

487 if–
	`GëHóãrOuçut
() == 0 )

489  
TRUE
;

492 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_MILK
 )

494 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 55.0f )

496  
TRUE
;

502 if–
	`GëHóãrCœss
(Ë!
HEATER_CLASS_HIGH
 )

504 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


505 && 
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 98.0f )

507  
TRUE
;

512 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


513 && 
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 95.0f )

515  
TRUE
;

519 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


520 && 
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 92.0f )

522  
TRUE
;

527 
	`SëHóãrTemp
–
	`GëTemp
–
TEMP_ID_HEATER
 ));

528 if–
	`IsRóchedT¨gëTemp
(Ë=
TRUE
 )

530 if(
	`GëSètusHóãrTemp
(Ë=
TEMP_STATUS_RISING
 )

532  
TRUE
;

536  
FALSE
;

537 
	}
}

539 
F32
 
	$SëupLPM
()

541 
F32
 
mLPM
;

542 
I16
 
mSãp
;

545 
	`CÆcHóãrT¨gëLPM
();

546 
mLPM
 = 
	`GëHŸW©îT¨gëLPM
();

549 
mLPM
 = 
	`SëMöMaxF32
( mLPM, 0.3f, 1.0f );

550 
mSãp
 = 
	`GëFlowVÆveSãp
–
mLPM
 );

551 if–
	`IsCÆSam∂eLPM
(Ë=
TRUE
 )

554 
	`FlowVÆveOff£t
–
mSãp
 );

557 
	`SëFlowVÆveSam∂eLPM
–
mLPM
, 
	`GëFlowVÆveT¨gë
() );

562 
	`FlowVÆveT¨gë
–
mSãp
 );

565  
mLPM
;

567 
	}
}

569 
	$SëupHóãrOuçut
(
F32
 
mLPM
)

571 
U16
 
mu16Powî
;

574 
	`CÆcHóãrT¨gëW©t
–
mLPM
 );

575 
mu16Powî
 = 
	`CÆcHóãrOuçut
();

577 
	`SëHóãrOuçut
–
mu16Powî
 );

578 
	}
}

582 
PªHótTy≥_T
 
	$CheckPªHótTy≥
–
TEMP_T
 
tHóãr
, TEMP_T 
tPªhót
, TEMP_T 
tT¨gë
)

584 if–
tHóãr
 < 
tPªhót
 )

586  
LOW_PREHEAT
;

588 if–
tHóãr
 > 
tT¨gë
 )

590  
OVER_PREHEAT
;

593  
MIDDLE_PREHEAT
;

594 
	}
}

599 
	#PRE_HEAT_OUTAGE_CHECK_TIME
 50

600 
	#MIN_PREHEAT_LPM
 0.2f

	)

601 
U16
 
	ggu16PªHótOuègeCheckTime
 = 0;

602 
	$InôPªHótOuège
()

604 
gu16PªHótOuègeCheckTime
 = 0;

605 
	}
}

607 
U8
 
	$IsGoodPªHótOuège
()

609 if–
	`GëFlowMëîLPM
(Ë>
MIN_PREHEAT_LPM
 )

611 if–++
gu16PªHótOuègeCheckTime
 > 
PRE_HEAT_OUTAGE_CHECK_TIME
 )

613  
TRUE
;

618 
gu16PªHótOuègeCheckTime
 = 0;

621  
FALSE
;

622 
	}
}

624 
TEMP_T
 
	$GëCoﬁögTemp
()

627 
U8
 
mu8Sñ
 = 
SEL_HOT_USER
;

629 
mu8Sñ
 = 
	`GëHŸSñe˘
();

630 if–
mu8Sñ
 =
SEL_HOT_USER
 )

634 if–
mu8Sñ
 =
SEL_HOT_COFFEE
 )

638 if–
mu8Sñ
 =
SEL_HOT_TEA
 )

648 
TEMP_T
 
tIn
;

650 
tIn
 = 
	`GëTemp
–
TEMP_ID_HOT_IN
 );

651 if–
tIn
 >= 40.0f )

653  
tIn
;

658 
	}
}

660 
U8
 
	$IsGoodCoﬁögHóãr
(
TEMP_T
 
tT¨gë
, TEMP_T 
tHóãr
)

662 if–
tT¨gë
 >
tHóãr
 )

664  
TRUE
;

667  
FALSE
;

668 
	}
}

671 
	$VÆveCheckOuège
()

673 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

674 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

675 
	`O≥nVÆve
–
VALVE_HOT_IN
 );

676 
	}
}

678 
	$VÆveRódy
()

680 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

681 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

682 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

683 
	}
}

685 
	$VÆvePªHótög
()

687 
	`Clo£VÆve
–
VALVE_HOT_OUT
 );

688 
	`O≥nVÆve
–
VALVE_HOT_DRAIN
 );

689 
	`Clo£VÆve
–
VALVE_HOT_IN
 );

690 
	}
}

702 
	mLOW_INIT
,

703 
	mLOW_CHECK_OUTAGE
,

704 
	mLOW_HEATING
,

705 
	mLOW_DONE
,

709 
	s_¥ehót_low_


711 
U8
 
	mSãp
;

712 
F32
 
	mLPM
;

713 } 
	tPªHótLow_T
;

715 
PªHótLow_T
 
	gPªHótLow
;

717 
U8
 
	$PªHótögLow
()

719  
PªHótLow
.
Sãp
 )

721 
LOW_INIT
:

723 if–
	`GëHŸOutLa°edTimeOut
(Ë< 
RECHECK_OUTAGE_TIME


724 && 
	`GëHŸOutCh™gedSñ
(Ë=
FALSE
 )

726 
	`InôPªHótOuège
();

728 
	`VÆveRódy
();

729 
PªHótLow
.
LPM
 = 
	`SëupLPM
();

730 
PªHótLow
.
Sãp
 = 
LOW_HEATING
;

734 
	`CÀ¨HŸOutCh™gedSñ
();

736 
	`VÆveCheckOuège
();

737 
	`SèπCheckOuège
–
OUTAGE_HOT_OUT_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

739 
	`InôPªHótOuège
();

741 
PªHótLow
.
LPM
 = 
	`SëupLPM
();

742 
PªHótLow
.
Sãp
++;

746 
LOW_CHECK_OUTAGE
:

747 if–
	`IsGoodPªHótOuège
(Ë=
TRUE
 )

749 
	`VÆvePªHótög
();

750 
	`St›CheckOuège
();

751 
PªHótLow
.
Sãp
++;

755 
LOW_HEATING
:

756 
	`CheckPªHótDi•Levñ
–
	`GëHŸOutPªHótTemp
(), 
	`GëTemp
–
TEMP_ID_HEATER
 ));

757 
	`Hótög
();

760 if–
	`CheckHótög
(Ë=
TRUE
 )

762 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

764 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >
	`GëHŸOutPªHótTemp
()

765 && 
PªHót
.
HóãrOnTime
 > 400 )

767 
PªHótLow
.
Sãp
++;

769 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 75.0f )

771 
PªHótLow
.
Sãp
++;

776 
PªHótLow
.
Sãp
++;

781 
LOW_DONE
:

782 
	`DBG_CheckPªHótTemp
();

784 
	`SëupHóãrOuçut
–
PªHótLow
.
LPM
 );

786 
PªHótLow
.
Sãp
 = 0;

787  
TRUE
;

793 if–
	`IsTimeOutPªHótög
(Ë=
TRUE
 )

795 
PªHótLow
.
Sãp
 = 
LOW_DONE
;

798  
FALSE
;

799 
	}
}

801 
U8
 
	$IsReCheckOuège
()

804 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

806 if–
	`GëHŸOutLa°edTimeOut
(Ë> 
RECHECK_OUTAGE_TIME
 )

808  
FALSE
;

811 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 103.0f )

813  
TRUE
;

817 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_MILK
 )

821 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 60.0f )

823  
TRUE
;

835 if–
	`GëHŸOutLa°edTimeOut
(Ë< 
RECHECK_OUTAGE_TIME


836 && 
	`GëTemp
–
TEMP_ID_HEATER
 ) + 7.0‡<
	`GëHŸOutT¨gëOutTemp
() )

838  
TRUE
;

841  
FALSE
;

842 
	}
}

846 
	mMID_INIT
,

847 
	mMID_CHECK_OUTAGE
,

848 
	mMID_HEATING
,

849 
	mMID_DONE
,

853 
	s_¥ehót_middÀ_


855 
U8
 
	mSãp
;

856 
F32
 
	mLPM
;

857 } 
	tPªHótMid_T
;

859 
PªHótMid_T
 
	gPªHótMid
;

861 
U8
 
	$PªHótögMiddÀ
()

863  
PªHótMid
.
Sãp
 )

865 
MID_INIT
:

867 if–
	`IsReCheckOuège
(Ë=
FALSE


868 && 
	`GëHŸOutCh™gedSñ
(Ë=
FALSE
 )

870 
	`InôPªHótOuège
();

872 
	`VÆveRódy
();

873 
PªHótMid
.
LPM
 = 
	`SëupLPM
();

874 
PªHótMid
.
Sãp
 = 
MID_HEATING
;

878 
	`CÀ¨HŸOutCh™gedSñ
();

879 
	`VÆveCheckOuège
();

880 
	`SèπCheckOuège
–
OUTAGE_HOT_OUT_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

882 
	`InôPªHótOuège
();

884 
PªHótMid
.
LPM
 = 
	`SëupLPM
();

885 
PªHótMid
.
Sãp
++;

889 
MID_CHECK_OUTAGE
:

890 if–
	`IsGoodPªHótOuège
(Ë=
TRUE
 )

892 
	`VÆvePªHótög
();

893 
	`St›CheckOuège
();

894 
PªHótMid
.
Sãp
++;

898 
MID_HEATING
:

899 
	`CheckPªHótDi•Levñ
–
	`GëHŸOutPªHótTemp
(), 
	`GëTemp
–
TEMP_ID_HEATER
 ));

900 
	`Hótög
();

904 if–
	`CheckHótög
(Ë=
TRUE
 )

906 
PªHótMid
.
Sãp
++;

909 if–
	`CheckHótög
(Ë=
TRUE
 )

911 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER
 )

913 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) >= 80.0f

914 || 
PªHót
.
HóãrOnTime
 >= 400 )

916 
PªHótMid
.
Sãp
++;

918 if–
	`GëTemp
–
TEMP_ID_HEATER
 ) > 85.0f )

920 
PªHótMid
.
Sãp
++;

925 
PªHótMid
.
Sãp
++;

931 
MID_DONE
:

932 
	`DBG_CheckPªHótTemp
();

934 
	`SëupHóãrOuçut
–
PªHótMid
.
LPM
 );

936 
PªHótMid
.
Sãp
 = 0;

937  
TRUE
;

943 if–
	`IsTimeOutPªHótög
(Ë=
TRUE
 )

945 
PªHótMid
.
Sãp
 = 
MID_DONE
;

948  
FALSE
;

949 
	}
}

954 
	mOVER_INIT
,

955 
	mOVER_CHECK_OUTAGE
,

956 
	mOVER_COOLING_HEATER
,

957 
	mOVER_COOLING_WAIT
,

958 
	mOVER_HEATING
,

959 
	mOVER_DONE
,

963 
	s_¥ehót_ovî_


965 
U8
 
	mSãp
;

966 
F32
 
	mLPM
;

967 } 
	tPªHótOvî_T
;

969 
PªHótOvî_T
 
	gPªHótOvî
;

970 
U8
 
	$PªHótögOvî
()

972 
U16
 
mu16Dñay
 = 0;

974  
PªHótOvî
.
Sãp
 )

976 
OVER_INIT
:

978 
mu16Dñay
 = 0;

980 if–
	`IsReCheckOuège
(Ë=
FALSE


981 && 
	`GëHŸOutCh™gedSñ
(Ë=
FALSE
 )

983 
	`InôPªHótOuège
();

985 
	`VÆveRódy
();

986 
PªHótOvî
.
LPM
 = 
	`SëupLPM
();

987 
PªHótOvî
.
Sãp
 = 
OVER_HEATING
;

991 
	`CÀ¨HŸOutCh™gedSñ
();

992 
	`VÆveCheckOuège
();

993 
	`SèπCheckOuège
–
OUTAGE_HOT_OUT_DELAY_TIME
, 
OUTAGE_CHECK_TIME_3SEC
, 
TYPE_HOT_WATER
 );

995 
	`InôPªHótOuège
();

997 
PªHótOvî
.
LPM
 = 
	`SëupLPM
();

998 
PªHótOvî
.
Sãp
++;

1002 
OVER_CHECK_OUTAGE
:

1003 if–
	`IsGoodPªHótOuège
(Ë=
TRUE
 )

1005 
PªHótOvî
.
Sãp
++;

1009 
OVER_COOLING_HEATER
:

1011 if–
	`IsGoodCoﬁögHóãr
–
	`GëCoﬁögTemp
(), 
	`GëTemp
–
TEMP_ID_HEATER
 )Ë=
TRUE
 )

1013 
	`VÆvePªHótög
();

1014 
	`St›CheckOuège
();

1015 
mu16Dñay
 = 50;

1017 
PªHótOvî
.
Sãp
++;

1021 
OVER_COOLING_WAIT
:

1022 if–
mu16Dñay
 != 0 )

1024 
mu16Dñay
--;

1025  
FALSE
;

1028 
PªHót
.
HóãrC⁄fOnTime
 = 250;

1029 if–
	`GëHóãrCœss
(Ë=
HEATER_CLASS_LOW
 )

1031 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) < 20.0f )

1033 
PªHót
.
HóãrC⁄fOnTime
 = 350;

1036 
PªHótOvî
.
Sãp
++;

1039 
OVER_HEATING
:

1040 
	`CheckPªHótDi•Levñ
–
	`GëHŸOutPªHótTemp
(), 
	`GëTemp
–
TEMP_ID_HEATER
 ));

1041 
	`Hótög
();

1044 if–
	`CheckHótög
(Ë=
TRUE
 )

1046 
PªHótOvî
.
Sãp
++;

1050 
OVER_DONE
:

1051 
	`DBG_CheckPªHótTemp
();

1053 
	`SëupHóãrOuçut
–
PªHótOvî
.
LPM
 );

1055 
PªHótOvî
.
Sãp
 = 0;

1056  
TRUE
;

1062 if–
	`IsTimeOutPªHótög
(Ë=
TRUE
 )

1064 
PªHótOvî
.
Sãp
 = 
OVER_DONE
;

1067  
FALSE
;

1068 
	}
}

1071 
U16
 
	$GëPªHótMaxTimeOut
()

1074 if–
	`GëHŸSñe˘
(Ë=
SEL_HOT_USER


1075 || 
	`GëHŸSñe˘
(Ë=
SEL_HOT_COFFEE
 )

1077 if–
	`GëTemp
–
TEMP_ID_HOT_IN
 ) <= 18.0f

1078 || 
	`GëHóãrCœss
(Ë!
HEATER_CLASS_HIGH
 )

1080  
MAX_TIME_OUT_PREHEAT_LONG
;

1084  
MAX_TIME_OUT_PREHEAT
;

1085 
	}
}

1089 
	mPRE_HEAT_INIT
,

1090 
	mPRE_HEAT_DOING
,

1091 
	mPRE_HEAT_DONE


1094 
U8
 
	$DoPªHótög
(
U8
 *
pSãp
)

1096  *
pSãp
 )

1098 
PRE_HEAT_INIT
:

1101 
PªHót
.
Ty≥
 = 
	`CheckPªHótTy≥
(

1102 
	`GëTemp
–
TEMP_ID_HEATER
 ),

1103 
	`GëHŸOutPªHótTemp
(),

1104 
	`GëHŸOutT¨gëOutTemp
()

1107 
	`InôHóãrTemp
();

1108 
PªHótLow
.
Sãp
 = 0;

1109 
PªHótMid
.
Sãp
 = 0;

1110 
PªHótOvî
.
Sãp
 = 0;

1111 
PªHót
.
HótögTime
 = 0;

1112 
PªHót
.
MaxTimeOut
 = 
	`GëPªHótMaxTimeOut
();

1114 
PªHót
.
HóãrOnTime
 = 0;

1115 
PªHót
.
HóãrC⁄fOnTime
 = 
	`GëMöHótögTime
();

1117 
	`SëHóãrTempT¨gëOut
–
	`GëHŸOutT¨gëOutTemp
() );

1118 
	`InôPªHótDi•Levñ
–
	`GëHŸOutPªHótTemp
(), 
	`GëTemp
–
TEMP_ID_HEATER
 ));

1119 (*
pSãp
)++;

1122 
PRE_HEAT_DOING
:

1124 if–
PªHót
.
Ty≥
 =
LOW_PREHEAT
 )

1126 if–
	`PªHótögLow
(Ë=
TRUE
 )

1128 (*
pSãp
)++;

1131 if–
PªHót
.
Ty≥
 =
MIDDLE_PREHEAT
 )

1133 if–
	`PªHótögMiddÀ
(Ë=
TRUE
 )

1135 (*
pSãp
)++;

1140 if–
	`PªHótögOvî
(Ë=
TRUE
 )

1142 (*
pSãp
)++;

1147 
PRE_HEAT_DONE
:

1148 
	`D⁄ePªHótDi•Levñ
();

1150 (*
pSãp
) = 0;

1151  
TRUE
;

1154 (*
pSãp
) = 0;

1158 
	`Upd©eHótögTime
();

1160  
FALSE
;

1161 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out_preheat.h

1 #i‚de‡
__HOT_WATER_OUT_PREHEAT_H__


2 
	#__HOT_WATER_OUT_PREHEAT_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out_ty≥.h
"

8 
	e_¥ehót_ty≥_


10 
	mLOW_PREHEAT
,

11 
	mMIDDLE_PREHEAT
,

12 
	mOVER_PREHEAT


13 } 
	tPªHótTy≥_T
;

16 
	s_¥ehót_


18 
PªHótTy≥_T
 
	mTy≥
;

19 
U8
 
	mDi•Sãp
;

20 
U16
 
	mHótögTime
;

21 
U16
 
	mMaxTimeOut
;

22 
U16
 
	mCÆcuœãdTimeOut
;

26 
TEMP_T
 
	mtHŸIn
;

27 
TEMP_T
 
	mtPªhótOut
;

28 
TEMP_T
 
	mtPªhótHóãr
;

30 
U16
 
	mHóãrOnTime
;

31 
U16
 
	mHóãrC⁄fOnTime
;

32 } 
	tPªHót_T
;

35 
PªHótTy≥_T
 
GëHŸOutPªHótTy≥
();

37 
	#PREHEAT_PROGRESS_LEVEL_3
 2

	)

38 
	#PREHEAT_PROGRESS_LEVEL_2
 1

	)

39 
	#PREHEAT_PROGRESS_LEVEL_1
 0

	)

41 
U8
 
GëHŸOutPªHótLevñ
();

43 
U8
 
DoPªHótög
(U8 *
pSãp
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_temp_table.c

1 
	~"hŸ_w©î_ãmp_èbÀ.h
"

3 
	~"hŸ_w©î.h
"

4 
	~"hŸ_w©î_out.h
"

5 
	~"hŸ_w©î_hóãr.h
"

19 
	s_hŸ_ãmp_


21 
TEMP_T
 
	mtPªHót
;

22 
TEMP_T
 
	mtOut
;

23 } 
	tT¨gëTemp_T
;

26 
T¨gëTemp_T
 
	gHŸOutTempLi°_Low
[ 
SEL_HOT_NUM
 ][ 
HEATER_CLASS_NUM
 ] =

62 
T¨gëTemp_T
 
	gHŸOutTempLi°_Mid
[ 
SEL_HOT_NUM
 ][ 
HEATER_CLASS_NUM
 ] =

98 
T¨gëTemp_T
 
	gHŸOutTempLi°_High
[ 
SEL_HOT_NUM
 ][ 
HEATER_CLASS_NUM
 ] =

136 
TEMP_T
 
	$GëHŸT¨gëPªHótTemp
–
U8
 
mu8Sñ
, U8 
mu8Cœss
, U8 
mu8TempRegi⁄
 )

138 if–
mu8TempRegi⁄
 =
REGION_TEMP_LOW
 )

140  
HŸOutTempLi°_Low
[ 
mu8Sñ
 ][ 
mu8Cœss
 ].
tPªHót
;

142 if–
mu8TempRegi⁄
 =
REGION_TEMP_MID
 )

144  
HŸOutTempLi°_Mid
[ 
mu8Sñ
 ][ 
mu8Cœss
 ].
tPªHót
;

147  
HŸOutTempLi°_High
[ 
mu8Sñ
 ][ 
mu8Cœss
 ].
tPªHót
;

148 
	}
}

152 
TEMP_T
 
	$GëHŸT¨gëOutTemp
–
U8
 
mu8Sñ
, U8 
mu8Cœss
, U8 
mu8TempRegi⁄
 )

154 if–
mu8TempRegi⁄
 =
REGION_TEMP_LOW
 )

156  
HŸOutTempLi°_Low
[ 
mu8Sñ
 ][ 
mu8Cœss
 ].
tOut
;

158 if–
mu8TempRegi⁄
 =
REGION_TEMP_MID
 )

160  
HŸOutTempLi°_Mid
[ 
mu8Sñ
 ][ 
mu8Cœss
 ].
tOut
;

163  
HŸOutTempLi°_High
[ 
mu8Sñ
 ][ 
mu8Cœss
 ].
tOut
;

164 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_temp_table.h

1 #i‚de‡
__HOT_WATER_TEMP_TABLE_H__


2 
	#__HOT_WATER_TEMP_TABLE_H__


	)

4 
	~"¥j_ty≥.h
"

12 
TEMP_T
 
GëHŸT¨gëPªHótTemp
–
U8
 
mu8Sñ
, U8 
mu8Cœss
, U8 
mu8TempRegi⁄
 );

15 
TEMP_T
 
GëHŸT¨gëOutTemp
–
U8
 
mu8Sñ
, U8 
mu8Cœss
, U8 
mu8TempRegi⁄
 );

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\room_water_out.c

1 
	~"room_w©î_out.h
"

2 
	~"vÆve.h
"

3 
	~"u£r.h
"

4 
	~"Êow_mëî.h
"

5 
	~"w©î_out_comm⁄.h
"

6 
	~"hŸ_w©î_out.h
"

7 
	~"îr‹.h
"

8 
	~"sound.h
"

11 
	#DEFAULT_WAIT_TIME
 20

13 

	)

14 
W©îOut_T
 
	gRoomOut
;

17 
	$Upd©eU£rUßge
(
U32
 
mu32Amou¡
)

19 
U32
 
mu32T¨gëAmou¡
;

21 
mu32T¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–
OUT_AMOUNT_10
 );

22 if–
mu32T¨gëAmou¡
 != 0 )

24 
mu32Amou¡
 = mu32Amou¡ / 
mu32T¨gëAmou¡
;

25 
mu32Amou¡
 *= 10;

29 
mu32Amou¡
 = 0;

32 
	`AddU£rUßgeW©î
–
mu32Amou¡
 );

33 
	}
}

35 
	$Tu∫OnRoomOut
(
W©îOutTy≥_T
 
mTy≥
)

37 
RoomOut
.
Out
 = 
TRUE
;

38 
RoomOut
.
Ty≥
 = 
mTy≥
;

39 
RoomOut
.
T¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–RoomOut.
Ty≥
 );

40 
	}
}

42 
	$Tu∫OffRoomOut
()

44 
RoomOut
.
Out
 = 
FALSE
;

45 
	}
}

48 
U8
 
	$IsCh™gedOutSètus
()

50 if–
RoomOut
.
Out
 !RoomOut.
PªvOut
 )

52 
RoomOut
.
PªvOut
 = RoomOut.
Out
;

54  
TRUE
;

57  
FALSE
;

58 
	}
}

60 
	$Upd©eRoomCuºítAmou¡
()

62 
RoomOut
.
CuºítAmou¡
++;

63 
	}
}

65 
	$Regi°îOuègeRoomOut
()

67 
RoomOut
.
CuºítAmou¡
 = 0UL;

70 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
Upd©eRoomCuºítAmou¡
 );

73 
	`SèπCheckOuège
–
OUTAGE_DELAY_TIME
, 
OUTAGE_CHECK_TIME_10SEC
, 
TYPE_WATER
 );

74 
	}
}

76 
	$UnRegi°îOuègeRoomOut
()

79 
	`Upd©eU£rUßge
–
RoomOut
.
CuºítAmou¡
 );

80 
RoomOut
.
CuºítAmou¡
 = 0UL;

83 
	`Regi°îFlowMëîId
–
FLOW_ID_WATER
, 
NULL
 );

86 
	`St›CheckOuège
();

87 
	}
}

91 
	mOUT_INIT_OUTAGE
,

92 
	mOUT_OPEN_WATER_OUT
,

96 
	$O≥nVÆveRoomOut
()

98  
RoomOut
.
O≥nSãp
 )

100 
OUT_INIT_OUTAGE
:

101 
	`Regi°îOuègeRoomOut
();

103 
RoomOut
.
WaôTime
 = 0;

104 
RoomOut
.
O≥nSãp
++;

107 
OUT_OPEN_WATER_OUT
:

108 if–
RoomOut
.
WaôTime
 != 0 )

110 
RoomOut
.
WaôTime
--;

114 
	`O≥nVÆve
–
VALVE_ROOM_OUT
 );

121 
	}
}

125 
	mSTOP_INIT_OUTAGE
,

126 
	mSTOP_CLOSE_WATER_OUT
,

129 
	$Clo£VÆveRoomOut
()

131  
RoomOut
.
Clo£Sãp
 )

133 
STOP_INIT_OUTAGE
:

134 
	`Clo£VÆve
–
VALVE_ROOM_OUT
 );

136 if–
RoomOut
.
CuºítAmou¡
 > 
AMOUNT_50
 )

138 
	`Upd©eHŸOutLPM
–
	`GëFlowMëîLPM
() );

141 
	`UnRegi°îOuègeRoomOut
();

142 
RoomOut
.
Clo£Sãp
++;

145 
STOP_CLOSE_WATER_OUT
:

153 
	}
}

158 
U8
 
	$GëRoomOutPî˚¡
()

160  
	`CÆcPî˚¡
–
RoomOut
.
T¨gëAmou¡
, RoomOut.
CuºítAmou¡
 );

161 
	}
}

165 
U16
 
	$GëRoomOutAmou¡
()

167  
	`CÆcLôî
–
RoomOut
.
CuºítAmou¡
 );

168 
	}
}

171 
U8
 
	$IsD⁄eRoomOut
()

173 if–
	`IsEº‹Ty≥
–
ERR_TYPE_ROOM_WATER_OUT
 ) =
TRUE
 )

175  
TRUE
;

179 if–
RoomOut
.
T¨gëAmou¡
 <RoomOut.
CuºítAmou¡
 )

181  
TRUE
;

184  
FALSE
;

185 
	}
}

187 
	$OutÊow
(
U8
 
mu8Out
)

189 if–
mu8Out
 =
TRUE
 )

191 
RoomOut
.
Clo£Sãp
 = 0;

192 
	`O≥nVÆveRoomOut
();

196 
RoomOut
.
O≥nSãp
 = 0;

197 
	`Clo£VÆveRoomOut
();

199 
	}
}

202 
U8
 
	$C⁄åﬁW©îRoomOut
()

204 if–
	`IsCh™gedOutSètus
(Ë=
TRUE
 )

206 if–
RoomOut
.
Out
 =
TRUE
 )

216 if–
RoomOut
.
Out
 =
TRUE
 )

218 if–
	`IsD⁄eRoomOut
(Ë=
TRUE
 )

220 
	`Tu∫OffRoomOut
();

221 
	`Sound
(
SOUND_EFFLUENT_END
);

222  
WATER_OUT_DONE
;

226 
	`OutÊow
(
RoomOut
.
Out
);

227  
WATER_OUT_GOING
;

228 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\room_water_out.h

1 #i‚de‡
__ROOM_WATER_OUT_H__


2 
	#__ROOM_WATER_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out_ty≥.h
"

10 
Tu∫OnRoomOut
(
W©îOutTy≥_T
 
mTy≥
);

13 
Tu∫OffRoomOut
();

16 
U8
 
GëRoomOutPî˚¡
();

19 
U16
 
GëRoomOutAmou¡
();

22 
U8
 
C⁄åﬁW©îRoomOut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\tank_clean.c

1 
	~"ènk_˛ón.h
"

2 
	~"w©î_out.h
"

3 
	~"i˚.h
"

4 
	~"i˚_makî.h
"

5 
	~"£rvi˚.h
"

6 
	~"cﬁd_w©î.h
"

13 
	#CONFIG_TANK_CLEAN_STOP_LOAD
 0

14 

	)

17 
	s_ènk_˛ón_


20 
U8
 
	mOut
;

21 
U8
 
	mOffLﬂd
;

23 
U8
 
	mCodySîvi˚
;

24 } 
	tT™kCÀ™_T
;

27 
T™kCÀ™_T
 
	gCÀ™
;

29 
	$InôT™kCÀ™
()

31 
CÀ™
.
Out
 = 
FALSE
;

32 
CÀ™
.
OffLﬂd
 = 
FALSE
;

34 
CÀ™
.
CodySîvi˚
 = 
FALSE
;

35 
	}
}

40 
	$SëT™kCÀ™
(
U8
 
mu8Mode
)

42 
CÀ™
.
Out
 = 
mu8Mode
;

44 #i‡
CONFIG_TANK_CLEAN_STOP_LOAD


45 if–
mu8Mode
 =
TRUE
 )

47 
CÀ™
.
OffLﬂd
 = 
TRUE
;

48 
	`St›I˚Make
();

51 
	}
}

53 
U8
 
	$GëT™kCÀ™
()

55  
CÀ™
.
Out
;

56 
	}
}

59 
	$SëCodySîvi˚
(
U8
 
mu8Mode
)

61 
CÀ™
.
CodySîvi˚
 = 
mu8Mode
;

63 if–
mu8Mode
 =
TRUE
 )

65 
	`St›DummyDeIcög
();

66 
	`St›I˚Make
();

68 
	}
}

70 
U8
 
	$GëCodySîvi˚
()

72  
CÀ™
.
CodySîvi˚
;

73 
	}
}

75 
U8
 
	$IsT™kCÀ™Mode
()

81 #i‡
CONFIG_TANK_CLEAN_STOP_LOAD


82 if–
	`GëSîvi˚CheckT™kO≥n
(Ë=
TRUE


83 && 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_COLD


84 && 
	`GëW©îOutAmoutTy≥
(Ë=
FIXED_AMOUNT_INFINITY
)

86  
TRUE
;

90  
FALSE
;

91 
	}
}

93 
U8
 
	$GëT™kCÀ™OffLﬂd
()

95  
CÀ™
.
OffLﬂd
;

96 
	}
}

99 
	$CÀ¨T™kCÀ™OffLﬂd
()

101 
CÀ™
.
OffLﬂd
 = 
FALSE
;

102 
	}
}

104 
	$Pro˚ssT™kCÀ™
()

106 #i‡
CONFIG_TANK_CLEAN_STOP_LOAD


108 if–
	`GëSîvi˚CheckT™kO≥n
(Ë=
FALSE


109 && 
	`GëT™kCÀ™
(Ë=
FALSE
 )

111 
	`CÀ¨T™kCÀ™OffLﬂd
();

114 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\tank_clean.h

1 #i‚de‡
__TANK_CLEAN_H__


2 
	#__TANK_CLEAN_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôT™kCÀ™
();

9 
SëT™kCÀ™
(
U8
 
mu8Mode
);

10 
U8
 
GëT™kCÀ™
();

11 
U8
 
IsT™kCÀ™Mode
();

14 
SëCodySîvi˚
(
U8
 
mu8Mode
);

15 
U8
 
GëCodySîvi˚
();

18 
U8
 
GëT™kCÀ™OffLﬂd
();

19 
CÀ¨T™kCÀ™OffLﬂd
();

21 
Pro˚ssT™kCÀ™
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out.c

1 
	~"w©î_out.h
"

2 
	~"sound.h
"

3 
	~"ì¥om.h
"

4 
	~"ènk_˛ón.h
"

5 
	~"key_evít_lib.h
"

6 
	~"îr‹.h
"

7 
	~"vÆve.h
"

9 
	~"room_w©î_out.h
"

10 
	~"cﬁd_w©î.h
"

11 
	~"cﬁd_w©î_out.h
"

12 
	~"hŸ_w©î.h
"

13 
	~"hŸ_w©î_out.h
"

14 
	~"Êush_w©î_out.h
"

15 
	~"cody_w©î_out.h
"

16 
	~"Êow_mëî.h
"

17 
	~"w©î_out_comm⁄.h
"

18 
	~"¥o˚ss_di•œy.h
"

19 
	~"sound.h
"

23 
	#ONE_USER_AMOUNT
 
AMOUNT_10


	)

24 
	#DEFAULT_USER_AMOUNT_LITER
 550

	)

25 
	#DEFAULT_USER_AMOUNT
 ( (
DEFAULT_USER_AMOUNT_LITER
 / 
ML_UNIT
Ë* 
AMOUNT_10
 )

26 
	#MAX_CONF_USER_AMOUNT
 ( (
MAX_USER_AMOUNT_LITER
 / 
ML_UNIT
Ë* 
AMOUNT_10
 )

27 

	)

28 
	#RETURN_TIME_AFTER_WATER_OUT
 500

29 
	#DEFAULT_RETURN_TIME
 700

30 
	#DEFAULT_CONTINUE_RETURN_TIME
 0

31 
	#RETURN_TIME_AMOUNT
 20

32 
	#OUT_PROTECT_TIME
 50

33 

	)

34 
	#LIMIT_TIME
 (
U32
)-1

	)

35 
	s_w©î_out_


38 
U8
 
	mSñe˘
;

39 
U8
 
	mLa°edSñe˘
;

40 
U8
 
	mPªvSñe˘
;

41 
U16
 
	mRëu∫Time
;

42 
U16
 
	mRëu∫TimeAmou¡
;

46 
U8
 
	mW©îOut
;

47 
U8
 
	mC⁄fAmou¡
;

48 
U8
 
	mPrŸe˘Time
;

51 
U8
 
	mC⁄fU£r
;

52 
U32
 
	mC⁄fU£rAmou¡
;

55 
U8
 
	mC⁄töue
;

56 
U16
 
	mC⁄töueRëu∫Time
;

59 
U8
 
	mL⁄gKeyOut
;

60 
U8
 
	mL⁄gKeyBackUp
;

61 
U8
 
	mInföôyAmout
;

62 
U8
 
	mFixedAmou¡Ty≥
;

64 
U32
 
	mInföôyTimeOut
;

65 
U32
 
	mC⁄fInföôyTimeOut
;

68 
U32
 
	mOutW©îTime
[
MAX_TIME_ID
][
MAX_WATER_ID
];

70 } 
	tW©îOutSètus_T
;

72 
W©îOutSètus_T
 
	gOut
;

75 
	$InôW©îOut
()

77 
U8
 
i
;

79 
Out
.
Sñe˘
 = 
SEL_WATER_ROOM
;

80 
Out
.
La°edSñe˘
 = 
SEL_WATER_ROOM
;

81 
Out
.
PªvSñe˘
 = 
SEL_WATER_ROOM
;

82 
Out
.
Rëu∫Time
 = 0;

83 
Out
.
Rëu∫TimeAmou¡
 = 0;

86 
Out
.
W©îOut
 = 
FALSE
;

87 
Out
.
C⁄fAmou¡
 = 
FIXED_AMOUNT_HALF
;

89 
Out
.
C⁄fU£r
 = 
FALSE
;

90 
Out
.
C⁄fU£rAmou¡
 = 
DEFAULT_USER_AMOUNT
;

92 
Out
.
C⁄töue
 = 
FALSE
;

93 
Out
.
C⁄töueRëu∫Time
 = 0;

95 
Out
.
L⁄gKeyOut
 = 
FALSE
;

96 
Out
.
L⁄gKeyBackUp
 = 
FIXED_AMOUNT_HALF
;

97 
Out
.
InföôyAmout
 = 
FALSE
;

98 
Out
.
FixedAmou¡Ty≥
 = 
FIXED_AMOUNT_HALF
;

100 #i‡
CONFIG_TEST_OUT_CONTY


101 
Out
.
InföôyTimeOut
 = 
INFINITY_120MIN_TIMEOUT
;

102 
Out
.
C⁄fInföôyTimeOut
 = 
INFINITY_120MIN_TIMEOUT
;

104 
Out
.
InföôyTimeOut
 = 
INFINITY_3MIN_TIMEOUT
;

105 
Out
.
C⁄fInföôyTimeOut
 = 
INFINITY_3MIN_TIMEOUT
;

107 
Out
.
PrŸe˘Time
 = 
OUT_PROTECT_TIME
;

109  
i
 = 0; i < 
MAX_WATER_ID
 ; i++ )

111 
Out
.
OutW©îTime
[
LASTED_TIME_ID
][ 
i
 ] = 0UL;

112 
Out
.
OutW©îTime
[
DAILY_TIME_ID
][ 
i
 ] = 0UL;

113 
Out
.
OutW©îTime
[
TOTAL_TIME_ID
][ 
i
 ] = 0UL;

117 
	`InôFlushOut
();

118 
	}
}

122 
	$SëW©îOutSñe˘
(
U8
 
mu8Id
 )

124 if–
mu8Id
 >
MAX_WATER_ID
 )

129 if–
Out
.
Sñe˘
 !
mu8Id
 )

131 
Out
.
PªvSñe˘
 = Out.
Sñe˘
;

134 
Out
.
Rëu∫Time
 = 
DEFAULT_RETURN_TIME
;

135 
Out
.
Sñe˘
 = 
mu8Id
;

137 
	`SaveEïromId
–
EEP_ID_SEL_WATER
 );

138 
	}
}

140 
U8
 
	$GëW©îOutSñe˘
()

142  
Out
.
Sñe˘
;

143 
	}
}

145 
U8
 
	$GëW©îOutLa°edSñe˘
()

147  
Out
.
La°edSñe˘
;

148 
	}
}

150 
	$Upd©eW©îOutRëu∫Time
()

152 
Out
.
Rëu∫Time
 = 
DEFAULT_RETURN_TIME
;

153 
	}
}

155 
	$Re£tW©îOutRëu∫Time
()

157 
Out
.
Rëu∫Time
 = 0;

158 
Out
.
Rëu∫TimeAmou¡
 = 
RETURN_TIME_AMOUNT
;

159 
	}
}

162 
	$Upd©eW©îOutRëu∫TimeU£r
()

164 
Out
.
Rëu∫TimeU£r
 = 
DEFAULT_RETURN_TIME
;

165 
	}
}

168 
U16
 
	$GëW©îOutRëu∫Time
()

170  
Out
.
Rëu∫Time
;

171 
	}
}

173 
U16
 
	$GëW©îOutRëu∫TimeAmou¡
()

175  
Out
.
Rëu∫TimeAmou¡
;

176 
	}
}

179 
U16
 
	$GëW©îOutRëu∫TimeU£r
()

181  
Out
.
Rëu∫TimeU£r
;

182 
	}
}

185 
U8
 
	$SoundFlushöSèπ
()

187 
U8
 
mu8Sound
;

190 if–
	`GëFlushSëupInô
(Ë=
FALSE
 )

192 
mu8Sound
 = 
SOUND_SETUP_FLUSHING
;

196 
mu8Sound
 = 
SOUND_FILTER_FLUSHING
;

199  
mu8Sound
;

200 
	}
}

202 
U8
 
	$SèπW©îOutFlush
(
U8
 
mu8Sound
)

205 if–
	`IsD⁄eFlushSètus
(Ë=
FALSE
 )

207 
	`SëW©îOutSñe˘
–
SEL_WATER_FLUSH
 );

208 
mu8Sound
 = 
	`SoundFlushöSèπ
();

210 if–
	`GëFlushPowîOn
(Ë=
FLUSH_STATUS_INIT
 )

212 
	`SëW©îOutSñe˘
–
SEL_WATER_FLUSH
 );

215 
	`SèπW©îOut
();

216  
mu8Sound
;

217 
	}
}

220 
	$SèπW©îOutFlushPowîOn
()

222 if–
	`IsD⁄eFlushSètus
(Ë=
TRUE
 )

224 if–
	`GëFlushPowîOn
(Ë=
FLUSH_STATUS_INIT
 )

226 
	`SëW©îOutSñe˘
–
SEL_WATER_FLUSH
 );

227 
	`SèπW©îOut
();

230 
	}
}

233 
	$SèπW©îOut
()

235 if–
Out
.
W©îOut
 =
FALSE
 )

237 
Out
.
OutW©îTime
[
LASTED_TIME_ID
][Out.
Sñe˘
] = 0UL;

239 
Out
.
W©îOut
 = 
TRUE
;

240 
	}
}

244 
	$St›W©îOut
()

246 
Out
.
W©îOut
 = 
FALSE
;

249 
	`SëT™kCÀ™
–
FALSE
 );

251 
	}
}

258 
U8
 
	$GëW©îOut
()

260  
Out
.
W©îOut
;

261 
	}
}

264 
	$SëW©îOutC⁄töue
(
U8
 
mu8Mode
 )

266 if–
mu8Mode
 !
TRUE
 && mu8Modê!
FALSE
 )

271 
Out
.
C⁄töue
 = 
mu8Mode
;

272 if–
mu8Mode
 =
TRUE
 )

274 
Out
.
C⁄töueRëu∫Time
 = 
DEFAULT_CONTINUE_RETURN_TIME
;

276 
	}
}

278 
U8
 
	$GëW©îOutC⁄töue
()

280  
Out
.
C⁄töue
;

281 
	}
}

283 
U8
 
	$IsExpúedOutPrŸe˘Time
()

285 if–
Out
.
PrŸe˘Time
 != 0 )

287  
FALSE
;

290  
TRUE
;

291 
	}
}

293 
	$SëW©îOutInföôyL⁄gKey
()

295 
Out
.
L⁄gKeyOut
 = 
TRUE
;

297 
Out
.
L⁄gKeyBackUp
 = 
	`GëW©îOutFixedAmoutTy≥
();

298 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_INFINITY
 );

299 
	}
}

302 
	$CÀ¨W©îOutInföôyL⁄gKey
()

304 if–
Out
.
W©îOut
 =
FALSE
 && Out.
L⁄gKeyOut
 =
TRUE
 )

306 
Out
.
L⁄gKeyOut
 = 
FALSE
;

308 
	`SëW©îOutFixedAmou¡Ty≥
–
Out
.
L⁄gKeyBackUp
 );

310 
	}
}

313 
	$SëW©îOutFixedAmou¡Ty≥
(
U8
 
mTy≥
 )

315 if–
mTy≥
 >
OUT_AMOUNT_NUM
 )

320 if–
mTy≥
 =
FIXED_AMOUNT_INFINITY
 )

322 
Out
.
InföôyAmout
 = 
TRUE
;

326 
Out
.
InföôyAmout
 = 
FALSE
;

327 
Out
.
FixedAmou¡Ty≥
 = 
mTy≥
;

330 
Out
.
Rëu∫Time
 = 
DEFAULT_RETURN_TIME
;

331 
	}
}

333 
U8
 
	$GëW©îOutFixedAmoutTy≥
()

335  
Out
.
FixedAmou¡Ty≥
;

336 
	}
}

339 
U8
 
	$GëW©îOutAmoutTy≥
()

341 if–
Out
.
InföôyAmout
 =
TRUE
 )

343  
FIXED_AMOUNT_INFINITY
;

346  
	`GëW©îOutFixedAmoutTy≥
();

347 
	}
}

349 
	$CÀ¨W©îOutInföôyAmout
()

351 
Out
.
InföôyAmout
 = 
FALSE
;

352 
	}
}

355 
U8
 
	$GëW©îOutC⁄fFixedAmou¡Ty≥
()

357  
Out
.
C⁄fAmou¡
;

358 
	}
}

360 
	$SëW©îOutC⁄fFixedAmou¡Ty≥
(
U8
 
mu8Ty≥
)

362 
Out
.
C⁄fAmou¡
 = 
mu8Ty≥
;

364 
	`SaveEïromId
–
EEP_ID_CONF_FIXED_AMOUNT
 );

365 
	}
}

367 
	$SëW©îOutC⁄fInföôyTimeOut
(
U32
 
mu32TimeOut
)

369 
Out
.
C⁄fInföôyTimeOut
 = 
mu32TimeOut
;

370 
	}
}

372 
	$SëW©îOutC⁄figU£r
(
U8
 
mu8C⁄fig
)

374 
Out
.
C⁄fU£r
 = 
mu8C⁄fig
;

376 
	`SaveEïromId
–
EEP_ID_CONF_USER
 );

377 
	}
}

379 
U8
 
	$GëW©îOutC⁄figU£r
()

381  
Out
.
C⁄fU£r
;

382 
	}
}

384 
U16
 
	$GëW©îOutU£rAmou¡Lôî
()

386  
	`CÆcLôî
–
Out
.
C⁄fU£rAmou¡
 );

387 
	}
}

389 
	$SëW©îOutU£rAmou¡Lôî
(
U16
 
mu16Lôî
)

391 
U32
 
mu32VÆ
;

393 
mu32VÆ
 = 
	`CÆcAmou¡
–
mu16Lôî
 );

395 
	`SëW©îOutU£rAmou¡
–
mu32VÆ
 );

396 
	}
}

399 
U32
 
	$GëW©îOutU£rAmou¡
()

401  
Out
.
C⁄fU£rAmou¡
;

402 
	}
}

404 
	$SëW©îOutU£rAmou¡
(
U32
 
mu32U£rAmou¡
)

406 
Out
.
C⁄fU£rAmou¡
 = 
mu32U£rAmou¡
;

407 
	`SaveEïromId
–
EEP_ID_CONF_USER_AMOUNT
 );

408 
	}
}

410 
	$In¸emítW©îOutAmou¡
()

412 
Out
.
C⁄fU£rAmou¡
 +
ONE_USER_AMOUNT
;

413 if–
Out
.
C⁄fU£rAmou¡
 > 
MAX_CONF_USER_AMOUNT
 )

415 
Out
.
C⁄fU£rAmou¡
 = 
DEFAULT_USER_AMOUNT
;

418 
	`SaveEïromId
–
EEP_ID_CONF_USER_AMOUNT
 );

419 
	}
}

421 
	$In¸emítW©îOutAmou¡Limô
()

423 if–
Out
.
C⁄fU£rAmou¡
 < 
MAX_CONF_USER_AMOUNT
 )

425 
Out
.
C⁄fU£rAmou¡
 +
ONE_USER_AMOUNT
;

428 
	`SaveEïromId
–
EEP_ID_CONF_USER_AMOUNT
 );

429 
	}
}

435 
	$SëW©îOutTime
(
U8
 
mu8Ty≥
, U8 
mu8Id
, 
U32
 
mu32Time
 )

437 
Out
.
OutW©îTime
[
mu8Ty≥
][
mu8Id
] = 
mu32Time
;

438 
	}
}

443 
U32
 
	$GëW©îOutTime
(
U8
 
mu8Ty≥
, U8 
mu8Id
 )

445  
Out
.
OutW©îTime
[
mu8Ty≥
][
mu8Id
];

446 
	}
}

450 
	$Upd©eOutTime
(
U8
 
mu8Sñ
)

452 
U8
 
i
;

454  
i
 = 0; i < 
MAX_TIME_ID
; i++ )

456 if–
Out
.
OutW©îTime
[
i
][
mu8Sñ
] < 
LIMIT_TIME
 )

458 
Out
.
OutW©îTime
[
i
][
mu8Sñ
]++;

461 
	}
}

465 
U8
 
	$C⁄vW©îOutTime2Cup
(
U32
 
mu32Time
, U32 
mu32CupTime
)

467 
U32
 
mu32CupSize
;

470 if–
mu32Time
 < (
mu32CupTime
/3) )

472 
mu32CupSize
 = 0;

474 if–
mu32Time
 <
mu32CupTime
 )

476 
mu32CupSize
 = 1;

482 
mu32Time
 +(
mu32CupTime
 / 2);

483 
mu32CupSize
 = 
mu32Time
 / 
mu32CupTime
;

486  (
U8
)
mu32CupSize
;

487 
	}
}

493 
U8
 
	$GëW©îOutCupNum
(
U8
 
mu8Ty≥
, U8 
mu8Id
)

495 
U8
 
mu8Num
;

496 
U32
 
mu32Time
;

497 
U32
 
mu32CupTime
;

499 
mu32Time
 = 
Out
.
OutW©îTime
[
mu8Ty≥
][
mu8Id
];

500 
mu32CupTime
 = 
gu32TimePîCup
[ 
mu8Id
 ];

502 
mu8Num
 = 
	`C⁄vW©îOutTime2Cup
–
mu32Time
, 
mu32CupTime
 );

503  
mu8Num
;

504 
	}
}

507 
	$C⁄åﬁW©îOutSñe˘
()

510 
MíuId_T
 
mMíuId
;

520 
mMíuId
 = 
	`GëCuºítMíu
();

522 if–
mMíuId
 !
MENU_MAIN


523 && 
mMíuId
 !
MENU_WATER_OUT


524 && 
mMíuId
 !
MENU_STANDBY
)

526 
Out
.
Rëu∫Time
 = 
DEFAULT_RETURN_TIME
;

530 #i‡
CONFIG_TEST_HOT_WATER


531 if–
Out
.
Sñe˘
 =
SEL_WATER_COLD
 )

533 if–
Out
.
Sñe˘
 =
SEL_WATER_HOT


534 || 
Out
.
Sñe˘
 =
SEL_WATER_COLD
 )

537 if–
Out
.
W©îOut
 =
TRUE
 )

539 
Out
.
Rëu∫Time
 = 
DEFAULT_RETURN_TIME
;

544 if–
Out
.
Sñe˘
 =
SEL_WATER_COLD


545 && 
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

547 
Out
.
Rëu∫Time
 = 1;

552 if–
Out
.
Rëu∫Time
 != 0 )

554 
Out
.
Rëu∫TimeAmou¡
 = 
RETURN_TIME_AMOUNT
;

560 if–
Out
.
Sñe˘
 =
SEL_WATER_SODA
 )

562 
Out
.
Sñe˘
 = Out.
PªvSñe˘
;

563 
	`SëSodaSñe˘
–
SEL_SODA_HIGH
 );

566 if–
Out
.
Sñe˘
 =
SEL_WATER_HOT
 )

568 if–
	`GëHŸC⁄figTe°
(Ë=
FALSE
 )

570 
Out
.
Sñe˘
 = Out.
PªvSñe˘
;

576 if–
Out
.
Sñe˘
 =
SEL_WATER_COLD


577 && ( 
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE


578 || 
	`IsEº‹Ty≥
–
ERR_TYPE_COLD_MAKE
 ))

581 
Out
.
Sñe˘
 = 
SEL_WATER_ROOM
;

588 if–
Out
.
W©îOut
 =
TRUE
 )

590 
Out
.
Rëu∫Time
 = 
DEFAULT_RETURN_TIME
;

593 if–
Out
.
Rëu∫Time
 != 0 )

595 
Out
.
Rëu∫TimeAmou¡
 = 
RETURN_TIME_AMOUNT
;

601 if–
Out
.
Rëu∫Time
 =0 && Out.
Rëu∫TimeAmou¡
 == 0 )

604 
Out
.
InföôyAmout
 = 
FALSE
;

605 
Out
.
FixedAmou¡Ty≥
 = Out.
C⁄fAmou¡
;

608 if–
Out
.
Rëu∫TimeAmou¡
 != 0 )

610 
Out
.
Rëu∫TimeAmou¡
--;

613 if–
Out
.
Rëu∫Time
 != 0 )

615 
Out
.
Rëu∫Time
--;

617 
	}
}

621 
	$C⁄åﬁC⁄töueSñe˘
()

624 if–
Out
.
W©îOut
 =
TRUE
 && Out.
C⁄töue
 == TRUE )

626 
Out
.
C⁄töueRëu∫Time
 = 
DEFAULT_CONTINUE_RETURN_TIME
;

630 if–
Out
.
C⁄töue
 =
TRUE
 && Out.
C⁄töueRëu∫Time
 == 0 )

632 
	`SëW©îOutC⁄töue
–
FALSE
 );

633 
	`CÀ¨W©îOutInföôyAmout
();

637 if–
Out
.
C⁄töueRëu∫Time
 != 0 )

639 
Out
.
C⁄töueRëu∫Time
--;

645 if–
	`GëT™kCÀ™
(Ë=
TRUE


646 || 
	`GëCodySîvi˚
(Ë=
TRUE
 )

648 
	`SëW©îOutFixedAmou¡Ty≥
–
FIXED_AMOUNT_TANK_CLEAN
 );

651 
	}
}

659 
	$CheckW©îOutSt›C⁄dôi⁄
()

662 if–
Out
.
W©îOut
 =
FALSE
 )

664 
Out
.
InföôyTimeOut
 = Out.
C⁄fInföôyTimeOut
;

670 if–
	`GëT™kCÀ™
(Ë=
TRUE
 )

675 if–
	`GëCodySîvi˚
(Ë=
TRUE
 )

682 if–
	`GëW©îOutAmoutTy≥
(Ë=
FIXED_AMOUNT_INFINITY
 )

684 if–
Out
.
InföôyTimeOut
 != 0 )

686 #i‡!
CONFIG_TEST_8585_FILTER


687 
Out
.
InföôyTimeOut
--;

692 
	`St›W©îOut
();

693 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

694 
	`Sound
–
SOUND_EFFLUENT_END
 );

700 if––
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_ROOM


701 && 
	`IsEº‹Ty≥
–
ERR_TYPE_ROOM_WATER_OUT
 ) =
TRUE
 )

702 || ( 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_COLD


703 && 
	`IsEº‹Ty≥
–
ERR_TYPE_COLD_WATER_OUT
 ) =
TRUE
 )

704 || ( 
	`GëW©îOutSñe˘
(Ë=
SEL_WATER_HOT


705 && 
	`IsEº‹Ty≥
–
ERR_TYPE_HOT_WATER_OUT
 ) =
TRUE
 )

708 
	`St›W©îOut
();

709 
	`Sound
–
SOUND_EFFLUENT_END
 );

712 
	}
}

718 
	#RESIDUAL_TIME
 1800UL

719 
	`C⁄åﬁT™kCÀ™
()

	)

721 
U32
 
	gmu32ResiduÆTime
;

723 if–
GëT™kCÀ™
(Ë!
TRUE
 )

725 
mu32ResiduÆTime
 = 
RESIDUAL_TIME
;

729 if–
GëCﬁdW©îLevñ
(Ë=
LEVEL_LOW
 )

731 if–
mu32ResiduÆTime
 != 0 )

733 
mu32ResiduÆTime
--;

737 
St›W©îOut
();

738 
Sound
–
SOUND_EFFLUENT_END
 );

744 
W©îOutTy≥_T
 
	$C⁄vOutTy≥
(
U8
 
mu8Ty≥
)

746 
W©îOutTy≥_T
 
mAmou¡
;

749 if–
mu8Ty≥
 =
FIXED_AMOUNT_ONE
 )

751 
mAmou¡
 = 
OUT_AMOUNT_250
;

753 if–
mu8Ty≥
 =
FIXED_AMOUNT_TWO
 )

755 
mAmou¡
 = 
OUT_AMOUNT_500
;

757 if–
mu8Ty≥
 =
FIXED_AMOUNT_INFINITY
 )

759 
mAmou¡
 = 
OUT_AMOUNT_INFINITY
;

761 if–
mu8Ty≥
 =
FIXED_AMOUNT_USER
 )

763 
mAmou¡
 = 
OUT_AMOUNT_USER
;

765 if–
mu8Ty≥
 =
FIXED_AMOUNT_TANK_CLEAN
 )

767 
mAmou¡
 = 
OUT_AMOUNT_CLEAN
;

772 
mAmou¡
 = 
OUT_AMOUNT_120
;

775  
mAmou¡
;

776 
	}
}

779 
	$C⁄åﬁW©îOutCmd
()

781 
U8
 
mu8Sñe˘
;

782 
U8
 
mu8Amou¡
;

783 
W©îOutTy≥_T
 
mOutTy≥
;

787 if–
Out
.
W©îOut
 =
FALSE
 )

789 
	`Tu∫OffRoomOut
();

790 
	`Tu∫OffCﬁdOut
();

791 
	`Tu∫OffHŸOut
();

792 
	`Tu∫OffFlushOut
();

793 
	`Tu∫OffCodyOut
();

798 
mu8Sñe˘
 = 
Out
.
Sñe˘
;

799 
mu8Amou¡
 = 
	`GëW©îOutAmoutTy≥
();

800 
mOutTy≥
 = 
	`C⁄vOutTy≥
–
mu8Amou¡
 );

803 
	`Upd©eOutTime
–
mu8Sñe˘
 );

807 if–
mu8Sñe˘
 =
SEL_WATER_COLD
 )

809 
	`Tu∫OnCﬁdOut
(
mOutTy≥
);

812 if–
mu8Sñe˘
 =
SEL_WATER_HOT
 )

814 
	`Tu∫OnHŸOut
(
mOutTy≥
);

816 if–
mu8Sñe˘
 =
SEL_WATER_FLUSH
 )

818 
	`Tu∫OnFlushOut
(
mOutTy≥
);

820 if–
mu8Sñe˘
 =
SEL_WATER_CODY
 )

822 
	`Tu∫OnCodyOut
(
mOutTy≥
);

826 if–
mu8Sñe˘
 =
SEL_WATER_SODA
 )

828 
	`Tu∫OnSodaOut
(
mOutTy≥
);

834 
	`Tu∫OnRoomOut
(
mOutTy≥
);

838 
Out
.
La°edSñe˘
 = 
mu8Sñe˘
;

839 
	}
}

841 
U8
 
	$GëW©îOutPî˚¡
()

843 
U8
 
mu8Pî˚¡
 = 0;

844 
U8
 
mu8Sñ
 = 0;

847 
mu8Sñ
 = 
	`GëW©îOutSñe˘
();

848 if–
mu8Sñ
 =
SEL_WATER_ROOM
 )

850 
mu8Pî˚¡
 = 
	`GëRoomOutPî˚¡
();

852 if–
mu8Sñ
 =
SEL_WATER_COLD
 )

854 
mu8Pî˚¡
 = 
	`GëCﬁdOutPî˚¡
();

856 if–
mu8Sñ
 =
SEL_WATER_HOT
 )

858 
mu8Pî˚¡
 = 
	`GëHŸOutPî˚¡
();

860 if–
mu8Sñ
 =
SEL_WATER_FLUSH
 )

862 
mu8Pî˚¡
 = 
	`GëFlushOutPî˚¡
();

864 if–
mu8Sñ
 =
SEL_WATER_FLUSH
 )

866 
mu8Pî˚¡
 = 
	`GëCodyOutPî˚¡
();

872 if–
	`IsSëSodaOutMode
–
SODA_OUT_MIXING
 ) =
TRUE


873 || 
	`IsSëSodaOutMode
–
SODA_OUT_MIXING_REPEAT
 ) =
TRUE
 )

875 
mu8Pî˚¡
 = 102;

879 
mu8Pî˚¡
 = 
	`GëSodaOutPî˚¡
();

884 
mu8Pî˚¡
 += 5;

885 
mu8Pî˚¡
 /= 10;

886 
mu8Pî˚¡
 *= 10;

888  
mu8Pî˚¡
;

889 
	}
}

891 
U16
 
	$GëW©îOutAmou¡
()

893 
U16
 
mu16Amou¡
 = 0;

894 
U8
 
mu8Sñ
 = 0;

897 
mu8Sñ
 = 
	`GëW©îOutSñe˘
();

898 if–
mu8Sñ
 =
SEL_WATER_ROOM
 )

900 
mu16Amou¡
 = 
	`GëRoomOutAmou¡
();

902 if–
mu8Sñ
 =
SEL_WATER_COLD
 )

904 
mu16Amou¡
 = 
	`GëCﬁdOutAmou¡
();

906 if–
mu8Sñ
 =
SEL_WATER_HOT
 )

908 
mu16Amou¡
 = 
	`GëHŸOutAmou¡
();

910 if–
mu8Sñ
 =
SEL_WATER_FLUSH
 )

912 
mu16Amou¡
 = 
	`GëFlushOutAmou¡
();

914 if–
mu8Sñ
 =
SEL_WATER_FLUSH
 )

916 
mu16Amou¡
 = 
	`GëCodyOutAmou¡
();

922 if–
	`IsSëSodaOutMode
–
SODA_OUT_MIXING
 ) =
TRUE


923 || 
	`IsSëSodaOutMode
–
SODA_OUT_MIXING_REPEAT
 ) =
TRUE
 )

925 
mu16Amou¡
 = 102;

929 
mu16Amou¡
 = 
	`GëSodaOutPî˚¡
();

934  
mu16Amou¡
;

935 
	}
}

939 
	$CheckFixedAmou¡Ty≥
()

943 if–
Out
.
C⁄fU£r
 =
FALSE


944 && 
Out
.
C⁄fAmou¡
 =
FIXED_AMOUNT_USER
 )

946 
	`SëW©îOutC⁄fFixedAmou¡Ty≥
–
FIXED_AMOUNT_HALF
 );

948 
	}
}

950 
	$C⁄åﬁW©îOut
()

952 
U8
 
mu8OutD⁄e
 = 
WATER_OUT_GOING
;

955 
	`CheckFixedAmou¡Ty≥
();

958 
	`C⁄åﬁW©îOutSñe˘
();

959 
	`C⁄åﬁC⁄töueSñe˘
();

962 
	`CheckW©îOutSt›C⁄dôi⁄
();

966 
	`C⁄åﬁW©îOutCmd
();

970 
mu8OutD⁄e
 |
	`C⁄åﬁW©îHŸOut
();

971 
mu8OutD⁄e
 |
	`C⁄åﬁW©îRoomOut
();

972 
mu8OutD⁄e
 |
	`C⁄åﬁW©îCﬁdOut
();

973 
mu8OutD⁄e
 |
	`C⁄åﬁW©îFlushOut
();

974 
mu8OutD⁄e
 |
	`C⁄åﬁW©îCodyOut
();

975 if–
mu8OutD⁄e
 =
WATER_OUT_DONE
 )

978 
Out
.
PrŸe˘Time
 = 
OUT_PROTECT_TIME
;

979 
	`St›W©îOut
();

981 
	`SèπDi•TimîId
–
DISP_TIMER_ERROR
 );

985 if–
Out
.
PrŸe˘Time
 != 0 )

987 
Out
.
PrŸe˘Time
--;

989 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out.h

1 #i‚de‡
__WATER_OUT_H__


2 
	#__WATER_OUT_H__


	)

4 
	~"¥j_ty≥.h
"

8 
InôW©îOut
();

12 
	#SEL_WATER_ROOM
 0

	)

13 
	#SEL_WATER_COLD
 1

	)

14 
	#SEL_WATER_HOT
 2

	)

15 
	#SEL_WATER_SODA
 3

	)

16 
	#SEL_WATER_FLUSH
 4

	)

17 
	#SEL_WATER_CODY
 5

	)

18 
	#MAX_WATER_ID
 6

	)

19 
SëW©îOutSñe˘
(
U8
 
mu8Id
 );

20 
U8
 
GëW©îOutSñe˘
();

21 
U8
 
GëW©îOutLa°edSñe˘
();

23 
Upd©eW©îOutRëu∫Time
();

24 
Re£tW©îOutRëu∫Time
();

27 
U16
 
GëW©îOutRëu∫Time
();

28 
U16
 
GëW©îOutRëu∫TimeAmou¡
();

32 
U8
 
SèπW©îOutFlush
(U8 
mu8Sound
);

33 
SèπW©îOutFlushPowîOn
();

35 
SèπW©îOut
();

36 
St›W©îOut
();

37 
U8
 
GëW©îOut
();

40 
U8
 
IsExpúedOutPrŸe˘Time
();

43 
SëW©îOutC⁄töue
(
U8
 
mu8Mode
 );

44 
U8
 
GëW©îOutC⁄töue
();

47 
SëW©îOutInföôyL⁄gKey
();

48 
CÀ¨W©îOutInföôyL⁄gKey
();

51 
	#FIXED_AMOUNT_HALF
 0

	)

52 
	#FIXED_AMOUNT_ONE
 1

	)

53 
	#FIXED_AMOUNT_TWO
 2

	)

54 
	#FIXED_AMOUNT_INFINITY
 3

	)

55 
	#FIXED_AMOUNT_USER
 4

	)

56 
	#FIXED_AMOUNT_TANK_CLEAN
 5

	)

57 
	#MAX_FIXED_AMOUNT_NUM
 6

	)

58 
SëW©îOutFixedAmou¡Ty≥
(
U8
 
mTy≥
 );

59 
U8
 
GëW©îOutFixedAmoutTy≥
();

60 
U8
 
GëW©îOutAmoutTy≥
();

61 
CÀ¨W©îOutInföôyAmout
();

63 
U8
 
GëW©îOutC⁄fFixedAmou¡Ty≥
();

64 
SëW©îOutC⁄fFixedAmou¡Ty≥
(
U8
 
mu8Ty≥
);

66 
	#INFINITY_3MIN_TIMEOUT
 18000UL

67 
	#INFINITY_10MIN_TIMEOUT
 60000UL

68 
	#INFINITY_120MIN_TIMEOUT
 720000UL

69 
	`SëW©îOutC⁄fInföôyTimeOut
(
U32
 
mu32TimeOut
);

	)

73 
SëW©îOutC⁄figU£r
(
U8
 
mu8C⁄fig
);

74 
U8
 
GëW©îOutC⁄figU£r
();

77 
	#MIN_USER_AMOUNT_LITER
 130U

78 
	#MAX_USER_AMOUNT_LITER
 1000U

79 
U16
 
	`GëW©îOutU£rAmou¡Lôî
();

	)

80 
SëW©îOutU£rAmou¡Lôî
(
U16
 
mu16Lôî
);

82 
U32
 
GëW©îOutU£rAmou¡
();

83 
SëW©îOutU£rAmou¡
(
U32
 
mu32U£rAmou¡
);

85 
In¸emítW©îOutAmou¡
();

86 
In¸emítW©îOutAmou¡Limô
();

89 
	#LASTED_TIME_ID
 0

	)

90 
	#DAILY_TIME_ID
 1

	)

91 
	#TOTAL_TIME_ID
 2

	)

92 
	#MAX_TIME_ID
 3

	)

93 
SëW©îOutTime
(
U8
 
mu8Ty≥
, U8 
mu8Id
, 
U32
 
mu32Time
 );

94 
U32
 
GëW©îOutTime
(
U8
 
mu8Ty≥
, U8 
mu8Id
 );

101 
U8
 
GëW©îOutPî˚¡
();

103 
U16
 
GëW©îOutAmou¡
();

106 
C⁄åﬁW©îOut
();

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out_common.c

1 
	~"w©î_out_comm⁄.h
"

2 
	~"Êow_mëî.h
"

3 
	~"w©î_out.h
"

7 
	#DEFAULT_AMOUNT
 0UL

	)

10 c⁄° 
W©îOutTabÀ_T
 
	gOutTabÀLi°
[] =

12 { 
OUT_AMOUNT_0
, 0UL },

13 { 
OUT_AMOUNT_10
, 
AMOUNT_10
 },

14 { 
OUT_AMOUNT_120
, 
AMOUNT_120
 },

15 { 
OUT_AMOUNT_250
, 
AMOUNT_250
 },

16 { 
OUT_AMOUNT_500
, 
AMOUNT_500
 },

17 { 
OUT_AMOUNT_ICE_TRAY
, 
AMOUNT_210
 },

18 #i‡
CONFIG_TEST_OUT_CONTY


19 { 
OUT_AMOUNT_INFINITY
, 720000UL },

21 { 
OUT_AMOUNT_INFINITY
, 
AMOUNT_10000
 },

23 { 
OUT_AMOUNT_CLEAN
, 30000UL }

26 
	#SZ_OUT_TABLE
 ((
OutTabÀLi°
)/(
W©îOutTabÀ_T
))

	)

29 
U32
 
	$GëFödOutT¨gëTime
(
W©îOutTy≥_T
 
mTy≥
)

31 
U8
 
i
;

33  
i
 = 0; i < 
SZ_OUT_TABLE
 ; i++ )

35 if–
OutTabÀLi°
[ 
i
 ].
Ty≥
 =
mTy≥
 )

37  
OutTabÀLi°
[ 
i
 ].
Amou¡
;

42 if–
mTy≥
 =
OUT_AMOUNT_USER
 )

44  
	`GëW©îOutU£rAmou¡
();

47  
DEFAULT_AMOUNT
;

48 
	}
}

52 
U8
 
	$CÆcPî˚¡
(
U32
 
mu32T¨gë
, U32 
mu32Cuºít
)

54  (
U8
)(–(
F32
)
mu32Cuºít
 / (F32)
mu32T¨gë
 ) * 100.0f);

55 
	}
}

60 
U16
 
	$CÆcLôî
(
U32
 
mu32Amou¡
)

62 
U32
 
mu32T¨gëAmou¡
;

65 
mu32T¨gëAmou¡
 = 
	`GëFödOutT¨gëTime
–
OUT_AMOUNT_10
 );

66 if–
mu32Amou¡
 >
mu32T¨gëAmou¡
 )

68 
mu32Amou¡
 = mu32Amou¡ / 
mu32T¨gëAmou¡
;

69 
mu32Amou¡
 *
ML_UNIT
;

73 
mu32Amou¡
 = 0UL;

76  (
U16
)(
mu32Amou¡
);

78 
	}
}

81 
U32
 
	$CÆcAmou¡
(
U16
 
mLôî
)

83 
U32
 
mu32Amou¡
;

85 
mLôî
 /
ML_UNIT
;

86 
mu32Amou¡
 = 
mLôî
 * 
	`GëFödOutT¨gëTime
–
OUT_AMOUNT_10
 );

88  
mu32Amou¡
;

89 
	}
}

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out_common.h

1 #i‚de‡
__WATER_OUT_COMMON_H__


2 
	#__WATER_OUT_COMMON_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"w©î_out_ty≥.h
"

8 
	#WAIT_100MS
 10

9 
	#WAIT_200MS
 20

10 
	#WAIT_300MS
 30

11 
	#WAIT_400MS
 40

12 
	#WAIT_500MS
 50

13 
	#WAIT_1000MS
 100

14 

	)

15 
	#ML_UNIT
 10U

	)

17 
U32
 
GëFödOutT¨gëTime
(
W©îOutTy≥_T
 
mTy≥
);

20 
U8
 
CÆcPî˚¡
(
U32
 
mu32T¨gë
, U32 
mu32Cuºít
);

23 
U16
 
CÆcLôî
(
U32
 
mu32Amou¡
);

26 
U32
 
CÆcAmou¡
(
U16
 
mLôî
);

	@D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out_type.h

1 #i‚de‡
__WATER_OUT_TYPE_H__


2 
	#__WATER_OUT_TYPE_H__


	)

4 
	#TIME_SEC
(
x
Ë–x * 100UL )

	)

5 
	#TIME_100MS
(
x
Ë–x * 10UL )

	)

10 
	mOUT_AMOUNT_0
,

11 
	mOUT_AMOUNT_10
,

12 
	mOUT_AMOUNT_120
,

13 
	mOUT_AMOUNT_250
,

14 
	mOUT_AMOUNT_500
,

15 
	mOUT_AMOUNT_USER
,

16 
	mOUT_AMOUNT_INFINITY
,

17 
	mOUT_AMOUNT_CLEAN
,

18 
	mOUT_AMOUNT_ICE_TRAY
,

20 
	mOUT_AMOUNT_FLUSH_FILTER
,

21 
	mOUT_AMOUNT_FLUSH_HEATER
,

22 
	mOUT_AMOUNT_FLUSH_COOLER
,

23 
	mOUT_AMOUNT_FLUSH_COOLER_DRAIN
,

24 
	mOUT_AMOUNT_FLUSH_CHECK_HEATER
,

25 
	mOUT_AMOUNT_CHECK_HEATER
,

27 
	mOUT_AMOUNT_NUM
,

28 }
	tW©îOutTy≥_T
;

30 
	s_w©î_out_comm⁄_


32 
U8
 
	mOut
;

33 
U8
 
	mPªvOut
;

35 
W©îOutTy≥_T
 
	mTy≥
;

36 
U32
 
	mT¨gëAmou¡
;

37 
U32
 
	mPaddögAmou¡
;

38 
U32
 
	mCuºítAmou¡
;

40 
U8
 
	mO≥nSãp
;

41 
U8
 
	mClo£Sãp
;

42 
U16
 
	mWaôTime
;

44 } 
	tW©îOut_T
;

48 
	s_out_èbÀ_


50 
W©îOutTy≥_T
 
	mTy≥
;

51 
U32
 
	mAmou¡
;

52 } 
	tW©îOutTabÀ_T
;

58 
	mWATER_OUT_GOING
,

59 
	mWATER_OUT_DONE
,

	@config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

9 
	#CONFIG_FOTA_LIB
 0

10 
	#CONFIG_TEST
 0

11 

	)

12 
	#CONFIG_TEST_8585
 0

13 
	#CONFIG_TEST_8585_ICE
 0

14 
	#CONFIG_TEST_8585_FILTER
 0

15 

	)

16 
	#CONFIG_TEST_HOT_WATER
 0

17 
	#CONFIG_TEST_GAS_SWITCH
 0

18 
	#CONFIG_TEST_LED
 0

19 
	#CONFIG_TEST_TEMP_READ
 1

20 
	#CONFIG_TEST_FLOW_METER
 0

21 
	#CONFIG_TEST_HEATER
 0

22 
	#CONFIG_GAS_FILLING
 0

23 
	#CONFIG_UV_MANUAL
 0

24 
	#CONFIG_TEST_HOT_DRAIN
 0

25 
	#CONFIG_TEST_FILTER
 0

26 
	#CONFIG_TANK_REED
 0

27 
	#CONFIG_TEST_OUT_CONTY
 0

28 
	#CONFIG_TEST_HOT_OUT
 0

29 
	#CONFIG_TEST_PREHEAT
 0

30 
	#CONFIG_EOL
 1

31 

	)

33 
	#CONFIG_COMP_ERROR_CODE
 0

34 
	#CONFIG_COMP_ERROR_ONESHOT
 0

35 

	)

37 
	#CONFIG_TEST_COLD_TEMP_UP
 0

38 
	#CONFIG_TEST_COLD_TEMP_DOWN
 0

39 

	)

40 
	#CONFIG_TEST_AMBI_TEMP_UP
 0

41 
	#CONFIG_TEST_AMBI_TEMP_DOWN
 0

42 

	)

44 
	#CONFIG_SYSTEM_CHP
 0

	)

45 
	#CONFIG_SYSTEM_CP
 1

	)

46 
	#CONFIG_SYSTEM_AUTO
 2

	)

47 
	#CONFIG_SYSTEM_TYPE
 
CONFIG_SYSTEM_AUTO


48 

	)

50 
	#CONFIG_JIG_FRONT_UNUSED_UV
 0

51 
	#CONFIG_JIG_RBK_FRONT
 0

52 
	#CONFIG_JIG_GAS_SWITCH
 0

53 

	)

55 
	#CONFIG_STER
 0

	)

58 
	#CONFIG_RTC_TEST
 0

	)

61 
	#CONFIG_BACK_FEEDER
 1

62 

	)

64 
	#CONFIG_ENABLE_DEICING_COOLING
 0

	)

67 
	#CONFIG_ERR_ALL
 1

	)

70 
	#DEBUG_COMM
 0

	)

74 
	#TANK_RO
 0

	)

75 
	#TANK_NT
 1

	)

76 
	#CONFIG_TANK_TYPE
 
TANK_NT


	)

79 
	#VERSION_MAJOR
 12

	)

80 
	#VERSION_MINOR
 0

81 

	)

83 
	#COUNTRY_CODE_KOR
 0

	)

	@prj_type.h

1 #i‚de‡
__PRJ_TYPE_H__


2 
	#__PRJ_TYPE_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

8 #i‚de‡
__TYPEDEF_COWAY__


9 
	#__TYPEDEF_COWAY__


	)

10 
	tU8
;

11 sig√d 
	tI8
;

12 
	tU16
;

13 sig√d 
	tI16
;

14 
	tU32
;

15 sig√d 
	tI32
;

16 
	tF32
;

17 
	tBOOL_T
;

18 
	tTIME_T
;

20 
	tTEMP_T
;

24 
	#__DEBUG__
 1

	)

26 #i‡
__DEBUG__


27 
	#LOCAL


	)

29 
	#LOCAL
 

	)

32 #ifde‡
NULL


33 #unde‡
NULL


36 
	#NULL
 ((*)0)

	)

38 #ifde‡
TRUE


39 #unde‡
TRUE


42 
	#TRUE
 1

	)

44 #ifde‡
FALSE


45 #unde‡
FALSE


48 
	#FALSE
 0

	)

51 #ifde‡
ON


52 #unde‡
ON


55 
	#ON
 1

	)

57 #ifde‡
OFF


58 #unde‡
OFF


61 
	#OFF
 0

	)

63 
	#HIGH
 1

	)

64 
	#LOW
 0

	)

68 #i‡(
CONFIG_FOTA_LIB
 == 0)

69 
	#__FAR


	)

70 
	#SPRINTF
 
•rötf


	)

71 
	#MEMSET
 
mem£t


	)

72 
	#MEMCPY
 
mem˝y


	)

73 
	#ATOI
 
©oi


	)

75 
	#__FAR
 
__Ár


	)

76 
	#SPRINTF
 
•rötf_f


	)

77 
	#MEMSET
 
mem£t_f


	)

78 
	#MEMCPY
 
mem˝y_f


	)

79 
	#ATOI
 
©oi_f


	)

	@process_sys_event.h

1 #i‚de‡
__PROCESS_SYS_EVENT_H__


2 
	#__PROCESS_SYS_EVENT_H__


	)

4 
InôSy°em
();

6 
Pro˚ssEvítH™dÀr
();

	@util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#GET_HIGH_BYTE
(
vÆ
Ë(
U8
)(((vÆ)&0xFF00Ë>> 8)

	)

7 
	#GET_LOW_BYTE
(
vÆ
Ë(
U8
)((vÆ)&0x00FF)

	)

8 
	#GET_UINT_WORD
(
lb
, 
hb
Ë((((
U16
)hb)<<8)|lb)

	)

10 
	#GET_32_BYTE_8
(
vÆ
Ë(
U8
)(((vÆ)&0x000000FF))

	)

11 
	#GET_32_BYTE_16
(
vÆ
Ë(
U8
)(((vÆ)&0x0000FF00)>>8)

	)

12 
	#GET_32_BYTE_24
(
vÆ
Ë(
U8
)(((vÆ)&0x00FF0000)>>16)

	)

13 
	#GET_32_BYTE_32
(
vÆ
Ë(
U8
)(((vÆ)&0xFF000000)>>24)

	)

14 
	#GET_UINT_WORD_32
(
b32
, 
b24
, 
b16
, 
b8
) \

16 –((
U32
)
b32
)<<24 ) |\

17 –((
U32
)
b24
)<<16 ) |\

18 –((
U32
)
b16
)<<8 ) |\

19 –(
U32
)
b8
) \

20 )

	)

22 
	#SET_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ |(
U8
)(bô); }0)

	)

23 
	#CLEAR_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ &(
U8
)(~bô); }0)

	)

25 
	#SET_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ |(
U16
)(bô); }0)

	)

26 
	#CLEAR_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ &(
U16
)(~bô); }0)

	)

28 
	#IS_SET_BIT_32
(
vÆ
,
bô
Ë((–vÆ & (bôË)==bô)?1:0)

	)

30 
	#DOWN_COUNT
(
vÆ
) \

32 if–
vÆ
 != 0 ) { val--; } \

33 }0)

	)

35 
	#DOWN_COUNT_RELOAD
(
vÆ
,
ªlﬂd
) \

37 if–
vÆ
 != 0 ){ val--;}\

38 { 
vÆ
=
ªlﬂd
;} \

39 }0)

	)

42 
I16
 
GëMö
–I16 
x
, I16 );

43 
I16
 
GëMax
–I16 
x
, I16 
y
 );

45 
U8
 
Hex2Dec
(U8 
mu8Hex
);

46 
U8
 
Dec2Hex
(U8 
mu8Dec
);

48 
U8
 
C⁄vAsc2Byã
(U8 
mu8Uµî
, U8 
mu8Lowî
 );

49 
U16
 
ByãOrdîC⁄v
–U16 
_§c
 );

51 
Dñay_US
–
U8
 
us
 );

52 
Dñay_MS
–
U16
 
ms
 );

54 
Re£t
();

59 
U8
 
CheckLimôVÆue
(U8 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
);

62 
U8
 
SëMöMax8
(U8 
mVÆ
, U8 
mMö
, U8 
mMax
 );

64 
U16
 
SëMöMax16
(U16 
mu16VÆ
, U16 
mu16Mö
, U16 
mu16Max
 );

66 
U32
 
SëMöMax32
(U32 
mu32VÆ
, U32 
mu32Mö
, U32 
mu32Max
 );

68 
F32
 
SëMöMaxF32
(F32 
mf32VÆ
, F32 
mf32Mö
, F32 
mf32Max
 );

	@
1
.
0
352
26818
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_DataCheck.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_DataCheck.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Initialize.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Initialize.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_ProcessApmode.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_ProcessApmode.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Status.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_Status.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_UartInterrupt.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiEtc\WIFI_UartInterrupt.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_Fota.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_Fota.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxProcess.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxProcess.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxServer.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiRx\WIFI_RxServer.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetAccumulateData.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetAccumulateData.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetCommon.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetCommon.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetErrorData.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetErrorData.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetFunctionData.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetFunctionData.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetInformationData.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetInformationData.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetMonitorData.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetMonitorData.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetPartData.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetPartData.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetSensorData.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiSetting\WIFI_SetSensorData.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxForm.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxForm.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxMake.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxMake.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxProtocol.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiTx\WIFI_TxProtocol.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_MonitorFixRAM.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_MonitorFixRAM.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_UserCommon_IconAIS.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_UserInterface_IconAIS.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\AIS4.0\WIFI_UserInterface_IconAIS.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Common.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Common.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Control.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_Control.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_DefUser.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_UserInterface.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\Wifi\WifiUser\WIFI_UserInterface.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\comm.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\comm.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\crc16.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\crc16.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_comp.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_comp.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_debug.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_debug.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_eol.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_eol.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_front.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\comm\parser_front.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\config.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_12v.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_12v.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_24v.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_24v.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_ac.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_ac.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_common.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_feedback.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_feedback.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_sensor.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\diagnosis_sensor.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\monitoring.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\diagnosis\monitoring.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_clock.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_clock.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_eol.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_eol.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_error.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_error.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_lib.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\display_lib.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\front.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\front.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\process_display.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\display\process_display.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\drain.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\drain.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\empty_cold_tank.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\drain\empty_cold_tank.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\eeprom.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\eeprom.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\rtc.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eeprom\rtc.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol_lever_handler.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\eol_lever_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\key_eol_handler.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\key_eol_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\process_eol.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\eol\process_eol.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc_comm.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_comp_bldc_comm.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_drain_pump.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_drain_pump.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_ice_tray.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_ice_tray.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak_flow.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_leak_flow.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_hot_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_hot_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_ice_tray.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_ice_tray.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_outage_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_ambient.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_ambient.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_cold_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_cold_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_eva_1.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_eva_1.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_heater.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_heater.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_overheat.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_overheat.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water_in.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_hot_water_in.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_room_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\err_temp_room_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\error.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\error.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\process_error.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\error\process_error.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct_lever_handler.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\fct_lever_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\key_fct_handler.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\key_fct_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\process_fct.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\fct\process_fct.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\filter\filter.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\filter\filter.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_adc.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_adc.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_eeprom.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_eeprom.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_fan_motor.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_fan_motor.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_i2c.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_i2c.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_input.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_input.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_key.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_key.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_led.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_led.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_level.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_level.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_pump.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_pump.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_relay.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_relay.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_serial.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_serial.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_step_motor.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_step_motor.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_uv.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_uv.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_valve.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hal_valve.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\hw.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\hal\mcu.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\drain_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\drain_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health_maker.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\health_maker.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\process_uv.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\process_uv.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\uv.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\health\uv.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\deicing_table.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\deicing_table.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\dummy_deicing_table.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\dummy_deicing_table.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice_maker.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\ice_maker.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\icing_table.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\ice_maker\icing_table.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp_bldc.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\comp_bldc.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\drain_pump.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\drain_pump.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\fan_motor.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\fan_motor.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_meter.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_meter.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_valve.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\flow_valve.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\gas_switch_valve.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\gas_switch_valve.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_table.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\heater_table.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_flow.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_flow.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_heater.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\hot_water_heater.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_door.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_door.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_full.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_full.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_tray.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\ice_tray.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\leak.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\leak.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\process_make.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\process_make.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\relay.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\relay.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\smps.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\smps.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\swing_bar.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\swing_bar.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\valve.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\io\valve.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\energy.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\energy.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\smart_check.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\smart_check.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\user.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\iocare\user.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_common_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_event_lib.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_event_lib.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_handler.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_normal_handler.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\key_normal_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\process_key.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\key\process_key.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever_common_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever_handler.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\lever_handler.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\process_lever.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\lever\process_lever.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\main.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\metering\metering.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\metering\metering.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\eco.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\eco.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\power_saving.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\power_saving\power_saving.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\prj_type.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\process_sys_event.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\process_sys_event.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\level.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\level.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ambient.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ambient.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold_lattron.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_cold_lattron.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_common.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_common.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_eva.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_eva.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_hot_in_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_hot_in_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ice_tray_in.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_ice_tray_in.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_room.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sensor\temp_table_room.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\cody_kit.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\cody_kit.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\ice_tray_test.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\ice_tray_test.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\service.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\service_check\service.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\buzzer.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\buzzer.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\sound.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\sound.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\voice.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\sound\voice.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\time_short\time_short.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\time_short\time_short.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\timer\timer.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\timer\timer.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\timer\timer_id.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\util.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\util.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cody_water_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cody_water_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\cold_water_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\flush_water_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\flush_water_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out_preheat.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_out_preheat.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_temp_table.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\hot_water_temp_table.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\room_water_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\room_water_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\tank_clean.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\tank_clean.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out_common.c
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out_common.h
D:\Work\project_svn\2024\ICON_AIS_G23\icon_ais\src\prj\water\water_out_type.h
config.h
prj_type.h
process_sys_event.h
util.h
